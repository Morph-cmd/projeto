

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Jul 08 17:26:33 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    79   000000                     
    80                           ; Generated 17/10/2023 GMT
    81                           ; 
    82                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution. Publication is not required when
    96                           ;        this file is used in an embedded application.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4550 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114   000000                     
   115                           	psect	idataBANK0
   116   004F8B                     __pidataBANK0:
   117                           	callstack 0
   118                           
   119                           ;initializer for _msgs
   120   004F8B  03                 	db	low STR_1
   121   004F8C  7D                 	db	high STR_1
   122   004F8D  D3                 	db	low STR_2
   123   004F8E  7C                 	db	high STR_2
   124   004F8F  03                 	db	low STR_1
   125   004F90  7D                 	db	high STR_1
   126   004F91  D3                 	db	low STR_2
   127   004F92  7C                 	db	high STR_2
   128   004F93  E3                 	db	low STR_5
   129   004F94  7C                 	db	high STR_5
   130   004F95  C3                 	db	low STR_6
   131   004F96  7C                 	db	high STR_6
   132   004F97  E3                 	db	low STR_5
   133   004F98  7C                 	db	high STR_5
   134   004F99  C3                 	db	low STR_6
   135   004F9A  7C                 	db	high STR_6
   136   004F9B  F3                 	db	low STR_9
   137   004F9C  7C                 	db	high STR_9
   138   004F9D  23                 	db	low STR_10
   139   004F9E  7D                 	db	high STR_10
   140   004F9F  00                 	db	0
   141   004FA0  00                 	db	0
   142   004FA1  00                 	db	0
   143   004FA2  00                 	db	0
   144   004FA3  00                 	db	0
   145   004FA4  00                 	db	0
   146   004FA5  00                 	db	0
   147   004FA6  00                 	db	0
   148   004FA7  00                 	db	0
   149   004FA8  00                 	db	0
   150   004FA9  00                 	db	0
   151   004FAA  00                 	db	0
   152   004FAB  00                 	db	0
   153   004FAC  00                 	db	0
   154   004FAD  00                 	db	0
   155   004FAE  00                 	db	0
   156   004FAF  00                 	db	0
   157   004FB0  00                 	db	0
   158   004FB1  00                 	db	0
   159   004FB2  00                 	db	0
   160                           
   161                           ;initializer for kpDebounce@F15
   162   004FB3  02                 	db	2
   163   004FB4  03                 	db	3
   164   004FB5  05                 	db	5
   165   004FB6  04                 	db	4
   166   004FB7  01                 	db	1
   167                           
   168                           ;initializer for _ev
   169   004FB8  0062               	dw	98
   170                           
   171                           	psect	mediumconst
   172   007C90                     __pmediumconst:
   173                           	callstack 0
   174   007C90  00                 	db	0
   175   007C91                     _valor@ssd$F319:
   176                           	callstack 0
   177   007C91  3F                 	db	63
   178   007C92  06                 	db	6
   179   007C93  5B                 	db	91
   180   007C94  4F                 	db	79
   181   007C95  66                 	db	102
   182   007C96  6D                 	db	109
   183   007C97  7D                 	db	125
   184   007C98  07                 	db	7
   185   007C99  7F                 	db	127
   186   007C9A  6F                 	db	111
   187   007C9B  77                 	db	119
   188   007C9C  7C                 	db	124
   189   007C9D  39                 	db	57
   190   007C9E  5E                 	db	94
   191   007C9F  79                 	db	121
   192   007CA0  71                 	db	113
   193   007CA1                     __end_of_valor@ssd$F319:
   194                           	callstack 0
   195   000000                     _PORTA	set	3968
   196   000000                     _LATA	set	3977
   197   000000                     _TRISA	set	3986
   198   000000                     _PORTE	set	3972
   199   000000                     _PORTD	set	3971
   200   000000                     _PORTC	set	3970
   201   000000                     _PORTB	set	3969
   202   000000                     _TRISE	set	3990
   203   000000                     _TRISD	set	3989
   204   000000                     _TRISC	set	3988
   205   000000                     _TRISB	set	3987
   206   007CA1                     STR_20:
   207   007CA1  45                 	db	69	;'E'
   208   007CA2  6E                 	db	110	;'n'
   209   007CA3  67                 	db	103	;'g'
   210   007CA4  6C                 	db	108	;'l'
   211   007CA5  69                 	db	105	;'i'
   212   007CA6  73                 	db	115	;'s'
   213   007CA7  68                 	db	104	;'h'
   214   007CA8  20                 	db	32
   215   007CA9  20                 	db	32
   216   007CAA  20                 	db	32
   217   007CAB  20                 	db	32
   218   007CAC  20                 	db	32
   219   007CAD  20                 	db	32
   220   007CAE  20                 	db	32
   221   007CAF  20                 	db	32
   222   007CB0  20                 	db	32
   223   007CB1  00                 	db	0
   224   007CB2                     STR_19:
   225   007CB2  50                 	db	80	;'P'
   226   007CB3  6F                 	db	111	;'o'
   227   007CB4  72                 	db	114	;'r'
   228   007CB5  74                 	db	116	;'t'
   229   007CB6  75                 	db	117	;'u'
   230   007CB7  67                 	db	103	;'g'
   231   007CB8  75                 	db	117	;'u'
   232   007CB9  65                 	db	101	;'e'
   233   007CBA  73                 	db	115	;'s'
   234   007CBB  20                 	db	32
   235   007CBC  20                 	db	32
   236   007CBD  20                 	db	32
   237   007CBE  20                 	db	32
   238   007CBF  20                 	db	32
   239   007CC0  20                 	db	32
   240   007CC1  20                 	db	32
   241   007CC2  00                 	db	0
   242   007CC3                     STR_6:
   243   007CC3  43                 	db	67	;'C'
   244   007CC4  68                 	db	104	;'h'
   245   007CC5  61                 	db	97	;'a'
   246   007CC6  6E                 	db	110	;'n'
   247   007CC7  67                 	db	103	;'g'
   248   007CC8  65                 	db	101	;'e'
   249   007CC9  20                 	db	32
   250   007CCA  74                 	db	116	;'t'
   251   007CCB  69                 	db	105	;'i'
   252   007CCC  6D                 	db	109	;'m'
   253   007CCD  65                 	db	101	;'e'
   254   007CCE  20                 	db	32
   255   007CCF  20                 	db	32
   256   007CD0  20                 	db	32
   257   007CD1  20                 	db	32
   258   007CD2  00                 	db	0
   259   007CD3                     STR_2:
   260   007CD3  43                 	db	67	;'C'
   261   007CD4  68                 	db	104	;'h'
   262   007CD5  61                 	db	97	;'a'
   263   007CD6  6E                 	db	110	;'n'
   264   007CD7  67                 	db	103	;'g'
   265   007CD8  65                 	db	101	;'e'
   266   007CD9  20                 	db	32
   267   007CDA  61                 	db	97	;'a'
   268   007CDB  6C                 	db	108	;'l'
   269   007CDC  61                 	db	97	;'a'
   270   007CDD  72                 	db	114	;'r'
   271   007CDE  6D                 	db	109	;'m'
   272   007CDF  20                 	db	32
   273   007CE0  20                 	db	32
   274   007CE1  20                 	db	32
   275   007CE2  00                 	db	0
   276   007CE3                     STR_5:
   277   007CE3  41                 	db	65	;'A'
   278   007CE4  6C                 	db	108	;'l'
   279   007CE5  74                 	db	116	;'t'
   280   007CE6  65                 	db	101	;'e'
   281   007CE7  72                 	db	114	;'r'
   282   007CE8  61                 	db	97	;'a'
   283   007CE9  72                 	db	114	;'r'
   284   007CEA  20                 	db	32
   285   007CEB  74                 	db	116	;'t'
   286   007CEC  65                 	db	101	;'e'
   287   007CED  6D                 	db	109	;'m'
   288   007CEE  70                 	db	112	;'p'
   289   007CEF  6F                 	db	111	;'o'
   290   007CF0  20                 	db	32
   291   007CF1  20                 	db	32
   292   007CF2  00                 	db	0
   293   007CF3                     STR_9:
   294   007CF3  41                 	db	65	;'A'
   295   007CF4  6C                 	db	108	;'l'
   296   007CF5  74                 	db	116	;'t'
   297   007CF6  65                 	db	101	;'e'
   298   007CF7  72                 	db	114	;'r'
   299   007CF8  61                 	db	97	;'a'
   300   007CF9  72                 	db	114	;'r'
   301   007CFA  20                 	db	32
   302   007CFB  69                 	db	105	;'i'
   303   007CFC  64                 	db	100	;'d'
   304   007CFD  69                 	db	105	;'i'
   305   007CFE  6F                 	db	111	;'o'
   306   007CFF  6D                 	db	109	;'m'
   307   007D00  61                 	db	97	;'a'
   308   007D01  20                 	db	32
   309   007D02  00                 	db	0
   310   007D03                     STR_1:
   311   007D03  41                 	db	65	;'A'
   312   007D04  6C                 	db	108	;'l'
   313   007D05  74                 	db	116	;'t'
   314   007D06  65                 	db	101	;'e'
   315   007D07  72                 	db	114	;'r'
   316   007D08  61                 	db	97	;'a'
   317   007D09  72                 	db	114	;'r'
   318   007D0A  20                 	db	32
   319   007D0B  61                 	db	97	;'a'
   320   007D0C  6C                 	db	108	;'l'
   321   007D0D  61                 	db	97	;'a'
   322   007D0E  72                 	db	114	;'r'
   323   007D0F  6D                 	db	109	;'m'
   324   007D10  65                 	db	101	;'e'
   325   007D11  20                 	db	32
   326   007D12  00                 	db	0
   327   007D13                     STR_22:
   328   007D13  54                 	db	84	;'T'
   329   007D14  45                 	db	69	;'E'
   330   007D15  4D                 	db	77	;'M'
   331   007D16  50                 	db	80	;'P'
   332   007D17  45                 	db	69	;'E'
   333   007D18  52                 	db	82	;'R'
   334   007D19  41                 	db	65	;'A'
   335   007D1A  54                 	db	84	;'T'
   336   007D1B  55                 	db	85	;'U'
   337   007D1C  52                 	db	82	;'R'
   338   007D1D  41                 	db	65	;'A'
   339   007D1E  21                 	db	33
   340   007D1F  21                 	db	33
   341   007D20  21                 	db	33
   342   007D21  21                 	db	33
   343   007D22  00                 	db	0
   344   007D23                     STR_10:
   345   007D23  43                 	db	67	;'C'
   346   007D24  68                 	db	104	;'h'
   347   007D25  61                 	db	97	;'a'
   348   007D26  6E                 	db	110	;'n'
   349   007D27  67                 	db	103	;'g'
   350   007D28  65                 	db	101	;'e'
   351   007D29  20                 	db	32
   352   007D2A  6C                 	db	108	;'l'
   353   007D2B  61                 	db	97	;'a'
   354   007D2C  6E                 	db	110	;'n'
   355   007D2D  67                 	db	103	;'g'
   356   007D2E  75                 	db	117	;'u'
   357   007D2F  61                 	db	97	;'a'
   358   007D30  67                 	db	103	;'g'
   359   007D31  65                 	db	101	;'e'
   360   007D32  00                 	db	0
   361   007D33                     STR_11:
   362   007D33  20                 	db	32
   363   007D34  20                 	db	32
   364   007D35  20                 	db	32
   365   007D36  20                 	db	32
   366   007D37  20                 	db	32
   367   007D38  20                 	db	32
   368   007D39  20                 	db	32
   369   007D3A  20                 	db	32
   370   007D3B  20                 	db	32
   371   007D3C  20                 	db	32
   372   007D3D  20                 	db	32
   373   007D3E  00                 	db	0
   374   007D3F  00                 	db	0	; dummy byte at the end
   375   000000                     
   376                           ; #config settings
   377                           
   378                           	psect	cinit
   379   00513A                     __pcinit:
   380                           	callstack 0
   381   00513A                     start_initialization:
   382                           	callstack 0
   383   00513A                     __initialization:
   384                           	callstack 0
   385                           
   386                           ; Initialize objects allocated to BANK0 (47 bytes)
   387                           ; load TBLPTR registers with __pidataBANK0
   388   00513A  0E8B               	movlw	low __pidataBANK0
   389   00513C  6EF6               	movwf	tblptrl,c
   390   00513E  0E4F               	movlw	high __pidataBANK0
   391   005140  6EF7               	movwf	tblptrh,c
   392   005142  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   393   005144  6EF8               	movwf	tblptru,c
   394   005146  EE00  F0C2         	lfsr	0,__pdataBANK0
   395   00514A  EE10 F02F          	lfsr	1,47
   396   00514E                     copy_data0:
   397   00514E  0009               	tblrd		*+
   398   005150  CFF5 FFEE          	movff	tablat,postinc0
   399   005154  50E5               	movf	postdec1,w,c
   400   005156  50E1               	movf	fsr1l,w,c
   401   005158  E1FA               	bnz	copy_data0
   402                           
   403                           ; Clear objects allocated to BANK0 (98 bytes)
   404   00515A  EE00  F060         	lfsr	0,__pbssBANK0
   405   00515E  0E62               	movlw	98
   406   005160                     clear_0:
   407   005160  6AEE               	clrf	postinc0,c
   408   005162  06E8               	decf	wreg,f,c
   409   005164  E1FD               	bnz	clear_0
   410                           
   411                           ; Clear objects allocated to COMRAM (20 bytes)
   412   005166  EE00  F04C         	lfsr	0,__pbssCOMRAM
   413   00516A  0E14               	movlw	20
   414   00516C                     clear_1:
   415   00516C  6AEE               	clrf	postinc0,c
   416   00516E  06E8               	decf	wreg,f,c
   417   005170  E1FD               	bnz	clear_1
   418   005172                     end_of_initialization:
   419                           	callstack 0
   420   005172                     __end_of__initialization:
   421                           	callstack 0
   422   005172  0E00               	movlw	low (__Lmediumconst shr (0+16))
   423   005174  6EF8               	movwf	tblptru,c
   424   005176  0100               	movlb	0
   425   005178  EFDD  F027         	goto	_main	;jump to C main() function
   426                           
   427                           	psect	bssCOMRAM
   428   00004C                     __pbssCOMRAM:
   429                           	callstack 0
   430   00004C                     _i:
   431                           	callstack 0
   432   00004C                     	ds	1
   433   00004D                     _volt:
   434                           	callstack 0
   435   00004D                     	ds	1
   436   00004E                     _index:
   437                           	callstack 0
   438   00004E                     	ds	1
   439   00004F                     _alarmLevelLow:
   440                           	callstack 0
   441   00004F                     	ds	1
   442   000050                     _alarmLevelHigh:
   443                           	callstack 0
   444   000050                     	ds	1
   445   000051                     _language:
   446                           	callstack 0
   447   000051                     	ds	1
   448   000052                     _state:
   449                           	callstack 0
   450   000052                     	ds	1
   451   000053                     _estado_ant:
   452                           	callstack 0
   453   000053                     	ds	1
   454   000054                     _prot_ready:
   455                           	callstack 0
   456   000054                     	ds	1
   457   000055                     _v3:
   458                           	callstack 0
   459   000055                     	ds	1
   460   000056                     _v2:
   461                           	callstack 0
   462   000056                     	ds	1
   463   000057                     _v1:
   464                           	callstack 0
   465   000057                     	ds	1
   466   000058                     _v0:
   467                           	callstack 0
   468   000058                     	ds	1
   469   000059                     _display:
   470                           	callstack 0
   471   000059                     	ds	1
   472   00005A                     _started:
   473                           	callstack 0
   474   00005A                     	ds	1
   475   00005B                     _de:
   476                           	callstack 0
   477   00005B                     	ds	1
   478   00005C                     kpDebounce@valorAntigo:
   479                           	callstack 0
   480   00005C                     	ds	1
   481   00005D                     kpDebounce@valorNovo:
   482                           	callstack 0
   483   00005D                     	ds	1
   484   00005E                     kpDebounce@tempo:
   485                           	callstack 0
   486   00005E                     	ds	1
   487   00005F                     _valor:
   488                           	callstack 0
   489   00005F                     	ds	1
   490                           
   491                           	psect	bssBANK0
   492   000060                     __pbssBANK0:
   493                           	callstack 0
   494   000060                     _t:
   495                           	callstack 0
   496   000060                     	ds	66
   497   0000A2                     	ds	5
   498   0000A7                     _m:
   499                           	callstack 0
   500   0000A7                     	ds	4
   501   0000AB                     _maxTemp:
   502                           	callstack 0
   503   0000AB                     	ds	2
   504   0000AD                     _temp:
   505                           	callstack 0
   506   0000AD                     	ds	2
   507   0000AF                     _time:
   508                           	callstack 0
   509   0000AF                     	ds	2
   510   0000B1                     	ds	2
   511   0000B3                     	ds	2
   512   0000B5                     _key:
   513                           	callstack 0
   514   0000B5                     	ds	2
   515   0000B7                     _key_ant:
   516                           	callstack 0
   517   0000B7                     	ds	2
   518   0000B9                     _ev_ant:
   519                           	callstack 0
   520   0000B9                     	ds	2
   521   0000BB                     _voltMin:
   522                           	callstack 0
   523   0000BB                     	ds	1
   524   0000BC                     _prot:
   525                           	callstack 0
   526   0000BC                     	ds	6
   527                           
   528                           	psect	dataBANK0
   529   0000C2                     __pdataBANK0:
   530                           	callstack 0
   531   0000C2                     _msgs:
   532                           	callstack 0
   533   0000C2                     	ds	40
   534   0000EA                     kpDebounce@F15:
   535                           	callstack 0
   536   0000EA                     	ds	5
   537   0000EF                     	ds	2
   538                           
   539                           	psect	cstackCOMRAM
   540   000001                     __pcstackCOMRAM:
   541                           	callstack 0
   542   000001                     ??_kpDebounce:
   543   000001                     ?_getAlarmLevel:
   544                           	callstack 0
   545   000001                     ?_getTemp:
   546                           	callstack 0
   547   000001                     ?_adcRead:
   548                           	callstack 0
   549   000001                     ?_digitalRead:
   550                           	callstack 0
   551   000001                     ?___awdiv:
   552                           	callstack 0
   553   000001                     ?___llmod:
   554                           	callstack 0
   555   000001                     Delay40us@j:
   556                           	callstack 0
   557   000001                     Delay2ms@j:
   558                           	callstack 0
   559   000001                     lcdCommand4bits@data:
   560                           	callstack 0
   561   000001                     serialSend@c:
   562                           	callstack 0
   563   000001                     serialRead@resp:
   564                           	callstack 0
   565   000001                     setProt@newChar:
   566                           	callstack 0
   567   000001                     resetProt@i:
   568                           	callstack 0
   569   000001                     digitalWrite@pin:
   570                           	callstack 0
   571   000001                     digitalRead@pin:
   572                           	callstack 0
   573   000001                     pinMode@pin:
   574                           	callstack 0
   575   000001                     getAlarmLevel@lh:
   576                           	callstack 0
   577   000001                     ___awdiv@dividend:
   578                           	callstack 0
   579   000001                     ___llmod@dividend:
   580                           	callstack 0
   581                           
   582                           ; 4 bytes @ 0x0
   583   000001                     	ds	1
   584   000002                     Delay2ms@k:
   585                           	callstack 0
   586   000002                     lcdCommand4bits@cmd:
   587                           	callstack 0
   588                           
   589                           ; 1 bytes @ 0x1
   590   000002                     	ds	1
   591   000003                     ??_digitalRead:
   592   000003                     lcdCommand@cmd:
   593                           	callstack 0
   594   000003                     lcdData@valor:
   595                           	callstack 0
   596   000003                     adcRead@ADvalor:
   597                           	callstack 0
   598   000003                     digitalWrite@value:
   599                           	callstack 0
   600   000003                     pinMode@type:
   601                           	callstack 0
   602   000003                     getAlarmLevel@l:
   603                           	callstack 0
   604   000003                     ___awdiv@divisor:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x2
   608   000003                     	ds	1
   609   000004                     lcdInit@i:
   610                           	callstack 0
   611   000004                     setState@newState:
   612                           	callstack 0
   613   000004                     lcdString@str:
   614                           	callstack 0
   615   000004                     kpDebounce@bits:
   616                           	callstack 0
   617                           
   618                           ; 5 bytes @ 0x3
   619   000004                     	ds	1
   620   000005                     ??_digitalWrite:
   621   000005                     ??_pinMode:
   622   000005                     ?___xxtofl:
   623                           	callstack 0
   624   000005                     ___awdiv@counter:
   625                           	callstack 0
   626   000005                     ___llmod@divisor:
   627                           	callstack 0
   628   000005                     ___xxtofl@val:
   629                           	callstack 0
   630                           
   631                           ; 4 bytes @ 0x4
   632   000005                     	ds	1
   633   000006                     ___awdiv@sign:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x5
   637   000006                     	ds	1
   638   000007                     i2c_write_bit@bit:
   639                           	callstack 0
   640   000007                     i2c_read_bit@bit:
   641                           	callstack 0
   642   000007                     ___awdiv@quotient:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x6
   646   000007                     	ds	1
   647   000008                     i2cWriteByte@send_stop:
   648                           	callstack 0
   649   000008                     i2cReadByte@send_stop:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0x7
   653   000008                     	ds	1
   654   000009                     ??_i2cReadByte:
   655   000009                     ??___xxtofl:
   656   000009                     ?___wmul:
   657                           	callstack 0
   658   000009                     ?___awmod:
   659                           	callstack 0
   660   000009                     i2cWriteByte@byte:
   661                           	callstack 0
   662   000009                     ___llmod@counter:
   663                           	callstack 0
   664   000009                     ___wmul@multiplier:
   665                           	callstack 0
   666   000009                     ___awmod@dividend:
   667                           	callstack 0
   668   000009                     kpDebounce@portes:
   669                           	callstack 0
   670                           
   671                           ; 5 bytes @ 0x8
   672   000009                     	ds	1
   673   00000A                     i2cWriteByte@send_start:
   674                           	callstack 0
   675   00000A                     i2cReadByte@nack:
   676                           	callstack 0
   677                           
   678                           ; 1 bytes @ 0x9
   679   00000A                     	ds	1
   680   00000B                     i2cWriteByte@bit:
   681                           	callstack 0
   682   00000B                     i2cReadByte@bit:
   683                           	callstack 0
   684   00000B                     ___wmul@multiplicand:
   685                           	callstack 0
   686   00000B                     ___awmod@divisor:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0xA
   690   00000B                     	ds	2
   691   00000D                     i2cReadByte@byte:
   692                           	callstack 0
   693   00000D                     ___awmod@counter:
   694                           	callstack 0
   695   00000D                     ___xxtofl@sign:
   696                           	callstack 0
   697   00000D                     ___wmul@product:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0xC
   701   00000D                     	ds	1
   702   00000E                     ?_dsReadData:
   703                           	callstack 0
   704   00000E                     kpDebounce@j:
   705                           	callstack 0
   706   00000E                     ___awmod@sign:
   707                           	callstack 0
   708   00000E                     ___xxtofl@exp:
   709                           	callstack 0
   710   00000E                     dsReadData@address:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0xD
   714   00000E                     	ds	1
   715   00000F                     ?_dec2bcd:
   716                           	callstack 0
   717   00000F                     dec2bcd@value:
   718                           	callstack 0
   719   00000F                     ___xxtofl@arg:
   720                           	callstack 0
   721                           
   722                           ; 4 bytes @ 0xE
   723   00000F                     	ds	1
   724   000010                     ??_dsReadData:
   725                           
   726                           ; 1 bytes @ 0xF
   727   000010                     	ds	1
   728   000011                     ??_dec2bcd:
   729   000011                     dsReadData@result:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x10
   733   000011                     	ds	2
   734   000013                     ?_bcd2dec:
   735                           	callstack 0
   736   000013                     ?___flmul:
   737                           	callstack 0
   738   000013                     bcd2dec@value:
   739                           	callstack 0
   740   000013                     ___flmul@b:
   741                           	callstack 0
   742                           
   743                           ; 4 bytes @ 0x12
   744   000013                     	ds	2
   745   000015                     ??_bcd2dec:
   746   000015                     dsWriteData@address:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x14
   750   000015                     	ds	2
   751   000017                     ?_getTime:
   752                           	callstack 0
   753   000017                     dsWriteData@value:
   754                           	callstack 0
   755   000017                     lcdInt@val:
   756                           	callstack 0
   757   000017                     ___flmul@a:
   758                           	callstack 0
   759                           
   760                           ; 4 bytes @ 0x16
   761   000017                     	ds	1
   762   000018                     setLanguage@newLanguage:
   763                           	callstack 0
   764   000018                     setAlarmLevel@newAlarmLevel:
   765                           	callstack 0
   766                           
   767                           ; 2 bytes @ 0x17
   768   000018                     	ds	1
   769   000019                     ??_eventRead:
   770   000019                     lcdInt@digNum:
   771                           	callstack 0
   772   000019                     getTime@index:
   773                           	callstack 0
   774                           
   775                           ; 1 bytes @ 0x18
   776   000019                     	ds	1
   777   00001A                     ??_lcdInt:
   778   00001A                     eventRead@prot:
   779                           	callstack 0
   780   00001A                     setAlarmLevel@lh:
   781                           	callstack 0
   782   00001A                     setTime@newTime:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x19
   786   00001A                     	ds	1
   787   00001B                     ??_varInit:
   788   00001B                     ??___flmul:
   789   00001B                     lcdInt@j:
   790                           	callstack 0
   791   00001B                     eventRead@ev:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x1A
   795   00001B                     	ds	1
   796   00001C                     setTime@index:
   797                           	callstack 0
   798                           
   799                           ; 1 bytes @ 0x1B
   800   00001C                     	ds	1
   801   00001D                     eventRead@data:
   802                           	callstack 0
   803   00001D                     lcdInt@divisor:
   804                           	callstack 0
   805   00001D                     _varInit$568:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x1C
   809   00001D                     	ds	1
   810   00001E                     eventRead@key:
   811                           	callstack 0
   812                           
   813                           ; 2 bytes @ 0x1D
   814   00001E                     	ds	1
   815   00001F                     ___flmul@sign:
   816                           	callstack 0
   817   00001F                     lcdInt@i:
   818                           	callstack 0
   819   00001F                     _varInit$569:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x1E
   823   00001F                     	ds	1
   824   000020                     ___flmul@grs:
   825                           	callstack 0
   826                           
   827                           ; 4 bytes @ 0x1F
   828   000020                     	ds	1
   829   000021                     outputPrint@numTela:
   830                           	callstack 0
   831   000021                     _varInit$570:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x20
   835   000021                     	ds	2
   836   000023                     outputPrint@idioma:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0x22
   840   000023                     	ds	1
   841   000024                     ___flmul@aexp:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x23
   845   000024                     	ds	1
   846   000025                     ??_outputPrint:
   847   000025                     ___flmul@bexp:
   848                           	callstack 0
   849                           
   850                           ; 1 bytes @ 0x24
   851   000025                     	ds	1
   852   000026                     outputPrint@d:
   853                           	callstack 0
   854   000026                     ___flmul@prod:
   855                           	callstack 0
   856                           
   857                           ; 4 bytes @ 0x25
   858   000026                     	ds	2
   859   000028                     outputPrint@d_449:
   860                           	callstack 0
   861                           
   862                           ; 2 bytes @ 0x27
   863   000028                     	ds	2
   864   00002A                     ___flmul@temp:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x29
   868   00002A                     	ds	2
   869   00002C                     ?___fltol:
   870                           	callstack 0
   871   00002C                     ___fltol@f1:
   872                           	callstack 0
   873                           
   874                           ; 4 bytes @ 0x2B
   875   00002C                     	ds	4
   876   000030                     ??___fltol:
   877                           
   878                           ; 1 bytes @ 0x2F
   879   000030                     	ds	4
   880   000034                     ___fltol@sign1:
   881                           	callstack 0
   882                           
   883                           ; 1 bytes @ 0x33
   884   000034                     	ds	1
   885   000035                     ___fltol@exp1:
   886                           	callstack 0
   887                           
   888                           ; 1 bytes @ 0x34
   889   000035                     	ds	1
   890   000036                     ??_readTemp:
   891                           
   892                           ; 1 bytes @ 0x35
   893   000036                     	ds	2
   894   000038                     readTemp@tempT:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x37
   898   000038                     	ds	2
   899   00003A                     readTemp@j:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x39
   903   00003A                     	ds	1
   904   00003B                     ??_smLoop:
   905                           
   906                           ; 1 bytes @ 0x3A
   907   00003B                     	ds	3
   908   00003E                     _smLoop$1478:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x3D
   912   00003E                     	ds	2
   913   000040                     smLoop@l:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0x3F
   917   000040                     	ds	2
   918   000042                     smLoop@h:
   919                           	callstack 0
   920                           
   921                           ; 2 bytes @ 0x41
   922   000042                     	ds	2
   923   000044                     smLoop@temp:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x43
   927   000044                     	ds	2
   928   000046                     smLoop@h_537:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x45
   932   000046                     	ds	2
   933   000048                     smLoop@m:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x47
   937   000048                     	ds	2
   938   00004A                     smLoop@prot:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x49
   942   00004A                     	ds	1
   943   00004B                     smLoop@evento:
   944                           	callstack 0
   945                           
   946                           ; 1 bytes @ 0x4A
   947   00004B                     	ds	1
   948   00004C                     
   949                           ; 1 bytes @ 0x4B
   950 ;;
   951 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   952 ;;
   953 ;; *************** function _main *****************
   954 ;; Defined at:
   955 ;;		line 24 in file "main.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  c               2    0        unsigned int 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   969 ;;      Params:         0       0       0       0       0       0       0       0       0
   970 ;;      Locals:         0       0       0       0       0       0       0       0       0
   971 ;;      Temps:          0       0       0       0       0       0       0       0       0
   972 ;;      Totals:         0       0       0       0       0       0       0       0       0
   973 ;;Total ram usage:        0 bytes
   974 ;; Hardware stack levels required when called: 8
   975 ;; This function calls:
   976 ;;		_adcInit
   977 ;;		_dsInit
   978 ;;		_kpDebounce
   979 ;;		_kpInit
   980 ;;		_lcdInit
   981 ;;		_serialInit
   982 ;;		_smInit
   983 ;;		_smLoop
   984 ;; This function is called by:
   985 ;;		Startup code after reset
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text0
   990   004FBA                     __ptext0:
   991                           	callstack 0
   992   004FBA                     _main:
   993                           	callstack 23
   994   004FBA                     
   995                           ;main.c: 28:     kpInit();
   996   004FBA  EC65  F026         	call	_kpInit	;wreg free
   997                           
   998                           ;main.c: 30:     dsInit();
   999   004FBE  EC5A  F026         	call	_dsInit	;wreg free
  1000   004FC2                     
  1001                           ;main.c: 31:     smInit();
  1002   004FC2  ECC6  F026         	call	_smInit	;wreg free
  1003   004FC6                     
  1004                           ;main.c: 32:     serialInit();
  1005   004FC6  ECAA  F026         	call	_serialInit	;wreg free
  1006   004FCA                     
  1007                           ;main.c: 33:     TRISA = 0x00;
  1008   004FCA  0E00               	movlw	0
  1009   004FCC  6E92               	movwf	146,c	;volatile
  1010   004FCE                     
  1011                           ;main.c: 34:     LATA = 0x00;
  1012   004FCE  0E00               	movlw	0
  1013   004FD0  6E89               	movwf	137,c	;volatile
  1014   004FD2                     
  1015                           ;main.c: 35:     adcInit();
  1016   004FD2  EC73  F026         	call	_adcInit	;wreg free
  1017   004FD6                     
  1018                           ;main.c: 36:     lcdInit();
  1019   004FD6  EC40  F02A         	call	_lcdInit	;wreg free
  1020   004FDA                     l4930:
  1021                           
  1022                           ;main.c: 42:         kpDebounce();
  1023   004FDA  ECC7  F02C         	call	_kpDebounce	;wreg free
  1024   004FDE                     
  1025                           ;main.c: 43:         smLoop();
  1026   004FDE  ECD0  F039         	call	_smLoop	;wreg free
  1027   004FE2  EFED  F027         	goto	l4930
  1028   004FE6  EF01  F000         	goto	start
  1029   004FEA                     __end_of_main:
  1030                           	callstack 0
  1031                           
  1032 ;; *************** function _smLoop *****************
  1033 ;; Defined at:
  1034 ;;		line 20 in file "stateMachine.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  h               2   65[COMRAM] int 
  1039 ;;  l               2   63[COMRAM] int 
  1040 ;;  m               2   71[COMRAM] int 
  1041 ;;  h               2   69[COMRAM] int 
  1042 ;;  prot            1   73[COMRAM] PTR unsigned char 
  1043 ;;		 -> prot(6), 
  1044 ;;  temp            2   67[COMRAM] int 
  1045 ;;  evento          1   74[COMRAM] unsigned char 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1055 ;;      Params:         0       0       0       0       0       0       0       0       0
  1056 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1057 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1058 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1059 ;;Total ram usage:       17 bytes
  1060 ;; Hardware stack levels used: 1
  1061 ;; Hardware stack levels required when called: 7
  1062 ;; This function calls:
  1063 ;;		___llmod
  1064 ;;		___wmul
  1065 ;;		_eventRead
  1066 ;;		_getAlarmLevel
  1067 ;;		_getLanguage
  1068 ;;		_getProt
  1069 ;;		_getState
  1070 ;;		_getTemp
  1071 ;;		_getTime
  1072 ;;		_outputPrint
  1073 ;;		_readTemp
  1074 ;;		_resetProt
  1075 ;;		_setAlarmLevel
  1076 ;;		_setLanguage
  1077 ;;		_setState
  1078 ;;		_setTime
  1079 ;; This function is called by:
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text1
  1085   0073A0                     __ptext1:
  1086                           	callstack 0
  1087   0073A0                     _smLoop:
  1088                           	callstack 23
  1089   0073A0                     
  1090                           ;stateMachine.c: 21:     unsigned char evento;;stateMachine.c: 22:     readTemp();
  1091   0073A0  ECDE  F02B         	call	_readTemp	;wreg free
  1092   0073A4                     
  1093                           ;stateMachine.c: 26:     evento = eventRead();
  1094   0073A4  ECE1  F02F         	call	_eventRead	;wreg free
  1095   0073A8  6E4B               	movwf	smLoop@evento^0,c
  1096   0073AA                     
  1097                           ;stateMachine.c: 27:     if (evento == EV_NOEVENT) {
  1098   0073AA  0E06               	movlw	6
  1099   0073AC  184B               	xorwf	smLoop@evento^0,w,c
  1100   0073AE  A4D8               	btfss	status,2,c
  1101   0073B0  EFDC  F039         	goto	u4291
  1102   0073B4  EFDE  F039         	goto	u4290
  1103   0073B8                     u4291:
  1104   0073B8  EFE7  F039         	goto	l4674
  1105   0073BC                     u4290:
  1106   0073BC                     
  1107                           ;stateMachine.c: 28:         t++;
  1108   0073BC  0E01               	movlw	1
  1109   0073BE  0100               	movlb	0	; () banked
  1110   0073C0  2760               	addwf	_t& (0+255),f,b
  1111   0073C2  0E00               	movlw	0
  1112   0073C4  2361               	addwfc	(_t+1)& (0+255),f,b
  1113   0073C6  2362               	addwfc	(_t+2)& (0+255),f,b
  1114   0073C8  2363               	addwfc	(_t+3)& (0+255),f,b
  1115                           
  1116                           ;stateMachine.c: 29:     } else {
  1117   0073CA  EFF0  F039         	goto	l4676
  1118   0073CE                     l4674:
  1119                           
  1120                           ;stateMachine.c: 30:         t = 0;
  1121   0073CE  0E00               	movlw	0
  1122   0073D0  0100               	movlb	0	; () banked
  1123   0073D2  6F60               	movwf	_t& (0+255),b
  1124   0073D4  0E00               	movlw	0
  1125   0073D6  6F61               	movwf	(_t+1)& (0+255),b
  1126   0073D8  0E00               	movlw	0
  1127   0073DA  6F62               	movwf	(_t+2)& (0+255),b
  1128   0073DC  0E00               	movlw	0
  1129   0073DE  6F63               	movwf	(_t+3)& (0+255),b
  1130   0073E0                     l4676:
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;stateMachine.c: 32:     if (t == 3000) {
  1134   0073E0  0EB8               	movlw	184
  1135   0073E2  1960               	xorwf	_t& (0+255),w,b
  1136   0073E4  E109               	bnz	u4301
  1137   0073E6  0E0B               	movlw	11
  1138   0073E8  1961               	xorwf	(_t+1)& (0+255),w,b
  1139   0073EA  1162               	iorwf	(_t+2)& (0+255),w,b
  1140   0073EC  1163               	iorwf	(_t+3)& (0+255),w,b
  1141   0073EE  A4D8               	btfss	status,2,c
  1142   0073F0  EFFC  F039         	goto	u4301
  1143   0073F4  EFFE  F039         	goto	u4300
  1144   0073F8                     u4301:
  1145   0073F8  EF82  F03C         	goto	l4852
  1146   0073FC                     u4300:
  1147   0073FC                     
  1148                           ; BSR set to: 0
  1149                           ;stateMachine.c: 33:         setState(STATE_MAIN);
  1150   0073FC  0E08               	movlw	8
  1151   0073FE  EC6C  F026         	call	_setState
  1152   007402  EF82  F03C         	goto	l4852
  1153   007406                     l4680:
  1154                           
  1155                           ;stateMachine.c: 39:             if (evento == EV_B_0) {
  1156   007406  504B               	movf	smLoop@evento^0,w,c
  1157   007408  A4D8               	btfss	status,2,c
  1158   00740A  EF09  F03A         	goto	u4311
  1159   00740E  EF0B  F03A         	goto	u4310
  1160   007412                     u4311:
  1161   007412  EF1B  F03A         	goto	l4684
  1162   007416                     u4310:
  1163   007416                     
  1164                           ;stateMachine.c: 40:                 setAlarmLevel(getAlarmLevel(0) - 1, 0);
  1165   007416  0E00               	movlw	0
  1166   007418  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1167   00741A  0E00               	movlw	0
  1168   00741C  6E01               	movwf	getAlarmLevel@lh^0,c
  1169   00741E  EC53  F027         	call	_getAlarmLevel	;wreg free
  1170   007422  0EFF               	movlw	255
  1171   007424  2401               	addwf	?_getAlarmLevel^0,w,c
  1172   007426  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1173   007428  0EFF               	movlw	255
  1174   00742A  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1175   00742C  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1176   00742E  0E00               	movlw	0
  1177   007430  6E1A               	movwf	setAlarmLevel@lh^0,c
  1178   007432  EC28  F029         	call	_setAlarmLevel	;wreg free
  1179   007436                     l4684:
  1180                           
  1181                           ;stateMachine.c: 43:             if (evento == EV_B_1) {
  1182   007436  044B               	decf	smLoop@evento^0,w,c
  1183   007438  A4D8               	btfss	status,2,c
  1184   00743A  EF21  F03A         	goto	u4321
  1185   00743E  EF23  F03A         	goto	u4320
  1186   007442                     u4321:
  1187   007442  EF33  F03A         	goto	l4688
  1188   007446                     u4320:
  1189   007446                     
  1190                           ;stateMachine.c: 44:                 setAlarmLevel(getAlarmLevel(0) + 1, 0);
  1191   007446  0E00               	movlw	0
  1192   007448  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1193   00744A  0E00               	movlw	0
  1194   00744C  6E01               	movwf	getAlarmLevel@lh^0,c
  1195   00744E  EC53  F027         	call	_getAlarmLevel	;wreg free
  1196   007452  0E01               	movlw	1
  1197   007454  2401               	addwf	?_getAlarmLevel^0,w,c
  1198   007456  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1199   007458  0E00               	movlw	0
  1200   00745A  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1201   00745C  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1202   00745E  0E00               	movlw	0
  1203   007460  6E1A               	movwf	setAlarmLevel@lh^0,c
  1204   007462  EC28  F029         	call	_setAlarmLevel	;wreg free
  1205   007466                     l4688:
  1206                           
  1207                           ;stateMachine.c: 47:             if (evento == EV_B_2) {
  1208   007466  0E02               	movlw	2
  1209   007468  184B               	xorwf	smLoop@evento^0,w,c
  1210   00746A  A4D8               	btfss	status,2,c
  1211   00746C  EF3A  F03A         	goto	u4331
  1212   007470  EF3C  F03A         	goto	u4330
  1213   007474                     u4331:
  1214   007474  EF3F  F03A         	goto	l4692
  1215   007478                     u4330:
  1216   007478                     
  1217                           ;stateMachine.c: 48:                 setState(STATE_TEMPOM);
  1218   007478  0E03               	movlw	3
  1219   00747A  EC6C  F026         	call	_setState
  1220   00747E                     l4692:
  1221                           
  1222                           ;stateMachine.c: 51:             if (evento == EV_B_3) {
  1223   00747E  0E03               	movlw	3
  1224   007480  184B               	xorwf	smLoop@evento^0,w,c
  1225   007482  A4D8               	btfss	status,2,c
  1226   007484  EF46  F03A         	goto	u4341
  1227   007488  EF48  F03A         	goto	u4340
  1228   00748C                     u4341:
  1229   00748C  EF4B  F03A         	goto	l4696
  1230   007490                     u4340:
  1231   007490                     
  1232                           ;stateMachine.c: 52:                 setState(STATE_ALARMEH);
  1233   007490  0E01               	movlw	1
  1234   007492  EC6C  F026         	call	_setState
  1235   007496                     l4696:
  1236                           
  1237                           ;stateMachine.c: 55:             if (evento == EV_B_4) {
  1238   007496  0E04               	movlw	4
  1239   007498  184B               	xorwf	smLoop@evento^0,w,c
  1240   00749A  A4D8               	btfss	status,2,c
  1241   00749C  EF52  F03A         	goto	u4351
  1242   0074A0  EF54  F03A         	goto	u4350
  1243   0074A4                     u4351:
  1244   0074A4  EFAA  F03C         	goto	l4854
  1245   0074A8                     u4350:
  1246   0074A8                     
  1247                           ;stateMachine.c: 56:                 setState(STATE_MAIN);
  1248   0074A8  0E08               	movlw	8
  1249   0074AA  EC6C  F026         	call	_setState
  1250   0074AE                     
  1251                           ;stateMachine.c: 57:                 estado_ant = STATE_ALARMEL;
  1252   0074AE  0E00               	movlw	0
  1253   0074B0  6E53               	movwf	_estado_ant^0,c
  1254   0074B2  EFAA  F03C         	goto	l4854
  1255   0074B6                     l4702:
  1256                           
  1257                           ;stateMachine.c: 62:             if (evento == EV_B_0) {
  1258   0074B6  504B               	movf	smLoop@evento^0,w,c
  1259   0074B8  A4D8               	btfss	status,2,c
  1260   0074BA  EF61  F03A         	goto	u4361
  1261   0074BE  EF63  F03A         	goto	u4360
  1262   0074C2                     u4361:
  1263   0074C2  EF73  F03A         	goto	l4706
  1264   0074C6                     u4360:
  1265   0074C6                     
  1266                           ;stateMachine.c: 63:                 setAlarmLevel(getAlarmLevel(1) - 1, 1);
  1267   0074C6  0E00               	movlw	0
  1268   0074C8  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1269   0074CA  0E01               	movlw	1
  1270   0074CC  6E01               	movwf	getAlarmLevel@lh^0,c
  1271   0074CE  EC53  F027         	call	_getAlarmLevel	;wreg free
  1272   0074D2  0EFF               	movlw	255
  1273   0074D4  2401               	addwf	?_getAlarmLevel^0,w,c
  1274   0074D6  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1275   0074D8  0EFF               	movlw	255
  1276   0074DA  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1277   0074DC  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1278   0074DE  0E01               	movlw	1
  1279   0074E0  6E1A               	movwf	setAlarmLevel@lh^0,c
  1280   0074E2  EC28  F029         	call	_setAlarmLevel	;wreg free
  1281   0074E6                     l4706:
  1282                           
  1283                           ;stateMachine.c: 66:             if (evento == EV_B_1) {
  1284   0074E6  044B               	decf	smLoop@evento^0,w,c
  1285   0074E8  A4D8               	btfss	status,2,c
  1286   0074EA  EF79  F03A         	goto	u4371
  1287   0074EE  EF7B  F03A         	goto	u4370
  1288   0074F2                     u4371:
  1289   0074F2  EF8B  F03A         	goto	l4710
  1290   0074F6                     u4370:
  1291   0074F6                     
  1292                           ;stateMachine.c: 67:                 setAlarmLevel(getAlarmLevel(1) + 1, 1);
  1293   0074F6  0E00               	movlw	0
  1294   0074F8  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1295   0074FA  0E01               	movlw	1
  1296   0074FC  6E01               	movwf	getAlarmLevel@lh^0,c
  1297   0074FE  EC53  F027         	call	_getAlarmLevel	;wreg free
  1298   007502  0E01               	movlw	1
  1299   007504  2401               	addwf	?_getAlarmLevel^0,w,c
  1300   007506  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1301   007508  0E00               	movlw	0
  1302   00750A  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1303   00750C  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1304   00750E  0E01               	movlw	1
  1305   007510  6E1A               	movwf	setAlarmLevel@lh^0,c
  1306   007512  EC28  F029         	call	_setAlarmLevel	;wreg free
  1307   007516                     l4710:
  1308                           
  1309                           ;stateMachine.c: 70:             if (evento == EV_B_2) {
  1310   007516  0E02               	movlw	2
  1311   007518  184B               	xorwf	smLoop@evento^0,w,c
  1312   00751A  A4D8               	btfss	status,2,c
  1313   00751C  EF92  F03A         	goto	u4381
  1314   007520  EF94  F03A         	goto	u4380
  1315   007524                     u4381:
  1316   007524  EF97  F03A         	goto	l4714
  1317   007528                     u4380:
  1318   007528                     
  1319                           ;stateMachine.c: 71:                 setState(STATE_ALARMEL);
  1320   007528  0E00               	movlw	0
  1321   00752A  EC6C  F026         	call	_setState
  1322   00752E                     l4714:
  1323                           
  1324                           ;stateMachine.c: 74:             if (evento == EV_B_3) {
  1325   00752E  0E03               	movlw	3
  1326   007530  184B               	xorwf	smLoop@evento^0,w,c
  1327   007532  A4D8               	btfss	status,2,c
  1328   007534  EF9E  F03A         	goto	u4391
  1329   007538  EFA0  F03A         	goto	u4390
  1330   00753C                     u4391:
  1331   00753C  EFA3  F03A         	goto	l4718
  1332   007540                     u4390:
  1333   007540                     
  1334                           ;stateMachine.c: 75:                 setState(STATE_IDIOMA);
  1335   007540  0E07               	movlw	7
  1336   007542  EC6C  F026         	call	_setState
  1337   007546                     l4718:
  1338                           
  1339                           ;stateMachine.c: 78:             if (evento == EV_B_4) {
  1340   007546  0E04               	movlw	4
  1341   007548  184B               	xorwf	smLoop@evento^0,w,c
  1342   00754A  A4D8               	btfss	status,2,c
  1343   00754C  EFAA  F03A         	goto	u4401
  1344   007550  EFAC  F03A         	goto	u4400
  1345   007554                     u4401:
  1346   007554  EFAA  F03C         	goto	l4854
  1347   007558                     u4400:
  1348   007558                     
  1349                           ;stateMachine.c: 79:                 setState(STATE_MAIN);
  1350   007558  0E08               	movlw	8
  1351   00755A  EC6C  F026         	call	_setState
  1352   00755E                     
  1353                           ;stateMachine.c: 80:                 estado_ant = STATE_ALARMEH;
  1354   00755E  0E01               	movlw	1
  1355   007560  6E53               	movwf	_estado_ant^0,c
  1356   007562  EFAA  F03C         	goto	l4854
  1357   007566                     l4724:
  1358                           
  1359                           ;stateMachine.c: 88:             if (evento == EV_B_2) {
  1360   007566  0E02               	movlw	2
  1361   007568  184B               	xorwf	smLoop@evento^0,w,c
  1362   00756A  A4D8               	btfss	status,2,c
  1363   00756C  EFBA  F03A         	goto	u4411
  1364   007570  EFBC  F03A         	goto	u4410
  1365   007574                     u4411:
  1366   007574  EFBF  F03A         	goto	l4728
  1367   007578                     u4410:
  1368   007578                     
  1369                           ;stateMachine.c: 89:                 setState(STATE_ALARMEH);
  1370   007578  0E01               	movlw	1
  1371   00757A  EC6C  F026         	call	_setState
  1372   00757E                     l4728:
  1373                           
  1374                           ;stateMachine.c: 92:             if (evento == EV_B_3) {
  1375   00757E  0E03               	movlw	3
  1376   007580  184B               	xorwf	smLoop@evento^0,w,c
  1377   007582  A4D8               	btfss	status,2,c
  1378   007584  EFC6  F03A         	goto	u4421
  1379   007588  EFC8  F03A         	goto	u4420
  1380   00758C                     u4421:
  1381   00758C  EFCB  F03A         	goto	l4732
  1382   007590                     u4420:
  1383   007590                     
  1384                           ;stateMachine.c: 93:                 setState(STATE_TEMPO);
  1385   007590  0E02               	movlw	2
  1386   007592  EC6C  F026         	call	_setState
  1387   007596                     l4732:
  1388                           
  1389                           ;stateMachine.c: 96:             if (evento == EV_B_4) {
  1390   007596  0E04               	movlw	4
  1391   007598  184B               	xorwf	smLoop@evento^0,w,c
  1392   00759A  A4D8               	btfss	status,2,c
  1393   00759C  EFD2  F03A         	goto	u4431
  1394   0075A0  EFD4  F03A         	goto	u4430
  1395   0075A4                     u4431:
  1396   0075A4  EFD9  F03A         	goto	l4738
  1397   0075A8                     u4430:
  1398   0075A8                     
  1399                           ;stateMachine.c: 97:                 setState(STATE_MAIN);
  1400   0075A8  0E08               	movlw	8
  1401   0075AA  EC6C  F026         	call	_setState
  1402   0075AE                     
  1403                           ;stateMachine.c: 98:                 estado_ant = STATE_IDIOMA;
  1404   0075AE  0E07               	movlw	7
  1405   0075B0  6E53               	movwf	_estado_ant^0,c
  1406   0075B2                     l4738:
  1407                           
  1408                           ;stateMachine.c: 101:             if (evento == EV_B_0) {
  1409   0075B2  504B               	movf	smLoop@evento^0,w,c
  1410   0075B4  A4D8               	btfss	status,2,c
  1411   0075B6  EFDF  F03A         	goto	u4441
  1412   0075BA  EFE1  F03A         	goto	u4440
  1413   0075BE                     u4441:
  1414   0075BE  EFE7  F03A         	goto	l4742
  1415   0075C2                     u4440:
  1416   0075C2                     
  1417                           ;stateMachine.c: 103:                 setLanguage(getLanguage() + 1);
  1418   0075C2  EC52  F026         	call	_getLanguage	;wreg free
  1419   0075C6  6E3B               	movwf	??_smLoop^0,c
  1420   0075C8  283B               	incf	??_smLoop^0,w,c
  1421   0075CA  EC9E  F026         	call	_setLanguage
  1422   0075CE                     l4742:
  1423                           
  1424                           ;stateMachine.c: 107:             if (evento == EV_B_1) {
  1425   0075CE  044B               	decf	smLoop@evento^0,w,c
  1426   0075D0  A4D8               	btfss	status,2,c
  1427   0075D2  EFED  F03A         	goto	u4451
  1428   0075D6  EFEF  F03A         	goto	u4450
  1429   0075DA                     u4451:
  1430   0075DA  EFAA  F03C         	goto	l4854
  1431   0075DE                     u4450:
  1432   0075DE                     
  1433                           ;stateMachine.c: 108:                 setLanguage(getLanguage() - 1);
  1434   0075DE  EC52  F026         	call	_getLanguage	;wreg free
  1435   0075E2  6E3B               	movwf	??_smLoop^0,c
  1436   0075E4  043B               	decf	??_smLoop^0,w,c
  1437   0075E6  EC9E  F026         	call	_setLanguage
  1438   0075EA  EFAA  F03C         	goto	l4854
  1439   0075EE                     l4746:
  1440                           
  1441                           ;stateMachine.c: 116:             if (evento == EV_B_0) {
  1442   0075EE  504B               	movf	smLoop@evento^0,w,c
  1443   0075F0  A4D8               	btfss	status,2,c
  1444   0075F2  EFFD  F03A         	goto	u4461
  1445   0075F6  EFFF  F03A         	goto	u4460
  1446   0075FA                     u4461:
  1447   0075FA  EF0C  F03B         	goto	l4750
  1448   0075FE                     u4460:
  1449   0075FE                     
  1450                           ;stateMachine.c: 118:                 setTime(getTime(HOU) - 1, HOU);
  1451   0075FE  0E02               	movlw	2
  1452   007600  ECC8  F02D         	call	_getTime
  1453   007604  0EFF               	movlw	255
  1454   007606  2417               	addwf	?_getTime^0,w,c
  1455   007608  6E1A               	movwf	setTime@newTime^0,c
  1456   00760A  0EFF               	movlw	255
  1457   00760C  2018               	addwfc	(?_getTime+1)^0,w,c
  1458   00760E  6E1B               	movwf	(setTime@newTime+1)^0,c
  1459   007610  0E02               	movlw	2
  1460   007612  6E1C               	movwf	setTime@index^0,c
  1461   007614  EC4F  F02C         	call	_setTime	;wreg free
  1462   007618                     l4750:
  1463                           
  1464                           ;stateMachine.c: 120:             if (evento == EV_B_1) {
  1465   007618  044B               	decf	smLoop@evento^0,w,c
  1466   00761A  A4D8               	btfss	status,2,c
  1467   00761C  EF12  F03B         	goto	u4471
  1468   007620  EF14  F03B         	goto	u4470
  1469   007624                     u4471:
  1470   007624  EF21  F03B         	goto	l4754
  1471   007628                     u4470:
  1472   007628                     
  1473                           ;stateMachine.c: 121:                 setTime(getTime(HOU) + 1, HOU);
  1474   007628  0E02               	movlw	2
  1475   00762A  ECC8  F02D         	call	_getTime
  1476   00762E  0E01               	movlw	1
  1477   007630  2417               	addwf	?_getTime^0,w,c
  1478   007632  6E1A               	movwf	setTime@newTime^0,c
  1479   007634  0E00               	movlw	0
  1480   007636  2018               	addwfc	(?_getTime+1)^0,w,c
  1481   007638  6E1B               	movwf	(setTime@newTime+1)^0,c
  1482   00763A  0E02               	movlw	2
  1483   00763C  6E1C               	movwf	setTime@index^0,c
  1484   00763E  EC4F  F02C         	call	_setTime	;wreg free
  1485   007642                     l4754:
  1486                           
  1487                           ;stateMachine.c: 123:             if (evento == EV_B_2) {
  1488   007642  0E02               	movlw	2
  1489   007644  184B               	xorwf	smLoop@evento^0,w,c
  1490   007646  A4D8               	btfss	status,2,c
  1491   007648  EF28  F03B         	goto	u4481
  1492   00764C  EF2A  F03B         	goto	u4480
  1493   007650                     u4481:
  1494   007650  EF2D  F03B         	goto	l4758
  1495   007654                     u4480:
  1496   007654                     
  1497                           ;stateMachine.c: 124:                 setState(STATE_IDIOMA);
  1498   007654  0E07               	movlw	7
  1499   007656  EC6C  F026         	call	_setState
  1500   00765A                     l4758:
  1501                           
  1502                           ;stateMachine.c: 127:             if (evento == EV_B_3) {
  1503   00765A  0E03               	movlw	3
  1504   00765C  184B               	xorwf	smLoop@evento^0,w,c
  1505   00765E  A4D8               	btfss	status,2,c
  1506   007660  EF34  F03B         	goto	u4491
  1507   007664  EF36  F03B         	goto	u4490
  1508   007668                     u4491:
  1509   007668  EF39  F03B         	goto	l4762
  1510   00766C                     u4490:
  1511   00766C                     
  1512                           ;stateMachine.c: 128:                 setState(STATE_TEMPOM);
  1513   00766C  0E03               	movlw	3
  1514   00766E  EC6C  F026         	call	_setState
  1515   007672                     l4762:
  1516                           
  1517                           ;stateMachine.c: 131:             if (evento == EV_B_4) {
  1518   007672  0E04               	movlw	4
  1519   007674  184B               	xorwf	smLoop@evento^0,w,c
  1520   007676  A4D8               	btfss	status,2,c
  1521   007678  EF40  F03B         	goto	u4501
  1522   00767C  EF42  F03B         	goto	u4500
  1523   007680                     u4501:
  1524   007680  EFAA  F03C         	goto	l4854
  1525   007684                     u4500:
  1526   007684                     
  1527                           ;stateMachine.c: 132:                 setState(STATE_MAIN);
  1528   007684  0E08               	movlw	8
  1529   007686  EC6C  F026         	call	_setState
  1530   00768A                     l4766:
  1531                           
  1532                           ;stateMachine.c: 133:                 estado_ant = STATE_TEMPO;
  1533   00768A  0E02               	movlw	2
  1534   00768C  6E53               	movwf	_estado_ant^0,c
  1535   00768E  EFAA  F03C         	goto	l4854
  1536   007692                     l4768:
  1537                           
  1538                           ;stateMachine.c: 141:             if (evento == EV_B_0) {
  1539   007692  504B               	movf	smLoop@evento^0,w,c
  1540   007694  A4D8               	btfss	status,2,c
  1541   007696  EF4F  F03B         	goto	u4511
  1542   00769A  EF51  F03B         	goto	u4510
  1543   00769E                     u4511:
  1544   00769E  EF5E  F03B         	goto	l4772
  1545   0076A2                     u4510:
  1546   0076A2                     
  1547                           ;stateMachine.c: 143:                 setTime(getTime(MIN) - 1, MIN);
  1548   0076A2  0E01               	movlw	1
  1549   0076A4  ECC8  F02D         	call	_getTime
  1550   0076A8  0EFF               	movlw	255
  1551   0076AA  2417               	addwf	?_getTime^0,w,c
  1552   0076AC  6E1A               	movwf	setTime@newTime^0,c
  1553   0076AE  0EFF               	movlw	255
  1554   0076B0  2018               	addwfc	(?_getTime+1)^0,w,c
  1555   0076B2  6E1B               	movwf	(setTime@newTime+1)^0,c
  1556   0076B4  0E01               	movlw	1
  1557   0076B6  6E1C               	movwf	setTime@index^0,c
  1558   0076B8  EC4F  F02C         	call	_setTime	;wreg free
  1559   0076BC                     l4772:
  1560                           
  1561                           ;stateMachine.c: 145:             if (evento == EV_B_1) {
  1562   0076BC  044B               	decf	smLoop@evento^0,w,c
  1563   0076BE  A4D8               	btfss	status,2,c
  1564   0076C0  EF64  F03B         	goto	u4521
  1565   0076C4  EF66  F03B         	goto	u4520
  1566   0076C8                     u4521:
  1567   0076C8  EF73  F03B         	goto	l4776
  1568   0076CC                     u4520:
  1569   0076CC                     
  1570                           ;stateMachine.c: 146:                 setTime(getTime(MIN) + 1, MIN);
  1571   0076CC  0E01               	movlw	1
  1572   0076CE  ECC8  F02D         	call	_getTime
  1573   0076D2  0E01               	movlw	1
  1574   0076D4  2417               	addwf	?_getTime^0,w,c
  1575   0076D6  6E1A               	movwf	setTime@newTime^0,c
  1576   0076D8  0E00               	movlw	0
  1577   0076DA  2018               	addwfc	(?_getTime+1)^0,w,c
  1578   0076DC  6E1B               	movwf	(setTime@newTime+1)^0,c
  1579   0076DE  0E01               	movlw	1
  1580   0076E0  6E1C               	movwf	setTime@index^0,c
  1581   0076E2  EC4F  F02C         	call	_setTime	;wreg free
  1582   0076E6                     l4776:
  1583                           
  1584                           ;stateMachine.c: 148:             if (evento == EV_B_2) {
  1585   0076E6  0E02               	movlw	2
  1586   0076E8  184B               	xorwf	smLoop@evento^0,w,c
  1587   0076EA  A4D8               	btfss	status,2,c
  1588   0076EC  EF7A  F03B         	goto	u4531
  1589   0076F0  EF7C  F03B         	goto	u4530
  1590   0076F4                     u4531:
  1591   0076F4  EF7F  F03B         	goto	l4780
  1592   0076F8                     u4530:
  1593   0076F8                     
  1594                           ;stateMachine.c: 149:                 setState(STATE_TEMPO);
  1595   0076F8  0E02               	movlw	2
  1596   0076FA  EC6C  F026         	call	_setState
  1597   0076FE                     l4780:
  1598                           
  1599                           ;stateMachine.c: 152:             if (evento == EV_B_3) {
  1600   0076FE  0E03               	movlw	3
  1601   007700  184B               	xorwf	smLoop@evento^0,w,c
  1602   007702  A4D8               	btfss	status,2,c
  1603   007704  EF86  F03B         	goto	u4541
  1604   007708  EF88  F03B         	goto	u4540
  1605   00770C                     u4541:
  1606   00770C  EF8B  F03B         	goto	l4784
  1607   007710                     u4540:
  1608   007710                     
  1609                           ;stateMachine.c: 153:                 setState(STATE_TEMPOD);
  1610   007710  0E04               	movlw	4
  1611   007712  EC6C  F026         	call	_setState
  1612   007716                     l4784:
  1613                           
  1614                           ;stateMachine.c: 156:             if (evento == EV_B_4) {
  1615   007716  0E04               	movlw	4
  1616   007718  184B               	xorwf	smLoop@evento^0,w,c
  1617   00771A  A4D8               	btfss	status,2,c
  1618   00771C  EF92  F03B         	goto	u4551
  1619   007720  EF94  F03B         	goto	u4550
  1620   007724                     u4551:
  1621   007724  EFAA  F03C         	goto	l4854
  1622   007728                     u4550:
  1623   007728                     
  1624                           ;stateMachine.c: 157:                 setState(STATE_MAIN);
  1625   007728  0E08               	movlw	8
  1626   00772A  EC6C  F026         	call	_setState
  1627   00772E  EF45  F03B         	goto	l4766
  1628   007732                     l4790:
  1629                           
  1630                           ;stateMachine.c: 166:             if (evento == EV_B_0) {
  1631   007732  504B               	movf	smLoop@evento^0,w,c
  1632   007734  A4D8               	btfss	status,2,c
  1633   007736  EF9F  F03B         	goto	u4561
  1634   00773A  EFA1  F03B         	goto	u4560
  1635   00773E                     u4561:
  1636   00773E  EFAE  F03B         	goto	l4794
  1637   007742                     u4560:
  1638   007742                     
  1639                           ;stateMachine.c: 168:                 setTime(getTime(DAY) - 1, DAY);
  1640   007742  0E03               	movlw	3
  1641   007744  ECC8  F02D         	call	_getTime
  1642   007748  0EFF               	movlw	255
  1643   00774A  2417               	addwf	?_getTime^0,w,c
  1644   00774C  6E1A               	movwf	setTime@newTime^0,c
  1645   00774E  0EFF               	movlw	255
  1646   007750  2018               	addwfc	(?_getTime+1)^0,w,c
  1647   007752  6E1B               	movwf	(setTime@newTime+1)^0,c
  1648   007754  0E03               	movlw	3
  1649   007756  6E1C               	movwf	setTime@index^0,c
  1650   007758  EC4F  F02C         	call	_setTime	;wreg free
  1651   00775C                     l4794:
  1652                           
  1653                           ;stateMachine.c: 170:             if (evento == EV_B_1) {
  1654   00775C  044B               	decf	smLoop@evento^0,w,c
  1655   00775E  A4D8               	btfss	status,2,c
  1656   007760  EFB4  F03B         	goto	u4571
  1657   007764  EFB6  F03B         	goto	u4570
  1658   007768                     u4571:
  1659   007768  EFC3  F03B         	goto	l4798
  1660   00776C                     u4570:
  1661   00776C                     
  1662                           ;stateMachine.c: 171:                 setTime(getTime(DAY) + 1, DAY);
  1663   00776C  0E03               	movlw	3
  1664   00776E  ECC8  F02D         	call	_getTime
  1665   007772  0E01               	movlw	1
  1666   007774  2417               	addwf	?_getTime^0,w,c
  1667   007776  6E1A               	movwf	setTime@newTime^0,c
  1668   007778  0E00               	movlw	0
  1669   00777A  2018               	addwfc	(?_getTime+1)^0,w,c
  1670   00777C  6E1B               	movwf	(setTime@newTime+1)^0,c
  1671   00777E  0E03               	movlw	3
  1672   007780  6E1C               	movwf	setTime@index^0,c
  1673   007782  EC4F  F02C         	call	_setTime	;wreg free
  1674   007786                     l4798:
  1675                           
  1676                           ;stateMachine.c: 173:             if (evento == EV_B_2) {
  1677   007786  0E02               	movlw	2
  1678   007788  184B               	xorwf	smLoop@evento^0,w,c
  1679   00778A  A4D8               	btfss	status,2,c
  1680   00778C  EFCA  F03B         	goto	u4581
  1681   007790  EFCC  F03B         	goto	u4580
  1682   007794                     u4581:
  1683   007794  EFCF  F03B         	goto	l4802
  1684   007798                     u4580:
  1685   007798                     
  1686                           ;stateMachine.c: 174:                 setState(STATE_TEMPOM);
  1687   007798  0E03               	movlw	3
  1688   00779A  EC6C  F026         	call	_setState
  1689   00779E                     l4802:
  1690                           
  1691                           ;stateMachine.c: 177:             if (evento == EV_B_3) {
  1692   00779E  0E03               	movlw	3
  1693   0077A0  184B               	xorwf	smLoop@evento^0,w,c
  1694   0077A2  A4D8               	btfss	status,2,c
  1695   0077A4  EFD6  F03B         	goto	u4591
  1696   0077A8  EFD8  F03B         	goto	u4590
  1697   0077AC                     u4591:
  1698   0077AC  EFDB  F03B         	goto	l4806
  1699   0077B0                     u4590:
  1700   0077B0                     
  1701                           ;stateMachine.c: 178:                 setState(STATE_TEMPOMO);
  1702   0077B0  0E05               	movlw	5
  1703   0077B2  EC6C  F026         	call	_setState
  1704   0077B6                     l4806:
  1705                           
  1706                           ;stateMachine.c: 181:             if (evento == EV_B_4) {
  1707   0077B6  0E04               	movlw	4
  1708   0077B8  184B               	xorwf	smLoop@evento^0,w,c
  1709   0077BA  A4D8               	btfss	status,2,c
  1710   0077BC  EFE2  F03B         	goto	u4601
  1711   0077C0  EFE4  F03B         	goto	u4600
  1712   0077C4                     u4601:
  1713   0077C4  EFAA  F03C         	goto	l4854
  1714   0077C8                     u4600:
  1715   0077C8                     
  1716                           ;stateMachine.c: 182:                 setState(STATE_MAIN);
  1717   0077C8  0E08               	movlw	8
  1718   0077CA  EC6C  F026         	call	_setState
  1719   0077CE  EF45  F03B         	goto	l4766
  1720   0077D2                     l4812:
  1721                           
  1722                           ;stateMachine.c: 190:             if (evento == EV_B_0) {
  1723   0077D2  504B               	movf	smLoop@evento^0,w,c
  1724   0077D4  A4D8               	btfss	status,2,c
  1725   0077D6  EFEF  F03B         	goto	u4611
  1726   0077DA  EFF1  F03B         	goto	u4610
  1727   0077DE                     u4611:
  1728   0077DE  EFFE  F03B         	goto	l4816
  1729   0077E2                     u4610:
  1730   0077E2                     
  1731                           ;stateMachine.c: 192:                 setTime(getTime(MON) - 1, MON);
  1732   0077E2  0E04               	movlw	4
  1733   0077E4  ECC8  F02D         	call	_getTime
  1734   0077E8  0EFF               	movlw	255
  1735   0077EA  2417               	addwf	?_getTime^0,w,c
  1736   0077EC  6E1A               	movwf	setTime@newTime^0,c
  1737   0077EE  0EFF               	movlw	255
  1738   0077F0  2018               	addwfc	(?_getTime+1)^0,w,c
  1739   0077F2  6E1B               	movwf	(setTime@newTime+1)^0,c
  1740   0077F4  0E04               	movlw	4
  1741   0077F6  6E1C               	movwf	setTime@index^0,c
  1742   0077F8  EC4F  F02C         	call	_setTime	;wreg free
  1743   0077FC                     l4816:
  1744                           
  1745                           ;stateMachine.c: 194:             if (evento == EV_B_1) {
  1746   0077FC  044B               	decf	smLoop@evento^0,w,c
  1747   0077FE  A4D8               	btfss	status,2,c
  1748   007800  EF04  F03C         	goto	u4621
  1749   007804  EF06  F03C         	goto	u4620
  1750   007808                     u4621:
  1751   007808  EF13  F03C         	goto	l4820
  1752   00780C                     u4620:
  1753   00780C                     
  1754                           ;stateMachine.c: 195:                 setTime(getTime(MON) + 1, MON);
  1755   00780C  0E04               	movlw	4
  1756   00780E  ECC8  F02D         	call	_getTime
  1757   007812  0E01               	movlw	1
  1758   007814  2417               	addwf	?_getTime^0,w,c
  1759   007816  6E1A               	movwf	setTime@newTime^0,c
  1760   007818  0E00               	movlw	0
  1761   00781A  2018               	addwfc	(?_getTime+1)^0,w,c
  1762   00781C  6E1B               	movwf	(setTime@newTime+1)^0,c
  1763   00781E  0E04               	movlw	4
  1764   007820  6E1C               	movwf	setTime@index^0,c
  1765   007822  EC4F  F02C         	call	_setTime	;wreg free
  1766   007826                     l4820:
  1767                           
  1768                           ;stateMachine.c: 197:             if (evento == EV_B_2) {
  1769   007826  0E02               	movlw	2
  1770   007828  184B               	xorwf	smLoop@evento^0,w,c
  1771   00782A  A4D8               	btfss	status,2,c
  1772   00782C  EF1A  F03C         	goto	u4631
  1773   007830  EF1C  F03C         	goto	u4630
  1774   007834                     u4631:
  1775   007834  EF1F  F03C         	goto	l4824
  1776   007838                     u4630:
  1777   007838                     
  1778                           ;stateMachine.c: 198:                 setState(STATE_TEMPOD);
  1779   007838  0E04               	movlw	4
  1780   00783A  EC6C  F026         	call	_setState
  1781   00783E                     l4824:
  1782                           
  1783                           ;stateMachine.c: 201:             if (evento == EV_B_3) {
  1784   00783E  0E03               	movlw	3
  1785   007840  184B               	xorwf	smLoop@evento^0,w,c
  1786   007842  A4D8               	btfss	status,2,c
  1787   007844  EF26  F03C         	goto	u4641
  1788   007848  EF28  F03C         	goto	u4640
  1789   00784C                     u4641:
  1790   00784C  EF2B  F03C         	goto	l4828
  1791   007850                     u4640:
  1792   007850                     
  1793                           ;stateMachine.c: 202:                 setState(STATE_ALARMEL);
  1794   007850  0E00               	movlw	0
  1795   007852  EC6C  F026         	call	_setState
  1796   007856                     l4828:
  1797                           
  1798                           ;stateMachine.c: 205:             if (evento == EV_B_4) {
  1799   007856  0E04               	movlw	4
  1800   007858  184B               	xorwf	smLoop@evento^0,w,c
  1801   00785A  A4D8               	btfss	status,2,c
  1802   00785C  EF32  F03C         	goto	u4651
  1803   007860  EF34  F03C         	goto	u4650
  1804   007864                     u4651:
  1805   007864  EFAA  F03C         	goto	l4854
  1806   007868                     u4650:
  1807   007868                     
  1808                           ;stateMachine.c: 206:                 setState(STATE_MAIN);
  1809   007868  0E08               	movlw	8
  1810   00786A  EC6C  F026         	call	_setState
  1811   00786E  EF45  F03B         	goto	l4766
  1812   007872                     l4834:
  1813                           
  1814                           ;stateMachine.c: 237:             if (evento == EV_B_4)
  1815   007872  0E04               	movlw	4
  1816   007874  184B               	xorwf	smLoop@evento^0,w,c
  1817   007876  A4D8               	btfss	status,2,c
  1818   007878  EF40  F03C         	goto	u4661
  1819   00787C  EF42  F03C         	goto	u4660
  1820   007880                     u4661:
  1821   007880  EF45  F03C         	goto	l4838
  1822   007884                     u4660:
  1823   007884                     
  1824                           ;stateMachine.c: 238:                 setState(estado_ant);
  1825   007884  5053               	movf	_estado_ant^0,w,c
  1826   007886  EC6C  F026         	call	_setState
  1827   00788A                     l4838:
  1828                           
  1829                           ;stateMachine.c: 240:             if (evento == EV_B_0)
  1830   00788A  504B               	movf	smLoop@evento^0,w,c
  1831   00788C  A4D8               	btfss	status,2,c
  1832   00788E  EF4B  F03C         	goto	u4671
  1833   007892  EF4D  F03C         	goto	u4670
  1834   007896                     u4671:
  1835   007896  EFAA  F03C         	goto	l4854
  1836   00789A                     u4670:
  1837   00789A                     
  1838                           ;stateMachine.c: 241:                 setTime(getTime(MIN) + 1, MIN);
  1839   00789A  0E01               	movlw	1
  1840   00789C  ECC8  F02D         	call	_getTime
  1841   0078A0  0E01               	movlw	1
  1842   0078A2  2417               	addwf	?_getTime^0,w,c
  1843   0078A4  6E1A               	movwf	setTime@newTime^0,c
  1844   0078A6  0E00               	movlw	0
  1845   0078A8  2018               	addwfc	(?_getTime+1)^0,w,c
  1846   0078AA  6E1B               	movwf	(setTime@newTime+1)^0,c
  1847   0078AC  0E01               	movlw	1
  1848   0078AE  6E1C               	movwf	setTime@index^0,c
  1849   0078B0  EC4F  F02C         	call	_setTime	;wreg free
  1850   0078B4  EFAA  F03C         	goto	l4854
  1851   0078B8                     l4844:
  1852                           
  1853                           ;stateMachine.c: 249:             if(t%300 < 150)
  1854   0078B8  C060  F001         	movff	_t,___llmod@dividend
  1855   0078BC  C061  F002         	movff	_t+1,___llmod@dividend+1
  1856   0078C0  C062  F003         	movff	_t+2,___llmod@dividend+2
  1857   0078C4  C063  F004         	movff	_t+3,___llmod@dividend+3
  1858   0078C8  0E2C               	movlw	44
  1859   0078CA  6E05               	movwf	___llmod@divisor^0,c
  1860   0078CC  0E01               	movlw	1
  1861   0078CE  6E06               	movwf	(___llmod@divisor+1)^0,c
  1862   0078D0  0E00               	movlw	0
  1863   0078D2  6E07               	movwf	(___llmod@divisor+2)^0,c
  1864   0078D4  0E00               	movlw	0
  1865   0078D6  6E08               	movwf	(___llmod@divisor+3)^0,c
  1866   0078D8  EC7C  F02A         	call	___llmod	;wreg free
  1867   0078DC  5004               	movf	(?___llmod+3)^0,w,c
  1868   0078DE  1003               	iorwf	(?___llmod+2)^0,w,c
  1869   0078E0  1002               	iorwf	(?___llmod+1)^0,w,c
  1870   0078E2  E107               	bnz	u4681
  1871   0078E4  0E96               	movlw	150
  1872   0078E6  5C01               	subwf	?___llmod^0,w,c
  1873   0078E8  B0D8               	btfsc	status,0,c
  1874   0078EA  EF79  F03C         	goto	u4681
  1875   0078EE  EF7B  F03C         	goto	u4680
  1876   0078F2                     u4681:
  1877   0078F2  EF7E  F03C         	goto	l4848
  1878   0078F6                     u4680:
  1879   0078F6                     
  1880                           ;stateMachine.c: 250:                 LATA = 0xff;
  1881   0078F6  6889               	setf	137,c	;volatile
  1882   0078F8  EFAA  F03C         	goto	l4854
  1883   0078FC                     l4848:
  1884                           
  1885                           ;stateMachine.c: 252:                 LATA = 0x00;
  1886   0078FC  0E00               	movlw	0
  1887   0078FE  6E89               	movwf	137,c	;volatile
  1888   007900  EFAA  F03C         	goto	l4854
  1889   007904                     l4852:
  1890   007904  EC58  F026         	call	_getState	;wreg free
  1891                           
  1892                           ; Switch size 1, requested type "simple"
  1893                           ; Number of cases is 9, Range of values is 0 to 9
  1894                           ; switch strategies available:
  1895                           ; Name         Instructions Cycles
  1896                           ; simple_byte           28    15 (average)
  1897                           ;	Chosen strategy is simple_byte
  1898   007908  0A00               	xorlw	0	; case 0
  1899   00790A  B4D8               	btfsc	status,2,c
  1900   00790C  EF03  F03A         	goto	l4680
  1901   007910  0A01               	xorlw	1	; case 1
  1902   007912  B4D8               	btfsc	status,2,c
  1903   007914  EF5B  F03A         	goto	l4702
  1904   007918  0A03               	xorlw	3	; case 2
  1905   00791A  B4D8               	btfsc	status,2,c
  1906   00791C  EFF7  F03A         	goto	l4746
  1907   007920  0A01               	xorlw	1	; case 3
  1908   007922  B4D8               	btfsc	status,2,c
  1909   007924  EF49  F03B         	goto	l4768
  1910   007928  0A07               	xorlw	7	; case 4
  1911   00792A  B4D8               	btfsc	status,2,c
  1912   00792C  EF99  F03B         	goto	l4790
  1913   007930  0A01               	xorlw	1	; case 5
  1914   007932  B4D8               	btfsc	status,2,c
  1915   007934  EFE9  F03B         	goto	l4812
  1916   007938  0A02               	xorlw	2	; case 7
  1917   00793A  B4D8               	btfsc	status,2,c
  1918   00793C  EFB3  F03A         	goto	l4724
  1919   007940  0A0F               	xorlw	15	; case 8
  1920   007942  B4D8               	btfsc	status,2,c
  1921   007944  EF39  F03C         	goto	l4834
  1922   007948  0A01               	xorlw	1	; case 9
  1923   00794A  B4D8               	btfsc	status,2,c
  1924   00794C  EF5C  F03C         	goto	l4844
  1925   007950  EFAA  F03C         	goto	l4854
  1926   007954                     l4854:
  1927                           
  1928                           ;stateMachine.c: 258:     if (evento == EV_PROT_SERIAL) {
  1929   007954  0E05               	movlw	5
  1930   007956  184B               	xorwf	smLoop@evento^0,w,c
  1931   007958  A4D8               	btfss	status,2,c
  1932   00795A  EFB1  F03C         	goto	u4691
  1933   00795E  EFB3  F03C         	goto	u4690
  1934   007962                     u4691:
  1935   007962  EFF8  F03D         	goto	l4898
  1936   007966                     u4690:
  1937   007966                     
  1938                           ;stateMachine.c: 259:         unsigned char* prot;;stateMachine.c: 260:         prot = g
      +                          etProt();
  1939   007966  EC54  F026         	call	_getProt	;wreg free
  1940   00796A  6E4A               	movwf	smLoop@prot^0,c
  1941                           
  1942                           ;stateMachine.c: 262:         switch (prot[1]) {
  1943   00796C  EFDE  F03D         	goto	l4894
  1944   007970                     l4858:
  1945                           
  1946                           ;stateMachine.c: 266:                     {;stateMachine.c: 267:                        
      +                           int l = (prot[3] - '0') * 100;
  1947   007970  504A               	movf	smLoop@prot^0,w,c
  1948   007972  6ED9               	movwf	fsr2l,c
  1949   007974  6ADA               	clrf	fsr2h,c
  1950   007976  0E03               	movlw	3
  1951   007978  26D9               	addwf	fsr2l,f,c
  1952   00797A  50DF               	movf	indf2,w,c
  1953   00797C  6E3B               	movwf	??_smLoop^0,c
  1954   00797E  0ED0               	movlw	208
  1955   007980  243B               	addwf	??_smLoop^0,w,c
  1956   007982  6E09               	movwf	___wmul@multiplier^0,c
  1957   007984  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1958   007986  0EFF               	movlw	255
  1959   007988  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1960   00798A  0E00               	movlw	0
  1961   00798C  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1962   00798E  0E64               	movlw	100
  1963   007990  6E0B               	movwf	___wmul@multiplicand^0,c
  1964   007992  ECD7  F026         	call	___wmul	;wreg free
  1965   007996  C009  F040         	movff	?___wmul,smLoop@l
  1966   00799A  C00A  F041         	movff	?___wmul+1,smLoop@l+1
  1967                           
  1968                           ;stateMachine.c: 268:                         l += (prot[4] - '0') * 10;
  1969   00799E  504A               	movf	smLoop@prot^0,w,c
  1970   0079A0  6ED9               	movwf	fsr2l,c
  1971   0079A2  6ADA               	clrf	fsr2h,c
  1972   0079A4  0E04               	movlw	4
  1973   0079A6  26D9               	addwf	fsr2l,f,c
  1974   0079A8  50DF               	movf	indf2,w,c
  1975   0079AA  6E3B               	movwf	??_smLoop^0,c
  1976   0079AC  0ED0               	movlw	208
  1977   0079AE  243B               	addwf	??_smLoop^0,w,c
  1978   0079B0  6E09               	movwf	___wmul@multiplier^0,c
  1979   0079B2  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1980   0079B4  0EFF               	movlw	255
  1981   0079B6  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1982   0079B8  0E00               	movlw	0
  1983   0079BA  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1984   0079BC  0E0A               	movlw	10
  1985   0079BE  6E0B               	movwf	___wmul@multiplicand^0,c
  1986   0079C0  ECD7  F026         	call	___wmul	;wreg free
  1987   0079C4  5009               	movf	?___wmul^0,w,c
  1988   0079C6  2640               	addwf	smLoop@l^0,f,c
  1989   0079C8  500A               	movf	(?___wmul+1)^0,w,c
  1990   0079CA  2241               	addwfc	(smLoop@l+1)^0,f,c
  1991   0079CC                     
  1992                           ;stateMachine.c: 269:                         l += (prot[5] - '0') * 1;
  1993   0079CC  504A               	movf	smLoop@prot^0,w,c
  1994   0079CE  6ED9               	movwf	fsr2l,c
  1995   0079D0  6ADA               	clrf	fsr2h,c
  1996   0079D2  0E05               	movlw	5
  1997   0079D4  26D9               	addwf	fsr2l,f,c
  1998   0079D6  50DF               	movf	indf2,w,c
  1999   0079D8  6E3B               	movwf	??_smLoop^0,c
  2000   0079DA  0ED0               	movlw	208
  2001   0079DC  243B               	addwf	??_smLoop^0,w,c
  2002   0079DE  6E3C               	movwf	(??_smLoop+1)^0,c
  2003   0079E0  6A3D               	clrf	(??_smLoop+2)^0,c
  2004   0079E2  0EFF               	movlw	255
  2005   0079E4  223D               	addwfc	(??_smLoop+2)^0,f,c
  2006   0079E6  503C               	movf	(??_smLoop+1)^0,w,c
  2007   0079E8  2640               	addwf	smLoop@l^0,f,c
  2008   0079EA  503D               	movf	(??_smLoop+2)^0,w,c
  2009   0079EC  2241               	addwfc	(smLoop@l+1)^0,f,c
  2010   0079EE                     
  2011                           ;stateMachine.c: 270:                         setAlarmLevel(l, 0);
  2012   0079EE  C040  F018         	movff	smLoop@l,setAlarmLevel@newAlarmLevel
  2013   0079F2  C041  F019         	movff	smLoop@l+1,setAlarmLevel@newAlarmLevel+1
  2014   0079F6  0E00               	movlw	0
  2015   0079F8  6E1A               	movwf	setAlarmLevel@lh^0,c
  2016   0079FA  EC28  F029         	call	_setAlarmLevel	;wreg free
  2017   0079FE                     l4864:
  2018                           
  2019                           ;stateMachine.c: 273:                     {;stateMachine.c: 274:                        
      +                           int h = (prot[3] - '0') * 100;
  2020   0079FE  504A               	movf	smLoop@prot^0,w,c
  2021   007A00  6ED9               	movwf	fsr2l,c
  2022   007A02  6ADA               	clrf	fsr2h,c
  2023   007A04  0E03               	movlw	3
  2024   007A06  26D9               	addwf	fsr2l,f,c
  2025   007A08  50DF               	movf	indf2,w,c
  2026   007A0A  6E3B               	movwf	??_smLoop^0,c
  2027   007A0C  0ED0               	movlw	208
  2028   007A0E  243B               	addwf	??_smLoop^0,w,c
  2029   007A10  6E09               	movwf	___wmul@multiplier^0,c
  2030   007A12  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2031   007A14  0EFF               	movlw	255
  2032   007A16  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2033   007A18  0E00               	movlw	0
  2034   007A1A  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2035   007A1C  0E64               	movlw	100
  2036   007A1E  6E0B               	movwf	___wmul@multiplicand^0,c
  2037   007A20  ECD7  F026         	call	___wmul	;wreg free
  2038   007A24  C009  F042         	movff	?___wmul,smLoop@h
  2039   007A28  C00A  F043         	movff	?___wmul+1,smLoop@h+1
  2040   007A2C                     
  2041                           ;stateMachine.c: 275:                         h += (prot[4] - '0') * 10;
  2042   007A2C  504A               	movf	smLoop@prot^0,w,c
  2043   007A2E  6ED9               	movwf	fsr2l,c
  2044   007A30  6ADA               	clrf	fsr2h,c
  2045   007A32  0E04               	movlw	4
  2046   007A34  26D9               	addwf	fsr2l,f,c
  2047   007A36  50DF               	movf	indf2,w,c
  2048   007A38  6E3B               	movwf	??_smLoop^0,c
  2049   007A3A  0ED0               	movlw	208
  2050   007A3C  243B               	addwf	??_smLoop^0,w,c
  2051   007A3E  6E09               	movwf	___wmul@multiplier^0,c
  2052   007A40  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2053   007A42  0EFF               	movlw	255
  2054   007A44  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2055   007A46  0E00               	movlw	0
  2056   007A48  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2057   007A4A  0E0A               	movlw	10
  2058   007A4C  6E0B               	movwf	___wmul@multiplicand^0,c
  2059   007A4E  ECD7  F026         	call	___wmul	;wreg free
  2060   007A52  5009               	movf	?___wmul^0,w,c
  2061   007A54  2642               	addwf	smLoop@h^0,f,c
  2062   007A56  500A               	movf	(?___wmul+1)^0,w,c
  2063   007A58  2243               	addwfc	(smLoop@h+1)^0,f,c
  2064   007A5A                     
  2065                           ;stateMachine.c: 276:                         h += (prot[5] - '0') * 1;
  2066   007A5A  504A               	movf	smLoop@prot^0,w,c
  2067   007A5C  6ED9               	movwf	fsr2l,c
  2068   007A5E  6ADA               	clrf	fsr2h,c
  2069   007A60  0E05               	movlw	5
  2070   007A62  26D9               	addwf	fsr2l,f,c
  2071   007A64  50DF               	movf	indf2,w,c
  2072   007A66  6E3B               	movwf	??_smLoop^0,c
  2073   007A68  0ED0               	movlw	208
  2074   007A6A  243B               	addwf	??_smLoop^0,w,c
  2075   007A6C  6E3C               	movwf	(??_smLoop+1)^0,c
  2076   007A6E  6A3D               	clrf	(??_smLoop+2)^0,c
  2077   007A70  0EFF               	movlw	255
  2078   007A72  223D               	addwfc	(??_smLoop+2)^0,f,c
  2079   007A74  503C               	movf	(??_smLoop+1)^0,w,c
  2080   007A76  2642               	addwf	smLoop@h^0,f,c
  2081   007A78  503D               	movf	(??_smLoop+2)^0,w,c
  2082   007A7A  2243               	addwfc	(smLoop@h+1)^0,f,c
  2083   007A7C                     
  2084                           ;stateMachine.c: 277:                         setAlarmLevel(h, 1);
  2085   007A7C  C042  F018         	movff	smLoop@h,setAlarmLevel@newAlarmLevel
  2086   007A80  C043  F019         	movff	smLoop@h+1,setAlarmLevel@newAlarmLevel+1
  2087   007A84  0E01               	movlw	1
  2088   007A86  6E1A               	movwf	setAlarmLevel@lh^0,c
  2089   007A88  EC28  F029         	call	_setAlarmLevel	;wreg free
  2090                           
  2091                           ;stateMachine.c: 278:                     };stateMachine.c: 279:                        
      +                           break;
  2092   007A8C  EF60  F03D         	goto	l4876
  2093   007A90                     l4874:
  2094   007A90  504A               	movf	smLoop@prot^0,w,c
  2095   007A92  6ED9               	movwf	fsr2l,c
  2096   007A94  6ADA               	clrf	fsr2h,c
  2097   007A96  0E02               	movlw	2
  2098   007A98  26D9               	addwf	fsr2l,f,c
  2099   007A9A  50DF               	movf	indf2,w,c
  2100                           
  2101                           ; Switch size 1, requested type "simple"
  2102                           ; Number of cases is 4, Range of values is 72 to 108
  2103                           ; switch strategies available:
  2104                           ; Name         Instructions Cycles
  2105                           ; simple_byte           13     7 (average)
  2106                           ;	Chosen strategy is simple_byte
  2107   007A9C  0A48               	xorlw	72	; case 72
  2108   007A9E  B4D8               	btfsc	status,2,c
  2109   007AA0  EFFF  F03C         	goto	l4864
  2110   007AA4  0A04               	xorlw	4	; case 76
  2111   007AA6  B4D8               	btfsc	status,2,c
  2112   007AA8  EFB8  F03C         	goto	l4858
  2113   007AAC  0A24               	xorlw	36	; case 104
  2114   007AAE  B4D8               	btfsc	status,2,c
  2115   007AB0  EFFF  F03C         	goto	l4864
  2116   007AB4  0A04               	xorlw	4	; case 108
  2117   007AB6  B4D8               	btfsc	status,2,c
  2118   007AB8  EFB8  F03C         	goto	l4858
  2119   007ABC  EF60  F03D         	goto	l4876
  2120   007AC0                     l4876:
  2121                           
  2122                           ;stateMachine.c: 282:             {;stateMachine.c: 283:                 int h = (prot[2
      +                          ] - '0') * 10;
  2123   007AC0  504A               	movf	smLoop@prot^0,w,c
  2124   007AC2  6ED9               	movwf	fsr2l,c
  2125   007AC4  6ADA               	clrf	fsr2h,c
  2126   007AC6  0E02               	movlw	2
  2127   007AC8  26D9               	addwf	fsr2l,f,c
  2128   007ACA  50DF               	movf	indf2,w,c
  2129   007ACC  6E3B               	movwf	??_smLoop^0,c
  2130   007ACE  0ED0               	movlw	208
  2131   007AD0  243B               	addwf	??_smLoop^0,w,c
  2132   007AD2  6E09               	movwf	___wmul@multiplier^0,c
  2133   007AD4  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2134   007AD6  0EFF               	movlw	255
  2135   007AD8  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2136   007ADA  0E00               	movlw	0
  2137   007ADC  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2138   007ADE  0E0A               	movlw	10
  2139   007AE0  6E0B               	movwf	___wmul@multiplicand^0,c
  2140   007AE2  ECD7  F026         	call	___wmul	;wreg free
  2141   007AE6  C009  F046         	movff	?___wmul,smLoop@h_537
  2142   007AEA  C00A  F047         	movff	?___wmul+1,smLoop@h_537+1
  2143   007AEE                     
  2144                           ;stateMachine.c: 284:                 h += (prot[3] - '0') * 1;
  2145   007AEE  504A               	movf	smLoop@prot^0,w,c
  2146   007AF0  6ED9               	movwf	fsr2l,c
  2147   007AF2  6ADA               	clrf	fsr2h,c
  2148   007AF4  0E03               	movlw	3
  2149   007AF6  26D9               	addwf	fsr2l,f,c
  2150   007AF8  50DF               	movf	indf2,w,c
  2151   007AFA  6E3B               	movwf	??_smLoop^0,c
  2152   007AFC  0ED0               	movlw	208
  2153   007AFE  243B               	addwf	??_smLoop^0,w,c
  2154   007B00  6E3C               	movwf	(??_smLoop+1)^0,c
  2155   007B02  6A3D               	clrf	(??_smLoop+2)^0,c
  2156   007B04  0EFF               	movlw	255
  2157   007B06  223D               	addwfc	(??_smLoop+2)^0,f,c
  2158   007B08  503C               	movf	(??_smLoop+1)^0,w,c
  2159   007B0A  2646               	addwf	smLoop@h_537^0,f,c
  2160   007B0C  503D               	movf	(??_smLoop+2)^0,w,c
  2161   007B0E  2247               	addwfc	(smLoop@h_537+1)^0,f,c
  2162   007B10                     
  2163                           ;stateMachine.c: 286:                 if (h <= 23)
  2164   007B10  BE47               	btfsc	(smLoop@h_537+1)^0,7,c
  2165   007B12  EF96  F03D         	goto	u4700
  2166   007B16  5047               	movf	(smLoop@h_537+1)^0,w,c
  2167   007B18  E107               	bnz	u4701
  2168   007B1A  0E18               	movlw	24
  2169   007B1C  5C46               	subwf	smLoop@h_537^0,w,c
  2170   007B1E  B0D8               	btfsc	status,0,c
  2171   007B20  EF94  F03D         	goto	u4701
  2172   007B24  EF96  F03D         	goto	u4700
  2173   007B28                     u4701:
  2174   007B28  EF9E  F03D         	goto	l4884
  2175   007B2C                     u4700:
  2176   007B2C                     
  2177                           ;stateMachine.c: 287:                     setTime(h, HOU);
  2178   007B2C  C046  F01A         	movff	smLoop@h_537,setTime@newTime
  2179   007B30  C047  F01B         	movff	smLoop@h_537+1,setTime@newTime+1
  2180   007B34  0E02               	movlw	2
  2181   007B36  6E1C               	movwf	setTime@index^0,c
  2182   007B38  EC4F  F02C         	call	_setTime	;wreg free
  2183   007B3C                     l4884:
  2184                           
  2185                           ;stateMachine.c: 289:                 int m = (prot[4] - '0') * 10;
  2186   007B3C  504A               	movf	smLoop@prot^0,w,c
  2187   007B3E  6ED9               	movwf	fsr2l,c
  2188   007B40  6ADA               	clrf	fsr2h,c
  2189   007B42  0E04               	movlw	4
  2190   007B44  26D9               	addwf	fsr2l,f,c
  2191   007B46  50DF               	movf	indf2,w,c
  2192   007B48  6E3B               	movwf	??_smLoop^0,c
  2193   007B4A  0ED0               	movlw	208
  2194   007B4C  243B               	addwf	??_smLoop^0,w,c
  2195   007B4E  6E09               	movwf	___wmul@multiplier^0,c
  2196   007B50  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2197   007B52  0EFF               	movlw	255
  2198   007B54  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2199   007B56  0E00               	movlw	0
  2200   007B58  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2201   007B5A  0E0A               	movlw	10
  2202   007B5C  6E0B               	movwf	___wmul@multiplicand^0,c
  2203   007B5E  ECD7  F026         	call	___wmul	;wreg free
  2204   007B62  C009  F048         	movff	?___wmul,smLoop@m
  2205   007B66  C00A  F049         	movff	?___wmul+1,smLoop@m+1
  2206   007B6A                     
  2207                           ;stateMachine.c: 290:                 m += (prot[5] - '0') * 1;
  2208   007B6A  504A               	movf	smLoop@prot^0,w,c
  2209   007B6C  6ED9               	movwf	fsr2l,c
  2210   007B6E  6ADA               	clrf	fsr2h,c
  2211   007B70  0E05               	movlw	5
  2212   007B72  26D9               	addwf	fsr2l,f,c
  2213   007B74  50DF               	movf	indf2,w,c
  2214   007B76  6E3B               	movwf	??_smLoop^0,c
  2215   007B78  0ED0               	movlw	208
  2216   007B7A  243B               	addwf	??_smLoop^0,w,c
  2217   007B7C  6E3C               	movwf	(??_smLoop+1)^0,c
  2218   007B7E  6A3D               	clrf	(??_smLoop+2)^0,c
  2219   007B80  0EFF               	movlw	255
  2220   007B82  223D               	addwfc	(??_smLoop+2)^0,f,c
  2221   007B84  503C               	movf	(??_smLoop+1)^0,w,c
  2222   007B86  2648               	addwf	smLoop@m^0,f,c
  2223   007B88  503D               	movf	(??_smLoop+2)^0,w,c
  2224   007B8A  2249               	addwfc	(smLoop@m+1)^0,f,c
  2225   007B8C                     
  2226                           ;stateMachine.c: 292:                 if (m <= 59)
  2227   007B8C  BE49               	btfsc	(smLoop@m+1)^0,7,c
  2228   007B8E  EFD4  F03D         	goto	u4710
  2229   007B92  5049               	movf	(smLoop@m+1)^0,w,c
  2230   007B94  E107               	bnz	u4711
  2231   007B96  0E3C               	movlw	60
  2232   007B98  5C48               	subwf	smLoop@m^0,w,c
  2233   007B9A  B0D8               	btfsc	status,0,c
  2234   007B9C  EFD2  F03D         	goto	u4711
  2235   007BA0  EFD4  F03D         	goto	u4710
  2236   007BA4                     u4711:
  2237   007BA4  EFF6  F03D         	goto	l4896
  2238   007BA8                     u4710:
  2239   007BA8                     
  2240                           ;stateMachine.c: 293:                     setTime(m, MIN);
  2241   007BA8  C048  F01A         	movff	smLoop@m,setTime@newTime
  2242   007BAC  C049  F01B         	movff	smLoop@m+1,setTime@newTime+1
  2243   007BB0  0E01               	movlw	1
  2244   007BB2  6E1C               	movwf	setTime@index^0,c
  2245   007BB4  EC4F  F02C         	call	_setTime	;wreg free
  2246   007BB8  EFF6  F03D         	goto	l4896
  2247   007BBC                     l4894:
  2248   007BBC  504A               	movf	smLoop@prot^0,w,c
  2249   007BBE  6ED9               	movwf	fsr2l,c
  2250   007BC0  6ADA               	clrf	fsr2h,c
  2251   007BC2  0E01               	movlw	1
  2252   007BC4  26D9               	addwf	fsr2l,f,c
  2253   007BC6  50DF               	movf	indf2,w,c
  2254                           
  2255                           ; Switch size 1, requested type "simple"
  2256                           ; Number of cases is 4, Range of values is 72 to 116
  2257                           ; switch strategies available:
  2258                           ; Name         Instructions Cycles
  2259                           ; simple_byte           13     7 (average)
  2260                           ;	Chosen strategy is simple_byte
  2261   007BC8  0A48               	xorlw	72	; case 72
  2262   007BCA  B4D8               	btfsc	status,2,c
  2263   007BCC  EF60  F03D         	goto	l4876
  2264   007BD0  0A1C               	xorlw	28	; case 84
  2265   007BD2  B4D8               	btfsc	status,2,c
  2266   007BD4  EF48  F03D         	goto	l4874
  2267   007BD8  0A3C               	xorlw	60	; case 104
  2268   007BDA  B4D8               	btfsc	status,2,c
  2269   007BDC  EF60  F03D         	goto	l4876
  2270   007BE0  0A1C               	xorlw	28	; case 116
  2271   007BE2  B4D8               	btfsc	status,2,c
  2272   007BE4  EF48  F03D         	goto	l4874
  2273   007BE8  EFF6  F03D         	goto	l4896
  2274   007BEC                     l4896:
  2275                           
  2276                           ;stateMachine.c: 299:         resetProt();
  2277   007BEC  ECAE  F027         	call	_resetProt	;wreg free
  2278   007BF0                     l4898:
  2279                           
  2280                           ;stateMachine.c: 303:     int temp = getTemp();
  2281   007BF0  EC60  F026         	call	_getTemp	;wreg free
  2282   007BF4  C001  F044         	movff	?_getTemp,smLoop@temp
  2283   007BF8  C002  F045         	movff	?_getTemp+1,smLoop@temp+1
  2284   007BFC                     
  2285                           ;stateMachine.c: 305:     if(getState() != STATE_ALERTA && (temp < getAlarmLevel(0) || t
      +                          emp > getAlarmLevel(1)))
  2286   007BFC  EC58  F026         	call	_getState	;wreg free
  2287   007C00  0A09               	xorlw	9
  2288   007C02  B4D8               	btfsc	status,2,c
  2289   007C04  EF06  F03E         	goto	u4721
  2290   007C08  EF08  F03E         	goto	u4720
  2291   007C0C                     u4721:
  2292   007C0C  EF35  F03E         	goto	l696
  2293   007C10                     u4720:
  2294   007C10  0E00               	movlw	0
  2295   007C12  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2296   007C14  0E00               	movlw	0
  2297   007C16  6E01               	movwf	getAlarmLevel@lh^0,c
  2298   007C18  EC53  F027         	call	_getAlarmLevel	;wreg free
  2299   007C1C  5001               	movf	?_getAlarmLevel^0,w,c
  2300   007C1E  5C44               	subwf	smLoop@temp^0,w,c
  2301   007C20  5045               	movf	(smLoop@temp+1)^0,w,c
  2302   007C22  0A80               	xorlw	128
  2303   007C24  6E3B               	movwf	??_smLoop^0,c
  2304   007C26  5002               	movf	(?_getAlarmLevel+1)^0,w,c
  2305   007C28  0A80               	xorlw	128
  2306   007C2A  583B               	subwfb	??_smLoop^0,w,c
  2307   007C2C  A0D8               	btfss	status,0,c
  2308   007C2E  EF1B  F03E         	goto	u4731
  2309   007C32  EF1D  F03E         	goto	u4730
  2310   007C36                     u4731:
  2311   007C36  EF32  F03E         	goto	l4906
  2312   007C3A                     u4730:
  2313   007C3A  0E00               	movlw	0
  2314   007C3C  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2315   007C3E  0E01               	movlw	1
  2316   007C40  6E01               	movwf	getAlarmLevel@lh^0,c
  2317   007C42  EC53  F027         	call	_getAlarmLevel	;wreg free
  2318   007C46  5044               	movf	smLoop@temp^0,w,c
  2319   007C48  5C01               	subwf	?_getAlarmLevel^0,w,c
  2320   007C4A  5002               	movf	(?_getAlarmLevel+1)^0,w,c
  2321   007C4C  0A80               	xorlw	128
  2322   007C4E  6E3B               	movwf	??_smLoop^0,c
  2323   007C50  5045               	movf	(smLoop@temp+1)^0,w,c
  2324   007C52  0A80               	xorlw	128
  2325   007C54  583B               	subwfb	??_smLoop^0,w,c
  2326   007C56  B0D8               	btfsc	status,0,c
  2327   007C58  EF30  F03E         	goto	u4741
  2328   007C5C  EF32  F03E         	goto	u4740
  2329   007C60                     u4741:
  2330   007C60  EF35  F03E         	goto	l696
  2331   007C64                     u4740:
  2332   007C64                     l4906:
  2333                           
  2334                           ;stateMachine.c: 306:     {;stateMachine.c: 307:         setState(STATE_ALERTA);
  2335   007C64  0E09               	movlw	9
  2336   007C66  EC6C  F026         	call	_setState
  2337   007C6A                     l696:
  2338                           
  2339                           ;stateMachine.c: 311:     outputPrint(getState(), getLanguage());
  2340   007C6A  EC52  F026         	call	_getLanguage	;wreg free
  2341   007C6E  6E3B               	movwf	??_smLoop^0,c
  2342   007C70  503B               	movf	??_smLoop^0,w,c
  2343   007C72  6E3E               	movwf	_smLoop$1478^0,c
  2344   007C74  6A3F               	clrf	(_smLoop$1478+1)^0,c
  2345   007C76                     
  2346                           ;stateMachine.c: 311:     outputPrint(getState(), getLanguage());
  2347   007C76  EC58  F026         	call	_getState	;wreg free
  2348   007C7A  6E3B               	movwf	??_smLoop^0,c
  2349   007C7C  503B               	movf	??_smLoop^0,w,c
  2350   007C7E  6E21               	movwf	outputPrint@numTela^0,c
  2351   007C80  6A22               	clrf	(outputPrint@numTela+1)^0,c
  2352   007C82  C03E  F023         	movff	_smLoop$1478,outputPrint@idioma
  2353   007C86  C03F  F024         	movff	_smLoop$1478+1,outputPrint@idioma+1
  2354   007C8A  EC3C  F036         	call	_outputPrint	;wreg free
  2355   007C8E  0012               	return		;funcret
  2356   007C90                     __end_of_smLoop:
  2357                           	callstack 0
  2358                           
  2359 ;; *************** function _setTime *****************
  2360 ;; Defined at:
  2361 ;;		line 76 in file "var.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  newTime         2   25[COMRAM] int 
  2364 ;;  index           1   27[COMRAM] unsigned char 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2376 ;;      Params:         3       0       0       0       0       0       0       0       0
  2377 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2379 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2380 ;;Total ram usage:        3 bytes
  2381 ;; Hardware stack levels used: 1
  2382 ;; Hardware stack levels required when called: 5
  2383 ;; This function calls:
  2384 ;;		_dec2bcd
  2385 ;;		_dsWriteData
  2386 ;; This function is called by:
  2387 ;;		_smLoop
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text2
  2392   00589E                     __ptext2:
  2393                           	callstack 0
  2394   00589E                     _setTime:
  2395                           	callstack 24
  2396   00589E                     
  2397                           ;var.c: 77:     switch(index)
  2398   00589E  EFAB  F02C         	goto	l4568
  2399   0058A2                     l4542:
  2400                           
  2401                           ;	Return value of _setTime is never used
  2402   0058A2  0E00               	movlw	0
  2403   0058A4  6E16               	movwf	(dsWriteData@address+1)^0,c
  2404   0058A6  0E00               	movlw	0
  2405   0058A8  6E15               	movwf	dsWriteData@address^0,c
  2406   0058AA  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2407   0058AE  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2408   0058B2  ECD3  F029         	call	_dec2bcd	;wreg free
  2409   0058B6  500F               	movf	?_dec2bcd^0,w,c
  2410   0058B8  EC97  F027         	call	_dsWriteData
  2411   0058BC  EFC6  F02C         	goto	l786
  2412   0058C0                     l4546:
  2413                           
  2414                           ;	Return value of _setTime is never used
  2415   0058C0  0E00               	movlw	0
  2416   0058C2  6E16               	movwf	(dsWriteData@address+1)^0,c
  2417   0058C4  0E01               	movlw	1
  2418   0058C6  6E15               	movwf	dsWriteData@address^0,c
  2419   0058C8  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2420   0058CC  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2421   0058D0  ECD3  F029         	call	_dec2bcd	;wreg free
  2422   0058D4  500F               	movf	?_dec2bcd^0,w,c
  2423   0058D6  EC97  F027         	call	_dsWriteData
  2424   0058DA  EFC6  F02C         	goto	l786
  2425   0058DE                     l4550:
  2426                           
  2427                           ;	Return value of _setTime is never used
  2428   0058DE  0E00               	movlw	0
  2429   0058E0  6E16               	movwf	(dsWriteData@address+1)^0,c
  2430   0058E2  0E02               	movlw	2
  2431   0058E4  6E15               	movwf	dsWriteData@address^0,c
  2432   0058E6  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2433   0058EA  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2434   0058EE  ECD3  F029         	call	_dec2bcd	;wreg free
  2435   0058F2  500F               	movf	?_dec2bcd^0,w,c
  2436   0058F4  EC97  F027         	call	_dsWriteData
  2437   0058F8  EFC6  F02C         	goto	l786
  2438   0058FC                     l4554:
  2439                           
  2440                           ;	Return value of _setTime is never used
  2441   0058FC  0E00               	movlw	0
  2442   0058FE  6E16               	movwf	(dsWriteData@address+1)^0,c
  2443   005900  0E04               	movlw	4
  2444   005902  6E15               	movwf	dsWriteData@address^0,c
  2445   005904  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2446   005908  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2447   00590C  ECD3  F029         	call	_dec2bcd	;wreg free
  2448   005910  500F               	movf	?_dec2bcd^0,w,c
  2449   005912  EC97  F027         	call	_dsWriteData
  2450   005916  EFC6  F02C         	goto	l786
  2451   00591A                     l4558:
  2452                           
  2453                           ;	Return value of _setTime is never used
  2454   00591A  0E00               	movlw	0
  2455   00591C  6E16               	movwf	(dsWriteData@address+1)^0,c
  2456   00591E  0E05               	movlw	5
  2457   005920  6E15               	movwf	dsWriteData@address^0,c
  2458   005922  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2459   005926  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2460   00592A  ECD3  F029         	call	_dec2bcd	;wreg free
  2461   00592E  500F               	movf	?_dec2bcd^0,w,c
  2462   005930  EC97  F027         	call	_dsWriteData
  2463   005934  EFC6  F02C         	goto	l786
  2464   005938                     l4562:
  2465                           
  2466                           ;	Return value of _setTime is never used
  2467   005938  0E00               	movlw	0
  2468   00593A  6E16               	movwf	(dsWriteData@address+1)^0,c
  2469   00593C  0E06               	movlw	6
  2470   00593E  6E15               	movwf	dsWriteData@address^0,c
  2471   005940  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2472   005944  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2473   005948  ECD3  F029         	call	_dec2bcd	;wreg free
  2474   00594C  500F               	movf	?_dec2bcd^0,w,c
  2475   00594E  EC97  F027         	call	_dsWriteData
  2476   005952  EFC6  F02C         	goto	l786
  2477   005956                     l4568:
  2478   005956  501C               	movf	setTime@index^0,w,c
  2479                           
  2480                           ; Switch size 1, requested type "simple"
  2481                           ; Number of cases is 6, Range of values is 0 to 5
  2482                           ; switch strategies available:
  2483                           ; Name         Instructions Cycles
  2484                           ; simple_byte           19    10 (average)
  2485                           ;	Chosen strategy is simple_byte
  2486   005958  0A00               	xorlw	0	; case 0
  2487   00595A  B4D8               	btfsc	status,2,c
  2488   00595C  EF51  F02C         	goto	l4542
  2489   005960  0A01               	xorlw	1	; case 1
  2490   005962  B4D8               	btfsc	status,2,c
  2491   005964  EF60  F02C         	goto	l4546
  2492   005968  0A03               	xorlw	3	; case 2
  2493   00596A  B4D8               	btfsc	status,2,c
  2494   00596C  EF6F  F02C         	goto	l4550
  2495   005970  0A01               	xorlw	1	; case 3
  2496   005972  B4D8               	btfsc	status,2,c
  2497   005974  EF7E  F02C         	goto	l4554
  2498   005978  0A07               	xorlw	7	; case 4
  2499   00597A  B4D8               	btfsc	status,2,c
  2500   00597C  EF8D  F02C         	goto	l4558
  2501   005980  0A01               	xorlw	1	; case 5
  2502   005982  B4D8               	btfsc	status,2,c
  2503   005984  EF9C  F02C         	goto	l4562
  2504   005988  EFC6  F02C         	goto	l786
  2505   00598C                     l786:
  2506   00598C  0012               	return		;funcret
  2507   00598E                     __end_of_setTime:
  2508                           	callstack 0
  2509                           
  2510 ;; *************** function _resetProt *****************
  2511 ;; Defined at:
  2512 ;;		line 139 in file "var.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  i               1    0[COMRAM] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      void 
  2519 ;; Registers used:
  2520 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2526 ;;      Params:         0       0       0       0       0       0       0       0       0
  2527 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2528 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2529 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2530 ;;Total ram usage:        1 bytes
  2531 ;; Hardware stack levels used: 1
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		_smLoop
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text3
  2540   004F5C                     __ptext3:
  2541                           	callstack 0
  2542   004F5C                     _resetProt:
  2543                           	callstack 29
  2544   004F5C                     
  2545                           ;var.c: 141:     char i = 0;
  2546   004F5C  0E00               	movlw	0
  2547   004F5E  6E01               	movwf	resetProt@i^0,c
  2548                           
  2549                           ;var.c: 142:     while (i < 6)
  2550   004F60  EFB8  F027         	goto	l4580
  2551   004F64                     l4576:
  2552                           
  2553                           ;var.c: 143:     {;var.c: 144:         prot[i] = 0;
  2554   004F64  5001               	movf	resetProt@i^0,w,c
  2555   004F66  0FBC               	addlw	low _prot
  2556   004F68  6ED9               	movwf	fsr2l,c
  2557   004F6A  6ADA               	clrf	fsr2h,c
  2558   004F6C  6ADF               	clrf	indf2,c
  2559   004F6E                     
  2560                           ;var.c: 145:         i++;
  2561   004F6E  2A01               	incf	resetProt@i^0,f,c
  2562   004F70                     l4580:
  2563                           
  2564                           ;var.c: 142:     while (i < 6)
  2565   004F70  0E05               	movlw	5
  2566   004F72  6401               	cpfsgt	resetProt@i^0,c
  2567   004F74  EFBE  F027         	goto	u4151
  2568   004F78  EFC0  F027         	goto	u4150
  2569   004F7C                     u4151:
  2570   004F7C  EFB2  F027         	goto	l4576
  2571   004F80                     u4150:
  2572   004F80                     
  2573                           ;var.c: 147:     prot_ready = 0;
  2574   004F80  0E00               	movlw	0
  2575   004F82  6E54               	movwf	_prot_ready^0,c
  2576                           
  2577                           ;var.c: 148:     index = 0;
  2578   004F84  0E00               	movlw	0
  2579   004F86  6E4E               	movwf	_index^0,c
  2580   004F88  0012               	return		;funcret
  2581   004F8A                     __end_of_resetProt:
  2582                           	callstack 0
  2583                           
  2584 ;; *************** function _readTemp *****************
  2585 ;; Defined at:
  2586 ;;		line 155 in file "var.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  j               1   57[COMRAM] unsigned char 
  2591 ;;  tempT           2   55[COMRAM] int 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      void 
  2594 ;; Registers used:
  2595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2601 ;;      Params:         0       0       0       0       0       0       0       0       0
  2602 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2603 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2604 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2605 ;;Total ram usage:        5 bytes
  2606 ;; Hardware stack levels used: 1
  2607 ;; Hardware stack levels required when called: 1
  2608 ;; This function calls:
  2609 ;;		___awdiv
  2610 ;;		___flmul
  2611 ;;		___fltol
  2612 ;;		___xxtofl
  2613 ;;		_adcRead
  2614 ;; This function is called by:
  2615 ;;		_smLoop
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text4
  2620   0057BC                     __ptext4:
  2621                           	callstack 0
  2622   0057BC                     _readTemp:
  2623                           	callstack 28
  2624   0057BC                     
  2625                           ;var.c: 157:     t[i++] = (adcRead() - 230) * ((float)100/77);
  2626   0057BC  0ED8               	movlw	216
  2627   0057BE  6E17               	movwf	___flmul@a^0,c
  2628   0057C0  0E3B               	movlw	59
  2629   0057C2  6E18               	movwf	(___flmul@a+1)^0,c
  2630   0057C4  0EA6               	movlw	166
  2631   0057C6  6E19               	movwf	(___flmul@a+2)^0,c
  2632   0057C8  0E3F               	movlw	63
  2633   0057CA  6E1A               	movwf	(___flmul@a+3)^0,c
  2634   0057CC  EC29  F028         	call	_adcRead	;wreg free
  2635   0057D0  0E1A               	movlw	26
  2636   0057D2  2401               	addwf	?_adcRead^0,w,c
  2637   0057D4  6E36               	movwf	??_readTemp^0,c
  2638   0057D6  0EFF               	movlw	255
  2639   0057D8  2002               	addwfc	(?_adcRead+1)^0,w,c
  2640   0057DA  6E37               	movwf	(??_readTemp+1)^0,c
  2641   0057DC  C036  F005         	movff	??_readTemp,___xxtofl@val
  2642   0057E0  C037  F006         	movff	??_readTemp+1,___xxtofl@val+1
  2643   0057E4  0E00               	movlw	0
  2644   0057E6  BE06               	btfsc	(___xxtofl@val+1)^0,7,c
  2645   0057E8  0EFF               	movlw	-1
  2646   0057EA  6E07               	movwf	(___xxtofl@val+2)^0,c
  2647   0057EC  6E08               	movwf	(___xxtofl@val+3)^0,c
  2648   0057EE  0E01               	movlw	1
  2649   0057F0  EC07  F02F         	call	___xxtofl
  2650   0057F4  C005  F013         	movff	?___xxtofl,___flmul@b
  2651   0057F8  C006  F014         	movff	?___xxtofl+1,___flmul@b+1
  2652   0057FC  C007  F015         	movff	?___xxtofl+2,___flmul@b+2
  2653   005800  C008  F016         	movff	?___xxtofl+3,___flmul@b+3
  2654   005804  EC27  F034         	call	___flmul	;wreg free
  2655   005808  C013  F02C         	movff	?___flmul,___fltol@f1
  2656   00580C  C014  F02D         	movff	?___flmul+1,___fltol@f1+1
  2657   005810  C015  F02E         	movff	?___flmul+2,___fltol@f1+2
  2658   005814  C016  F02F         	movff	?___flmul+3,___fltol@f1+3
  2659   005818  EC45  F02D         	call	___fltol	;wreg free
  2660   00581C  504C               	movf	_i^0,w,c
  2661   00581E  0D02               	mullw	2
  2662   005820  50F3               	movf	243,w,c
  2663   005822  0F60               	addlw	low _t
  2664   005824  6ED9               	movwf	fsr2l,c
  2665   005826  6ADA               	clrf	fsr2h,c
  2666   005828  C02C  FFDE         	movff	?___fltol,postinc2
  2667   00582C  C02D  FFDD         	movff	?___fltol+1,postdec2
  2668   005830  2A4C               	incf	_i^0,f,c
  2669   005832                     
  2670                           ;var.c: 159:     int tempT = 0;
  2671   005832  0E00               	movlw	0
  2672   005834  6E39               	movwf	(readTemp@tempT+1)^0,c
  2673   005836  0E00               	movlw	0
  2674   005838  6E38               	movwf	readTemp@tempT^0,c
  2675   00583A                     
  2676                           ;var.c: 160:     for(char j = 0; j < 33; j++)
  2677   00583A  0E00               	movlw	0
  2678   00583C  6E3A               	movwf	readTemp@j^0,c
  2679   00583E                     l4496:
  2680                           
  2681                           ;var.c: 161:     {;var.c: 162:         tempT += t[j];
  2682   00583E  503A               	movf	readTemp@j^0,w,c
  2683   005840  0D02               	mullw	2
  2684   005842  50F3               	movf	243,w,c
  2685   005844  0F60               	addlw	low _t
  2686   005846  6ED9               	movwf	fsr2l,c
  2687   005848  6ADA               	clrf	fsr2h,c
  2688   00584A  50DE               	movf	postinc2,w,c
  2689   00584C  2638               	addwf	readTemp@tempT^0,f,c
  2690   00584E  50DD               	movf	postdec2,w,c
  2691   005850  2239               	addwfc	(readTemp@tempT+1)^0,f,c
  2692   005852                     
  2693                           ;var.c: 163:     }
  2694   005852  2A3A               	incf	readTemp@j^0,f,c
  2695   005854  0E20               	movlw	32
  2696   005856  643A               	cpfsgt	readTemp@j^0,c
  2697   005858  EF30  F02C         	goto	u4131
  2698   00585C  EF32  F02C         	goto	u4130
  2699   005860                     u4131:
  2700   005860  EF1F  F02C         	goto	l4496
  2701   005864                     u4130:
  2702   005864                     
  2703                           ;var.c: 164:     tempT /= 33;
  2704   005864  C038  F001         	movff	readTemp@tempT,___awdiv@dividend
  2705   005868  C039  F002         	movff	readTemp@tempT+1,___awdiv@dividend+1
  2706   00586C  0E00               	movlw	0
  2707   00586E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2708   005870  0E21               	movlw	33
  2709   005872  6E03               	movwf	___awdiv@divisor^0,c
  2710   005874  EC18  F02B         	call	___awdiv	;wreg free
  2711   005878  C001  F038         	movff	?___awdiv,readTemp@tempT
  2712   00587C  C002  F039         	movff	?___awdiv+1,readTemp@tempT+1
  2713   005880                     
  2714                           ;var.c: 166:     if(i >= 33){
  2715   005880  0E20               	movlw	32
  2716   005882  644C               	cpfsgt	_i^0,c
  2717   005884  EF46  F02C         	goto	u4141
  2718   005888  EF48  F02C         	goto	u4140
  2719   00588C                     u4141:
  2720   00588C  EF4E  F02C         	goto	l830
  2721   005890                     u4140:
  2722   005890                     
  2723                           ;var.c: 167:         i = 0;
  2724   005890  0E00               	movlw	0
  2725   005892  6E4C               	movwf	_i^0,c
  2726   005894                     
  2727                           ;var.c: 168:         temp = tempT;
  2728   005894  C038  F0AD         	movff	readTemp@tempT,_temp
  2729   005898  C039  F0AE         	movff	readTemp@tempT+1,_temp+1
  2730   00589C                     l830:
  2731   00589C  0012               	return		;funcret
  2732   00589E                     __end_of_readTemp:
  2733                           	callstack 0
  2734                           
  2735 ;; *************** function _adcRead *****************
  2736 ;; Defined at:
  2737 ;;		line 36 in file "adc.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  ADvalor         2    2[COMRAM] unsigned int 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  2    0[COMRAM] int 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2751 ;;      Params:         2       0       0       0       0       0       0       0       0
  2752 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2754 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2755 ;;Total ram usage:        4 bytes
  2756 ;; Hardware stack levels used: 1
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_readTemp
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text5
  2765   005052                     __ptext5:
  2766                           	callstack 0
  2767   005052                     _adcRead:
  2768                           	callstack 28
  2769   005052                     
  2770                           ;adc.c: 38:  unsigned int ADvalor;;adc.c: 39:     (*(volatile __near unsigned char*)0xFC
      +                          1) = 0b00001001;
  2771   005052  0E09               	movlw	9
  2772   005054  6EC1               	movwf	193,c	;volatile
  2773   005056                     
  2774                           ;adc.c: 40:  (*(volatile __near unsigned char*)0xFC2) |= 0b00000010;
  2775   005056  82C2               	bsf	194,1,c	;volatile
  2776   005058                     l6:
  2777   005058  B2C2               	btfsc	194,1,c	;volatile
  2778   00505A  EF31  F028         	goto	u3361
  2779   00505E  EF33  F028         	goto	u3360
  2780   005062                     u3361:
  2781   005062  EF2C  F028         	goto	l6
  2782   005066                     u3360:
  2783   005066                     
  2784                           ;adc.c: 44:  ADvalor = (*(volatile __near unsigned char*)0xFC4) ;
  2785   005066  CFC4 F003          	movff	4036,adcRead@ADvalor	;volatile
  2786   00506A  6A04               	clrf	(adcRead@ADvalor+1)^0,c
  2787   00506C                     
  2788                           ;adc.c: 45:  ADvalor <<= 8;
  2789   00506C  5003               	movf	adcRead@ADvalor^0,w,c
  2790   00506E  6E04               	movwf	(adcRead@ADvalor+1)^0,c
  2791   005070  6A03               	clrf	adcRead@ADvalor^0,c
  2792   005072                     
  2793                           ;adc.c: 46:  ADvalor += (*(volatile __near unsigned char*)0xFC3);
  2794   005072  50C3               	movf	195,w,c	;volatile
  2795   005074  2603               	addwf	adcRead@ADvalor^0,f,c
  2796   005076  0E00               	movlw	0
  2797   005078  2204               	addwfc	(adcRead@ADvalor+1)^0,f,c
  2798   00507A                     
  2799                           ;adc.c: 47:     (*(volatile __near unsigned char*)0xFC1) = 0b00001111;
  2800   00507A  0E0F               	movlw	15
  2801   00507C  6EC1               	movwf	193,c	;volatile
  2802   00507E                     
  2803                           ;adc.c: 48:  return ADvalor;
  2804   00507E  C003  F001         	movff	adcRead@ADvalor,?_adcRead
  2805   005082  C004  F002         	movff	adcRead@ADvalor+1,?_adcRead+1
  2806   005086  0012               	return		;funcret
  2807   005088                     __end_of_adcRead:
  2808                           	callstack 0
  2809                           
  2810 ;; *************** function ___xxtofl *****************
  2811 ;; Defined at:
  2812 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\xxtofl.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  sign            1    wreg     unsigned char 
  2815 ;;  val             4    4[COMRAM] long 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  sign            1   12[COMRAM] unsigned char 
  2818 ;;  arg             4   14[COMRAM] unsigned long 
  2819 ;;  exp             1   13[COMRAM] unsigned char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  4    4[COMRAM] unsigned char 
  2822 ;; Registers used:
  2823 ;;		wreg, status,2, status,0
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2829 ;;      Params:         4       0       0       0       0       0       0       0       0
  2830 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2831 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2832 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2833 ;;Total ram usage:       14 bytes
  2834 ;; Hardware stack levels used: 1
  2835 ;; This function calls:
  2836 ;;		Nothing
  2837 ;; This function is called by:
  2838 ;;		_readTemp
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text6
  2843   005E0E                     __ptext6:
  2844                           	callstack 0
  2845   005E0E                     ___xxtofl:
  2846                           	callstack 28
  2847                           
  2848                           ;incstack = 0
  2849                           ;___xxtofl@sign stored from wreg
  2850   005E0E  6E0D               	movwf	___xxtofl@sign^0,c
  2851   005E10  500D               	movf	___xxtofl@sign^0,w,c
  2852   005E12  B4D8               	btfsc	status,2,c
  2853   005E14  EF0E  F02F         	goto	u3751
  2854   005E18  EF10  F02F         	goto	u3750
  2855   005E1C                     u3751:
  2856   005E1C  EF32  F02F         	goto	l1488
  2857   005E20                     u3750:
  2858   005E20  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  2859   005E22  EF17  F02F         	goto	u3760
  2860   005E26  EF15  F02F         	goto	u3761
  2861   005E2A                     u3761:
  2862   005E2A  EF32  F02F         	goto	l1488
  2863   005E2E                     u3760:
  2864   005E2E  C005  F009         	movff	___xxtofl@val,??___xxtofl
  2865   005E32  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  2866   005E36  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  2867   005E3A  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  2868   005E3E  1E09               	comf	??___xxtofl^0,f,c
  2869   005E40  1E0A               	comf	(??___xxtofl+1)^0,f,c
  2870   005E42  1E0B               	comf	(??___xxtofl+2)^0,f,c
  2871   005E44  1E0C               	comf	(??___xxtofl+3)^0,f,c
  2872   005E46  2A09               	incf	??___xxtofl^0,f,c
  2873   005E48  0E00               	movlw	0
  2874   005E4A  220A               	addwfc	(??___xxtofl+1)^0,f,c
  2875   005E4C  220B               	addwfc	(??___xxtofl+2)^0,f,c
  2876   005E4E  220C               	addwfc	(??___xxtofl+3)^0,f,c
  2877   005E50  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  2878   005E54  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  2879   005E58  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  2880   005E5C  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  2881   005E60  EF3A  F02F         	goto	l4120
  2882   005E64                     l1488:
  2883   005E64  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  2884   005E68  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2885   005E6C  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2886   005E70  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2887   005E74                     l4120:
  2888   005E74  5005               	movf	___xxtofl@val^0,w,c
  2889   005E76  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  2890   005E78  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  2891   005E7A  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  2892   005E7C  A4D8               	btfss	status,2,c
  2893   005E7E  EF43  F02F         	goto	u3771
  2894   005E82  EF45  F02F         	goto	u3770
  2895   005E86                     u3771:
  2896   005E86  EF4F  F02F         	goto	l4126
  2897   005E8A                     u3770:
  2898   005E8A  0E00               	movlw	0
  2899   005E8C  6E05               	movwf	?___xxtofl^0,c
  2900   005E8E  0E00               	movlw	0
  2901   005E90  6E06               	movwf	(?___xxtofl+1)^0,c
  2902   005E92  0E00               	movlw	0
  2903   005E94  6E07               	movwf	(?___xxtofl+2)^0,c
  2904   005E96  0E00               	movlw	0
  2905   005E98  6E08               	movwf	(?___xxtofl+3)^0,c
  2906   005E9A  EFE0  F02F         	goto	l1491
  2907   005E9E                     l4126:
  2908   005E9E  0E96               	movlw	150
  2909   005EA0  6E0E               	movwf	___xxtofl@exp^0,c
  2910   005EA2  EF59  F02F         	goto	l4130
  2911   005EA6                     l4128:
  2912   005EA6  2A0E               	incf	___xxtofl@exp^0,f,c
  2913   005EA8  90D8               	bcf	status,0,c
  2914   005EAA  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  2915   005EAC  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  2916   005EAE  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  2917   005EB0  320F               	rrcf	___xxtofl@arg^0,f,c
  2918   005EB2                     l4130:
  2919   005EB2  0E00               	movlw	0
  2920   005EB4  140F               	andwf	___xxtofl@arg^0,w,c
  2921   005EB6  6E09               	movwf	??___xxtofl^0,c
  2922   005EB8  0E00               	movlw	0
  2923   005EBA  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  2924   005EBC  6E0A               	movwf	(??___xxtofl+1)^0,c
  2925   005EBE  0E00               	movlw	0
  2926   005EC0  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  2927   005EC2  6E0B               	movwf	(??___xxtofl+2)^0,c
  2928   005EC4  0EFE               	movlw	254
  2929   005EC6  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  2930   005EC8  6E0C               	movwf	(??___xxtofl+3)^0,c
  2931   005ECA  5009               	movf	??___xxtofl^0,w,c
  2932   005ECC  100A               	iorwf	(??___xxtofl+1)^0,w,c
  2933   005ECE  100B               	iorwf	(??___xxtofl+2)^0,w,c
  2934   005ED0  100C               	iorwf	(??___xxtofl+3)^0,w,c
  2935   005ED2  A4D8               	btfss	status,2,c
  2936   005ED4  EF6E  F02F         	goto	u3781
  2937   005ED8  EF70  F02F         	goto	u3780
  2938   005EDC                     u3781:
  2939   005EDC  EF53  F02F         	goto	l4128
  2940   005EE0                     u3780:
  2941   005EE0  EF7E  F02F         	goto	l1495
  2942   005EE4                     l4132:
  2943   005EE4  2A0E               	incf	___xxtofl@exp^0,f,c
  2944   005EE6  0E01               	movlw	1
  2945   005EE8  260F               	addwf	___xxtofl@arg^0,f,c
  2946   005EEA  0E00               	movlw	0
  2947   005EEC  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  2948   005EEE  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  2949   005EF0  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  2950   005EF2  90D8               	bcf	status,0,c
  2951   005EF4  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  2952   005EF6  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  2953   005EF8  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  2954   005EFA  320F               	rrcf	___xxtofl@arg^0,f,c
  2955   005EFC                     l1495:
  2956   005EFC  0E00               	movlw	0
  2957   005EFE  140F               	andwf	___xxtofl@arg^0,w,c
  2958   005F00  6E09               	movwf	??___xxtofl^0,c
  2959   005F02  0E00               	movlw	0
  2960   005F04  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  2961   005F06  6E0A               	movwf	(??___xxtofl+1)^0,c
  2962   005F08  0E00               	movlw	0
  2963   005F0A  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  2964   005F0C  6E0B               	movwf	(??___xxtofl+2)^0,c
  2965   005F0E  0EFF               	movlw	255
  2966   005F10  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  2967   005F12  6E0C               	movwf	(??___xxtofl+3)^0,c
  2968   005F14  5009               	movf	??___xxtofl^0,w,c
  2969   005F16  100A               	iorwf	(??___xxtofl+1)^0,w,c
  2970   005F18  100B               	iorwf	(??___xxtofl+2)^0,w,c
  2971   005F1A  100C               	iorwf	(??___xxtofl+3)^0,w,c
  2972   005F1C  A4D8               	btfss	status,2,c
  2973   005F1E  EF93  F02F         	goto	u3791
  2974   005F22  EF95  F02F         	goto	u3790
  2975   005F26                     u3791:
  2976   005F26  EF72  F02F         	goto	l4132
  2977   005F2A                     u3790:
  2978   005F2A  EF9D  F02F         	goto	l4140
  2979   005F2E                     l4138:
  2980   005F2E  060E               	decf	___xxtofl@exp^0,f,c
  2981   005F30  90D8               	bcf	status,0,c
  2982   005F32  360F               	rlcf	___xxtofl@arg^0,f,c
  2983   005F34  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  2984   005F36  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  2985   005F38  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  2986   005F3A                     l4140:
  2987   005F3A  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  2988   005F3C  EFA2  F02F         	goto	u3801
  2989   005F40  EFA4  F02F         	goto	u3800
  2990   005F44                     u3801:
  2991   005F44  EFAC  F02F         	goto	l1502
  2992   005F48                     u3800:
  2993   005F48  0E02               	movlw	2
  2994   005F4A  600E               	cpfslt	___xxtofl@exp^0,c
  2995   005F4C  EFAA  F02F         	goto	u3811
  2996   005F50  EFAC  F02F         	goto	u3810
  2997   005F54                     u3811:
  2998   005F54  EF97  F02F         	goto	l4138
  2999   005F58                     u3810:
  3000   005F58                     l1502:
  3001   005F58  B00E               	btfsc	___xxtofl@exp^0,0,c
  3002   005F5A  EFB1  F02F         	goto	u3821
  3003   005F5E  EFB3  F02F         	goto	u3820
  3004   005F62                     u3821:
  3005   005F62  EFB4  F02F         	goto	l4146
  3006   005F66                     u3820:
  3007   005F66  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  3008   005F68                     l4146:
  3009   005F68  90D8               	bcf	status,0,c
  3010   005F6A  320E               	rrcf	___xxtofl@exp^0,f,c
  3011   005F6C  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  3012   005F70  6A0A               	clrf	(??___xxtofl+1)^0,c
  3013   005F72  6A0B               	clrf	(??___xxtofl+2)^0,c
  3014   005F74  6A0C               	clrf	(??___xxtofl+3)^0,c
  3015   005F76  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  3016   005F7A  6A0B               	clrf	(??___xxtofl+2)^0,c
  3017   005F7C  6A0A               	clrf	(??___xxtofl+1)^0,c
  3018   005F7E  6A09               	clrf	??___xxtofl^0,c
  3019   005F80  5009               	movf	??___xxtofl^0,w,c
  3020   005F82  120F               	iorwf	___xxtofl@arg^0,f,c
  3021   005F84  500A               	movf	(??___xxtofl+1)^0,w,c
  3022   005F86  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  3023   005F88  500B               	movf	(??___xxtofl+2)^0,w,c
  3024   005F8A  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  3025   005F8C  500C               	movf	(??___xxtofl+3)^0,w,c
  3026   005F8E  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  3027   005F90  500D               	movf	___xxtofl@sign^0,w,c
  3028   005F92  B4D8               	btfsc	status,2,c
  3029   005F94  EFCE  F02F         	goto	u3831
  3030   005F98  EFD0  F02F         	goto	u3830
  3031   005F9C                     u3831:
  3032   005F9C  EFD8  F02F         	goto	l4156
  3033   005FA0                     u3830:
  3034   005FA0  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  3035   005FA2  EFD7  F02F         	goto	u3840
  3036   005FA6  EFD5  F02F         	goto	u3841
  3037   005FAA                     u3841:
  3038   005FAA  EFD8  F02F         	goto	l4156
  3039   005FAE                     u3840:
  3040   005FAE  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  3041   005FB0                     l4156:
  3042   005FB0  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  3043   005FB4  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  3044   005FB8  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  3045   005FBC  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  3046   005FC0                     l1491:
  3047   005FC0  0012               	return		;funcret
  3048   005FC2                     __end_of___xxtofl:
  3049                           	callstack 0
  3050                           
  3051 ;; *************** function ___fltol *****************
  3052 ;; Defined at:
  3053 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\fltol.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  f1              4   43[COMRAM] unsigned char 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  exp1            1   52[COMRAM] unsigned char 
  3058 ;;  sign1           1   51[COMRAM] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  4   43[COMRAM] long 
  3061 ;; Registers used:
  3062 ;;		wreg, status,2, status,0
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3068 ;;      Params:         4       0       0       0       0       0       0       0       0
  3069 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3070 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3071 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3072 ;;Total ram usage:       10 bytes
  3073 ;; Hardware stack levels used: 1
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_readTemp
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text7
  3082   005A8A                     __ptext7:
  3083                           	callstack 0
  3084   005A8A                     ___fltol:
  3085                           	callstack 28
  3086   005A8A  342E               	rlcf	(___fltol@f1+2)^0,w,c
  3087   005A8C  342F               	rlcf	(___fltol@f1+3)^0,w,c
  3088   005A8E  6E35               	movwf	___fltol@exp1^0,c
  3089   005A90  5035               	movf	___fltol@exp1^0,w,c
  3090   005A92  A4D8               	btfss	status,2,c
  3091   005A94  EF4E  F02D         	goto	u3681
  3092   005A98  EF50  F02D         	goto	u3680
  3093   005A9C                     u3681:
  3094   005A9C  EF5A  F02D         	goto	l4076
  3095   005AA0                     u3680:
  3096   005AA0                     l4072:
  3097   005AA0  0E00               	movlw	0
  3098   005AA2  6E2C               	movwf	?___fltol^0,c
  3099   005AA4  0E00               	movlw	0
  3100   005AA6  6E2D               	movwf	(?___fltol+1)^0,c
  3101   005AA8  0E00               	movlw	0
  3102   005AAA  6E2E               	movwf	(?___fltol+2)^0,c
  3103   005AAC  0E00               	movlw	0
  3104   005AAE  6E2F               	movwf	(?___fltol+3)^0,c
  3105   005AB0  EFC7  F02D         	goto	l1130
  3106   005AB4                     l4076:
  3107   005AB4  C02C  F030         	movff	___fltol@f1,??___fltol
  3108   005AB8  C02D  F031         	movff	___fltol@f1+1,??___fltol+1
  3109   005ABC  C02E  F032         	movff	___fltol@f1+2,??___fltol+2
  3110   005AC0  C02F  F033         	movff	___fltol@f1+3,??___fltol+3
  3111   005AC4  0E20               	movlw	32
  3112   005AC6  EF6A  F02D         	goto	u3690
  3113   005ACA                     u3695:
  3114   005ACA  90D8               	bcf	status,0,c
  3115   005ACC  3233               	rrcf	(??___fltol+3)^0,f,c
  3116   005ACE  3232               	rrcf	(??___fltol+2)^0,f,c
  3117   005AD0  3231               	rrcf	(??___fltol+1)^0,f,c
  3118   005AD2  3230               	rrcf	??___fltol^0,f,c
  3119   005AD4                     u3690:
  3120   005AD4  2EE8               	decfsz	wreg,f,c
  3121   005AD6  EF65  F02D         	goto	u3695
  3122   005ADA  5030               	movf	??___fltol^0,w,c
  3123   005ADC  6E34               	movwf	___fltol@sign1^0,c
  3124   005ADE  8E2E               	bsf	(___fltol@f1+2)^0,7,c
  3125   005AE0  0EFF               	movlw	255
  3126   005AE2  162C               	andwf	___fltol@f1^0,f,c
  3127   005AE4  0EFF               	movlw	255
  3128   005AE6  162D               	andwf	(___fltol@f1+1)^0,f,c
  3129   005AE8  0EFF               	movlw	255
  3130   005AEA  162E               	andwf	(___fltol@f1+2)^0,f,c
  3131   005AEC  0E00               	movlw	0
  3132   005AEE  162F               	andwf	(___fltol@f1+3)^0,f,c
  3133   005AF0  0E96               	movlw	150
  3134   005AF2  5E35               	subwf	___fltol@exp1^0,f,c
  3135   005AF4  BE35               	btfsc	___fltol@exp1^0,7,c
  3136   005AF6  EF81  F02D         	goto	u3700
  3137   005AFA  EF7F  F02D         	goto	u3701
  3138   005AFE                     u3701:
  3139   005AFE  EF97  F02D         	goto	l4096
  3140   005B02                     u3700:
  3141   005B02  5035               	movf	___fltol@exp1^0,w,c
  3142   005B04  0A80               	xorlw	128
  3143   005B06  0F97               	addlw	151
  3144   005B08  B0D8               	btfsc	status,0,c
  3145   005B0A  EF89  F02D         	goto	u3711
  3146   005B0E  EF8B  F02D         	goto	u3710
  3147   005B12                     u3711:
  3148   005B12  EF8D  F02D         	goto	l4092
  3149   005B16                     u3710:
  3150   005B16  EF50  F02D         	goto	l4072
  3151   005B1A                     l4092:
  3152   005B1A  90D8               	bcf	status,0,c
  3153   005B1C  322F               	rrcf	(___fltol@f1+3)^0,f,c
  3154   005B1E  322E               	rrcf	(___fltol@f1+2)^0,f,c
  3155   005B20  322D               	rrcf	(___fltol@f1+1)^0,f,c
  3156   005B22  322C               	rrcf	___fltol@f1^0,f,c
  3157   005B24  3E35               	incfsz	___fltol@exp1^0,f,c
  3158   005B26  EF8D  F02D         	goto	l4092
  3159   005B2A  EFAF  F02D         	goto	l4106
  3160   005B2E                     l4096:
  3161   005B2E  0E1F               	movlw	31
  3162   005B30  6435               	cpfsgt	___fltol@exp1^0,c
  3163   005B32  EF9D  F02D         	goto	u3721
  3164   005B36  EF9F  F02D         	goto	u3720
  3165   005B3A                     u3721:
  3166   005B3A  EFA7  F02D         	goto	l4104
  3167   005B3E                     u3720:
  3168   005B3E  EF50  F02D         	goto	l4072
  3169   005B42                     l4102:
  3170   005B42  90D8               	bcf	status,0,c
  3171   005B44  362C               	rlcf	___fltol@f1^0,f,c
  3172   005B46  362D               	rlcf	(___fltol@f1+1)^0,f,c
  3173   005B48  362E               	rlcf	(___fltol@f1+2)^0,f,c
  3174   005B4A  362F               	rlcf	(___fltol@f1+3)^0,f,c
  3175   005B4C  0635               	decf	___fltol@exp1^0,f,c
  3176   005B4E                     l4104:
  3177   005B4E  5035               	movf	___fltol@exp1^0,w,c
  3178   005B50  A4D8               	btfss	status,2,c
  3179   005B52  EFAD  F02D         	goto	u3731
  3180   005B56  EFAF  F02D         	goto	u3730
  3181   005B5A                     u3731:
  3182   005B5A  EFA1  F02D         	goto	l4102
  3183   005B5E                     u3730:
  3184   005B5E                     l4106:
  3185   005B5E  5034               	movf	___fltol@sign1^0,w,c
  3186   005B60  B4D8               	btfsc	status,2,c
  3187   005B62  EFB5  F02D         	goto	u3741
  3188   005B66  EFB7  F02D         	goto	u3740
  3189   005B6A                     u3741:
  3190   005B6A  EFBF  F02D         	goto	l4110
  3191   005B6E                     u3740:
  3192   005B6E  1E2F               	comf	(___fltol@f1+3)^0,f,c
  3193   005B70  1E2E               	comf	(___fltol@f1+2)^0,f,c
  3194   005B72  1E2D               	comf	(___fltol@f1+1)^0,f,c
  3195   005B74  6C2C               	negf	___fltol@f1^0,c
  3196   005B76  0E00               	movlw	0
  3197   005B78  222D               	addwfc	(___fltol@f1+1)^0,f,c
  3198   005B7A  222E               	addwfc	(___fltol@f1+2)^0,f,c
  3199   005B7C  222F               	addwfc	(___fltol@f1+3)^0,f,c
  3200   005B7E                     l4110:
  3201   005B7E  C02C  F02C         	movff	___fltol@f1,?___fltol
  3202   005B82  C02D  F02D         	movff	___fltol@f1+1,?___fltol+1
  3203   005B86  C02E  F02E         	movff	___fltol@f1+2,?___fltol+2
  3204   005B8A  C02F  F02F         	movff	___fltol@f1+3,?___fltol+3
  3205   005B8E                     l1130:
  3206   005B8E  0012               	return		;funcret
  3207   005B90                     __end_of___fltol:
  3208                           	callstack 0
  3209                           
  3210 ;; *************** function ___flmul *****************
  3211 ;; Defined at:
  3212 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcmul.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  b               4   18[COMRAM] long 
  3215 ;;  a               4   22[COMRAM] long 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  prod            4   37[COMRAM] struct .
  3218 ;;  grs             4   31[COMRAM] unsigned long 
  3219 ;;  temp            2   41[COMRAM] struct .
  3220 ;;  bexp            1   36[COMRAM] unsigned char 
  3221 ;;  aexp            1   35[COMRAM] unsigned char 
  3222 ;;  sign            1   30[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  4   18[COMRAM] unsigned char 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0, prodl, prodh
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3232 ;;      Params:         8       0       0       0       0       0       0       0       0
  3233 ;;      Locals:        13       0       0       0       0       0       0       0       0
  3234 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3235 ;;      Totals:        25       0       0       0       0       0       0       0       0
  3236 ;;Total ram usage:       25 bytes
  3237 ;; Hardware stack levels used: 1
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_readTemp
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text8
  3246   00684E                     __ptext8:
  3247                           	callstack 0
  3248   00684E                     ___flmul:
  3249                           	callstack 28
  3250   00684E  5016               	movf	(___flmul@b+3)^0,w,c
  3251   006850  0B80               	andlw	128
  3252   006852  6E1F               	movwf	___flmul@sign^0,c
  3253   006854  5016               	movf	(___flmul@b+3)^0,w,c
  3254   006856  2416               	addwf	(___flmul@b+3)^0,w,c
  3255   006858  6E25               	movwf	___flmul@bexp^0,c
  3256   00685A  AE15               	btfss	(___flmul@b+2)^0,7,c
  3257   00685C  EF32  F034         	goto	u3491
  3258   006860  EF34  F034         	goto	u3490
  3259   006864                     u3491:
  3260   006864  EF35  F034         	goto	l3946
  3261   006868                     u3490:
  3262   006868  8025               	bsf	___flmul@bexp^0,0,c
  3263   00686A                     l3946:
  3264   00686A  5025               	movf	___flmul@bexp^0,w,c
  3265   00686C  B4D8               	btfsc	status,2,c
  3266   00686E  EF3B  F034         	goto	u3501
  3267   006872  EF3D  F034         	goto	u3500
  3268   006876                     u3501:
  3269   006876  EF50  F034         	goto	l3954
  3270   00687A                     u3500:
  3271   00687A  2825               	incf	___flmul@bexp^0,w,c
  3272   00687C  A4D8               	btfss	status,2,c
  3273   00687E  EF43  F034         	goto	u3511
  3274   006882  EF45  F034         	goto	u3510
  3275   006886                     u3511:
  3276   006886  EF4D  F034         	goto	l3952
  3277   00688A                     u3510:
  3278   00688A  0E00               	movlw	0
  3279   00688C  6E13               	movwf	___flmul@b^0,c
  3280   00688E  0E00               	movlw	0
  3281   006890  6E14               	movwf	(___flmul@b+1)^0,c
  3282   006892  0E00               	movlw	0
  3283   006894  6E15               	movwf	(___flmul@b+2)^0,c
  3284   006896  0E00               	movlw	0
  3285   006898  6E16               	movwf	(___flmul@b+3)^0,c
  3286   00689A                     l3952:
  3287   00689A  8E15               	bsf	(___flmul@b+2)^0,7,c
  3288   00689C  EF58  F034         	goto	l3956
  3289   0068A0                     l3954:
  3290   0068A0  0E00               	movlw	0
  3291   0068A2  6E13               	movwf	___flmul@b^0,c
  3292   0068A4  0E00               	movlw	0
  3293   0068A6  6E14               	movwf	(___flmul@b+1)^0,c
  3294   0068A8  0E00               	movlw	0
  3295   0068AA  6E15               	movwf	(___flmul@b+2)^0,c
  3296   0068AC  0E00               	movlw	0
  3297   0068AE  6E16               	movwf	(___flmul@b+3)^0,c
  3298   0068B0                     l3956:
  3299   0068B0  501A               	movf	(___flmul@a+3)^0,w,c
  3300   0068B2  0B80               	andlw	128
  3301   0068B4  1A1F               	xorwf	___flmul@sign^0,f,c
  3302   0068B6  501A               	movf	(___flmul@a+3)^0,w,c
  3303   0068B8  241A               	addwf	(___flmul@a+3)^0,w,c
  3304   0068BA  6E24               	movwf	___flmul@aexp^0,c
  3305   0068BC  AE19               	btfss	(___flmul@a+2)^0,7,c
  3306   0068BE  EF63  F034         	goto	u3521
  3307   0068C2  EF65  F034         	goto	u3520
  3308   0068C6                     u3521:
  3309   0068C6  EF66  F034         	goto	l3964
  3310   0068CA                     u3520:
  3311   0068CA  8024               	bsf	___flmul@aexp^0,0,c
  3312   0068CC                     l3964:
  3313   0068CC  5024               	movf	___flmul@aexp^0,w,c
  3314   0068CE  B4D8               	btfsc	status,2,c
  3315   0068D0  EF6C  F034         	goto	u3531
  3316   0068D4  EF6E  F034         	goto	u3530
  3317   0068D8                     u3531:
  3318   0068D8  EF81  F034         	goto	l3972
  3319   0068DC                     u3530:
  3320   0068DC  2824               	incf	___flmul@aexp^0,w,c
  3321   0068DE  A4D8               	btfss	status,2,c
  3322   0068E0  EF74  F034         	goto	u3541
  3323   0068E4  EF76  F034         	goto	u3540
  3324   0068E8                     u3541:
  3325   0068E8  EF7E  F034         	goto	l3970
  3326   0068EC                     u3540:
  3327   0068EC  0E00               	movlw	0
  3328   0068EE  6E17               	movwf	___flmul@a^0,c
  3329   0068F0  0E00               	movlw	0
  3330   0068F2  6E18               	movwf	(___flmul@a+1)^0,c
  3331   0068F4  0E00               	movlw	0
  3332   0068F6  6E19               	movwf	(___flmul@a+2)^0,c
  3333   0068F8  0E00               	movlw	0
  3334   0068FA  6E1A               	movwf	(___flmul@a+3)^0,c
  3335   0068FC                     l3970:
  3336   0068FC  8E19               	bsf	(___flmul@a+2)^0,7,c
  3337   0068FE  EF89  F034         	goto	l1447
  3338   006902                     l3972:
  3339   006902  0E00               	movlw	0
  3340   006904  6E17               	movwf	___flmul@a^0,c
  3341   006906  0E00               	movlw	0
  3342   006908  6E18               	movwf	(___flmul@a+1)^0,c
  3343   00690A  0E00               	movlw	0
  3344   00690C  6E19               	movwf	(___flmul@a+2)^0,c
  3345   00690E  0E00               	movlw	0
  3346   006910  6E1A               	movwf	(___flmul@a+3)^0,c
  3347   006912                     l1447:
  3348   006912  5024               	movf	___flmul@aexp^0,w,c
  3349   006914  B4D8               	btfsc	status,2,c
  3350   006916  EF8F  F034         	goto	u3551
  3351   00691A  EF91  F034         	goto	u3550
  3352   00691E                     u3551:
  3353   00691E  EF99  F034         	goto	l3976
  3354   006922                     u3550:
  3355   006922  5025               	movf	___flmul@bexp^0,w,c
  3356   006924  A4D8               	btfss	status,2,c
  3357   006926  EF97  F034         	goto	u3561
  3358   00692A  EF99  F034         	goto	u3560
  3359   00692E                     u3561:
  3360   00692E  EFA3  F034         	goto	l3980
  3361   006932                     u3560:
  3362   006932                     l3976:
  3363   006932  0E00               	movlw	0
  3364   006934  6E13               	movwf	?___flmul^0,c
  3365   006936  0E00               	movlw	0
  3366   006938  6E14               	movwf	(?___flmul+1)^0,c
  3367   00693A  0E00               	movlw	0
  3368   00693C  6E15               	movwf	(?___flmul+2)^0,c
  3369   00693E  0E00               	movlw	0
  3370   006940  6E16               	movwf	(?___flmul+3)^0,c
  3371   006942  EF3B  F036         	goto	l1451
  3372   006946                     l3980:
  3373   006946  5019               	movf	(___flmul@a+2)^0,w,c
  3374   006948  0213               	mulwf	___flmul@b^0,c
  3375   00694A  CFF3 F02A          	movff	prodl,___flmul@temp
  3376   00694E  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3377   006952  502A               	movf	___flmul@temp^0,w,c
  3378   006954  6E20               	movwf	___flmul@grs^0,c
  3379   006956  6A21               	clrf	(___flmul@grs+1)^0,c
  3380   006958  6A22               	clrf	(___flmul@grs+2)^0,c
  3381   00695A  6A23               	clrf	(___flmul@grs+3)^0,c
  3382   00695C  502B               	movf	(___flmul@temp+1)^0,w,c
  3383   00695E  6E26               	movwf	___flmul@prod^0,c
  3384   006960  6A27               	clrf	(___flmul@prod+1)^0,c
  3385   006962  6A28               	clrf	(___flmul@prod+2)^0,c
  3386   006964  6A29               	clrf	(___flmul@prod+3)^0,c
  3387   006966  5018               	movf	(___flmul@a+1)^0,w,c
  3388   006968  0214               	mulwf	(___flmul@b+1)^0,c
  3389   00696A  CFF3 F02A          	movff	prodl,___flmul@temp
  3390   00696E  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3391   006972  502A               	movf	___flmul@temp^0,w,c
  3392   006974  2620               	addwf	___flmul@grs^0,f,c
  3393   006976  0E00               	movlw	0
  3394   006978  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3395   00697A  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3396   00697C  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3397   00697E  502B               	movf	(___flmul@temp+1)^0,w,c
  3398   006980  2626               	addwf	___flmul@prod^0,f,c
  3399   006982  0E00               	movlw	0
  3400   006984  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3401   006986  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3402   006988  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3403   00698A  5017               	movf	___flmul@a^0,w,c
  3404   00698C  0215               	mulwf	(___flmul@b+2)^0,c
  3405   00698E  CFF3 F02A          	movff	prodl,___flmul@temp
  3406   006992  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3407   006996  502A               	movf	___flmul@temp^0,w,c
  3408   006998  2620               	addwf	___flmul@grs^0,f,c
  3409   00699A  0E00               	movlw	0
  3410   00699C  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3411   00699E  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3412   0069A0  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3413   0069A2  502B               	movf	(___flmul@temp+1)^0,w,c
  3414   0069A4  2626               	addwf	___flmul@prod^0,f,c
  3415   0069A6  0E00               	movlw	0
  3416   0069A8  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3417   0069AA  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3418   0069AC  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3419   0069AE  C022  F023         	movff	___flmul@grs+2,___flmul@grs+3
  3420   0069B2  C021  F022         	movff	___flmul@grs+1,___flmul@grs+2
  3421   0069B6  C020  F021         	movff	___flmul@grs,___flmul@grs+1
  3422   0069BA  6A20               	clrf	___flmul@grs^0,c
  3423   0069BC  5017               	movf	___flmul@a^0,w,c
  3424   0069BE  0214               	mulwf	(___flmul@b+1)^0,c
  3425   0069C0  CFF3 F02A          	movff	prodl,___flmul@temp
  3426   0069C4  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3427   0069C8  502A               	movf	___flmul@temp^0,w,c
  3428   0069CA  2620               	addwf	___flmul@grs^0,f,c
  3429   0069CC  502B               	movf	(___flmul@temp+1)^0,w,c
  3430   0069CE  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3431   0069D0  0E00               	movlw	0
  3432   0069D2  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3433   0069D4  0E00               	movlw	0
  3434   0069D6  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3435   0069D8  5018               	movf	(___flmul@a+1)^0,w,c
  3436   0069DA  0213               	mulwf	___flmul@b^0,c
  3437   0069DC  CFF3 F02A          	movff	prodl,___flmul@temp
  3438   0069E0  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3439   0069E4  502A               	movf	___flmul@temp^0,w,c
  3440   0069E6  2620               	addwf	___flmul@grs^0,f,c
  3441   0069E8  502B               	movf	(___flmul@temp+1)^0,w,c
  3442   0069EA  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3443   0069EC  0E00               	movlw	0
  3444   0069EE  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3445   0069F0  0E00               	movlw	0
  3446   0069F2  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3447   0069F4  C022  F023         	movff	___flmul@grs+2,___flmul@grs+3
  3448   0069F8  C021  F022         	movff	___flmul@grs+1,___flmul@grs+2
  3449   0069FC  C020  F021         	movff	___flmul@grs,___flmul@grs+1
  3450   006A00  6A20               	clrf	___flmul@grs^0,c
  3451   006A02  5017               	movf	___flmul@a^0,w,c
  3452   006A04  0213               	mulwf	___flmul@b^0,c
  3453   006A06  CFF3 F02A          	movff	prodl,___flmul@temp
  3454   006A0A  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3455   006A0E  502A               	movf	___flmul@temp^0,w,c
  3456   006A10  2620               	addwf	___flmul@grs^0,f,c
  3457   006A12  502B               	movf	(___flmul@temp+1)^0,w,c
  3458   006A14  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3459   006A16  0E00               	movlw	0
  3460   006A18  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3461   006A1A  0E00               	movlw	0
  3462   006A1C  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3463   006A1E  5019               	movf	(___flmul@a+2)^0,w,c
  3464   006A20  0214               	mulwf	(___flmul@b+1)^0,c
  3465   006A22  CFF3 F02A          	movff	prodl,___flmul@temp
  3466   006A26  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3467   006A2A  502A               	movf	___flmul@temp^0,w,c
  3468   006A2C  2626               	addwf	___flmul@prod^0,f,c
  3469   006A2E  502B               	movf	(___flmul@temp+1)^0,w,c
  3470   006A30  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3471   006A32  0E00               	movlw	0
  3472   006A34  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3473   006A36  0E00               	movlw	0
  3474   006A38  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3475   006A3A  5018               	movf	(___flmul@a+1)^0,w,c
  3476   006A3C  0215               	mulwf	(___flmul@b+2)^0,c
  3477   006A3E  CFF3 F02A          	movff	prodl,___flmul@temp
  3478   006A42  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3479   006A46  502A               	movf	___flmul@temp^0,w,c
  3480   006A48  2626               	addwf	___flmul@prod^0,f,c
  3481   006A4A  502B               	movf	(___flmul@temp+1)^0,w,c
  3482   006A4C  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3483   006A4E  0E00               	movlw	0
  3484   006A50  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3485   006A52  0E00               	movlw	0
  3486   006A54  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3487   006A56  5019               	movf	(___flmul@a+2)^0,w,c
  3488   006A58  0215               	mulwf	(___flmul@b+2)^0,c
  3489   006A5A  CFF3 F02A          	movff	prodl,___flmul@temp
  3490   006A5E  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3491   006A62  502A               	movf	___flmul@temp^0,w,c
  3492   006A64  6E1B               	movwf	??___flmul^0,c
  3493   006A66  502B               	movf	(___flmul@temp+1)^0,w,c
  3494   006A68  6E1C               	movwf	(??___flmul+1)^0,c
  3495   006A6A  6A1D               	clrf	(??___flmul+2)^0,c
  3496   006A6C  6A1E               	clrf	(??___flmul+3)^0,c
  3497   006A6E  C01D  F01E         	movff	??___flmul+2,??___flmul+3
  3498   006A72  C01C  F01D         	movff	??___flmul+1,??___flmul+2
  3499   006A76  C01B  F01C         	movff	??___flmul,??___flmul+1
  3500   006A7A  6A1B               	clrf	??___flmul^0,c
  3501   006A7C  501B               	movf	??___flmul^0,w,c
  3502   006A7E  2626               	addwf	___flmul@prod^0,f,c
  3503   006A80  501C               	movf	(??___flmul+1)^0,w,c
  3504   006A82  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3505   006A84  501D               	movf	(??___flmul+2)^0,w,c
  3506   006A86  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3507   006A88  501E               	movf	(??___flmul+3)^0,w,c
  3508   006A8A  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3509   006A8C  C020  F01B         	movff	___flmul@grs,??___flmul
  3510   006A90  C021  F01C         	movff	___flmul@grs+1,??___flmul+1
  3511   006A94  C022  F01D         	movff	___flmul@grs+2,??___flmul+2
  3512   006A98  C023  F01E         	movff	___flmul@grs+3,??___flmul+3
  3513   006A9C  0E19               	movlw	25
  3514   006A9E  EF56  F035         	goto	u3570
  3515   006AA2                     u3575:
  3516   006AA2  90D8               	bcf	status,0,c
  3517   006AA4  321E               	rrcf	(??___flmul+3)^0,f,c
  3518   006AA6  321D               	rrcf	(??___flmul+2)^0,f,c
  3519   006AA8  321C               	rrcf	(??___flmul+1)^0,f,c
  3520   006AAA  321B               	rrcf	??___flmul^0,f,c
  3521   006AAC                     u3570:
  3522   006AAC  2EE8               	decfsz	wreg,f,c
  3523   006AAE  EF51  F035         	goto	u3575
  3524   006AB2  501B               	movf	??___flmul^0,w,c
  3525   006AB4  2626               	addwf	___flmul@prod^0,f,c
  3526   006AB6  501C               	movf	(??___flmul+1)^0,w,c
  3527   006AB8  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3528   006ABA  501D               	movf	(??___flmul+2)^0,w,c
  3529   006ABC  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3530   006ABE  501E               	movf	(??___flmul+3)^0,w,c
  3531   006AC0  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3532   006AC2  C022  F023         	movff	___flmul@grs+2,___flmul@grs+3
  3533   006AC6  C021  F022         	movff	___flmul@grs+1,___flmul@grs+2
  3534   006ACA  C020  F021         	movff	___flmul@grs,___flmul@grs+1
  3535   006ACE  6A20               	clrf	___flmul@grs^0,c
  3536   006AD0  5024               	movf	___flmul@aexp^0,w,c
  3537   006AD2  C025  F01B         	movff	___flmul@bexp,??___flmul
  3538   006AD6  6A1C               	clrf	(??___flmul+1)^0,c
  3539   006AD8  261B               	addwf	??___flmul^0,f,c
  3540   006ADA  0E00               	movlw	0
  3541   006ADC  221C               	addwfc	(??___flmul+1)^0,f,c
  3542   006ADE  0E82               	movlw	130
  3543   006AE0  241B               	addwf	??___flmul^0,w,c
  3544   006AE2  6E2A               	movwf	___flmul@temp^0,c
  3545   006AE4  0EFF               	movlw	255
  3546   006AE6  201C               	addwfc	(??___flmul+1)^0,w,c
  3547   006AE8  6E2B               	movwf	(___flmul@temp+1)^0,c
  3548   006AEA  EF8C  F035         	goto	l4028
  3549   006AEE                     l4022:
  3550   006AEE  90D8               	bcf	status,0,c
  3551   006AF0  3626               	rlcf	___flmul@prod^0,f,c
  3552   006AF2  3627               	rlcf	(___flmul@prod+1)^0,f,c
  3553   006AF4  3628               	rlcf	(___flmul@prod+2)^0,f,c
  3554   006AF6  3629               	rlcf	(___flmul@prod+3)^0,f,c
  3555   006AF8  AE23               	btfss	(___flmul@grs+3)^0,7,c
  3556   006AFA  EF81  F035         	goto	u3581
  3557   006AFE  EF83  F035         	goto	u3580
  3558   006B02                     u3581:
  3559   006B02  EF84  F035         	goto	l1454
  3560   006B06                     u3580:
  3561   006B06  8026               	bsf	___flmul@prod^0,0,c
  3562   006B08                     l1454:
  3563   006B08  90D8               	bcf	status,0,c
  3564   006B0A  3620               	rlcf	___flmul@grs^0,f,c
  3565   006B0C  3621               	rlcf	(___flmul@grs+1)^0,f,c
  3566   006B0E  3622               	rlcf	(___flmul@grs+2)^0,f,c
  3567   006B10  3623               	rlcf	(___flmul@grs+3)^0,f,c
  3568   006B12  062A               	decf	___flmul@temp^0,f,c
  3569   006B14  A0D8               	btfss	status,0,c
  3570   006B16  062B               	decf	(___flmul@temp+1)^0,f,c
  3571   006B18                     l4028:
  3572   006B18  AE28               	btfss	(___flmul@prod+2)^0,7,c
  3573   006B1A  EF91  F035         	goto	u3591
  3574   006B1E  EF93  F035         	goto	u3590
  3575   006B22                     u3591:
  3576   006B22  EF77  F035         	goto	l4022
  3577   006B26                     u3590:
  3578   006B26  0E00               	movlw	0
  3579   006B28  6E24               	movwf	___flmul@aexp^0,c
  3580   006B2A  AE23               	btfss	(___flmul@grs+3)^0,7,c
  3581   006B2C  EF9A  F035         	goto	u3601
  3582   006B30  EF9C  F035         	goto	u3600
  3583   006B34                     u3601:
  3584   006B34  EFC0  F035         	goto	l1456
  3585   006B38                     u3600:
  3586   006B38  0EFF               	movlw	255
  3587   006B3A  1420               	andwf	___flmul@grs^0,w,c
  3588   006B3C  6E1B               	movwf	??___flmul^0,c
  3589   006B3E  0EFF               	movlw	255
  3590   006B40  1421               	andwf	(___flmul@grs+1)^0,w,c
  3591   006B42  6E1C               	movwf	(??___flmul+1)^0,c
  3592   006B44  0EFF               	movlw	255
  3593   006B46  1422               	andwf	(___flmul@grs+2)^0,w,c
  3594   006B48  6E1D               	movwf	(??___flmul+2)^0,c
  3595   006B4A  0E7F               	movlw	127
  3596   006B4C  1423               	andwf	(___flmul@grs+3)^0,w,c
  3597   006B4E  6E1E               	movwf	(??___flmul+3)^0,c
  3598   006B50  501B               	movf	??___flmul^0,w,c
  3599   006B52  101C               	iorwf	(??___flmul+1)^0,w,c
  3600   006B54  101D               	iorwf	(??___flmul+2)^0,w,c
  3601   006B56  101E               	iorwf	(??___flmul+3)^0,w,c
  3602   006B58  B4D8               	btfsc	status,2,c
  3603   006B5A  EFB1  F035         	goto	u3611
  3604   006B5E  EFB3  F035         	goto	u3610
  3605   006B62                     u3611:
  3606   006B62  EFB7  F035         	goto	l1457
  3607   006B66                     u3610:
  3608   006B66                     l4036:
  3609   006B66  0E01               	movlw	1
  3610   006B68  6E24               	movwf	___flmul@aexp^0,c
  3611   006B6A  EFC0  F035         	goto	l1456
  3612   006B6E                     l1457:
  3613   006B6E  A026               	btfss	___flmul@prod^0,0,c
  3614   006B70  EFBC  F035         	goto	u3621
  3615   006B74  EFBE  F035         	goto	u3620
  3616   006B78                     u3621:
  3617   006B78  EFC0  F035         	goto	l1456
  3618   006B7C                     u3620:
  3619   006B7C  EFB3  F035         	goto	l4036
  3620   006B80                     l1456:
  3621   006B80  5024               	movf	___flmul@aexp^0,w,c
  3622   006B82  B4D8               	btfsc	status,2,c
  3623   006B84  EFC6  F035         	goto	u3631
  3624   006B88  EFC8  F035         	goto	u3630
  3625   006B8C                     u3631:
  3626   006B8C  EFEC  F035         	goto	l4048
  3627   006B90                     u3630:
  3628   006B90  0E01               	movlw	1
  3629   006B92  2626               	addwf	___flmul@prod^0,f,c
  3630   006B94  0E00               	movlw	0
  3631   006B96  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3632   006B98  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3633   006B9A  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3634   006B9C  A029               	btfss	(___flmul@prod+3)^0,0,c
  3635   006B9E  EFD3  F035         	goto	u3641
  3636   006BA2  EFD5  F035         	goto	u3640
  3637   006BA6                     u3641:
  3638   006BA6  EFEC  F035         	goto	l4048
  3639   006BAA                     u3640:
  3640   006BAA  C026  F01B         	movff	___flmul@prod,??___flmul
  3641   006BAE  C027  F01C         	movff	___flmul@prod+1,??___flmul+1
  3642   006BB2  C028  F01D         	movff	___flmul@prod+2,??___flmul+2
  3643   006BB6  C029  F01E         	movff	___flmul@prod+3,??___flmul+3
  3644   006BBA  341E               	rlcf	(??___flmul+3)^0,w,c
  3645   006BBC  321E               	rrcf	(??___flmul+3)^0,f,c
  3646   006BBE  321D               	rrcf	(??___flmul+2)^0,f,c
  3647   006BC0  321C               	rrcf	(??___flmul+1)^0,f,c
  3648   006BC2  321B               	rrcf	??___flmul^0,f,c
  3649   006BC4  C01B  F026         	movff	??___flmul,___flmul@prod
  3650   006BC8  C01C  F027         	movff	??___flmul+1,___flmul@prod+1
  3651   006BCC  C01D  F028         	movff	??___flmul+2,___flmul@prod+2
  3652   006BD0  C01E  F029         	movff	??___flmul+3,___flmul@prod+3
  3653   006BD4  4A2A               	infsnz	___flmul@temp^0,f,c
  3654   006BD6  2A2B               	incf	(___flmul@temp+1)^0,f,c
  3655   006BD8                     l4048:
  3656   006BD8  BE2B               	btfsc	(___flmul@temp+1)^0,7,c
  3657   006BDA  EFF7  F035         	goto	u3651
  3658   006BDE  502B               	movf	(___flmul@temp+1)^0,w,c
  3659   006BE0  E108               	bnz	u3650
  3660   006BE2  282A               	incf	___flmul@temp^0,w,c
  3661   006BE4  A0D8               	btfss	status,0,c
  3662   006BE6  EFF7  F035         	goto	u3651
  3663   006BEA  EFF9  F035         	goto	u3650
  3664   006BEE                     u3651:
  3665   006BEE  EF03  F036         	goto	l4052
  3666   006BF2                     u3650:
  3667   006BF2  0E00               	movlw	0
  3668   006BF4  6E26               	movwf	___flmul@prod^0,c
  3669   006BF6  0E00               	movlw	0
  3670   006BF8  6E27               	movwf	(___flmul@prod+1)^0,c
  3671   006BFA  0E80               	movlw	128
  3672   006BFC  6E28               	movwf	(___flmul@prod+2)^0,c
  3673   006BFE  0E7F               	movlw	127
  3674   006C00  6E29               	movwf	(___flmul@prod+3)^0,c
  3675   006C02  EF31  F036         	goto	l4064
  3676   006C06                     l4052:
  3677   006C06  BE2B               	btfsc	(___flmul@temp+1)^0,7,c
  3678   006C08  EF10  F036         	goto	u3660
  3679   006C0C  502B               	movf	(___flmul@temp+1)^0,w,c
  3680   006C0E  E106               	bnz	u3661
  3681   006C10  042A               	decf	___flmul@temp^0,w,c
  3682   006C12  B0D8               	btfsc	status,0,c
  3683   006C14  EF0E  F036         	goto	u3661
  3684   006C18  EF10  F036         	goto	u3660
  3685   006C1C                     u3661:
  3686   006C1C  EF1C  F036         	goto	l1464
  3687   006C20                     u3660:
  3688   006C20  0E00               	movlw	0
  3689   006C22  6E26               	movwf	___flmul@prod^0,c
  3690   006C24  0E00               	movlw	0
  3691   006C26  6E27               	movwf	(___flmul@prod+1)^0,c
  3692   006C28  0E00               	movlw	0
  3693   006C2A  6E28               	movwf	(___flmul@prod+2)^0,c
  3694   006C2C  0E00               	movlw	0
  3695   006C2E  6E29               	movwf	(___flmul@prod+3)^0,c
  3696   006C30  0E00               	movlw	0
  3697   006C32  6E1F               	movwf	___flmul@sign^0,c
  3698   006C34  EF31  F036         	goto	l4064
  3699   006C38                     l1464:
  3700   006C38  C02A  F025         	movff	___flmul@temp,___flmul@bexp
  3701   006C3C  0EFF               	movlw	255
  3702   006C3E  1626               	andwf	___flmul@prod^0,f,c
  3703   006C40  0EFF               	movlw	255
  3704   006C42  1627               	andwf	(___flmul@prod+1)^0,f,c
  3705   006C44  0E7F               	movlw	127
  3706   006C46  1628               	andwf	(___flmul@prod+2)^0,f,c
  3707   006C48  0E00               	movlw	0
  3708   006C4A  1629               	andwf	(___flmul@prod+3)^0,f,c
  3709   006C4C  A025               	btfss	___flmul@bexp^0,0,c
  3710   006C4E  EF2B  F036         	goto	u3671
  3711   006C52  EF2D  F036         	goto	u3670
  3712   006C56                     u3671:
  3713   006C56  EF2E  F036         	goto	l4062
  3714   006C5A                     u3670:
  3715   006C5A  8E28               	bsf	(___flmul@prod+2)^0,7,c
  3716   006C5C                     l4062:
  3717   006C5C  90D8               	bcf	status,0,c
  3718   006C5E  3025               	rrcf	___flmul@bexp^0,w,c
  3719   006C60  6E29               	movwf	(___flmul@prod+3)^0,c
  3720   006C62                     l4064:
  3721   006C62  501F               	movf	___flmul@sign^0,w,c
  3722   006C64  1229               	iorwf	(___flmul@prod+3)^0,f,c
  3723   006C66  C026  F013         	movff	___flmul@prod,?___flmul
  3724   006C6A  C027  F014         	movff	___flmul@prod+1,?___flmul+1
  3725   006C6E  C028  F015         	movff	___flmul@prod+2,?___flmul+2
  3726   006C72  C029  F016         	movff	___flmul@prod+3,?___flmul+3
  3727   006C76                     l1451:
  3728   006C76  0012               	return		;funcret
  3729   006C78                     __end_of___flmul:
  3730                           	callstack 0
  3731                           
  3732 ;; *************** function _outputPrint *****************
  3733 ;; Defined at:
  3734 ;;		line 28 in file "output.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  numTela         2   32[COMRAM] int 
  3737 ;;  idioma          2   34[COMRAM] int 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  d               2   39[COMRAM] int 
  3740 ;;  d               2   37[COMRAM] int 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3750 ;;      Params:         4       0       0       0       0       0       0       0       0
  3751 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3752 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3753 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3754 ;;Total ram usage:        9 bytes
  3755 ;; Hardware stack levels used: 1
  3756 ;; Hardware stack levels required when called: 5
  3757 ;; This function calls:
  3758 ;;		_bcd2dec
  3759 ;;		_dsReadData
  3760 ;;		_getAlarmLevel
  3761 ;;		_getLanguage
  3762 ;;		_getTemp
  3763 ;;		_lcdCommand
  3764 ;;		_lcdData
  3765 ;;		_lcdInt
  3766 ;;		_lcdString
  3767 ;; This function is called by:
  3768 ;;		_smLoop
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text9
  3773   006C78                     __ptext9:
  3774                           	callstack 0
  3775   006C78                     _outputPrint:
  3776                           	callstack 24
  3777   006C78                     
  3778                           ;output.c: 30:     if (numTela == STATE_TEMPO) {
  3779   006C78  0E02               	movlw	2
  3780   006C7A  1821               	xorwf	outputPrint@numTela^0,w,c
  3781   006C7C  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  3782   006C7E  A4D8               	btfss	status,2,c
  3783   006C80  EF44  F036         	goto	u3941
  3784   006C84  EF46  F036         	goto	u3940
  3785   006C88                     u3941:
  3786   006C88  EFA8  F036         	goto	l4260
  3787   006C8C                     u3940:
  3788   006C8C                     
  3789                           ;output.c: 31:         lcdCommand(0x80);
  3790   006C8C  0E80               	movlw	128
  3791   006C8E  EC04  F029         	call	_lcdCommand
  3792   006C92                     
  3793                           ;output.c: 32:         lcdString(msgs[numTela][idioma]);
  3794   006C92  5023               	movf	outputPrint@idioma^0,w,c
  3795   006C94  0D02               	mullw	2
  3796   006C96  CFF3 F025          	movff	prodl,??_outputPrint
  3797   006C9A  5021               	movf	outputPrint@numTela^0,w,c
  3798   006C9C  0D04               	mullw	4
  3799   006C9E  50F3               	movf	243,w,c
  3800   006CA0  0FC2               	addlw	low _msgs
  3801   006CA2  2425               	addwf	??_outputPrint^0,w,c
  3802   006CA4  6ED9               	movwf	fsr2l,c
  3803   006CA6  6ADA               	clrf	fsr2h,c
  3804   006CA8  CFDE F004          	movff	postinc2,lcdString@str
  3805   006CAC  CFDD F005          	movff	postdec2,lcdString@str+1
  3806   006CB0  EC0E  F028         	call	_lcdString	;wreg free
  3807   006CB4                     
  3808                           ;output.c: 33:         lcdCommand(0xC0);
  3809   006CB4  0EC0               	movlw	192
  3810   006CB6  EC04  F029         	call	_lcdCommand
  3811   006CBA                     
  3812                           ;output.c: 35:         lcdData('>');
  3813   006CBA  0E3E               	movlw	62
  3814   006CBC  ECB7  F026         	call	_lcdData
  3815   006CC0                     
  3816                           ;output.c: 36:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  3817   006CC0  0E00               	movlw	0
  3818   006CC2  6E0F               	movwf	(dsReadData@address+1)^0,c
  3819   006CC4  0E02               	movlw	2
  3820   006CC6  6E0E               	movwf	dsReadData@address^0,c
  3821   006CC8  ECE1  F028         	call	_dsReadData	;wreg free
  3822   006CCC  0E7F               	movlw	127
  3823   006CCE  140E               	andwf	?_dsReadData^0,w,c
  3824   006CD0  6E13               	movwf	bcd2dec@value^0,c
  3825   006CD2  6A14               	clrf	(bcd2dec@value+1)^0,c
  3826   006CD4  EC7C  F028         	call	_bcd2dec	;wreg free
  3827   006CD8  C013  F017         	movff	?_bcd2dec,lcdInt@val
  3828   006CDC  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  3829   006CE0  0E02               	movlw	2
  3830   006CE2  6E19               	movwf	lcdInt@digNum^0,c
  3831   006CE4  EC7A  F02B         	call	_lcdInt	;wreg free
  3832   006CE8                     
  3833                           ;output.c: 37:         lcdData(':');
  3834   006CE8  0E3A               	movlw	58
  3835   006CEA  ECB7  F026         	call	_lcdData
  3836   006CEE                     
  3837                           ;output.c: 38:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  3838   006CEE  0E00               	movlw	0
  3839   006CF0  6E0F               	movwf	(dsReadData@address+1)^0,c
  3840   006CF2  0E01               	movlw	1
  3841   006CF4  6E0E               	movwf	dsReadData@address^0,c
  3842   006CF6  ECE1  F028         	call	_dsReadData	;wreg free
  3843   006CFA  0E7F               	movlw	127
  3844   006CFC  140E               	andwf	?_dsReadData^0,w,c
  3845   006CFE  6E13               	movwf	bcd2dec@value^0,c
  3846   006D00  6A14               	clrf	(bcd2dec@value+1)^0,c
  3847   006D02  EC7C  F028         	call	_bcd2dec	;wreg free
  3848   006D06  C013  F017         	movff	?_bcd2dec,lcdInt@val
  3849   006D0A  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  3850   006D0E  0E02               	movlw	2
  3851   006D10  6E19               	movwf	lcdInt@digNum^0,c
  3852   006D12  EC7A  F02B         	call	_lcdInt	;wreg free
  3853   006D16                     
  3854                           ;output.c: 39:         lcdData(':');
  3855   006D16  0E3A               	movlw	58
  3856   006D18  ECB7  F026         	call	_lcdData
  3857   006D1C                     
  3858                           ;output.c: 40:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  3859   006D1C  0E00               	movlw	0
  3860   006D1E  6E0F               	movwf	(dsReadData@address+1)^0,c
  3861   006D20  0E00               	movlw	0
  3862   006D22  6E0E               	movwf	dsReadData@address^0,c
  3863   006D24  ECE1  F028         	call	_dsReadData	;wreg free
  3864   006D28  0E7F               	movlw	127
  3865   006D2A  140E               	andwf	?_dsReadData^0,w,c
  3866   006D2C  6E13               	movwf	bcd2dec@value^0,c
  3867   006D2E  6A14               	clrf	(bcd2dec@value+1)^0,c
  3868   006D30  EC7C  F028         	call	_bcd2dec	;wreg free
  3869   006D34  C013  F017         	movff	?_bcd2dec,lcdInt@val
  3870   006D38  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  3871   006D3C  0E02               	movlw	2
  3872   006D3E  6E19               	movwf	lcdInt@digNum^0,c
  3873   006D40  EC7A  F02B         	call	_lcdInt	;wreg free
  3874   006D44                     
  3875                           ;output.c: 41:         lcdString("           ");
  3876   006D44  0E33               	movlw	low STR_11
  3877   006D46  6E04               	movwf	lcdString@str^0,c
  3878   006D48  0E7D               	movlw	high STR_11
  3879   006D4A  6E05               	movwf	(lcdString@str+1)^0,c
  3880   006D4C  EC0E  F028         	call	_lcdString	;wreg free
  3881   006D50                     l4260:
  3882                           
  3883                           ;output.c: 43:     if (numTela == STATE_TEMPOM) {
  3884   006D50  0E03               	movlw	3
  3885   006D52  1821               	xorwf	outputPrint@numTela^0,w,c
  3886   006D54  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  3887   006D56  A4D8               	btfss	status,2,c
  3888   006D58  EFB0  F036         	goto	u3951
  3889   006D5C  EFB2  F036         	goto	u3950
  3890   006D60                     u3951:
  3891   006D60  EF14  F037         	goto	l4282
  3892   006D64                     u3950:
  3893   006D64                     
  3894                           ;output.c: 44:         lcdCommand(0x80);
  3895   006D64  0E80               	movlw	128
  3896   006D66  EC04  F029         	call	_lcdCommand
  3897   006D6A                     
  3898                           ;output.c: 45:         lcdString(msgs[numTela][idioma]);
  3899   006D6A  5023               	movf	outputPrint@idioma^0,w,c
  3900   006D6C  0D02               	mullw	2
  3901   006D6E  CFF3 F025          	movff	prodl,??_outputPrint
  3902   006D72  5021               	movf	outputPrint@numTela^0,w,c
  3903   006D74  0D04               	mullw	4
  3904   006D76  50F3               	movf	243,w,c
  3905   006D78  0FC2               	addlw	low _msgs
  3906   006D7A  2425               	addwf	??_outputPrint^0,w,c
  3907   006D7C  6ED9               	movwf	fsr2l,c
  3908   006D7E  6ADA               	clrf	fsr2h,c
  3909   006D80  CFDE F004          	movff	postinc2,lcdString@str
  3910   006D84  CFDD F005          	movff	postdec2,lcdString@str+1
  3911   006D88  EC0E  F028         	call	_lcdString	;wreg free
  3912   006D8C                     
  3913                           ;output.c: 46:         lcdCommand(0xC0);
  3914   006D8C  0EC0               	movlw	192
  3915   006D8E  EC04  F029         	call	_lcdCommand
  3916   006D92                     
  3917                           ;output.c: 48:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  3918   006D92  0E00               	movlw	0
  3919   006D94  6E0F               	movwf	(dsReadData@address+1)^0,c
  3920   006D96  0E02               	movlw	2
  3921   006D98  6E0E               	movwf	dsReadData@address^0,c
  3922   006D9A  ECE1  F028         	call	_dsReadData	;wreg free
  3923   006D9E  0E7F               	movlw	127
  3924   006DA0  140E               	andwf	?_dsReadData^0,w,c
  3925   006DA2  6E13               	movwf	bcd2dec@value^0,c
  3926   006DA4  6A14               	clrf	(bcd2dec@value+1)^0,c
  3927   006DA6  EC7C  F028         	call	_bcd2dec	;wreg free
  3928   006DAA  C013  F017         	movff	?_bcd2dec,lcdInt@val
  3929   006DAE  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  3930   006DB2  0E02               	movlw	2
  3931   006DB4  6E19               	movwf	lcdInt@digNum^0,c
  3932   006DB6  EC7A  F02B         	call	_lcdInt	;wreg free
  3933   006DBA                     
  3934                           ;output.c: 49:         lcdData(':');
  3935   006DBA  0E3A               	movlw	58
  3936   006DBC  ECB7  F026         	call	_lcdData
  3937   006DC0                     
  3938                           ;output.c: 50:         lcdData('>');
  3939   006DC0  0E3E               	movlw	62
  3940   006DC2  ECB7  F026         	call	_lcdData
  3941   006DC6                     
  3942                           ;output.c: 51:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  3943   006DC6  0E00               	movlw	0
  3944   006DC8  6E0F               	movwf	(dsReadData@address+1)^0,c
  3945   006DCA  0E01               	movlw	1
  3946   006DCC  6E0E               	movwf	dsReadData@address^0,c
  3947   006DCE  ECE1  F028         	call	_dsReadData	;wreg free
  3948   006DD2  0E7F               	movlw	127
  3949   006DD4  140E               	andwf	?_dsReadData^0,w,c
  3950   006DD6  6E13               	movwf	bcd2dec@value^0,c
  3951   006DD8  6A14               	clrf	(bcd2dec@value+1)^0,c
  3952   006DDA  EC7C  F028         	call	_bcd2dec	;wreg free
  3953   006DDE  C013  F017         	movff	?_bcd2dec,lcdInt@val
  3954   006DE2  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  3955   006DE6  0E02               	movlw	2
  3956   006DE8  6E19               	movwf	lcdInt@digNum^0,c
  3957   006DEA  EC7A  F02B         	call	_lcdInt	;wreg free
  3958   006DEE                     
  3959                           ;output.c: 52:         lcdData(':');
  3960   006DEE  0E3A               	movlw	58
  3961   006DF0  ECB7  F026         	call	_lcdData
  3962   006DF4                     
  3963                           ;output.c: 53:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  3964   006DF4  0E00               	movlw	0
  3965   006DF6  6E0F               	movwf	(dsReadData@address+1)^0,c
  3966   006DF8  0E00               	movlw	0
  3967   006DFA  6E0E               	movwf	dsReadData@address^0,c
  3968   006DFC  ECE1  F028         	call	_dsReadData	;wreg free
  3969   006E00  0E7F               	movlw	127
  3970   006E02  140E               	andwf	?_dsReadData^0,w,c
  3971   006E04  6E13               	movwf	bcd2dec@value^0,c
  3972   006E06  6A14               	clrf	(bcd2dec@value+1)^0,c
  3973   006E08  EC7C  F028         	call	_bcd2dec	;wreg free
  3974   006E0C  C013  F017         	movff	?_bcd2dec,lcdInt@val
  3975   006E10  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  3976   006E14  0E02               	movlw	2
  3977   006E16  6E19               	movwf	lcdInt@digNum^0,c
  3978   006E18  EC7A  F02B         	call	_lcdInt	;wreg free
  3979   006E1C                     
  3980                           ;output.c: 54:         lcdString("           ");
  3981   006E1C  0E33               	movlw	low STR_11
  3982   006E1E  6E04               	movwf	lcdString@str^0,c
  3983   006E20  0E7D               	movlw	high STR_11
  3984   006E22  6E05               	movwf	(lcdString@str+1)^0,c
  3985   006E24  EC0E  F028         	call	_lcdString	;wreg free
  3986   006E28                     l4282:
  3987                           
  3988                           ;output.c: 57:     if (numTela == STATE_TEMPOD) {
  3989   006E28  0E04               	movlw	4
  3990   006E2A  1821               	xorwf	outputPrint@numTela^0,w,c
  3991   006E2C  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  3992   006E2E  A4D8               	btfss	status,2,c
  3993   006E30  EF1C  F037         	goto	u3961
  3994   006E34  EF1E  F037         	goto	u3960
  3995   006E38                     u3961:
  3996   006E38  EF93  F037         	goto	l4308
  3997   006E3C                     u3960:
  3998   006E3C                     
  3999                           ;output.c: 58:         lcdCommand(0x80);
  4000   006E3C  0E80               	movlw	128
  4001   006E3E  EC04  F029         	call	_lcdCommand
  4002   006E42                     
  4003                           ;output.c: 59:         lcdString(msgs[3][idioma]);
  4004   006E42  5023               	movf	outputPrint@idioma^0,w,c
  4005   006E44  0D02               	mullw	2
  4006   006E46  50F3               	movf	243,w,c
  4007   006E48  0FCE               	addlw	low (_msgs+12)
  4008   006E4A  6ED9               	movwf	fsr2l,c
  4009   006E4C  6ADA               	clrf	fsr2h,c
  4010   006E4E  CFDE F004          	movff	postinc2,lcdString@str
  4011   006E52  CFDD F005          	movff	postdec2,lcdString@str+1
  4012   006E56  EC0E  F028         	call	_lcdString	;wreg free
  4013   006E5A                     
  4014                           ;output.c: 60:         lcdCommand(0xC0);
  4015   006E5A  0EC0               	movlw	192
  4016   006E5C  EC04  F029         	call	_lcdCommand
  4017   006E60                     
  4018                           ;output.c: 62:         lcdData('>');
  4019   006E60  0E3E               	movlw	62
  4020   006E62  ECB7  F026         	call	_lcdData
  4021   006E66                     
  4022                           ;output.c: 63:         int d = (bcd2dec(dsReadData(0x04)& 0xcf));
  4023   006E66  0E00               	movlw	0
  4024   006E68  6E0F               	movwf	(dsReadData@address+1)^0,c
  4025   006E6A  0E04               	movlw	4
  4026   006E6C  6E0E               	movwf	dsReadData@address^0,c
  4027   006E6E  ECE1  F028         	call	_dsReadData	;wreg free
  4028   006E72  0ECF               	movlw	207
  4029   006E74  140E               	andwf	?_dsReadData^0,w,c
  4030   006E76  6E13               	movwf	bcd2dec@value^0,c
  4031   006E78  6A14               	clrf	(bcd2dec@value+1)^0,c
  4032   006E7A  EC7C  F028         	call	_bcd2dec	;wreg free
  4033   006E7E  C013  F026         	movff	?_bcd2dec,outputPrint@d
  4034   006E82  C014  F027         	movff	?_bcd2dec+1,outputPrint@d+1
  4035   006E86                     
  4036                           ;output.c: 64:         if (d == 0)
  4037   006E86  5026               	movf	outputPrint@d^0,w,c
  4038   006E88  1027               	iorwf	(outputPrint@d+1)^0,w,c
  4039   006E8A  A4D8               	btfss	status,2,c
  4040   006E8C  EF4A  F037         	goto	u3971
  4041   006E90  EF4C  F037         	goto	u3970
  4042   006E94                     u3971:
  4043   006E94  EF58  F037         	goto	l4298
  4044   006E98                     u3970:
  4045   006E98                     
  4046                           ;output.c: 65:             lcdInt(d + 1, 2);
  4047   006E98  0E01               	movlw	1
  4048   006E9A  2426               	addwf	outputPrint@d^0,w,c
  4049   006E9C  6E17               	movwf	lcdInt@val^0,c
  4050   006E9E  0E00               	movlw	0
  4051   006EA0  2027               	addwfc	(outputPrint@d+1)^0,w,c
  4052   006EA2  6E18               	movwf	(lcdInt@val+1)^0,c
  4053   006EA4  0E02               	movlw	2
  4054   006EA6  6E19               	movwf	lcdInt@digNum^0,c
  4055   006EA8  EC7A  F02B         	call	_lcdInt	;wreg free
  4056   006EAC  EF60  F037         	goto	l4300
  4057   006EB0                     l4298:
  4058                           
  4059                           ;output.c: 67:             lcdInt(d, 2);
  4060   006EB0  C026  F017         	movff	outputPrint@d,lcdInt@val
  4061   006EB4  C027  F018         	movff	outputPrint@d+1,lcdInt@val+1
  4062   006EB8  0E02               	movlw	2
  4063   006EBA  6E19               	movwf	lcdInt@digNum^0,c
  4064   006EBC  EC7A  F02B         	call	_lcdInt	;wreg free
  4065   006EC0                     l4300:
  4066                           
  4067                           ;output.c: 68:         lcdData('/');
  4068   006EC0  0E2F               	movlw	47
  4069   006EC2  ECB7  F026         	call	_lcdData
  4070   006EC6                     
  4071                           ;output.c: 70:         lcdInt((bcd2dec(dsReadData(0x05)& 0x3f)), 2);
  4072   006EC6  0E00               	movlw	0
  4073   006EC8  6E0F               	movwf	(dsReadData@address+1)^0,c
  4074   006ECA  0E05               	movlw	5
  4075   006ECC  6E0E               	movwf	dsReadData@address^0,c
  4076   006ECE  ECE1  F028         	call	_dsReadData	;wreg free
  4077   006ED2  0E3F               	movlw	63
  4078   006ED4  140E               	andwf	?_dsReadData^0,w,c
  4079   006ED6  6E13               	movwf	bcd2dec@value^0,c
  4080   006ED8  6A14               	clrf	(bcd2dec@value+1)^0,c
  4081   006EDA  EC7C  F028         	call	_bcd2dec	;wreg free
  4082   006EDE  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4083   006EE2  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4084   006EE6  0E02               	movlw	2
  4085   006EE8  6E19               	movwf	lcdInt@digNum^0,c
  4086   006EEA  EC7A  F02B         	call	_lcdInt	;wreg free
  4087                           
  4088                           ;output.c: 71:         lcdData('/');
  4089   006EEE  0E2F               	movlw	47
  4090   006EF0  ECB7  F026         	call	_lcdData
  4091   006EF4                     
  4092                           ;output.c: 72:         lcdInt((bcd2dec(dsReadData(0x06)& 0xff)), 2);
  4093   006EF4  0E00               	movlw	0
  4094   006EF6  6E0F               	movwf	(dsReadData@address+1)^0,c
  4095   006EF8  0E06               	movlw	6
  4096   006EFA  6E0E               	movwf	dsReadData@address^0,c
  4097   006EFC  ECE1  F028         	call	_dsReadData	;wreg free
  4098   006F00  500E               	movf	?_dsReadData^0,w,c
  4099   006F02  6E13               	movwf	bcd2dec@value^0,c
  4100   006F04  6A14               	clrf	(bcd2dec@value+1)^0,c
  4101   006F06  EC7C  F028         	call	_bcd2dec	;wreg free
  4102   006F0A  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4103   006F0E  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4104   006F12  0E02               	movlw	2
  4105   006F14  6E19               	movwf	lcdInt@digNum^0,c
  4106   006F16  EC7A  F02B         	call	_lcdInt	;wreg free
  4107   006F1A                     
  4108                           ;output.c: 73:         lcdString("           ");
  4109   006F1A  0E33               	movlw	low STR_11
  4110   006F1C  6E04               	movwf	lcdString@str^0,c
  4111   006F1E  0E7D               	movlw	high STR_11
  4112   006F20  6E05               	movwf	(lcdString@str+1)^0,c
  4113   006F22  EC0E  F028         	call	_lcdString	;wreg free
  4114   006F26                     l4308:
  4115                           
  4116                           ;output.c: 76:     if (numTela == STATE_TEMPOMO) {
  4117   006F26  0E05               	movlw	5
  4118   006F28  1821               	xorwf	outputPrint@numTela^0,w,c
  4119   006F2A  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  4120   006F2C  A4D8               	btfss	status,2,c
  4121   006F2E  EF9B  F037         	goto	u3981
  4122   006F32  EF9D  F037         	goto	u3980
  4123   006F36                     u3981:
  4124   006F36  EFF9  F037         	goto	l4330
  4125   006F3A                     u3980:
  4126   006F3A                     
  4127                           ;output.c: 77:         lcdCommand(0x80);
  4128   006F3A  0E80               	movlw	128
  4129   006F3C  EC04  F029         	call	_lcdCommand
  4130   006F40                     
  4131                           ;output.c: 78:         lcdString(msgs[3][idioma]);
  4132   006F40  5023               	movf	outputPrint@idioma^0,w,c
  4133   006F42  0D02               	mullw	2
  4134   006F44  50F3               	movf	243,w,c
  4135   006F46  0FCE               	addlw	low (_msgs+12)
  4136   006F48  6ED9               	movwf	fsr2l,c
  4137   006F4A  6ADA               	clrf	fsr2h,c
  4138   006F4C  CFDE F004          	movff	postinc2,lcdString@str
  4139   006F50  CFDD F005          	movff	postdec2,lcdString@str+1
  4140   006F54  EC0E  F028         	call	_lcdString	;wreg free
  4141   006F58                     
  4142                           ;output.c: 79:         lcdCommand(0xC0);
  4143   006F58  0EC0               	movlw	192
  4144   006F5A  EC04  F029         	call	_lcdCommand
  4145   006F5E                     
  4146                           ;output.c: 81:         lcdInt((bcd2dec(dsReadData(0x04)& 0xcf)), 2);
  4147   006F5E  0E00               	movlw	0
  4148   006F60  6E0F               	movwf	(dsReadData@address+1)^0,c
  4149   006F62  0E04               	movlw	4
  4150   006F64  6E0E               	movwf	dsReadData@address^0,c
  4151   006F66  ECE1  F028         	call	_dsReadData	;wreg free
  4152   006F6A  0ECF               	movlw	207
  4153   006F6C  140E               	andwf	?_dsReadData^0,w,c
  4154   006F6E  6E13               	movwf	bcd2dec@value^0,c
  4155   006F70  6A14               	clrf	(bcd2dec@value+1)^0,c
  4156   006F72  EC7C  F028         	call	_bcd2dec	;wreg free
  4157   006F76  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4158   006F7A  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4159   006F7E  0E02               	movlw	2
  4160   006F80  6E19               	movwf	lcdInt@digNum^0,c
  4161   006F82  EC7A  F02B         	call	_lcdInt	;wreg free
  4162   006F86                     
  4163                           ;output.c: 82:         lcdData('/');
  4164   006F86  0E2F               	movlw	47
  4165   006F88  ECB7  F026         	call	_lcdData
  4166   006F8C                     
  4167                           ;output.c: 84:         lcdData('>');
  4168   006F8C  0E3E               	movlw	62
  4169   006F8E  ECB7  F026         	call	_lcdData
  4170   006F92                     
  4171                           ;output.c: 85:         lcdInt((bcd2dec(dsReadData(0x05)& 0x3f)), 2);
  4172   006F92  0E00               	movlw	0
  4173   006F94  6E0F               	movwf	(dsReadData@address+1)^0,c
  4174   006F96  0E05               	movlw	5
  4175   006F98  6E0E               	movwf	dsReadData@address^0,c
  4176   006F9A  ECE1  F028         	call	_dsReadData	;wreg free
  4177   006F9E  0E3F               	movlw	63
  4178   006FA0  140E               	andwf	?_dsReadData^0,w,c
  4179   006FA2  6E13               	movwf	bcd2dec@value^0,c
  4180   006FA4  6A14               	clrf	(bcd2dec@value+1)^0,c
  4181   006FA6  EC7C  F028         	call	_bcd2dec	;wreg free
  4182   006FAA  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4183   006FAE  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4184   006FB2  0E02               	movlw	2
  4185   006FB4  6E19               	movwf	lcdInt@digNum^0,c
  4186   006FB6  EC7A  F02B         	call	_lcdInt	;wreg free
  4187   006FBA                     
  4188                           ;output.c: 86:         lcdData('/');
  4189   006FBA  0E2F               	movlw	47
  4190   006FBC  ECB7  F026         	call	_lcdData
  4191   006FC0                     
  4192                           ;output.c: 87:         lcdInt((bcd2dec(dsReadData(0x06)& 0xff)), 2);
  4193   006FC0  0E00               	movlw	0
  4194   006FC2  6E0F               	movwf	(dsReadData@address+1)^0,c
  4195   006FC4  0E06               	movlw	6
  4196   006FC6  6E0E               	movwf	dsReadData@address^0,c
  4197   006FC8  ECE1  F028         	call	_dsReadData	;wreg free
  4198   006FCC  500E               	movf	?_dsReadData^0,w,c
  4199   006FCE  6E13               	movwf	bcd2dec@value^0,c
  4200   006FD0  6A14               	clrf	(bcd2dec@value+1)^0,c
  4201   006FD2  EC7C  F028         	call	_bcd2dec	;wreg free
  4202   006FD6  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4203   006FDA  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4204   006FDE  0E02               	movlw	2
  4205   006FE0  6E19               	movwf	lcdInt@digNum^0,c
  4206   006FE2  EC7A  F02B         	call	_lcdInt	;wreg free
  4207   006FE6                     
  4208                           ;output.c: 88:         lcdString("           ");
  4209   006FE6  0E33               	movlw	low STR_11
  4210   006FE8  6E04               	movwf	lcdString@str^0,c
  4211   006FEA  0E7D               	movlw	high STR_11
  4212   006FEC  6E05               	movwf	(lcdString@str+1)^0,c
  4213   006FEE  EC0E  F028         	call	_lcdString	;wreg free
  4214   006FF2                     l4330:
  4215                           
  4216                           ;output.c: 91:     if (numTela == STATE_ALARMEL) {
  4217   006FF2  5021               	movf	outputPrint@numTela^0,w,c
  4218   006FF4  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  4219   006FF6  A4D8               	btfss	status,2,c
  4220   006FF8  EF00  F038         	goto	u3991
  4221   006FFC  EF02  F038         	goto	u3990
  4222   007000                     u3991:
  4223   007000  EF4D  F038         	goto	l4354
  4224   007004                     u3990:
  4225   007004                     
  4226                           ;output.c: 92:         lcdCommand(0x80);
  4227   007004  0E80               	movlw	128
  4228   007006  EC04  F029         	call	_lcdCommand
  4229   00700A                     
  4230                           ;output.c: 93:         lcdString(msgs[numTela][idioma]);
  4231   00700A  5023               	movf	outputPrint@idioma^0,w,c
  4232   00700C  0D02               	mullw	2
  4233   00700E  CFF3 F025          	movff	prodl,??_outputPrint
  4234   007012  5021               	movf	outputPrint@numTela^0,w,c
  4235   007014  0D04               	mullw	4
  4236   007016  50F3               	movf	243,w,c
  4237   007018  0FC2               	addlw	low _msgs
  4238   00701A  2425               	addwf	??_outputPrint^0,w,c
  4239   00701C  6ED9               	movwf	fsr2l,c
  4240   00701E  6ADA               	clrf	fsr2h,c
  4241   007020  CFDE F004          	movff	postinc2,lcdString@str
  4242   007024  CFDD F005          	movff	postdec2,lcdString@str+1
  4243   007028  EC0E  F028         	call	_lcdString	;wreg free
  4244   00702C                     
  4245                           ;output.c: 94:         lcdCommand(0xC0);
  4246   00702C  0EC0               	movlw	192
  4247   00702E  EC04  F029         	call	_lcdCommand
  4248   007032                     
  4249                           ;output.c: 95:         lcdData('>');
  4250   007032  0E3E               	movlw	62
  4251   007034  ECB7  F026         	call	_lcdData
  4252   007038                     
  4253                           ;output.c: 96:         lcdInt(getAlarmLevel(0), 3);
  4254   007038  0E00               	movlw	0
  4255   00703A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4256   00703C  0E00               	movlw	0
  4257   00703E  6E01               	movwf	getAlarmLevel@lh^0,c
  4258   007040  EC53  F027         	call	_getAlarmLevel	;wreg free
  4259   007044  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  4260   007048  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4261   00704C  0E03               	movlw	3
  4262   00704E  6E19               	movwf	lcdInt@digNum^0,c
  4263   007050  EC7A  F02B         	call	_lcdInt	;wreg free
  4264   007054                     
  4265                           ;output.c: 97:         lcdData('L');
  4266   007054  0E4C               	movlw	76
  4267   007056  ECB7  F026         	call	_lcdData
  4268   00705A                     
  4269                           ;output.c: 98:         lcdString("   ");
  4270   00705A  0E3B               	movlw	low (STR_11+8)
  4271   00705C  6E04               	movwf	lcdString@str^0,c
  4272   00705E  0E7D               	movlw	high (STR_11+8)
  4273   007060  6E05               	movwf	(lcdString@str+1)^0,c
  4274   007062  EC0E  F028         	call	_lcdString	;wreg free
  4275   007066                     
  4276                           ;output.c: 99:         lcdData(' ');
  4277   007066  0E20               	movlw	32
  4278   007068  ECB7  F026         	call	_lcdData
  4279   00706C                     
  4280                           ;output.c: 100:         lcdInt(getAlarmLevel(1), 3);
  4281   00706C  0E00               	movlw	0
  4282   00706E  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4283   007070  0E01               	movlw	1
  4284   007072  6E01               	movwf	getAlarmLevel@lh^0,c
  4285   007074  EC53  F027         	call	_getAlarmLevel	;wreg free
  4286   007078  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  4287   00707C  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4288   007080  0E03               	movlw	3
  4289   007082  6E19               	movwf	lcdInt@digNum^0,c
  4290   007084  EC7A  F02B         	call	_lcdInt	;wreg free
  4291   007088                     
  4292                           ;output.c: 101:         lcdData('H');
  4293   007088  0E48               	movlw	72
  4294   00708A  ECB7  F026         	call	_lcdData
  4295   00708E                     
  4296                           ;output.c: 103:         lcdString("           ");
  4297   00708E  0E33               	movlw	low STR_11
  4298   007090  6E04               	movwf	lcdString@str^0,c
  4299   007092  0E7D               	movlw	high STR_11
  4300   007094  6E05               	movwf	(lcdString@str+1)^0,c
  4301   007096  EC0E  F028         	call	_lcdString	;wreg free
  4302   00709A                     l4354:
  4303                           
  4304                           ;output.c: 105:     if (numTela == STATE_ALARMEH) {
  4305   00709A  0421               	decf	outputPrint@numTela^0,w,c
  4306   00709C  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  4307   00709E  A4D8               	btfss	status,2,c
  4308   0070A0  EF54  F038         	goto	u4001
  4309   0070A4  EF56  F038         	goto	u4000
  4310   0070A8                     u4001:
  4311   0070A8  EFA1  F038         	goto	l4378
  4312   0070AC                     u4000:
  4313   0070AC                     
  4314                           ;output.c: 106:         lcdCommand(0x80);
  4315   0070AC  0E80               	movlw	128
  4316   0070AE  EC04  F029         	call	_lcdCommand
  4317   0070B2                     
  4318                           ;output.c: 107:         lcdString(msgs[numTela][idioma]);
  4319   0070B2  5023               	movf	outputPrint@idioma^0,w,c
  4320   0070B4  0D02               	mullw	2
  4321   0070B6  CFF3 F025          	movff	prodl,??_outputPrint
  4322   0070BA  5021               	movf	outputPrint@numTela^0,w,c
  4323   0070BC  0D04               	mullw	4
  4324   0070BE  50F3               	movf	243,w,c
  4325   0070C0  0FC2               	addlw	low _msgs
  4326   0070C2  2425               	addwf	??_outputPrint^0,w,c
  4327   0070C4  6ED9               	movwf	fsr2l,c
  4328   0070C6  6ADA               	clrf	fsr2h,c
  4329   0070C8  CFDE F004          	movff	postinc2,lcdString@str
  4330   0070CC  CFDD F005          	movff	postdec2,lcdString@str+1
  4331   0070D0  EC0E  F028         	call	_lcdString	;wreg free
  4332   0070D4                     
  4333                           ;output.c: 108:         lcdCommand(0xC0);
  4334   0070D4  0EC0               	movlw	192
  4335   0070D6  EC04  F029         	call	_lcdCommand
  4336   0070DA                     
  4337                           ;output.c: 109:         lcdData(' ');
  4338   0070DA  0E20               	movlw	32
  4339   0070DC  ECB7  F026         	call	_lcdData
  4340   0070E0                     
  4341                           ;output.c: 110:         lcdInt(getAlarmLevel(0), 3);
  4342   0070E0  0E00               	movlw	0
  4343   0070E2  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4344   0070E4  0E00               	movlw	0
  4345   0070E6  6E01               	movwf	getAlarmLevel@lh^0,c
  4346   0070E8  EC53  F027         	call	_getAlarmLevel	;wreg free
  4347   0070EC  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  4348   0070F0  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4349   0070F4  0E03               	movlw	3
  4350   0070F6  6E19               	movwf	lcdInt@digNum^0,c
  4351   0070F8  EC7A  F02B         	call	_lcdInt	;wreg free
  4352   0070FC                     
  4353                           ;output.c: 111:         lcdData('L');
  4354   0070FC  0E4C               	movlw	76
  4355   0070FE  ECB7  F026         	call	_lcdData
  4356   007102                     
  4357                           ;output.c: 112:         lcdString("   ");
  4358   007102  0E3B               	movlw	low (STR_11+8)
  4359   007104  6E04               	movwf	lcdString@str^0,c
  4360   007106  0E7D               	movlw	high (STR_11+8)
  4361   007108  6E05               	movwf	(lcdString@str+1)^0,c
  4362   00710A  EC0E  F028         	call	_lcdString	;wreg free
  4363   00710E                     
  4364                           ;output.c: 113:         lcdData('>');
  4365   00710E  0E3E               	movlw	62
  4366   007110  ECB7  F026         	call	_lcdData
  4367   007114                     
  4368                           ;output.c: 114:         lcdInt(getAlarmLevel(1), 3);
  4369   007114  0E00               	movlw	0
  4370   007116  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4371   007118  0E01               	movlw	1
  4372   00711A  6E01               	movwf	getAlarmLevel@lh^0,c
  4373   00711C  EC53  F027         	call	_getAlarmLevel	;wreg free
  4374   007120  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  4375   007124  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4376   007128  0E03               	movlw	3
  4377   00712A  6E19               	movwf	lcdInt@digNum^0,c
  4378   00712C  EC7A  F02B         	call	_lcdInt	;wreg free
  4379   007130                     
  4380                           ;output.c: 115:         lcdData('H');
  4381   007130  0E48               	movlw	72
  4382   007132  ECB7  F026         	call	_lcdData
  4383   007136                     
  4384                           ;output.c: 116:         lcdString("           ");
  4385   007136  0E33               	movlw	low STR_11
  4386   007138  6E04               	movwf	lcdString@str^0,c
  4387   00713A  0E7D               	movlw	high STR_11
  4388   00713C  6E05               	movwf	(lcdString@str+1)^0,c
  4389   00713E  EC0E  F028         	call	_lcdString	;wreg free
  4390   007142                     l4378:
  4391                           
  4392                           ;output.c: 118:     if (numTela == STATE_IDIOMA) {
  4393   007142  0E07               	movlw	7
  4394   007144  1821               	xorwf	outputPrint@numTela^0,w,c
  4395   007146  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  4396   007148  A4D8               	btfss	status,2,c
  4397   00714A  EFA9  F038         	goto	u4011
  4398   00714E  EFAB  F038         	goto	u4010
  4399   007152                     u4011:
  4400   007152  EFDD  F038         	goto	l4394
  4401   007156                     u4010:
  4402   007156                     
  4403                           ;output.c: 119:         lcdCommand(0x80);
  4404   007156  0E80               	movlw	128
  4405   007158  EC04  F029         	call	_lcdCommand
  4406   00715C                     
  4407                           ;output.c: 120:         lcdString(msgs[4][idioma]);
  4408   00715C  5023               	movf	outputPrint@idioma^0,w,c
  4409   00715E  0D02               	mullw	2
  4410   007160  50F3               	movf	243,w,c
  4411   007162  0FD2               	addlw	low (_msgs+16)
  4412   007164  6ED9               	movwf	fsr2l,c
  4413   007166  6ADA               	clrf	fsr2h,c
  4414   007168  CFDE F004          	movff	postinc2,lcdString@str
  4415   00716C  CFDD F005          	movff	postdec2,lcdString@str+1
  4416   007170  EC0E  F028         	call	_lcdString	;wreg free
  4417   007174                     
  4418                           ;output.c: 121:         lcdCommand(0xC0);
  4419   007174  0EC0               	movlw	192
  4420   007176  EC04  F029         	call	_lcdCommand
  4421   00717A                     
  4422                           ;output.c: 122:         if (getLanguage() == 0) {
  4423   00717A  EC52  F026         	call	_getLanguage	;wreg free
  4424   00717E  0900               	iorlw	0
  4425   007180  A4D8               	btfss	status,2,c
  4426   007182  EFC5  F038         	goto	u4021
  4427   007186  EFC7  F038         	goto	u4020
  4428   00718A                     u4021:
  4429   00718A  EFCD  F038         	goto	l4390
  4430   00718E                     u4020:
  4431   00718E                     
  4432                           ;output.c: 123:             lcdString("Portugues       ");
  4433   00718E  0EB2               	movlw	low STR_19
  4434   007190  6E04               	movwf	lcdString@str^0,c
  4435   007192  0E7C               	movlw	high STR_19
  4436   007194  6E05               	movwf	(lcdString@str+1)^0,c
  4437   007196  EC0E  F028         	call	_lcdString	;wreg free
  4438   00719A                     l4390:
  4439                           
  4440                           ;output.c: 125:         if (getLanguage() == 1) {
  4441   00719A  EC52  F026         	call	_getLanguage	;wreg free
  4442   00719E  06E8               	decf	wreg,f,c
  4443   0071A0  A4D8               	btfss	status,2,c
  4444   0071A2  EFD5  F038         	goto	u4031
  4445   0071A6  EFD7  F038         	goto	u4030
  4446   0071AA                     u4031:
  4447   0071AA  EFDD  F038         	goto	l4394
  4448   0071AE                     u4030:
  4449   0071AE                     
  4450                           ;output.c: 126:             lcdString("English         ");
  4451   0071AE  0EA1               	movlw	low STR_20
  4452   0071B0  6E04               	movwf	lcdString@str^0,c
  4453   0071B2  0E7C               	movlw	high STR_20
  4454   0071B4  6E05               	movwf	(lcdString@str+1)^0,c
  4455   0071B6  EC0E  F028         	call	_lcdString	;wreg free
  4456   0071BA                     l4394:
  4457                           
  4458                           ;output.c: 131:     if (numTela == STATE_MAIN) {
  4459   0071BA  0E08               	movlw	8
  4460   0071BC  1821               	xorwf	outputPrint@numTela^0,w,c
  4461   0071BE  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  4462   0071C0  A4D8               	btfss	status,2,c
  4463   0071C2  EFE5  F038         	goto	u4041
  4464   0071C6  EFE7  F038         	goto	u4040
  4465   0071CA                     u4041:
  4466   0071CA  EFB3  F039         	goto	l4432
  4467   0071CE                     u4040:
  4468   0071CE                     
  4469                           ;output.c: 132:         lcdCommand(0x80);
  4470   0071CE  0E80               	movlw	128
  4471   0071D0  EC04  F029         	call	_lcdCommand
  4472   0071D4                     
  4473                           ;output.c: 133:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  4474   0071D4  0E00               	movlw	0
  4475   0071D6  6E0F               	movwf	(dsReadData@address+1)^0,c
  4476   0071D8  0E02               	movlw	2
  4477   0071DA  6E0E               	movwf	dsReadData@address^0,c
  4478   0071DC  ECE1  F028         	call	_dsReadData	;wreg free
  4479   0071E0  0E7F               	movlw	127
  4480   0071E2  140E               	andwf	?_dsReadData^0,w,c
  4481   0071E4  6E13               	movwf	bcd2dec@value^0,c
  4482   0071E6  6A14               	clrf	(bcd2dec@value+1)^0,c
  4483   0071E8  EC7C  F028         	call	_bcd2dec	;wreg free
  4484   0071EC  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4485   0071F0  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4486   0071F4  0E02               	movlw	2
  4487   0071F6  6E19               	movwf	lcdInt@digNum^0,c
  4488   0071F8  EC7A  F02B         	call	_lcdInt	;wreg free
  4489   0071FC                     
  4490                           ;output.c: 134:         lcdData(':');
  4491   0071FC  0E3A               	movlw	58
  4492   0071FE  ECB7  F026         	call	_lcdData
  4493                           
  4494                           ;output.c: 135:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  4495   007202  0E00               	movlw	0
  4496   007204  6E0F               	movwf	(dsReadData@address+1)^0,c
  4497   007206  0E01               	movlw	1
  4498   007208  6E0E               	movwf	dsReadData@address^0,c
  4499   00720A  ECE1  F028         	call	_dsReadData	;wreg free
  4500   00720E  0E7F               	movlw	127
  4501   007210  140E               	andwf	?_dsReadData^0,w,c
  4502   007212  6E13               	movwf	bcd2dec@value^0,c
  4503   007214  6A14               	clrf	(bcd2dec@value+1)^0,c
  4504   007216  EC7C  F028         	call	_bcd2dec	;wreg free
  4505   00721A  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4506   00721E  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4507   007222  0E02               	movlw	2
  4508   007224  6E19               	movwf	lcdInt@digNum^0,c
  4509   007226  EC7A  F02B         	call	_lcdInt	;wreg free
  4510   00722A                     
  4511                           ;output.c: 138:         lcdString("   ");
  4512   00722A  0E3B               	movlw	low (STR_11+8)
  4513   00722C  6E04               	movwf	lcdString@str^0,c
  4514   00722E  0E7D               	movlw	high (STR_11+8)
  4515   007230  6E05               	movwf	(lcdString@str+1)^0,c
  4516   007232  EC0E  F028         	call	_lcdString	;wreg free
  4517   007236                     
  4518                           ;output.c: 139:         int d = (bcd2dec(dsReadData(0x04)& 0xcf));
  4519   007236  0E00               	movlw	0
  4520   007238  6E0F               	movwf	(dsReadData@address+1)^0,c
  4521   00723A  0E04               	movlw	4
  4522   00723C  6E0E               	movwf	dsReadData@address^0,c
  4523   00723E  ECE1  F028         	call	_dsReadData	;wreg free
  4524   007242  0ECF               	movlw	207
  4525   007244  140E               	andwf	?_dsReadData^0,w,c
  4526   007246  6E13               	movwf	bcd2dec@value^0,c
  4527   007248  6A14               	clrf	(bcd2dec@value+1)^0,c
  4528   00724A  EC7C  F028         	call	_bcd2dec	;wreg free
  4529   00724E  C013  F028         	movff	?_bcd2dec,outputPrint@d_449
  4530   007252  C014  F029         	movff	?_bcd2dec+1,outputPrint@d_449+1
  4531   007256                     
  4532                           ;output.c: 140:         if (d == 0)
  4533   007256  5028               	movf	outputPrint@d_449^0,w,c
  4534   007258  1029               	iorwf	(outputPrint@d_449+1)^0,w,c
  4535   00725A  A4D8               	btfss	status,2,c
  4536   00725C  EF32  F039         	goto	u4051
  4537   007260  EF34  F039         	goto	u4050
  4538   007264                     u4051:
  4539   007264  EF40  F039         	goto	l4410
  4540   007268                     u4050:
  4541   007268                     
  4542                           ;output.c: 141:             lcdInt(d + 1, 2);
  4543   007268  0E01               	movlw	1
  4544   00726A  2428               	addwf	outputPrint@d_449^0,w,c
  4545   00726C  6E17               	movwf	lcdInt@val^0,c
  4546   00726E  0E00               	movlw	0
  4547   007270  2029               	addwfc	(outputPrint@d_449+1)^0,w,c
  4548   007272  6E18               	movwf	(lcdInt@val+1)^0,c
  4549   007274  0E02               	movlw	2
  4550   007276  6E19               	movwf	lcdInt@digNum^0,c
  4551   007278  EC7A  F02B         	call	_lcdInt	;wreg free
  4552   00727C  EF48  F039         	goto	l4412
  4553   007280                     l4410:
  4554                           
  4555                           ;output.c: 143:             lcdInt(d, 2);
  4556   007280  C028  F017         	movff	outputPrint@d_449,lcdInt@val
  4557   007284  C029  F018         	movff	outputPrint@d_449+1,lcdInt@val+1
  4558   007288  0E02               	movlw	2
  4559   00728A  6E19               	movwf	lcdInt@digNum^0,c
  4560   00728C  EC7A  F02B         	call	_lcdInt	;wreg free
  4561   007290                     l4412:
  4562                           
  4563                           ;output.c: 144:         lcdData('/');
  4564   007290  0E2F               	movlw	47
  4565   007292  ECB7  F026         	call	_lcdData
  4566   007296                     
  4567                           ;output.c: 145:         lcdInt((bcd2dec(dsReadData(0x05)& 0x3f)), 2);
  4568   007296  0E00               	movlw	0
  4569   007298  6E0F               	movwf	(dsReadData@address+1)^0,c
  4570   00729A  0E05               	movlw	5
  4571   00729C  6E0E               	movwf	dsReadData@address^0,c
  4572   00729E  ECE1  F028         	call	_dsReadData	;wreg free
  4573   0072A2  0E3F               	movlw	63
  4574   0072A4  140E               	andwf	?_dsReadData^0,w,c
  4575   0072A6  6E13               	movwf	bcd2dec@value^0,c
  4576   0072A8  6A14               	clrf	(bcd2dec@value+1)^0,c
  4577   0072AA  EC7C  F028         	call	_bcd2dec	;wreg free
  4578   0072AE  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4579   0072B2  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4580   0072B6  0E02               	movlw	2
  4581   0072B8  6E19               	movwf	lcdInt@digNum^0,c
  4582   0072BA  EC7A  F02B         	call	_lcdInt	;wreg free
  4583                           
  4584                           ;output.c: 146:         lcdData('/');
  4585   0072BE  0E2F               	movlw	47
  4586   0072C0  ECB7  F026         	call	_lcdData
  4587   0072C4                     
  4588                           ;output.c: 147:         lcdInt((bcd2dec(dsReadData(0x06)& 0xff)), 2);
  4589   0072C4  0E00               	movlw	0
  4590   0072C6  6E0F               	movwf	(dsReadData@address+1)^0,c
  4591   0072C8  0E06               	movlw	6
  4592   0072CA  6E0E               	movwf	dsReadData@address^0,c
  4593   0072CC  ECE1  F028         	call	_dsReadData	;wreg free
  4594   0072D0  500E               	movf	?_dsReadData^0,w,c
  4595   0072D2  6E13               	movwf	bcd2dec@value^0,c
  4596   0072D4  6A14               	clrf	(bcd2dec@value+1)^0,c
  4597   0072D6  EC7C  F028         	call	_bcd2dec	;wreg free
  4598   0072DA  C013  F017         	movff	?_bcd2dec,lcdInt@val
  4599   0072DE  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  4600   0072E2  0E02               	movlw	2
  4601   0072E4  6E19               	movwf	lcdInt@digNum^0,c
  4602   0072E6  EC7A  F02B         	call	_lcdInt	;wreg free
  4603   0072EA                     
  4604                           ;output.c: 149:         lcdCommand(0xC0);
  4605   0072EA  0EC0               	movlw	192
  4606   0072EC  EC04  F029         	call	_lcdCommand
  4607   0072F0                     
  4608                           ;output.c: 150:         lcdData('L');
  4609   0072F0  0E4C               	movlw	76
  4610   0072F2  ECB7  F026         	call	_lcdData
  4611   0072F6                     
  4612                           ;output.c: 151:         lcdInt(getAlarmLevel(0), 3);
  4613   0072F6  0E00               	movlw	0
  4614   0072F8  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4615   0072FA  0E00               	movlw	0
  4616   0072FC  6E01               	movwf	getAlarmLevel@lh^0,c
  4617   0072FE  EC53  F027         	call	_getAlarmLevel	;wreg free
  4618   007302  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  4619   007306  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4620   00730A  0E03               	movlw	3
  4621   00730C  6E19               	movwf	lcdInt@digNum^0,c
  4622   00730E  EC7A  F02B         	call	_lcdInt	;wreg free
  4623                           
  4624                           ;output.c: 152:         lcdData(' ');
  4625   007312  0E20               	movlw	32
  4626   007314  ECB7  F026         	call	_lcdData
  4627                           
  4628                           ;output.c: 153:         lcdData(' ');
  4629   007318  0E20               	movlw	32
  4630   00731A  ECB7  F026         	call	_lcdData
  4631                           
  4632                           ;output.c: 155:         lcdData('H');
  4633   00731E  0E48               	movlw	72
  4634   007320  ECB7  F026         	call	_lcdData
  4635   007324                     
  4636                           ;output.c: 156:         lcdInt(getAlarmLevel(1), 3);
  4637   007324  0E00               	movlw	0
  4638   007326  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4639   007328  0E01               	movlw	1
  4640   00732A  6E01               	movwf	getAlarmLevel@lh^0,c
  4641   00732C  EC53  F027         	call	_getAlarmLevel	;wreg free
  4642   007330  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  4643   007334  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4644   007338  0E03               	movlw	3
  4645   00733A  6E19               	movwf	lcdInt@digNum^0,c
  4646   00733C  EC7A  F02B         	call	_lcdInt	;wreg free
  4647   007340                     
  4648                           ;output.c: 157:         lcdData(' ');
  4649   007340  0E20               	movlw	32
  4650   007342  ECB7  F026         	call	_lcdData
  4651   007346                     
  4652                           ;output.c: 158:         lcdData(' ');
  4653   007346  0E20               	movlw	32
  4654   007348  ECB7  F026         	call	_lcdData
  4655   00734C                     
  4656                           ;output.c: 160:         lcdData('T');
  4657   00734C  0E54               	movlw	84
  4658   00734E  ECB7  F026         	call	_lcdData
  4659                           
  4660                           ;output.c: 161:         lcdInt(getTemp(), 3);
  4661   007352  EC60  F026         	call	_getTemp	;wreg free
  4662   007356  C001  F017         	movff	?_getTemp,lcdInt@val
  4663   00735A  C002  F018         	movff	?_getTemp+1,lcdInt@val+1
  4664   00735E  0E03               	movlw	3
  4665   007360  6E19               	movwf	lcdInt@digNum^0,c
  4666   007362  EC7A  F02B         	call	_lcdInt	;wreg free
  4667   007366                     l4432:
  4668                           
  4669                           ;output.c: 164:     if (numTela == STATE_ALERTA) {
  4670   007366  0E09               	movlw	9
  4671   007368  1821               	xorwf	outputPrint@numTela^0,w,c
  4672   00736A  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  4673   00736C  A4D8               	btfss	status,2,c
  4674   00736E  EFBB  F039         	goto	u4061
  4675   007372  EFBD  F039         	goto	u4060
  4676   007376                     u4061:
  4677   007376  EFCF  F039         	goto	l581
  4678   00737A                     u4060:
  4679   00737A                     
  4680                           ;output.c: 165:         lcdCommand(0x80);
  4681   00737A  0E80               	movlw	128
  4682   00737C  EC04  F029         	call	_lcdCommand
  4683   007380                     
  4684                           ;output.c: 166:         lcdString("TEMPERATURA!!!!");
  4685   007380  0E13               	movlw	low STR_22
  4686   007382  6E04               	movwf	lcdString@str^0,c
  4687   007384  0E7D               	movlw	high STR_22
  4688   007386  6E05               	movwf	(lcdString@str+1)^0,c
  4689   007388  EC0E  F028         	call	_lcdString	;wreg free
  4690   00738C                     
  4691                           ;output.c: 167:         lcdCommand(0xC0);
  4692   00738C  0EC0               	movlw	192
  4693   00738E  EC04  F029         	call	_lcdCommand
  4694                           
  4695                           ;output.c: 168:         lcdString("TEMPERATURA!!!!");
  4696   007392  0E13               	movlw	low STR_22
  4697   007394  6E04               	movwf	lcdString@str^0,c
  4698   007396  0E7D               	movlw	high STR_22
  4699   007398  6E05               	movwf	(lcdString@str+1)^0,c
  4700   00739A  EC0E  F028         	call	_lcdString	;wreg free
  4701   00739E                     l581:
  4702   00739E  0012               	return		;funcret
  4703   0073A0                     __end_of_outputPrint:
  4704                           	callstack 0
  4705                           
  4706 ;; *************** function _lcdString *****************
  4707 ;; Defined at:
  4708 ;;		line 168 in file "lcd.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  str             2    3[COMRAM] PTR const unsigned char 
  4711 ;;		 -> STR_23(16), STR_22(16), STR_21(4), STR_20(17), 
  4712 ;;		 -> STR_19(17), STR_18(12), STR_17(4), STR_16(12), 
  4713 ;;		 -> STR_15(4), STR_14(12), STR_13(12), STR_12(12), 
  4714 ;;		 -> STR_11(12), STR_10(16), STR_9(16), STR_8(16), 
  4715 ;;		 -> STR_7(16), STR_6(16), STR_5(16), STR_4(16), 
  4716 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4728 ;;      Params:         2       0       0       0       0       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4731 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4732 ;;Total ram usage:        2 bytes
  4733 ;; Hardware stack levels used: 1
  4734 ;; Hardware stack levels required when called: 3
  4735 ;; This function calls:
  4736 ;;		_lcdData
  4737 ;; This function is called by:
  4738 ;;		_outputPrint
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text10
  4743   00501C                     __ptext10:
  4744                           	callstack 0
  4745   00501C                     _lcdString:
  4746                           	callstack 25
  4747   00501C                     
  4748                           ;lcd.c: 169:     while (*str) {
  4749   00501C  EF1A  F028         	goto	l3860
  4750   005020                     l3856:
  4751                           
  4752                           ;lcd.c: 170:         lcdData(*str++);
  4753   005020  C004  FFF6         	movff	lcdString@str,tblptrl
  4754   005024  C005  FFF7         	movff	lcdString@str+1,tblptrh
  4755   005028                     	if	0	;tblptru may be non-zero
  4756   005028                     	endif
  4757   005028                     	if	0	;tblptru may be non-zero
  4758   005028                     	endif
  4759   005028  0008               	tblrd		*
  4760   00502A  50F5               	movf	tablat,w,c
  4761   00502C  ECB7  F026         	call	_lcdData
  4762   005030  4A04               	infsnz	lcdString@str^0,f,c
  4763   005032  2A05               	incf	(lcdString@str+1)^0,f,c
  4764   005034                     l3860:
  4765                           
  4766                           ;lcd.c: 169:     while (*str) {
  4767   005034  C004  FFF6         	movff	lcdString@str,tblptrl
  4768   005038  C005  FFF7         	movff	lcdString@str+1,tblptrh
  4769   00503C                     	if	0	;tblptru may be non-zero
  4770   00503C                     	endif
  4771   00503C                     	if	0	;tblptru may be non-zero
  4772   00503C                     	endif
  4773   00503C  0008               	tblrd		*
  4774   00503E  50F5               	movf	tablat,w,c
  4775   005040  0900               	iorlw	0
  4776   005042  A4D8               	btfss	status,2,c
  4777   005044  EF26  F028         	goto	u3391
  4778   005048  EF28  F028         	goto	u3390
  4779   00504C                     u3391:
  4780   00504C  EF10  F028         	goto	l3856
  4781   005050                     u3390:
  4782   005050  0012               	return		;funcret
  4783   005052                     __end_of_lcdString:
  4784                           	callstack 0
  4785                           
  4786 ;; *************** function _lcdInt *****************
  4787 ;; Defined at:
  4788 ;;		line 174 in file "lcd.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  val             2   22[COMRAM] int 
  4791 ;;  digNum          1   24[COMRAM] unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  j               2   26[COMRAM] int 
  4794 ;;  divisor         2   28[COMRAM] int 
  4795 ;;  i               2   30[COMRAM] int 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4805 ;;      Params:         3       0       0       0       0       0       0       0       0
  4806 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4807 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4808 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4809 ;;Total ram usage:       10 bytes
  4810 ;; Hardware stack levels used: 1
  4811 ;; Hardware stack levels required when called: 3
  4812 ;; This function calls:
  4813 ;;		___awdiv
  4814 ;;		___awmod
  4815 ;;		___wmul
  4816 ;;		_lcdData
  4817 ;; This function is called by:
  4818 ;;		_outputPrint
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text11
  4823   0056F4                     __ptext11:
  4824                           	callstack 0
  4825   0056F4                     _lcdInt:
  4826                           	callstack 25
  4827   0056F4                     
  4828                           ;lcd.c: 175:     if (val < 0) {
  4829   0056F4  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  4830   0056F6  EF81  F02B         	goto	u3400
  4831   0056FA  EF7F  F02B         	goto	u3401
  4832   0056FE                     u3401:
  4833   0056FE  EF88  F02B         	goto	l3868
  4834   005702                     u3400:
  4835   005702                     
  4836                           ;lcd.c: 176:         val = val * (-1);
  4837   005702  6C17               	negf	lcdInt@val^0,c
  4838   005704  1E18               	comf	(lcdInt@val+1)^0,f,c
  4839   005706  B0D8               	btfsc	status,0,c
  4840   005708  2A18               	incf	(lcdInt@val+1)^0,f,c
  4841   00570A                     
  4842                           ;lcd.c: 177:         lcdData('-');
  4843   00570A  0E2D               	movlw	45
  4844   00570C  ECB7  F026         	call	_lcdData
  4845   005710                     l3868:
  4846                           
  4847                           ;lcd.c: 188:     for (int i = digNum - 1; i >= 0; i--) {
  4848   005710  0EFF               	movlw	255
  4849   005712  2419               	addwf	lcdInt@digNum^0,w,c
  4850   005714  6E1F               	movwf	lcdInt@i^0,c
  4851   005716  6A20               	clrf	(lcdInt@i+1)^0,c
  4852   005718  0EFF               	movlw	255
  4853   00571A  2220               	addwfc	(lcdInt@i+1)^0,f,c
  4854   00571C                     l3870:
  4855   00571C  BE20               	btfsc	(lcdInt@i+1)^0,7,c
  4856   00571E  EF95  F02B         	goto	u3410
  4857   005722  EF93  F02B         	goto	u3411
  4858   005726                     u3411:
  4859   005726  EF97  F02B         	goto	l3874
  4860   00572A                     u3410:
  4861   00572A  EFDD  F02B         	goto	l203
  4862   00572E                     l3874:
  4863                           
  4864                           ;lcd.c: 189:         int divisor = 1;
  4865   00572E  0E00               	movlw	0
  4866   005730  6E1E               	movwf	(lcdInt@divisor+1)^0,c
  4867   005732  0E01               	movlw	1
  4868   005734  6E1D               	movwf	lcdInt@divisor^0,c
  4869                           
  4870                           ;lcd.c: 190:         for (int j = 0; j < i; j++) {
  4871   005736  0E00               	movlw	0
  4872   005738  6E1C               	movwf	(lcdInt@j+1)^0,c
  4873   00573A  0E00               	movlw	0
  4874   00573C  6E1B               	movwf	lcdInt@j^0,c
  4875   00573E  EFB1  F02B         	goto	l3880
  4876   005742                     l3876:
  4877                           
  4878                           ;lcd.c: 191:             divisor *= 10;
  4879   005742  C01D  F009         	movff	lcdInt@divisor,___wmul@multiplier
  4880   005746  C01E  F00A         	movff	lcdInt@divisor+1,___wmul@multiplier+1
  4881   00574A  0E00               	movlw	0
  4882   00574C  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  4883   00574E  0E0A               	movlw	10
  4884   005750  6E0B               	movwf	___wmul@multiplicand^0,c
  4885   005752  ECD7  F026         	call	___wmul	;wreg free
  4886   005756  C009  F01D         	movff	?___wmul,lcdInt@divisor
  4887   00575A  C00A  F01E         	movff	?___wmul+1,lcdInt@divisor+1
  4888   00575E                     
  4889                           ;lcd.c: 192:         }
  4890   00575E  4A1B               	infsnz	lcdInt@j^0,f,c
  4891   005760  2A1C               	incf	(lcdInt@j+1)^0,f,c
  4892   005762                     l3880:
  4893   005762  501F               	movf	lcdInt@i^0,w,c
  4894   005764  5C1B               	subwf	lcdInt@j^0,w,c
  4895   005766  501C               	movf	(lcdInt@j+1)^0,w,c
  4896   005768  0A80               	xorlw	128
  4897   00576A  6E1A               	movwf	??_lcdInt^0,c
  4898   00576C  5020               	movf	(lcdInt@i+1)^0,w,c
  4899   00576E  0A80               	xorlw	128
  4900   005770  581A               	subwfb	??_lcdInt^0,w,c
  4901   005772  A0D8               	btfss	status,0,c
  4902   005774  EFBE  F02B         	goto	u3421
  4903   005778  EFC0  F02B         	goto	u3420
  4904   00577C                     u3421:
  4905   00577C  EFA1  F02B         	goto	l3876
  4906   005780                     u3420:
  4907   005780                     
  4908                           ;lcd.c: 193:         lcdData((val / divisor) % 10 + 48);
  4909   005780  C01D  F003         	movff	lcdInt@divisor,___awdiv@divisor
  4910   005784  C01E  F004         	movff	lcdInt@divisor+1,___awdiv@divisor+1
  4911   005788  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  4912   00578C  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  4913   005790  EC18  F02B         	call	___awdiv	;wreg free
  4914   005794  C001  F009         	movff	?___awdiv,___awmod@dividend
  4915   005798  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  4916   00579C  0E00               	movlw	0
  4917   00579E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4918   0057A0  0E0A               	movlw	10
  4919   0057A2  6E0B               	movwf	___awmod@divisor^0,c
  4920   0057A4  ECC0  F02A         	call	___awmod	;wreg free
  4921   0057A8  5009               	movf	?___awmod^0,w,c
  4922   0057AA  0F30               	addlw	48
  4923   0057AC  ECB7  F026         	call	_lcdData
  4924   0057B0                     
  4925                           ;lcd.c: 194:     }
  4926   0057B0  061F               	decf	lcdInt@i^0,f,c
  4927   0057B2  A0D8               	btfss	status,0,c
  4928   0057B4  0620               	decf	(lcdInt@i+1)^0,f,c
  4929   0057B6  EF8E  F02B         	goto	l3870
  4930   0057BA                     l203:
  4931   0057BA  0012               	return		;funcret
  4932   0057BC                     __end_of_lcdInt:
  4933                           	callstack 0
  4934                           
  4935 ;; *************** function _lcdData *****************
  4936 ;; Defined at:
  4937 ;;		line 108 in file "lcd.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  valor           1    wreg     unsigned char 
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  valor           1    2[COMRAM] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2, status,0, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0
  4952 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4954 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4955 ;;Total ram usage:        1 bytes
  4956 ;; Hardware stack levels used: 1
  4957 ;; Hardware stack levels required when called: 2
  4958 ;; This function calls:
  4959 ;;		_Delay40us
  4960 ;;		_lcdCommand4bits
  4961 ;; This function is called by:
  4962 ;;		_lcdString
  4963 ;;		_lcdInt
  4964 ;;		_outputPrint
  4965 ;;		_printf
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text12
  4970   004D6E                     __ptext12:
  4971                           	callstack 0
  4972   004D6E                     _lcdData:
  4973                           	callstack 25
  4974                           
  4975                           ;incstack = 0
  4976                           ;lcdData@valor stored from wreg
  4977   004D6E  6E03               	movwf	lcdData@valor^0,c
  4978   004D70                     
  4979                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  4980   004D70  0E01               	movlw	1
  4981   004D72  6E01               	movwf	lcdCommand4bits@data^0,c
  4982   004D74  5003               	movf	lcdData@valor^0,w,c
  4983   004D76  EC04  F02A         	call	_lcdCommand4bits
  4984                           
  4985                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  4986   004D7A  0E01               	movlw	1
  4987   004D7C  6E01               	movwf	lcdCommand4bits@data^0,c
  4988   004D7E  3803               	swapf	lcdData@valor^0,w,c
  4989   004D80  0BF0               	andlw	240
  4990   004D82  EC04  F02A         	call	_lcdCommand4bits
  4991                           
  4992                           ;lcd.c: 113:     Delay40us();
  4993   004D86  EC86  F026         	call	_Delay40us	;wreg free
  4994   004D8A  0012               	return		;funcret
  4995   004D8C                     __end_of_lcdData:
  4996                           	callstack 0
  4997                           
  4998 ;; *************** function _getTemp *****************
  4999 ;; Defined at:
  5000 ;;		line 151 in file "var.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  2    0[COMRAM] int 
  5007 ;; Registers used:
  5008 ;;		None
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5014 ;;      Params:         2       0       0       0       0       0       0       0       0
  5015 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5017 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5018 ;;Total ram usage:        2 bytes
  5019 ;; Hardware stack levels used: 1
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_outputPrint
  5024 ;;		_smLoop
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text13
  5029   004CC0                     __ptext13:
  5030                           	callstack 0
  5031   004CC0                     _getTemp:
  5032                           	callstack 28
  5033   004CC0                     
  5034                           ;var.c: 153:     return temp;
  5035   004CC0  C0AD  F001         	movff	_temp,?_getTemp
  5036   004CC4  C0AE  F002         	movff	_temp+1,?_getTemp+1
  5037   004CC8  0012               	return		;funcret
  5038   004CCA                     __end_of_getTemp:
  5039                           	callstack 0
  5040                           
  5041 ;; *************** function _getAlarmLevel *****************
  5042 ;; Defined at:
  5043 ;;		line 88 in file "var.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  lh              2    0[COMRAM] int 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  l               2    2[COMRAM] int 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  2    0[COMRAM] int 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5057 ;;      Params:         2       0       0       0       0       0       0       0       0
  5058 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5060 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5061 ;;Total ram usage:        4 bytes
  5062 ;; Hardware stack levels used: 1
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_outputPrint
  5067 ;;		_smLoop
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text14
  5072   004EA6                     __ptext14:
  5073                           	callstack 0
  5074   004EA6                     _getAlarmLevel:
  5075                           	callstack 28
  5076   004EA6                     
  5077                           ;var.c: 89:     int l;;var.c: 90:     if(lh == 0){
  5078   004EA6  5001               	movf	getAlarmLevel@lh^0,w,c
  5079   004EA8  1002               	iorwf	(getAlarmLevel@lh+1)^0,w,c
  5080   004EAA  A4D8               	btfss	status,2,c
  5081   004EAC  EF5A  F027         	goto	u3471
  5082   004EB0  EF5C  F027         	goto	u3470
  5083   004EB4                     u3471:
  5084   004EB4  EF61  F027         	goto	l795
  5085   004EB8                     u3470:
  5086   004EB8                     
  5087                           ;var.c: 91:         l = alarmLevelLow;
  5088   004EB8  C04F  F003         	movff	_alarmLevelLow,getAlarmLevel@l
  5089   004EBC  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  5090                           
  5091                           ;var.c: 92:     }
  5092   004EBE  EF64  F027         	goto	l796
  5093   004EC2                     l795:
  5094                           
  5095                           ;var.c: 94:     {;var.c: 95:         l = alarmLevelHigh;
  5096   004EC2  C050  F003         	movff	_alarmLevelHigh,getAlarmLevel@l
  5097   004EC6  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  5098   004EC8                     l796:
  5099                           
  5100                           ;var.c: 97:     return l;
  5101   004EC8  C003  F001         	movff	getAlarmLevel@l,?_getAlarmLevel
  5102   004ECC  C004  F002         	movff	getAlarmLevel@l+1,?_getAlarmLevel+1
  5103   004ED0  0012               	return		;funcret
  5104   004ED2                     __end_of_getAlarmLevel:
  5105                           	callstack 0
  5106                           
  5107 ;; *************** function _getTime *****************
  5108 ;; Defined at:
  5109 ;;		line 64 in file "var.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  index           1    wreg     unsigned char 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  index           1   24[COMRAM] unsigned char 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  2   22[COMRAM] int 
  5116 ;; Registers used:
  5117 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5123 ;;      Params:         2       0       0       0       0       0       0       0       0
  5124 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5126 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5127 ;;Total ram usage:        3 bytes
  5128 ;; Hardware stack levels used: 1
  5129 ;; Hardware stack levels required when called: 5
  5130 ;; This function calls:
  5131 ;;		_bcd2dec
  5132 ;;		_dsReadData
  5133 ;; This function is called by:
  5134 ;;		_smLoop
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           	psect	text15
  5139   005B90                     __ptext15:
  5140                           	callstack 0
  5141   005B90                     _getTime:
  5142                           	callstack 24
  5143                           
  5144                           ;incstack = 0
  5145                           ;getTime@index stored from wreg
  5146   005B90  6E19               	movwf	getTime@index^0,c
  5147   005B92                     
  5148                           ;var.c: 65:     switch(index)
  5149   005B92  EF36  F02E         	goto	l4538
  5150   005B96                     l4512:
  5151   005B96  0E00               	movlw	0
  5152   005B98  6E0F               	movwf	(dsReadData@address+1)^0,c
  5153   005B9A  0E00               	movlw	0
  5154   005B9C  6E0E               	movwf	dsReadData@address^0,c
  5155   005B9E  ECE1  F028         	call	_dsReadData	;wreg free
  5156   005BA2  0E7F               	movlw	127
  5157   005BA4  140E               	andwf	?_dsReadData^0,w,c
  5158   005BA6  6E13               	movwf	bcd2dec@value^0,c
  5159   005BA8  6A14               	clrf	(bcd2dec@value+1)^0,c
  5160   005BAA  EC7C  F028         	call	_bcd2dec	;wreg free
  5161   005BAE  C013  F017         	movff	?_bcd2dec,?_getTime
  5162   005BB2  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5163   005BB6  EF51  F02E         	goto	l775
  5164   005BBA                     l4516:
  5165   005BBA  0E00               	movlw	0
  5166   005BBC  6E0F               	movwf	(dsReadData@address+1)^0,c
  5167   005BBE  0E01               	movlw	1
  5168   005BC0  6E0E               	movwf	dsReadData@address^0,c
  5169   005BC2  ECE1  F028         	call	_dsReadData	;wreg free
  5170   005BC6  0E7F               	movlw	127
  5171   005BC8  140E               	andwf	?_dsReadData^0,w,c
  5172   005BCA  6E13               	movwf	bcd2dec@value^0,c
  5173   005BCC  6A14               	clrf	(bcd2dec@value+1)^0,c
  5174   005BCE  EC7C  F028         	call	_bcd2dec	;wreg free
  5175   005BD2  C013  F017         	movff	?_bcd2dec,?_getTime
  5176   005BD6  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5177   005BDA  EF51  F02E         	goto	l775
  5178   005BDE                     l4520:
  5179   005BDE  0E00               	movlw	0
  5180   005BE0  6E0F               	movwf	(dsReadData@address+1)^0,c
  5181   005BE2  0E02               	movlw	2
  5182   005BE4  6E0E               	movwf	dsReadData@address^0,c
  5183   005BE6  ECE1  F028         	call	_dsReadData	;wreg free
  5184   005BEA  0E7F               	movlw	127
  5185   005BEC  140E               	andwf	?_dsReadData^0,w,c
  5186   005BEE  6E13               	movwf	bcd2dec@value^0,c
  5187   005BF0  6A14               	clrf	(bcd2dec@value+1)^0,c
  5188   005BF2  EC7C  F028         	call	_bcd2dec	;wreg free
  5189   005BF6  C013  F017         	movff	?_bcd2dec,?_getTime
  5190   005BFA  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5191   005BFE  EF51  F02E         	goto	l775
  5192   005C02                     l4524:
  5193   005C02  0E00               	movlw	0
  5194   005C04  6E0F               	movwf	(dsReadData@address+1)^0,c
  5195   005C06  0E04               	movlw	4
  5196   005C08  6E0E               	movwf	dsReadData@address^0,c
  5197   005C0A  ECE1  F028         	call	_dsReadData	;wreg free
  5198   005C0E  0ECF               	movlw	207
  5199   005C10  140E               	andwf	?_dsReadData^0,w,c
  5200   005C12  6E13               	movwf	bcd2dec@value^0,c
  5201   005C14  6A14               	clrf	(bcd2dec@value+1)^0,c
  5202   005C16  EC7C  F028         	call	_bcd2dec	;wreg free
  5203   005C1A  C013  F017         	movff	?_bcd2dec,?_getTime
  5204   005C1E  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5205   005C22  EF51  F02E         	goto	l775
  5206   005C26                     l4528:
  5207   005C26  0E00               	movlw	0
  5208   005C28  6E0F               	movwf	(dsReadData@address+1)^0,c
  5209   005C2A  0E05               	movlw	5
  5210   005C2C  6E0E               	movwf	dsReadData@address^0,c
  5211   005C2E  ECE1  F028         	call	_dsReadData	;wreg free
  5212   005C32  0E3F               	movlw	63
  5213   005C34  140E               	andwf	?_dsReadData^0,w,c
  5214   005C36  6E13               	movwf	bcd2dec@value^0,c
  5215   005C38  6A14               	clrf	(bcd2dec@value+1)^0,c
  5216   005C3A  EC7C  F028         	call	_bcd2dec	;wreg free
  5217   005C3E  C013  F017         	movff	?_bcd2dec,?_getTime
  5218   005C42  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5219   005C46  EF51  F02E         	goto	l775
  5220   005C4A                     l4532:
  5221   005C4A  0E00               	movlw	0
  5222   005C4C  6E0F               	movwf	(dsReadData@address+1)^0,c
  5223   005C4E  0E06               	movlw	6
  5224   005C50  6E0E               	movwf	dsReadData@address^0,c
  5225   005C52  ECE1  F028         	call	_dsReadData	;wreg free
  5226   005C56  500E               	movf	?_dsReadData^0,w,c
  5227   005C58  6E13               	movwf	bcd2dec@value^0,c
  5228   005C5A  6A14               	clrf	(bcd2dec@value+1)^0,c
  5229   005C5C  EC7C  F028         	call	_bcd2dec	;wreg free
  5230   005C60  C013  F017         	movff	?_bcd2dec,?_getTime
  5231   005C64  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5232   005C68  EF51  F02E         	goto	l775
  5233   005C6C                     l4538:
  5234   005C6C  5019               	movf	getTime@index^0,w,c
  5235                           
  5236                           ; Switch size 1, requested type "simple"
  5237                           ; Number of cases is 6, Range of values is 0 to 5
  5238                           ; switch strategies available:
  5239                           ; Name         Instructions Cycles
  5240                           ; simple_byte           19    10 (average)
  5241                           ;	Chosen strategy is simple_byte
  5242   005C6E  0A00               	xorlw	0	; case 0
  5243   005C70  B4D8               	btfsc	status,2,c
  5244   005C72  EFCB  F02D         	goto	l4512
  5245   005C76  0A01               	xorlw	1	; case 1
  5246   005C78  B4D8               	btfsc	status,2,c
  5247   005C7A  EFDD  F02D         	goto	l4516
  5248   005C7E  0A03               	xorlw	3	; case 2
  5249   005C80  B4D8               	btfsc	status,2,c
  5250   005C82  EFEF  F02D         	goto	l4520
  5251   005C86  0A01               	xorlw	1	; case 3
  5252   005C88  B4D8               	btfsc	status,2,c
  5253   005C8A  EF01  F02E         	goto	l4524
  5254   005C8E  0A07               	xorlw	7	; case 4
  5255   005C90  B4D8               	btfsc	status,2,c
  5256   005C92  EF13  F02E         	goto	l4528
  5257   005C96  0A01               	xorlw	1	; case 5
  5258   005C98  B4D8               	btfsc	status,2,c
  5259   005C9A  EF25  F02E         	goto	l4532
  5260   005C9E  EF51  F02E         	goto	l775
  5261   005CA2                     l775:
  5262   005CA2  0012               	return		;funcret
  5263   005CA4                     __end_of_getTime:
  5264                           	callstack 0
  5265                           
  5266 ;; *************** function _getState *****************
  5267 ;; Defined at:
  5268 ;;		line 55 in file "var.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      unsigned char 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5282 ;;      Params:         0       0       0       0       0       0       0       0       0
  5283 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5285 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used: 1
  5288 ;; This function calls:
  5289 ;;		Nothing
  5290 ;; This function is called by:
  5291 ;;		_smLoop
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text16
  5296   004CB0                     __ptext16:
  5297                           	callstack 0
  5298   004CB0                     _getState:
  5299                           	callstack 29
  5300   004CB0                     
  5301                           ;var.c: 56:     return state;
  5302   004CB0  5052               	movf	_state^0,w,c
  5303   004CB2  0012               	return		;funcret
  5304   004CB4                     __end_of_getState:
  5305                           	callstack 0
  5306                           
  5307 ;; *************** function _eventRead *****************
  5308 ;; Defined at:
  5309 ;;		line 25 in file "event.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  key             2   29[COMRAM] int 
  5314 ;;  ev              2   26[COMRAM] int 
  5315 ;;  data            1   28[COMRAM] unsigned char 
  5316 ;;  prot            1   25[COMRAM] PTR unsigned char 
  5317 ;;		 -> prot(6), 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      unsigned char 
  5320 ;; Registers used:
  5321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5327 ;;      Params:         0       0       0       0       0       0       0       0       0
  5328 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5329 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5330 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5331 ;;Total ram usage:        7 bytes
  5332 ;; Hardware stack levels used: 1
  5333 ;; Hardware stack levels required when called: 6
  5334 ;; This function calls:
  5335 ;;		_getLanguage
  5336 ;;		_getProt
  5337 ;;		_kpRead
  5338 ;;		_serialRead
  5339 ;;		_serialSend
  5340 ;;		_setLanguage
  5341 ;;		_setProt
  5342 ;; This function is called by:
  5343 ;;		_smLoop
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           	psect	text17
  5348   005FC2                     __ptext17:
  5349                           	callstack 0
  5350   005FC2                     _eventRead:
  5351                           	callstack 23
  5352   005FC2                     
  5353                           ;event.c: 26:     int key;;event.c: 27:     int ev = EV_NOEVENT;
  5354   005FC2  0E00               	movlw	0
  5355   005FC4  6E1C               	movwf	(eventRead@ev+1)^0,c
  5356   005FC6  0E06               	movlw	6
  5357   005FC8  6E1B               	movwf	eventRead@ev^0,c
  5358   005FCA                     
  5359                           ;event.c: 28:     key = kpRead();
  5360   005FCA  EC56  F026         	call	_kpRead	;wreg free
  5361   005FCE  6E19               	movwf	??_eventRead^0,c
  5362   005FD0  5019               	movf	??_eventRead^0,w,c
  5363   005FD2  6E1E               	movwf	eventRead@key^0,c
  5364   005FD4  6A1F               	clrf	(eventRead@key+1)^0,c
  5365   005FD6                     
  5366                           ;event.c: 29:     if (key != key_ant) {
  5367   005FD6  0100               	movlb	0	; () banked
  5368   005FD8  51B7               	movf	_key_ant& (0+255),w,b
  5369   005FDA  181E               	xorwf	eventRead@key^0,w,c
  5370   005FDC  E109               	bnz	u3850
  5371   005FDE  51B8               	movf	(_key_ant+1)& (0+255),w,b
  5372   005FE0  181F               	xorwf	(eventRead@key+1)^0,w,c
  5373   005FE2  B4D8               	btfsc	status,2,c
  5374   005FE4  EFF6  F02F         	goto	u3851
  5375   005FE8  EFF8  F02F         	goto	u3850
  5376   005FEC                     u3851:
  5377   005FEC  EF2F  F030         	goto	l4194
  5378   005FF0                     u3850:
  5379   005FF0                     
  5380                           ; BSR set to: 0
  5381                           ;event.c: 30:         if (((key) & (1<<0))) {
  5382   005FF0  A01E               	btfss	eventRead@key^0,0,c
  5383   005FF2  EFFD  F02F         	goto	u3861
  5384   005FF6  EFFF  F02F         	goto	u3860
  5385   005FFA                     u3861:
  5386   005FFA  EF03  F030         	goto	l4178
  5387   005FFE                     u3860:
  5388   005FFE                     
  5389                           ; BSR set to: 0
  5390                           ;event.c: 31:             ev = EV_B_0;
  5391   005FFE  0E00               	movlw	0
  5392   006000  6E1C               	movwf	(eventRead@ev+1)^0,c
  5393   006002  0E00               	movlw	0
  5394   006004  6E1B               	movwf	eventRead@ev^0,c
  5395   006006                     l4178:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;event.c: 34:         if (((key) & (1<<1))) {
  5399   006006  A21E               	btfss	eventRead@key^0,1,c
  5400   006008  EF08  F030         	goto	u3871
  5401   00600C  EF0A  F030         	goto	u3870
  5402   006010                     u3871:
  5403   006010  EF0E  F030         	goto	l4182
  5404   006014                     u3870:
  5405   006014                     
  5406                           ; BSR set to: 0
  5407                           ;event.c: 35:             ev = EV_B_1;
  5408   006014  0E00               	movlw	0
  5409   006016  6E1C               	movwf	(eventRead@ev+1)^0,c
  5410   006018  0E01               	movlw	1
  5411   00601A  6E1B               	movwf	eventRead@ev^0,c
  5412   00601C                     l4182:
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;event.c: 38:         if (((key) & (1<<2))) {
  5416   00601C  A41E               	btfss	eventRead@key^0,2,c
  5417   00601E  EF13  F030         	goto	u3881
  5418   006022  EF15  F030         	goto	u3880
  5419   006026                     u3881:
  5420   006026  EF19  F030         	goto	l4186
  5421   00602A                     u3880:
  5422   00602A                     
  5423                           ; BSR set to: 0
  5424                           ;event.c: 39:             ev = EV_B_2;
  5425   00602A  0E00               	movlw	0
  5426   00602C  6E1C               	movwf	(eventRead@ev+1)^0,c
  5427   00602E  0E02               	movlw	2
  5428   006030  6E1B               	movwf	eventRead@ev^0,c
  5429   006032                     l4186:
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;event.c: 42:         if (((key) & (1<<3))) {
  5433   006032  A61E               	btfss	eventRead@key^0,3,c
  5434   006034  EF1E  F030         	goto	u3891
  5435   006038  EF20  F030         	goto	u3890
  5436   00603C                     u3891:
  5437   00603C  EF24  F030         	goto	l4190
  5438   006040                     u3890:
  5439   006040                     
  5440                           ; BSR set to: 0
  5441                           ;event.c: 43:             ev = EV_B_3;
  5442   006040  0E00               	movlw	0
  5443   006042  6E1C               	movwf	(eventRead@ev+1)^0,c
  5444   006044  0E03               	movlw	3
  5445   006046  6E1B               	movwf	eventRead@ev^0,c
  5446   006048                     l4190:
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;event.c: 46:         if (((key) & (1<<4))) {
  5450   006048  A81E               	btfss	eventRead@key^0,4,c
  5451   00604A  EF29  F030         	goto	u3901
  5452   00604E  EF2B  F030         	goto	u3900
  5453   006052                     u3901:
  5454   006052  EF2F  F030         	goto	l4194
  5455   006056                     u3900:
  5456   006056                     
  5457                           ; BSR set to: 0
  5458                           ;event.c: 47:             ev = EV_B_4;
  5459   006056  0E00               	movlw	0
  5460   006058  6E1C               	movwf	(eventRead@ev+1)^0,c
  5461   00605A  0E04               	movlw	4
  5462   00605C  6E1B               	movwf	eventRead@ev^0,c
  5463   00605E                     l4194:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;event.c: 51:     key_ant = key;
  5467   00605E  C01E  F0B7         	movff	eventRead@key,_key_ant
  5468   006062  C01F  F0B8         	movff	eventRead@key+1,_key_ant+1
  5469   006066                     
  5470                           ; BSR set to: 0
  5471                           ;event.c: 54:     unsigned char data = serialRead();
  5472   006066  EC3D  F027         	call	_serialRead	;wreg free
  5473   00606A  6E1D               	movwf	eventRead@data^0,c
  5474   00606C                     
  5475                           ;event.c: 55:     serialSend(data);
  5476   00606C  501D               	movf	eventRead@data^0,w,c
  5477   00606E  EC7B  F026         	call	_serialSend
  5478   006072                     
  5479                           ;event.c: 56:     unsigned char* prot;;event.c: 57:     if (data != 0) {
  5480   006072  501D               	movf	eventRead@data^0,w,c
  5481   006074  B4D8               	btfsc	status,2,c
  5482   006076  EF3F  F030         	goto	u3911
  5483   00607A  EF41  F030         	goto	u3910
  5484   00607E                     u3911:
  5485   00607E  EFBA  F030         	goto	l509
  5486   006082                     u3910:
  5487   006082                     
  5488                           ;event.c: 58:         prot = getProt();
  5489   006082  EC54  F026         	call	_getProt	;wreg free
  5490   006086  6E1A               	movwf	eventRead@prot^0,c
  5491   006088                     
  5492                           ;event.c: 59:         if (prot[0] == 0) {
  5493   006088  501A               	movf	eventRead@prot^0,w,c
  5494   00608A  6ED9               	movwf	fsr2l,c
  5495   00608C  6ADA               	clrf	fsr2h,c
  5496   00608E  50DF               	movf	indf2,w,c
  5497   006090  A4D8               	btfss	status,2,c
  5498   006092  EF4D  F030         	goto	u3921
  5499   006096  EF4F  F030         	goto	u3920
  5500   00609A                     u3921:
  5501   00609A  EFAB  F030         	goto	l4230
  5502   00609E                     u3920:
  5503   00609E  EF84  F030         	goto	l4228
  5504   0060A2                     l4208:
  5505                           
  5506                           ;event.c: 62:                     ev = EV_B_0;
  5507   0060A2  0E00               	movlw	0
  5508   0060A4  6E1C               	movwf	(eventRead@ev+1)^0,c
  5509   0060A6  0E00               	movlw	0
  5510   0060A8  6E1B               	movwf	eventRead@ev^0,c
  5511                           
  5512                           ;event.c: 63:                     break;
  5513   0060AA  EFBA  F030         	goto	l509
  5514   0060AE                     l4210:
  5515                           
  5516                           ;event.c: 65:                     ev = EV_B_1;
  5517   0060AE  0E00               	movlw	0
  5518   0060B0  6E1C               	movwf	(eventRead@ev+1)^0,c
  5519   0060B2  0E01               	movlw	1
  5520   0060B4  6E1B               	movwf	eventRead@ev^0,c
  5521                           
  5522                           ;event.c: 66:                     break;
  5523   0060B6  EFBA  F030         	goto	l509
  5524   0060BA                     l4212:
  5525                           
  5526                           ;event.c: 68:                     ev = EV_B_2;
  5527   0060BA  0E00               	movlw	0
  5528   0060BC  6E1C               	movwf	(eventRead@ev+1)^0,c
  5529   0060BE  0E02               	movlw	2
  5530   0060C0  6E1B               	movwf	eventRead@ev^0,c
  5531                           
  5532                           ;event.c: 69:                     break;
  5533   0060C2  EFBA  F030         	goto	l509
  5534   0060C6                     l4214:
  5535                           
  5536                           ;event.c: 71:                     ev = EV_B_3;
  5537   0060C6  0E00               	movlw	0
  5538   0060C8  6E1C               	movwf	(eventRead@ev+1)^0,c
  5539   0060CA  0E03               	movlw	3
  5540   0060CC  6E1B               	movwf	eventRead@ev^0,c
  5541                           
  5542                           ;event.c: 72:                     break;
  5543   0060CE  EFBA  F030         	goto	l509
  5544   0060D2                     l4216:
  5545                           
  5546                           ;event.c: 74:                     ev = EV_B_4;
  5547   0060D2  0E00               	movlw	0
  5548   0060D4  6E1C               	movwf	(eventRead@ev+1)^0,c
  5549   0060D6  0E04               	movlw	4
  5550   0060D8  6E1B               	movwf	eventRead@ev^0,c
  5551                           
  5552                           ;event.c: 75:                     break;
  5553   0060DA  EFBA  F030         	goto	l509
  5554   0060DE                     l4218:
  5555                           
  5556                           ;event.c: 77:                     ev = EV_NOEVENT;
  5557   0060DE  0E00               	movlw	0
  5558   0060E0  6E1C               	movwf	(eventRead@ev+1)^0,c
  5559   0060E2  0E06               	movlw	6
  5560   0060E4  6E1B               	movwf	eventRead@ev^0,c
  5561   0060E6                     
  5562                           ;event.c: 78:                     setProt('p');
  5563   0060E6  0E70               	movlw	112
  5564   0060E8  ECEA  F026         	call	_setProt
  5565                           
  5566                           ;event.c: 79:                     break;
  5567   0060EC  EFBA  F030         	goto	l509
  5568   0060F0                     l4222:
  5569                           
  5570                           ;event.c: 81:                     ev = EV_NOEVENT;
  5571   0060F0  0E00               	movlw	0
  5572   0060F2  6E1C               	movwf	(eventRead@ev+1)^0,c
  5573   0060F4  0E06               	movlw	6
  5574   0060F6  6E1B               	movwf	eventRead@ev^0,c
  5575   0060F8                     
  5576                           ;event.c: 82:                     setLanguage(getLanguage() + 1);
  5577   0060F8  EC52  F026         	call	_getLanguage	;wreg free
  5578   0060FC  6E19               	movwf	??_eventRead^0,c
  5579   0060FE  2819               	incf	??_eventRead^0,w,c
  5580   006100  EC9E  F026         	call	_setLanguage
  5581                           
  5582                           ;event.c: 83:                     break;
  5583   006104  EFBA  F030         	goto	l509
  5584   006108                     l4228:
  5585   006108  501D               	movf	eventRead@data^0,w,c
  5586                           
  5587                           ; Switch size 1, requested type "simple"
  5588                           ; Number of cases is 9, Range of values is 50 to 112
  5589                           ; switch strategies available:
  5590                           ; Name         Instructions Cycles
  5591                           ; simple_byte           28    15 (average)
  5592                           ;	Chosen strategy is simple_byte
  5593   00610A  0A32               	xorlw	50	; case 50
  5594   00610C  B4D8               	btfsc	status,2,c
  5595   00610E  EF51  F030         	goto	l4208
  5596   006112  0A06               	xorlw	6	; case 52
  5597   006114  B4D8               	btfsc	status,2,c
  5598   006116  EF5D  F030         	goto	l4212
  5599   00611A  0A01               	xorlw	1	; case 53
  5600   00611C  B4D8               	btfsc	status,2,c
  5601   00611E  EF69  F030         	goto	l4216
  5602   006122  0A03               	xorlw	3	; case 54
  5603   006124  B4D8               	btfsc	status,2,c
  5604   006126  EF63  F030         	goto	l4214
  5605   00612A  0A0E               	xorlw	14	; case 56
  5606   00612C  B4D8               	btfsc	status,2,c
  5607   00612E  EF57  F030         	goto	l4210
  5608   006132  0A74               	xorlw	116	; case 76
  5609   006134  B4D8               	btfsc	status,2,c
  5610   006136  EF78  F030         	goto	l4222
  5611   00613A  0A1C               	xorlw	28	; case 80
  5612   00613C  B4D8               	btfsc	status,2,c
  5613   00613E  EF6F  F030         	goto	l4218
  5614   006142  0A3C               	xorlw	60	; case 108
  5615   006144  B4D8               	btfsc	status,2,c
  5616   006146  EF78  F030         	goto	l4222
  5617   00614A  0A1C               	xorlw	28	; case 112
  5618   00614C  B4D8               	btfsc	status,2,c
  5619   00614E  EF6F  F030         	goto	l4218
  5620   006152  EFBA  F030         	goto	l509
  5621   006156                     l4230:
  5622                           
  5623                           ;event.c: 88:             setProt(data);
  5624   006156  501D               	movf	eventRead@data^0,w,c
  5625   006158  ECEA  F026         	call	_setProt
  5626   00615C                     
  5627                           ;event.c: 90:             if (prot_ready) {
  5628   00615C  5054               	movf	_prot_ready^0,w,c
  5629   00615E  B4D8               	btfsc	status,2,c
  5630   006160  EFB4  F030         	goto	u3931
  5631   006164  EFB6  F030         	goto	u3930
  5632   006168                     u3931:
  5633   006168  EFBA  F030         	goto	l509
  5634   00616C                     u3930:
  5635   00616C                     
  5636                           ;event.c: 91:                 ev = EV_PROT_SERIAL;
  5637   00616C  0E00               	movlw	0
  5638   00616E  6E1C               	movwf	(eventRead@ev+1)^0,c
  5639   006170  0E05               	movlw	5
  5640   006172  6E1B               	movwf	eventRead@ev^0,c
  5641   006174                     l509:
  5642                           
  5643                           ;event.c: 97:     return ev;
  5644   006174  501B               	movf	eventRead@ev^0,w,c
  5645   006176  0012               	return		;funcret
  5646   006178                     __end_of_eventRead:
  5647                           	callstack 0
  5648                           
  5649 ;; *************** function _setProt *****************
  5650 ;; Defined at:
  5651 ;;		line 132 in file "var.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  newChar         1    wreg     unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  newChar         1    0[COMRAM] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5665 ;;      Params:         0       0       0       0       0       0       0       0       0
  5666 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5668 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5669 ;;Total ram usage:        1 bytes
  5670 ;; Hardware stack levels used: 1
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_eventRead
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text18
  5679   004DD4                     __ptext18:
  5680                           	callstack 0
  5681   004DD4                     _setProt:
  5682                           	callstack 28
  5683                           
  5684                           ;incstack = 0
  5685                           ;setProt@newChar stored from wreg
  5686   004DD4  6E01               	movwf	setProt@newChar^0,c
  5687   004DD6                     
  5688                           ;var.c: 134:     prot[index++] = newChar;
  5689   004DD6  504E               	movf	_index^0,w,c
  5690   004DD8  0FBC               	addlw	low _prot
  5691   004DDA  6ED9               	movwf	fsr2l,c
  5692   004DDC  6ADA               	clrf	fsr2h,c
  5693   004DDE  C001  FFDF         	movff	setProt@newChar,indf2
  5694   004DE2  2A4E               	incf	_index^0,f,c
  5695   004DE4                     
  5696                           ;var.c: 136:     if(index == 6) prot_ready = 1;
  5697   004DE4  0E06               	movlw	6
  5698   004DE6  184E               	xorwf	_index^0,w,c
  5699   004DE8  A4D8               	btfss	status,2,c
  5700   004DEA  EFF9  F026         	goto	u3461
  5701   004DEE  EFFB  F026         	goto	u3460
  5702   004DF2                     u3461:
  5703   004DF2  EFFD  F026         	goto	l815
  5704   004DF6                     u3460:
  5705   004DF6  0E01               	movlw	1
  5706   004DF8  6E54               	movwf	_prot_ready^0,c
  5707   004DFA                     l815:
  5708   004DFA  0012               	return		;funcret
  5709   004DFC                     __end_of_setProt:
  5710                           	callstack 0
  5711                           
  5712 ;; *************** function _setLanguage *****************
  5713 ;; Defined at:
  5714 ;;		line 120 in file "var.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  newLanguage     1    wreg     unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  newLanguage     1   23[COMRAM] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5728 ;;      Params:         0       0       0       0       0       0       0       0       0
  5729 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5731 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used: 1
  5734 ;; Hardware stack levels required when called: 5
  5735 ;; This function calls:
  5736 ;;		_dsWriteData
  5737 ;; This function is called by:
  5738 ;;		_eventRead
  5739 ;;		_smLoop
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text19
  5744   004D3C                     __ptext19:
  5745                           	callstack 0
  5746   004D3C                     _setLanguage:
  5747                           	callstack 24
  5748                           
  5749                           ;incstack = 0
  5750                           ;setLanguage@newLanguage stored from wreg
  5751   004D3C  6E18               	movwf	setLanguage@newLanguage^0,c
  5752   004D3E                     
  5753                           ;var.c: 123:     language = newLanguage % 2;
  5754   004D3E  5018               	movf	setLanguage@newLanguage^0,w,c
  5755   004D40  0B01               	andlw	1
  5756   004D42  6E51               	movwf	_language^0,c
  5757   004D44                     
  5758                           ;var.c: 124:     dsWriteData(language, 0x23);
  5759   004D44  0E00               	movlw	0
  5760   004D46  6E16               	movwf	(dsWriteData@address+1)^0,c
  5761   004D48  0E23               	movlw	35
  5762   004D4A  6E15               	movwf	dsWriteData@address^0,c
  5763   004D4C  5051               	movf	_language^0,w,c
  5764   004D4E  EC97  F027         	call	_dsWriteData
  5765   004D52  0012               	return		;funcret
  5766   004D54                     __end_of_setLanguage:
  5767                           	callstack 0
  5768                           
  5769 ;; *************** function _serialSend *****************
  5770 ;; Defined at:
  5771 ;;		line 25 in file "serial.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  c               1    wreg     unsigned char 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;  c               1    0[COMRAM] unsigned char 
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5785 ;;      Params:         0       0       0       0       0       0       0       0       0
  5786 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5788 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5789 ;;Total ram usage:        1 bytes
  5790 ;; Hardware stack levels used: 1
  5791 ;; This function calls:
  5792 ;;		Nothing
  5793 ;; This function is called by:
  5794 ;;		_eventRead
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           	psect	text20
  5799   004CF6                     __ptext20:
  5800                           	callstack 0
  5801   004CF6                     _serialSend:
  5802                           	callstack 28
  5803                           
  5804                           ;incstack = 0
  5805                           ;serialSend@c stored from wreg
  5806   004CF6  6E01               	movwf	serialSend@c^0,c
  5807   004CF8                     l340:
  5808   004CF8  A89E               	btfss	158,4,c	;volatile
  5809   004CFA  EF81  F026         	goto	u3431
  5810   004CFE  EF83  F026         	goto	u3430
  5811   004D02                     u3431:
  5812   004D02  EF7C  F026         	goto	l340
  5813   004D06                     u3430:
  5814   004D06                     
  5815                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  5816   004D06  C001  FFAD         	movff	serialSend@c,4013	;volatile
  5817   004D0A  0012               	return		;funcret
  5818   004D0C                     __end_of_serialSend:
  5819                           	callstack 0
  5820                           
  5821 ;; *************** function _serialRead *****************
  5822 ;; Defined at:
  5823 ;;		line 30 in file "serial.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  resp            1    0[COMRAM] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      unsigned char 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0
  5838 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5840 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5841 ;;Total ram usage:        1 bytes
  5842 ;; Hardware stack levels used: 1
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_eventRead
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text21
  5851   004E7A                     __ptext21:
  5852                           	callstack 0
  5853   004E7A                     _serialRead:
  5854                           	callstack 28
  5855   004E7A                     
  5856                           ;serial.c: 31:     char resp = 0;
  5857   004E7A  0E00               	movlw	0
  5858   004E7C  6E01               	movwf	serialRead@resp^0,c
  5859   004E7E                     
  5860                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  5861   004E7E  A2AB               	btfss	171,1,c	;volatile
  5862   004E80  EF44  F027         	goto	u3441
  5863   004E84  EF46  F027         	goto	u3440
  5864   004E88                     u3441:
  5865   004E88  EF48  F027         	goto	l3898
  5866   004E8C                     u3440:
  5867   004E8C                     
  5868                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  5869   004E8C  98AB               	bcf	171,4,c	;volatile
  5870                           
  5871                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  5872   004E8E  88AB               	bsf	171,4,c	;volatile
  5873   004E90                     l3898:
  5874                           
  5875                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  5876   004E90  AA9E               	btfss	158,5,c	;volatile
  5877   004E92  EF4D  F027         	goto	u3451
  5878   004E96  EF4F  F027         	goto	u3450
  5879   004E9A                     u3451:
  5880   004E9A  EF51  F027         	goto	l3902
  5881   004E9E                     u3450:
  5882   004E9E                     
  5883                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  5884   004E9E  CFAE F001          	movff	4014,serialRead@resp	;volatile
  5885   004EA2                     l3902:
  5886                           
  5887                           ;serial.c: 43:     return resp;
  5888   004EA2  5001               	movf	serialRead@resp^0,w,c
  5889   004EA4  0012               	return		;funcret
  5890   004EA6                     __end_of_serialRead:
  5891                           	callstack 0
  5892                           
  5893 ;; *************** function _kpRead *****************
  5894 ;; Defined at:
  5895 ;;		line 29 in file "keypad.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      unsigned char 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5909 ;;      Params:         0       0       0       0       0       0       0       0       0
  5910 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5912 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5913 ;;Total ram usage:        0 bytes
  5914 ;; Hardware stack levels used: 1
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_eventRead
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text22
  5923   004CAC                     __ptext22:
  5924                           	callstack 0
  5925   004CAC                     _kpRead:
  5926                           	callstack 28
  5927   004CAC                     
  5928                           ;keypad.c: 30:     return valor;
  5929   004CAC  505F               	movf	_valor^0,w,c
  5930   004CAE  0012               	return		;funcret
  5931   004CB0                     __end_of_kpRead:
  5932                           	callstack 0
  5933                           
  5934 ;; *************** function _getProt *****************
  5935 ;; Defined at:
  5936 ;;		line 127 in file "var.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      PTR unsigned char 
  5943 ;; Registers used:
  5944 ;;		wreg
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5950 ;;      Params:         2       0       0       0       0       0       0       0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5953 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5954 ;;Total ram usage:        2 bytes
  5955 ;; Hardware stack levels used: 1
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_eventRead
  5960 ;;		_smLoop
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text23
  5965   004CA8                     __ptext23:
  5966                           	callstack 0
  5967   004CA8                     _getProt:
  5968                           	callstack 29
  5969   004CA8                     
  5970                           ;var.c: 129:     return prot;
  5971   004CA8  0EBC               	movlw	_prot& (0+255)
  5972   004CAA  0012               	return		;funcret
  5973   004CAC                     __end_of_getProt:
  5974                           	callstack 0
  5975                           
  5976 ;; *************** function _getLanguage *****************
  5977 ;; Defined at:
  5978 ;;		line 116 in file "var.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      unsigned char 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5992 ;;      Params:         0       0       0       0       0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5995 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used: 1
  5998 ;; This function calls:
  5999 ;;		Nothing
  6000 ;; This function is called by:
  6001 ;;		_eventRead
  6002 ;;		_outputPrint
  6003 ;;		_smLoop
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text24
  6008   004CA4                     __ptext24:
  6009                           	callstack 0
  6010   004CA4                     _getLanguage:
  6011                           	callstack 28
  6012   004CA4                     
  6013                           ;var.c: 117:     return language;
  6014   004CA4  5051               	movf	_language^0,w,c
  6015   004CA6  0012               	return		;funcret
  6016   004CA8                     __end_of_getLanguage:
  6017                           	callstack 0
  6018                           
  6019 ;; *************** function ___llmod *****************
  6020 ;; Defined at:
  6021 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\llmod.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  dividend        4    0[COMRAM] unsigned long 
  6024 ;;  divisor         4    4[COMRAM] unsigned long 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  counter         1    8[COMRAM] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  4    0[COMRAM] unsigned long 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6036 ;;      Params:         8       0       0       0       0       0       0       0       0
  6037 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6039 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6040 ;;Total ram usage:        9 bytes
  6041 ;; Hardware stack levels used: 1
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_smLoop
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text25
  6050   0054F8                     __ptext25:
  6051                           	callstack 0
  6052   0054F8                     ___llmod:
  6053                           	callstack 29
  6054   0054F8  5005               	movf	___llmod@divisor^0,w,c
  6055   0054FA  1006               	iorwf	(___llmod@divisor+1)^0,w,c
  6056   0054FC  1007               	iorwf	(___llmod@divisor+2)^0,w,c
  6057   0054FE  1008               	iorwf	(___llmod@divisor+3)^0,w,c
  6058   005500  B4D8               	btfsc	status,2,c
  6059   005502  EF85  F02A         	goto	u4161
  6060   005506  EF87  F02A         	goto	u4160
  6061   00550A                     u4161:
  6062   00550A  EFB7  F02A         	goto	l1253
  6063   00550E                     u4160:
  6064   00550E  0E01               	movlw	1
  6065   005510  6E09               	movwf	___llmod@counter^0,c
  6066   005512  EF91  F02A         	goto	l4590
  6067   005516                     l4588:
  6068   005516  90D8               	bcf	status,0,c
  6069   005518  3605               	rlcf	___llmod@divisor^0,f,c
  6070   00551A  3606               	rlcf	(___llmod@divisor+1)^0,f,c
  6071   00551C  3607               	rlcf	(___llmod@divisor+2)^0,f,c
  6072   00551E  3608               	rlcf	(___llmod@divisor+3)^0,f,c
  6073   005520  2A09               	incf	___llmod@counter^0,f,c
  6074   005522                     l4590:
  6075   005522  AE08               	btfss	(___llmod@divisor+3)^0,7,c
  6076   005524  EF96  F02A         	goto	u4171
  6077   005528  EF98  F02A         	goto	u4170
  6078   00552C                     u4171:
  6079   00552C  EF8B  F02A         	goto	l4588
  6080   005530                     u4170:
  6081   005530                     l4592:
  6082   005530  5005               	movf	___llmod@divisor^0,w,c
  6083   005532  5C01               	subwf	___llmod@dividend^0,w,c
  6084   005534  5006               	movf	(___llmod@divisor+1)^0,w,c
  6085   005536  5802               	subwfb	(___llmod@dividend+1)^0,w,c
  6086   005538  5007               	movf	(___llmod@divisor+2)^0,w,c
  6087   00553A  5803               	subwfb	(___llmod@dividend+2)^0,w,c
  6088   00553C  5008               	movf	(___llmod@divisor+3)^0,w,c
  6089   00553E  5804               	subwfb	(___llmod@dividend+3)^0,w,c
  6090   005540  A0D8               	btfss	status,0,c
  6091   005542  EFA5  F02A         	goto	u4181
  6092   005546  EFA7  F02A         	goto	u4180
  6093   00554A                     u4181:
  6094   00554A  EFAF  F02A         	goto	l4596
  6095   00554E                     u4180:
  6096   00554E  5005               	movf	___llmod@divisor^0,w,c
  6097   005550  5E01               	subwf	___llmod@dividend^0,f,c
  6098   005552  5006               	movf	(___llmod@divisor+1)^0,w,c
  6099   005554  5A02               	subwfb	(___llmod@dividend+1)^0,f,c
  6100   005556  5007               	movf	(___llmod@divisor+2)^0,w,c
  6101   005558  5A03               	subwfb	(___llmod@dividend+2)^0,f,c
  6102   00555A  5008               	movf	(___llmod@divisor+3)^0,w,c
  6103   00555C  5A04               	subwfb	(___llmod@dividend+3)^0,f,c
  6104   00555E                     l4596:
  6105   00555E  90D8               	bcf	status,0,c
  6106   005560  3208               	rrcf	(___llmod@divisor+3)^0,f,c
  6107   005562  3207               	rrcf	(___llmod@divisor+2)^0,f,c
  6108   005564  3206               	rrcf	(___llmod@divisor+1)^0,f,c
  6109   005566  3205               	rrcf	___llmod@divisor^0,f,c
  6110   005568  2E09               	decfsz	___llmod@counter^0,f,c
  6111   00556A  EF98  F02A         	goto	l4592
  6112   00556E                     l1253:
  6113   00556E  C001  F001         	movff	___llmod@dividend,?___llmod
  6114   005572  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  6115   005576  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  6116   00557A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  6117   00557E  0012               	return		;funcret
  6118   005580                     __end_of___llmod:
  6119                           	callstack 0
  6120                           
  6121 ;; *************** function _smInit *****************
  6122 ;; Defined at:
  6123 ;;		line 13 in file "stateMachine.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;		None
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;		None
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      void 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0
  6138 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6140 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6141 ;;Total ram usage:        0 bytes
  6142 ;; Hardware stack levels used: 1
  6143 ;; Hardware stack levels required when called: 7
  6144 ;; This function calls:
  6145 ;;		_eventInit
  6146 ;;		_setState
  6147 ;;		_varInit
  6148 ;; This function is called by:
  6149 ;;		_main
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           	psect	text26
  6154   004D8C                     __ptext26:
  6155                           	callstack 0
  6156   004D8C                     _smInit:
  6157                           	callstack 23
  6158   004D8C                     
  6159                           ;stateMachine.c: 14:     varInit();
  6160   004D8C  ECBC  F030         	call	_varInit	;wreg free
  6161   004D90                     
  6162                           ;stateMachine.c: 15:     setState(STATE_MAIN);
  6163   004D90  0E08               	movlw	8
  6164   004D92  EC6C  F026         	call	_setState
  6165   004D96                     
  6166                           ;stateMachine.c: 16:     eventInit();
  6167   004D96  EC92  F026         	call	_eventInit	;wreg free
  6168   004D9A                     
  6169                           ;stateMachine.c: 17:     t = 0;
  6170   004D9A  0E00               	movlw	0
  6171   004D9C  0100               	movlb	0	; () banked
  6172   004D9E  6F60               	movwf	_t& (0+255),b
  6173   004DA0  0E00               	movlw	0
  6174   004DA2  6F61               	movwf	(_t+1)& (0+255),b
  6175   004DA4  0E00               	movlw	0
  6176   004DA6  6F62               	movwf	(_t+2)& (0+255),b
  6177   004DA8  0E00               	movlw	0
  6178   004DAA  6F63               	movwf	(_t+3)& (0+255),b
  6179   004DAC                     
  6180                           ; BSR set to: 0
  6181   004DAC  0012               	return		;funcret
  6182   004DAE                     __end_of_smInit:
  6183                           	callstack 0
  6184                           
  6185 ;; *************** function _varInit *****************
  6186 ;; Defined at:
  6187 ;;		line 21 in file "var.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0
  6202 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6203 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6204 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6205 ;;Total ram usage:        8 bytes
  6206 ;; Hardware stack levels used: 1
  6207 ;; Hardware stack levels required when called: 6
  6208 ;; This function calls:
  6209 ;;		_bcd2dec
  6210 ;;		_dec2bcd
  6211 ;;		_dsReadData
  6212 ;;		_dsWriteData
  6213 ;;		_setAlarmLevel
  6214 ;; This function is called by:
  6215 ;;		_smInit
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text27
  6220   006178                     __ptext27:
  6221                           	callstack 0
  6222   006178                     _varInit:
  6223                           	callstack 23
  6224   006178                     
  6225                           ;var.c: 22:     maxTemp = 100;
  6226   006178  0E00               	movlw	0
  6227   00617A  0100               	movlb	0	; () banked
  6228   00617C  6FAC               	movwf	(_maxTemp+1)& (0+255),b
  6229   00617E  0E64               	movlw	100
  6230   006180  6FAB               	movwf	_maxTemp& (0+255),b
  6231                           
  6232                           ;var.c: 23:     volt = 50;
  6233   006182  0E32               	movlw	50
  6234   006184  6E4D               	movwf	_volt^0,c
  6235                           
  6236                           ;var.c: 24:     voltMin = 33;
  6237   006186  0E21               	movlw	33
  6238   006188  6FBB               	movwf	_voltMin& (0+255),b
  6239                           
  6240                           ;var.c: 25:     state = 0;
  6241   00618A  0E00               	movlw	0
  6242   00618C  6E52               	movwf	_state^0,c
  6243                           
  6244                           ;var.c: 26:     time = 1000;
  6245   00618E  0E03               	movlw	3
  6246   006190  6FB0               	movwf	(_time+1)& (0+255),b
  6247   006192  0EE8               	movlw	232
  6248   006194  6FAF               	movwf	_time& (0+255),b
  6249   006196                     
  6250                           ; BSR set to: 0
  6251                           ;var.c: 28:     alarmLevelHigh = dsReadData(0x20);
  6252   006196  0E00               	movlw	0
  6253   006198  6E0F               	movwf	(dsReadData@address+1)^0,c
  6254   00619A  0E20               	movlw	32
  6255   00619C  6E0E               	movwf	dsReadData@address^0,c
  6256   00619E  ECE1  F028         	call	_dsReadData	;wreg free
  6257   0061A2  500E               	movf	?_dsReadData^0,w,c
  6258   0061A4  6E50               	movwf	_alarmLevelHigh^0,c
  6259   0061A6                     
  6260                           ;var.c: 29:     alarmLevelLow = dsReadData(0x21);
  6261   0061A6  0E00               	movlw	0
  6262   0061A8  6E0F               	movwf	(dsReadData@address+1)^0,c
  6263   0061AA  0E21               	movlw	33
  6264   0061AC  6E0E               	movwf	dsReadData@address^0,c
  6265   0061AE  ECE1  F028         	call	_dsReadData	;wreg free
  6266   0061B2  500E               	movf	?_dsReadData^0,w,c
  6267   0061B4  6E4F               	movwf	_alarmLevelLow^0,c
  6268   0061B6                     
  6269                           ;var.c: 30:     language = dsReadData(0x23) != 1 ? 0 : 1;
  6270   0061B6  0E00               	movlw	0
  6271   0061B8  6E0F               	movwf	(dsReadData@address+1)^0,c
  6272   0061BA  0E23               	movlw	35
  6273   0061BC  6E0E               	movwf	dsReadData@address^0,c
  6274   0061BE  ECE1  F028         	call	_dsReadData	;wreg free
  6275   0061C2  040E               	decf	?_dsReadData^0,w,c
  6276   0061C4  100F               	iorwf	(?_dsReadData+1)^0,w,c
  6277   0061C6  B4D8               	btfsc	status,2,c
  6278   0061C8  EFE8  F030         	goto	u4071
  6279   0061CC  EFEB  F030         	goto	u4070
  6280   0061D0                     u4071:
  6281   0061D0  0E01               	movlw	1
  6282   0061D2  EFEC  F030         	goto	u4080
  6283   0061D6                     u4070:
  6284   0061D6  0E00               	movlw	0
  6285   0061D8                     u4080:
  6286   0061D8  6E51               	movwf	_language^0,c
  6287   0061DA                     
  6288                           ;var.c: 31:     if(alarmLevelHigh + alarmLevelLow != dsReadData(0x22)){
  6289   0061DA  0E00               	movlw	0
  6290   0061DC  6E0F               	movwf	(dsReadData@address+1)^0,c
  6291   0061DE  0E22               	movlw	34
  6292   0061E0  6E0E               	movwf	dsReadData@address^0,c
  6293   0061E2  ECE1  F028         	call	_dsReadData	;wreg free
  6294   0061E6  504F               	movf	_alarmLevelLow^0,w,c
  6295   0061E8  C050  F01B         	movff	_alarmLevelHigh,??_varInit
  6296   0061EC  6A1C               	clrf	(??_varInit+1)^0,c
  6297   0061EE  261B               	addwf	??_varInit^0,f,c
  6298   0061F0  0E00               	movlw	0
  6299   0061F2  221C               	addwfc	(??_varInit+1)^0,f,c
  6300   0061F4  500E               	movf	?_dsReadData^0,w,c
  6301   0061F6  181B               	xorwf	??_varInit^0,w,c
  6302   0061F8  E109               	bnz	u4090
  6303   0061FA  500F               	movf	(?_dsReadData+1)^0,w,c
  6304   0061FC  181C               	xorwf	(??_varInit+1)^0,w,c
  6305   0061FE  B4D8               	btfsc	status,2,c
  6306   006200  EF04  F031         	goto	u4091
  6307   006204  EF06  F031         	goto	u4090
  6308   006208                     u4091:
  6309   006208  EF16  F031         	goto	l4452
  6310   00620C                     u4090:
  6311   00620C                     
  6312                           ;var.c: 32:         setAlarmLevel(0, 0);
  6313   00620C  0E00               	movlw	0
  6314   00620E  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  6315   006210  0E00               	movlw	0
  6316   006212  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  6317   006214  0E00               	movlw	0
  6318   006216  6E1A               	movwf	setAlarmLevel@lh^0,c
  6319   006218  EC28  F029         	call	_setAlarmLevel	;wreg free
  6320                           
  6321                           ;var.c: 33:         setAlarmLevel(120, 1);
  6322   00621C  0E00               	movlw	0
  6323   00621E  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  6324   006220  0E78               	movlw	120
  6325   006222  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  6326   006224  0E01               	movlw	1
  6327   006226  6E1A               	movwf	setAlarmLevel@lh^0,c
  6328   006228  EC28  F029         	call	_setAlarmLevel	;wreg free
  6329   00622C                     l4452:
  6330                           
  6331                           ;var.c: 36:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x00)& 0x7f)) == 0 ? 0 : (bcd2d
      +                          ec(dsReadData(0x00)& 0x7f))),0x00));
  6332   00622C  0E00               	movlw	0
  6333   00622E  6E0F               	movwf	(dsReadData@address+1)^0,c
  6334   006230  0E00               	movlw	0
  6335   006232  6E0E               	movwf	dsReadData@address^0,c
  6336   006234  ECE1  F028         	call	_dsReadData	;wreg free
  6337   006238  0E7F               	movlw	127
  6338   00623A  140E               	andwf	?_dsReadData^0,w,c
  6339   00623C  6E13               	movwf	bcd2dec@value^0,c
  6340   00623E  6A14               	clrf	(bcd2dec@value+1)^0,c
  6341   006240  EC7C  F028         	call	_bcd2dec	;wreg free
  6342   006244  5013               	movf	?_bcd2dec^0,w,c
  6343   006246  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  6344   006248  B4D8               	btfsc	status,2,c
  6345   00624A  EF29  F031         	goto	u4101
  6346   00624E  EF2B  F031         	goto	u4100
  6347   006252                     u4101:
  6348   006252  EF3D  F031         	goto	l4456
  6349   006256                     u4100:
  6350   006256  0E00               	movlw	0
  6351   006258  6E0F               	movwf	(dsReadData@address+1)^0,c
  6352   00625A  0E00               	movlw	0
  6353   00625C  6E0E               	movwf	dsReadData@address^0,c
  6354   00625E  ECE1  F028         	call	_dsReadData	;wreg free
  6355   006262  0E7F               	movlw	127
  6356   006264  140E               	andwf	?_dsReadData^0,w,c
  6357   006266  6E13               	movwf	bcd2dec@value^0,c
  6358   006268  6A14               	clrf	(bcd2dec@value+1)^0,c
  6359   00626A  EC7C  F028         	call	_bcd2dec	;wreg free
  6360   00626E  C013  F01D         	movff	?_bcd2dec,_varInit$568
  6361   006272  C014  F01E         	movff	?_bcd2dec+1,_varInit$568+1
  6362   006276  EF41  F031         	goto	l4458
  6363   00627A                     l4456:
  6364   00627A  0E00               	movlw	0
  6365   00627C  6E1E               	movwf	(_varInit$568+1)^0,c
  6366   00627E  0E00               	movlw	0
  6367   006280  6E1D               	movwf	_varInit$568^0,c
  6368   006282                     l4458:
  6369   006282  0E00               	movlw	0
  6370   006284  6E16               	movwf	(dsWriteData@address+1)^0,c
  6371   006286  0E00               	movlw	0
  6372   006288  6E15               	movwf	dsWriteData@address^0,c
  6373   00628A  C01D  F00F         	movff	_varInit$568,dec2bcd@value
  6374   00628E  C01E  F010         	movff	_varInit$568+1,dec2bcd@value+1
  6375   006292  ECD3  F029         	call	_dec2bcd	;wreg free
  6376   006296  500F               	movf	?_dec2bcd^0,w,c
  6377   006298  EC97  F027         	call	_dsWriteData
  6378   00629C                     
  6379                           ;var.c: 37:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x7f)) == 0 ? 45 : (bcd2
      +                          dec(dsReadData(0x01)& 0x7f))),0x01));
  6380   00629C  0E00               	movlw	0
  6381   00629E  6E0F               	movwf	(dsReadData@address+1)^0,c
  6382   0062A0  0E01               	movlw	1
  6383   0062A2  6E0E               	movwf	dsReadData@address^0,c
  6384   0062A4  ECE1  F028         	call	_dsReadData	;wreg free
  6385   0062A8  0E7F               	movlw	127
  6386   0062AA  140E               	andwf	?_dsReadData^0,w,c
  6387   0062AC  6E13               	movwf	bcd2dec@value^0,c
  6388   0062AE  6A14               	clrf	(bcd2dec@value+1)^0,c
  6389   0062B0  EC7C  F028         	call	_bcd2dec	;wreg free
  6390   0062B4  5013               	movf	?_bcd2dec^0,w,c
  6391   0062B6  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  6392   0062B8  B4D8               	btfsc	status,2,c
  6393   0062BA  EF61  F031         	goto	u4111
  6394   0062BE  EF63  F031         	goto	u4110
  6395   0062C2                     u4111:
  6396   0062C2  EF75  F031         	goto	l4464
  6397   0062C6                     u4110:
  6398   0062C6  0E00               	movlw	0
  6399   0062C8  6E0F               	movwf	(dsReadData@address+1)^0,c
  6400   0062CA  0E01               	movlw	1
  6401   0062CC  6E0E               	movwf	dsReadData@address^0,c
  6402   0062CE  ECE1  F028         	call	_dsReadData	;wreg free
  6403   0062D2  0E7F               	movlw	127
  6404   0062D4  140E               	andwf	?_dsReadData^0,w,c
  6405   0062D6  6E13               	movwf	bcd2dec@value^0,c
  6406   0062D8  6A14               	clrf	(bcd2dec@value+1)^0,c
  6407   0062DA  EC7C  F028         	call	_bcd2dec	;wreg free
  6408   0062DE  C013  F01F         	movff	?_bcd2dec,_varInit$569
  6409   0062E2  C014  F020         	movff	?_bcd2dec+1,_varInit$569+1
  6410   0062E6  EF79  F031         	goto	l4466
  6411   0062EA                     l4464:
  6412   0062EA  0E00               	movlw	0
  6413   0062EC  6E20               	movwf	(_varInit$569+1)^0,c
  6414   0062EE  0E2D               	movlw	45
  6415   0062F0  6E1F               	movwf	_varInit$569^0,c
  6416   0062F2                     l4466:
  6417   0062F2  0E00               	movlw	0
  6418   0062F4  6E16               	movwf	(dsWriteData@address+1)^0,c
  6419   0062F6  0E01               	movlw	1
  6420   0062F8  6E15               	movwf	dsWriteData@address^0,c
  6421   0062FA  C01F  F00F         	movff	_varInit$569,dec2bcd@value
  6422   0062FE  C020  F010         	movff	_varInit$569+1,dec2bcd@value+1
  6423   006302  ECD3  F029         	call	_dec2bcd	;wreg free
  6424   006306  500F               	movf	?_dec2bcd^0,w,c
  6425   006308  EC97  F027         	call	_dsWriteData
  6426   00630C                     
  6427                           ;var.c: 38:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x7f)) == 0 ? 15 : (bcd2
      +                          dec(dsReadData(0x02)& 0x7f))),0x02));
  6428   00630C  0E00               	movlw	0
  6429   00630E  6E0F               	movwf	(dsReadData@address+1)^0,c
  6430   006310  0E02               	movlw	2
  6431   006312  6E0E               	movwf	dsReadData@address^0,c
  6432   006314  ECE1  F028         	call	_dsReadData	;wreg free
  6433   006318  0E7F               	movlw	127
  6434   00631A  140E               	andwf	?_dsReadData^0,w,c
  6435   00631C  6E13               	movwf	bcd2dec@value^0,c
  6436   00631E  6A14               	clrf	(bcd2dec@value+1)^0,c
  6437   006320  EC7C  F028         	call	_bcd2dec	;wreg free
  6438   006324  5013               	movf	?_bcd2dec^0,w,c
  6439   006326  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  6440   006328  B4D8               	btfsc	status,2,c
  6441   00632A  EF99  F031         	goto	u4121
  6442   00632E  EF9B  F031         	goto	u4120
  6443   006332                     u4121:
  6444   006332  EFAD  F031         	goto	l4472
  6445   006336                     u4120:
  6446   006336  0E00               	movlw	0
  6447   006338  6E0F               	movwf	(dsReadData@address+1)^0,c
  6448   00633A  0E02               	movlw	2
  6449   00633C  6E0E               	movwf	dsReadData@address^0,c
  6450   00633E  ECE1  F028         	call	_dsReadData	;wreg free
  6451   006342  0E7F               	movlw	127
  6452   006344  140E               	andwf	?_dsReadData^0,w,c
  6453   006346  6E13               	movwf	bcd2dec@value^0,c
  6454   006348  6A14               	clrf	(bcd2dec@value+1)^0,c
  6455   00634A  EC7C  F028         	call	_bcd2dec	;wreg free
  6456   00634E  C013  F021         	movff	?_bcd2dec,_varInit$570
  6457   006352  C014  F022         	movff	?_bcd2dec+1,_varInit$570+1
  6458   006356  EFB1  F031         	goto	l4474
  6459   00635A                     l4472:
  6460   00635A  0E00               	movlw	0
  6461   00635C  6E22               	movwf	(_varInit$570+1)^0,c
  6462   00635E  0E0F               	movlw	15
  6463   006360  6E21               	movwf	_varInit$570^0,c
  6464   006362                     l4474:
  6465   006362  0E00               	movlw	0
  6466   006364  6E16               	movwf	(dsWriteData@address+1)^0,c
  6467   006366  0E02               	movlw	2
  6468   006368  6E15               	movwf	dsWriteData@address^0,c
  6469   00636A  C021  F00F         	movff	_varInit$570,dec2bcd@value
  6470   00636E  C022  F010         	movff	_varInit$570+1,dec2bcd@value+1
  6471   006372  ECD3  F029         	call	_dec2bcd	;wreg free
  6472   006376  500F               	movf	?_dec2bcd^0,w,c
  6473   006378  EC97  F027         	call	_dsWriteData
  6474   00637C                     
  6475                           ;var.c: 41:     (dsWriteData(dec2bcd(18),0x04));
  6476   00637C  0E00               	movlw	0
  6477   00637E  6E16               	movwf	(dsWriteData@address+1)^0,c
  6478   006380  0E04               	movlw	4
  6479   006382  6E15               	movwf	dsWriteData@address^0,c
  6480   006384  0E00               	movlw	0
  6481   006386  6E10               	movwf	(dec2bcd@value+1)^0,c
  6482   006388  0E12               	movlw	18
  6483   00638A  6E0F               	movwf	dec2bcd@value^0,c
  6484   00638C  ECD3  F029         	call	_dec2bcd	;wreg free
  6485   006390  500F               	movf	?_dec2bcd^0,w,c
  6486   006392  EC97  F027         	call	_dsWriteData
  6487   006396                     
  6488                           ;var.c: 42:     (dsWriteData(dec2bcd(10),0x05));
  6489   006396  0E00               	movlw	0
  6490   006398  6E16               	movwf	(dsWriteData@address+1)^0,c
  6491   00639A  0E05               	movlw	5
  6492   00639C  6E15               	movwf	dsWriteData@address^0,c
  6493   00639E  0E00               	movlw	0
  6494   0063A0  6E10               	movwf	(dec2bcd@value+1)^0,c
  6495   0063A2  0E0A               	movlw	10
  6496   0063A4  6E0F               	movwf	dec2bcd@value^0,c
  6497   0063A6  ECD3  F029         	call	_dec2bcd	;wreg free
  6498   0063AA  500F               	movf	?_dec2bcd^0,w,c
  6499   0063AC  EC97  F027         	call	_dsWriteData
  6500   0063B0  0012               	return		;funcret
  6501   0063B2                     __end_of_varInit:
  6502                           	callstack 0
  6503                           
  6504 ;; *************** function _setAlarmLevel *****************
  6505 ;; Defined at:
  6506 ;;		line 100 in file "var.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  newAlarmLeve    2   23[COMRAM] int 
  6509 ;;  lh              1   25[COMRAM] unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6521 ;;      Params:         3       0       0       0       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6524 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6525 ;;Total ram usage:        3 bytes
  6526 ;; Hardware stack levels used: 1
  6527 ;; Hardware stack levels required when called: 5
  6528 ;; This function calls:
  6529 ;;		_dsWriteData
  6530 ;; This function is called by:
  6531 ;;		_smLoop
  6532 ;;		_varInit
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text28
  6537   005250                     __ptext28:
  6538                           	callstack 0
  6539   005250                     _setAlarmLevel:
  6540                           	callstack 24
  6541   005250                     
  6542                           ;var.c: 101:     if(lh == 1){
  6543   005250  041A               	decf	setAlarmLevel@lh^0,w,c
  6544   005252  A4D8               	btfss	status,2,c
  6545   005254  EF2E  F029         	goto	u3481
  6546   005258  EF30  F029         	goto	u3480
  6547   00525C                     u3481:
  6548   00525C  EF3B  F029         	goto	l800
  6549   005260                     u3480:
  6550   005260                     
  6551                           ;var.c: 102:         alarmLevelHigh = newAlarmLevel;
  6552   005260  C018  F050         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelHigh
  6553   005264                     
  6554                           ;var.c: 104:         dsWriteData(alarmLevelHigh, 0x20);
  6555   005264  0E00               	movlw	0
  6556   005266  6E16               	movwf	(dsWriteData@address+1)^0,c
  6557   005268  0E20               	movlw	32
  6558   00526A  6E15               	movwf	dsWriteData@address^0,c
  6559   00526C  5050               	movf	_alarmLevelHigh^0,w,c
  6560   00526E  EC97  F027         	call	_dsWriteData
  6561                           
  6562                           ;var.c: 105:     }
  6563   005272  EF44  F029         	goto	l801
  6564   005276                     l800:
  6565                           
  6566                           ;var.c: 107:     {;var.c: 108:         alarmLevelLow = newAlarmLevel;
  6567   005276  C018  F04F         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelLow
  6568   00527A                     
  6569                           ;var.c: 110:         dsWriteData(alarmLevelLow, 0x21);
  6570   00527A  0E00               	movlw	0
  6571   00527C  6E16               	movwf	(dsWriteData@address+1)^0,c
  6572   00527E  0E21               	movlw	33
  6573   005280  6E15               	movwf	dsWriteData@address^0,c
  6574   005282  504F               	movf	_alarmLevelLow^0,w,c
  6575   005284  EC97  F027         	call	_dsWriteData
  6576   005288                     l801:
  6577                           
  6578                           ;var.c: 112:     dsWriteData(alarmLevelHigh + alarmLevelLow, 0x22);
  6579   005288  0E00               	movlw	0
  6580   00528A  6E16               	movwf	(dsWriteData@address+1)^0,c
  6581   00528C  0E22               	movlw	34
  6582   00528E  6E15               	movwf	dsWriteData@address^0,c
  6583   005290  5050               	movf	_alarmLevelHigh^0,w,c
  6584   005292  244F               	addwf	_alarmLevelLow^0,w,c
  6585   005294  EC97  F027         	call	_dsWriteData
  6586   005298  0012               	return		;funcret
  6587   00529A                     __end_of_setAlarmLevel:
  6588                           	callstack 0
  6589                           
  6590 ;; *************** function _dsWriteData *****************
  6591 ;; Defined at:
  6592 ;;		line 26 in file "ds1307.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  value           1    wreg     unsigned char 
  6595 ;;  address         2   20[COMRAM] int 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  value           1   22[COMRAM] unsigned char 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  1    wreg      void 
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6607 ;;      Params:         2       0       0       0       0       0       0       0       0
  6608 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6610 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6611 ;;Total ram usage:        3 bytes
  6612 ;; Hardware stack levels used: 1
  6613 ;; Hardware stack levels required when called: 4
  6614 ;; This function calls:
  6615 ;;		_i2cWriteByte
  6616 ;; This function is called by:
  6617 ;;		_varInit
  6618 ;;		_setTime
  6619 ;;		_setAlarmLevel
  6620 ;;		_setLanguage
  6621 ;;		_dsStartClock
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text29
  6626   004F2E                     __ptext29:
  6627                           	callstack 0
  6628   004F2E                     _dsWriteData:
  6629                           	callstack 24
  6630                           
  6631                           ;incstack = 0
  6632                           ;dsWriteData@value stored from wreg
  6633   004F2E  6E17               	movwf	dsWriteData@value^0,c
  6634   004F30                     
  6635                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  6636   004F30  0E00               	movlw	0
  6637   004F32  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6638   004F34  0EDE               	movlw	222
  6639   004F36  6E09               	movwf	i2cWriteByte@byte^0,c
  6640   004F38  0E01               	movlw	1
  6641   004F3A  ECA3  F029         	call	_i2cWriteByte
  6642                           
  6643                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  6644   004F3E  0E00               	movlw	0
  6645   004F40  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6646   004F42  C015  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  6647   004F46  0E00               	movlw	0
  6648   004F48  ECA3  F029         	call	_i2cWriteByte
  6649                           
  6650                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  6651   004F4C  0E01               	movlw	1
  6652   004F4E  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6653   004F50  C017  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  6654   004F54  0E00               	movlw	0
  6655   004F56  ECA3  F029         	call	_i2cWriteByte
  6656   004F5A  0012               	return		;funcret
  6657   004F5C                     __end_of_dsWriteData:
  6658                           	callstack 0
  6659                           
  6660 ;; *************** function _dsReadData *****************
  6661 ;; Defined at:
  6662 ;;		line 31 in file "ds1307.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  address         2   13[COMRAM] int 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  result          2   16[COMRAM] int 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  2   13[COMRAM] int 
  6669 ;; Registers used:
  6670 ;;		wreg, status,2, status,0, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6676 ;;      Params:         2       0       0       0       0       0       0       0       0
  6677 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6678 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6679 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6680 ;;Total ram usage:        5 bytes
  6681 ;; Hardware stack levels used: 1
  6682 ;; Hardware stack levels required when called: 4
  6683 ;; This function calls:
  6684 ;;		_i2cReadByte
  6685 ;;		_i2cWriteByte
  6686 ;; This function is called by:
  6687 ;;		_outputPrint
  6688 ;;		_varInit
  6689 ;;		_getTime
  6690 ;;		_dsStartClock
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           	psect	text30
  6695   0051C2                     __ptext30:
  6696                           	callstack 0
  6697   0051C2                     _dsReadData:
  6698                           	callstack 24
  6699   0051C2                     
  6700                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  6701   0051C2  0E00               	movlw	0
  6702   0051C4  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6703   0051C6  0EDE               	movlw	222
  6704   0051C8  6E09               	movwf	i2cWriteByte@byte^0,c
  6705   0051CA  0E01               	movlw	1
  6706   0051CC  ECA3  F029         	call	_i2cWriteByte
  6707                           
  6708                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  6709   0051D0  0E00               	movlw	0
  6710   0051D2  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6711   0051D4  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  6712   0051D8  0E00               	movlw	0
  6713   0051DA  ECA3  F029         	call	_i2cWriteByte
  6714                           
  6715                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  6716   0051DE  0E00               	movlw	0
  6717   0051E0  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6718   0051E2  0EDF               	movlw	223
  6719   0051E4  6E09               	movwf	i2cWriteByte@byte^0,c
  6720   0051E6  0E01               	movlw	1
  6721   0051E8  ECA3  F029         	call	_i2cWriteByte
  6722                           
  6723                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  6724   0051EC  0E01               	movlw	1
  6725   0051EE  6E08               	movwf	i2cReadByte@send_stop^0,c
  6726   0051F0  0E01               	movlw	1
  6727   0051F2  EC4D  F029         	call	_i2cReadByte
  6728   0051F6  6E10               	movwf	??_dsReadData^0,c
  6729   0051F8  5010               	movf	??_dsReadData^0,w,c
  6730   0051FA  6E11               	movwf	dsReadData@result^0,c
  6731   0051FC  6A12               	clrf	(dsReadData@result+1)^0,c
  6732   0051FE                     
  6733                           ;ds1307.c: 37:  return result;
  6734   0051FE  C011  F00E         	movff	dsReadData@result,?_dsReadData
  6735   005202  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  6736   005206  0012               	return		;funcret
  6737   005208                     __end_of_dsReadData:
  6738                           	callstack 0
  6739                           
  6740 ;; *************** function _i2cWriteByte *****************
  6741 ;; Defined at:
  6742 ;;		line 113 in file "soft_i2c.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;  send_start      1    wreg     unsigned char 
  6745 ;;  send_stop       1    7[COMRAM] unsigned char 
  6746 ;;  byte            1    8[COMRAM] unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  send_start      1    9[COMRAM] unsigned char 
  6749 ;;  bit             1   10[COMRAM] unsigned char 
  6750 ;;  nack            1    0        unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      unsigned char 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6760 ;;      Params:         2       0       0       0       0       0       0       0       0
  6761 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6763 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6764 ;;Total ram usage:        4 bytes
  6765 ;; Hardware stack levels used: 1
  6766 ;; Hardware stack levels required when called: 3
  6767 ;; This function calls:
  6768 ;;		_i2c_read_bit
  6769 ;;		_i2c_start
  6770 ;;		_i2c_stop
  6771 ;;		_i2c_write_bit
  6772 ;; This function is called by:
  6773 ;;		_dsWriteData
  6774 ;;		_dsReadData
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text31
  6779   005346                     __ptext31:
  6780                           	callstack 0
  6781   005346                     _i2cWriteByte:
  6782                           	callstack 24
  6783                           
  6784                           ;incstack = 0
  6785                           ;i2cWriteByte@send_start stored from wreg
  6786   005346  6E0A               	movwf	i2cWriteByte@send_start^0,c
  6787   005348                     
  6788                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  6789   005348  500A               	movf	i2cWriteByte@send_start^0,w,c
  6790   00534A  B4D8               	btfsc	status,2,c
  6791   00534C  EFAA  F029         	goto	u3091
  6792   005350  EFAC  F029         	goto	u3090
  6793   005354                     u3091:
  6794   005354  EFAE  F029         	goto	l3606
  6795   005358                     u3090:
  6796   005358                     
  6797                           ;soft_i2c.c: 117:   i2c_start();
  6798   005358  ECBE  F028         	call	_i2c_start	;wreg free
  6799   00535C                     l3606:
  6800                           
  6801                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  6802   00535C  0E00               	movlw	0
  6803   00535E  6E0B               	movwf	i2cWriteByte@bit^0,c
  6804   005360                     l3612:
  6805                           
  6806                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  6807   005360  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  6808   005362  EFB5  F029         	goto	u3101
  6809   005366  EFB8  F029         	goto	u3100
  6810   00536A                     u3101:
  6811   00536A  0E01               	movlw	1
  6812   00536C  EFB9  F029         	goto	u3110
  6813   005370                     u3100:
  6814   005370  0E00               	movlw	0
  6815   005372                     u3110:
  6816   005372  EC77  F029         	call	_i2c_write_bit
  6817   005376                     
  6818                           ;soft_i2c.c: 121:   byte <<= 1;
  6819   005376  90D8               	bcf	status,0,c
  6820   005378  3609               	rlcf	i2cWriteByte@byte^0,f,c
  6821   00537A                     
  6822                           ;soft_i2c.c: 122:  }
  6823   00537A  2A0B               	incf	i2cWriteByte@bit^0,f,c
  6824   00537C  0E07               	movlw	7
  6825   00537E  640B               	cpfsgt	i2cWriteByte@bit^0,c
  6826   005380  EFC4  F029         	goto	u3121
  6827   005384  EFC6  F029         	goto	u3120
  6828   005388                     u3121:
  6829   005388  EFB0  F029         	goto	l3612
  6830   00538C                     u3120:
  6831   00538C  ECF5  F027         	call	_i2c_read_bit	;wreg free
  6832   005390                     
  6833                           ;soft_i2c.c: 124:  if (send_stop) {
  6834   005390  5008               	movf	i2cWriteByte@send_stop^0,w,c
  6835   005392  B4D8               	btfsc	status,2,c
  6836   005394  EFCE  F029         	goto	u3131
  6837   005398  EFD0  F029         	goto	u3130
  6838   00539C                     u3131:
  6839   00539C  EFD2  F029         	goto	l414
  6840   0053A0                     u3130:
  6841   0053A0                     
  6842                           ;soft_i2c.c: 125:   i2c_stop();
  6843   0053A0  EC80  F027         	call	_i2c_stop	;wreg free
  6844   0053A4                     l414:
  6845   0053A4  0012               	return		;funcret
  6846   0053A6                     __end_of_i2cWriteByte:
  6847                           	callstack 0
  6848                           
  6849 ;; *************** function _i2c_start *****************
  6850 ;; Defined at:
  6851 ;;		line 52 in file "soft_i2c.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6868 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used: 1
  6871 ;; Hardware stack levels required when called: 2
  6872 ;; This function calls:
  6873 ;;		_I2C_delay
  6874 ;;		_clear_SCL
  6875 ;;		_clear_SDA
  6876 ;;		_read_SCL
  6877 ;;		_read_SDA
  6878 ;; This function is called by:
  6879 ;;		_i2cWriteByte
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text32
  6884   00517C                     __ptext32:
  6885                           	callstack 0
  6886   00517C                     _i2c_start:
  6887                           	callstack 24
  6888   00517C                     
  6889                           ;soft_i2c.c: 54:  if (started) {
  6890   00517C  505A               	movf	_started^0,w,c
  6891   00517E  B4D8               	btfsc	status,2,c
  6892   005180  EFC4  F028         	goto	u3021
  6893   005184  EFC6  F028         	goto	u3020
  6894   005188                     u3021:
  6895   005188  EFD6  F028         	goto	l3542
  6896   00518C                     u3020:
  6897   00518C                     
  6898                           ;soft_i2c.c: 55:   read_SDA();
  6899   00518C  EC60  F028         	call	_read_SDA	;wreg free
  6900   005190                     
  6901                           ;soft_i2c.c: 56:   I2C_delay();
  6902   005190  EC51  F026         	call	_I2C_delay	;wreg free
  6903   005194                     l3538:
  6904   005194  EC44  F028         	call	_read_SCL	;wreg free
  6905   005198  0900               	iorlw	0
  6906   00519A  B4D8               	btfsc	status,2,c
  6907   00519C  EFD2  F028         	goto	u3031
  6908   0051A0  EFD4  F028         	goto	u3030
  6909   0051A4                     u3031:
  6910   0051A4  EFCA  F028         	goto	l3538
  6911   0051A8                     u3030:
  6912   0051A8                     
  6913                           ;soft_i2c.c: 59:   I2C_delay();
  6914   0051A8  EC51  F026         	call	_I2C_delay	;wreg free
  6915   0051AC                     l3542:
  6916                           
  6917                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  6918   0051AC  EC60  F028         	call	_read_SDA	;wreg free
  6919   0051B0                     
  6920                           ;soft_i2c.c: 65:  clear_SDA();
  6921   0051B0  EC28  F027         	call	_clear_SDA	;wreg free
  6922   0051B4                     
  6923                           ;soft_i2c.c: 66:  I2C_delay();
  6924   0051B4  EC51  F026         	call	_I2C_delay	;wreg free
  6925   0051B8                     
  6926                           ;soft_i2c.c: 67:  clear_SCL();
  6927   0051B8  EC13  F027         	call	_clear_SCL	;wreg free
  6928   0051BC                     
  6929                           ;soft_i2c.c: 68:  started = 1;
  6930   0051BC  0E01               	movlw	1
  6931   0051BE  6E5A               	movwf	_started^0,c
  6932   0051C0  0012               	return		;funcret
  6933   0051C2                     __end_of_i2c_start:
  6934                           	callstack 0
  6935                           
  6936 ;; *************** function _i2cReadByte *****************
  6937 ;; Defined at:
  6938 ;;		line 131 in file "soft_i2c.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  nack            1    wreg     unsigned char 
  6941 ;;  send_stop       1    7[COMRAM] unsigned char 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  nack            1    9[COMRAM] unsigned char 
  6944 ;;  bit             2   10[COMRAM] unsigned int 
  6945 ;;  byte            1   12[COMRAM] unsigned char 
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      unsigned char 
  6948 ;; Registers used:
  6949 ;;		wreg, status,2, status,0, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6955 ;;      Params:         1       0       0       0       0       0       0       0       0
  6956 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6957 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6958 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6959 ;;Total ram usage:        6 bytes
  6960 ;; Hardware stack levels used: 1
  6961 ;; Hardware stack levels required when called: 3
  6962 ;; This function calls:
  6963 ;;		_i2c_read_bit
  6964 ;;		_i2c_stop
  6965 ;;		_i2c_write_bit
  6966 ;; This function is called by:
  6967 ;;		_dsReadData
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text33
  6972   00529A                     __ptext33:
  6973                           	callstack 0
  6974   00529A                     _i2cReadByte:
  6975                           	callstack 24
  6976                           
  6977                           ;incstack = 0
  6978                           ;i2cReadByte@nack stored from wreg
  6979   00529A  6E0A               	movwf	i2cReadByte@nack^0,c
  6980   00529C                     
  6981                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  6982   00529C  0E00               	movlw	0
  6983   00529E  6E0D               	movwf	i2cReadByte@byte^0,c
  6984                           
  6985                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  6986   0052A0  0E00               	movlw	0
  6987   0052A2  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  6988   0052A4  0E00               	movlw	0
  6989   0052A6  6E0B               	movwf	i2cReadByte@bit^0,c
  6990   0052A8                     l3678:
  6991                           
  6992                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  6993   0052A8  ECF5  F027         	call	_i2c_read_bit	;wreg free
  6994   0052AC  6E09               	movwf	??_i2cReadByte^0,c
  6995   0052AE  500D               	movf	i2cReadByte@byte^0,w,c
  6996   0052B0  240D               	addwf	i2cReadByte@byte^0,w,c
  6997   0052B2  1009               	iorwf	??_i2cReadByte^0,w,c
  6998   0052B4  6E0D               	movwf	i2cReadByte@byte^0,c
  6999   0052B6                     
  7000                           ;soft_i2c.c: 136:  }
  7001   0052B6  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  7002   0052B8  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  7003   0052BA  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  7004   0052BC  E109               	bnz	u3200
  7005   0052BE  0E08               	movlw	8
  7006   0052C0  5C0B               	subwf	i2cReadByte@bit^0,w,c
  7007   0052C2  A0D8               	btfss	status,0,c
  7008   0052C4  EF66  F029         	goto	u3201
  7009   0052C8  EF68  F029         	goto	u3200
  7010   0052CC                     u3201:
  7011   0052CC  EF54  F029         	goto	l3678
  7012   0052D0                     u3200:
  7013   0052D0                     
  7014                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  7015   0052D0  500A               	movf	i2cReadByte@nack^0,w,c
  7016   0052D2  EC77  F029         	call	_i2c_write_bit
  7017   0052D6                     
  7018                           ;soft_i2c.c: 138:  if (send_stop) {
  7019   0052D6  5008               	movf	i2cReadByte@send_stop^0,w,c
  7020   0052D8  B4D8               	btfsc	status,2,c
  7021   0052DA  EF71  F029         	goto	u3211
  7022   0052DE  EF73  F029         	goto	u3210
  7023   0052E2                     u3211:
  7024   0052E2  EF75  F029         	goto	l3690
  7025   0052E6                     u3210:
  7026   0052E6                     
  7027                           ;soft_i2c.c: 139:   i2c_stop();
  7028   0052E6  EC80  F027         	call	_i2c_stop	;wreg free
  7029   0052EA                     l3690:
  7030                           
  7031                           ;soft_i2c.c: 141:  return byte;
  7032   0052EA  500D               	movf	i2cReadByte@byte^0,w,c
  7033   0052EC  0012               	return		;funcret
  7034   0052EE                     __end_of_i2cReadByte:
  7035                           	callstack 0
  7036                           
  7037 ;; *************** function _i2c_write_bit *****************
  7038 ;; Defined at:
  7039 ;;		line 84 in file "soft_i2c.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  bit             1    wreg     unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  bit             1    6[COMRAM] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, status,2, status,0, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7053 ;;      Params:         0       0       0       0       0       0       0       0       0
  7054 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7056 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7057 ;;Total ram usage:        1 bytes
  7058 ;; Hardware stack levels used: 1
  7059 ;; Hardware stack levels required when called: 2
  7060 ;; This function calls:
  7061 ;;		_I2C_delay
  7062 ;;		_clear_SCL
  7063 ;;		_clear_SDA
  7064 ;;		_read_SCL
  7065 ;;		_read_SDA
  7066 ;; This function is called by:
  7067 ;;		_i2cWriteByte
  7068 ;;		_i2cReadByte
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text34
  7073   0052EE                     __ptext34:
  7074                           	callstack 0
  7075   0052EE                     _i2c_write_bit:
  7076                           	callstack 24
  7077                           
  7078                           ;incstack = 0
  7079                           ;i2c_write_bit@bit stored from wreg
  7080   0052EE  6E07               	movwf	i2c_write_bit@bit^0,c
  7081   0052F0                     
  7082                           ;soft_i2c.c: 85:  if (bit) {
  7083   0052F0  5007               	movf	i2c_write_bit@bit^0,w,c
  7084   0052F2  B4D8               	btfsc	status,2,c
  7085   0052F4  EF7E  F029         	goto	u3051
  7086   0052F8  EF80  F029         	goto	u3050
  7087   0052FC                     u3051:
  7088   0052FC  EF84  F029         	goto	l3570
  7089   005300                     u3050:
  7090   005300                     
  7091                           ;soft_i2c.c: 86:   read_SDA();
  7092   005300  EC60  F028         	call	_read_SDA	;wreg free
  7093                           
  7094                           ;soft_i2c.c: 87:  } else {
  7095   005304  EF86  F029         	goto	l3572
  7096   005308                     l3570:
  7097                           
  7098                           ;soft_i2c.c: 88:   clear_SDA();
  7099   005308  EC28  F027         	call	_clear_SDA	;wreg free
  7100   00530C                     l3572:
  7101                           
  7102                           ;soft_i2c.c: 90:  I2C_delay();
  7103   00530C  EC51  F026         	call	_I2C_delay	;wreg free
  7104   005310                     l3574:
  7105   005310  EC44  F028         	call	_read_SCL	;wreg free
  7106   005314  0900               	iorlw	0
  7107   005316  B4D8               	btfsc	status,2,c
  7108   005318  EF90  F029         	goto	u3061
  7109   00531C  EF92  F029         	goto	u3060
  7110   005320                     u3061:
  7111   005320  EF88  F029         	goto	l3574
  7112   005324                     u3060:
  7113   005324                     
  7114                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  7115   005324  5007               	movf	i2c_write_bit@bit^0,w,c
  7116   005326  B4D8               	btfsc	status,2,c
  7117   005328  EF98  F029         	goto	u3071
  7118   00532C  EF9A  F029         	goto	u3070
  7119   005330                     u3071:
  7120   005330  EF9C  F029         	goto	l3580
  7121   005334                     u3070:
  7122   005334  EC60  F028         	call	_read_SDA	;wreg free
  7123   005338                     l3580:
  7124                           
  7125                           ;soft_i2c.c: 95:  I2C_delay();
  7126   005338  EC51  F026         	call	_I2C_delay	;wreg free
  7127   00533C                     
  7128                           ;soft_i2c.c: 96:  clear_SCL();
  7129   00533C  EC13  F027         	call	_clear_SCL	;wreg free
  7130   005340                     
  7131                           ;soft_i2c.c: 97:  I2C_delay();
  7132   005340  EC51  F026         	call	_I2C_delay	;wreg free
  7133   005344  0012               	return		;funcret
  7134   005346                     __end_of_i2c_write_bit:
  7135                           	callstack 0
  7136                           
  7137 ;; *************** function _i2c_stop *****************
  7138 ;; Defined at:
  7139 ;;		line 71 in file "soft_i2c.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      void 
  7146 ;; Registers used:
  7147 ;;		wreg, status,2, status,0, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7153 ;;      Params:         0       0       0       0       0       0       0       0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7156 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7157 ;;Total ram usage:        0 bytes
  7158 ;; Hardware stack levels used: 1
  7159 ;; Hardware stack levels required when called: 2
  7160 ;; This function calls:
  7161 ;;		_I2C_delay
  7162 ;;		_clear_SDA
  7163 ;;		_read_SCL
  7164 ;;		_read_SDA
  7165 ;; This function is called by:
  7166 ;;		_i2cWriteByte
  7167 ;;		_i2cReadByte
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text35
  7172   004F00                     __ptext35:
  7173                           	callstack 0
  7174   004F00                     _i2c_stop:
  7175                           	callstack 24
  7176   004F00                     
  7177                           ;soft_i2c.c: 73:  clear_SDA();
  7178   004F00  EC28  F027         	call	_clear_SDA	;wreg free
  7179   004F04                     
  7180                           ;soft_i2c.c: 74:  I2C_delay();
  7181   004F04  EC51  F026         	call	_I2C_delay	;wreg free
  7182   004F08                     l3556:
  7183   004F08  EC44  F028         	call	_read_SCL	;wreg free
  7184   004F0C  0900               	iorlw	0
  7185   004F0E  B4D8               	btfsc	status,2,c
  7186   004F10  EF8C  F027         	goto	u3041
  7187   004F14  EF8E  F027         	goto	u3040
  7188   004F18                     u3041:
  7189   004F18  EF84  F027         	goto	l3556
  7190   004F1C                     u3040:
  7191   004F1C                     
  7192                           ;soft_i2c.c: 76:  I2C_delay();
  7193   004F1C  EC51  F026         	call	_I2C_delay	;wreg free
  7194   004F20                     
  7195                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  7196   004F20  EC60  F028         	call	_read_SDA	;wreg free
  7197   004F24                     
  7198                           ;soft_i2c.c: 80:  I2C_delay();
  7199   004F24  EC51  F026         	call	_I2C_delay	;wreg free
  7200   004F28                     
  7201                           ;soft_i2c.c: 81:  started = 0;
  7202   004F28  0E00               	movlw	0
  7203   004F2A  6E5A               	movwf	_started^0,c
  7204   004F2C  0012               	return		;funcret
  7205   004F2E                     __end_of_i2c_stop:
  7206                           	callstack 0
  7207                           
  7208 ;; *************** function _clear_SDA *****************
  7209 ;; Defined at:
  7210 ;;		line 45 in file "soft_i2c.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;		None
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0
  7225 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7227 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7228 ;;Total ram usage:        0 bytes
  7229 ;; Hardware stack levels used: 1
  7230 ;; Hardware stack levels required when called: 1
  7231 ;; This function calls:
  7232 ;;		_digitalWrite
  7233 ;;		_pinMode
  7234 ;; This function is called by:
  7235 ;;		_i2c_start
  7236 ;;		_i2c_stop
  7237 ;;		_i2c_write_bit
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text36
  7242   004E50                     __ptext36:
  7243                           	callstack 0
  7244   004E50                     _clear_SDA:
  7245                           	callstack 24
  7246   004E50                     
  7247                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  7248   004E50  0E00               	movlw	0
  7249   004E52  6E02               	movwf	(pinMode@pin+1)^0,c
  7250   004E54  0E08               	movlw	8
  7251   004E56  6E01               	movwf	pinMode@pin^0,c
  7252   004E58  0E00               	movlw	0
  7253   004E5A  6E04               	movwf	(pinMode@type+1)^0,c
  7254   004E5C  0E00               	movlw	0
  7255   004E5E  6E03               	movwf	pinMode@type^0,c
  7256   004E60  ECD9  F031         	call	_pinMode	;wreg free
  7257                           
  7258                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  7259   004E64  0E00               	movlw	0
  7260   004E66  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7261   004E68  0E08               	movlw	8
  7262   004E6A  6E01               	movwf	digitalWrite@pin^0,c
  7263   004E6C  0E00               	movlw	0
  7264   004E6E  6E04               	movwf	(digitalWrite@value+1)^0,c
  7265   004E70  0E00               	movlw	0
  7266   004E72  6E03               	movwf	digitalWrite@value^0,c
  7267   004E74  EC00  F033         	call	_digitalWrite	;wreg free
  7268   004E78  0012               	return		;funcret
  7269   004E7A                     __end_of_clear_SDA:
  7270                           	callstack 0
  7271                           
  7272 ;; *************** function _i2c_read_bit *****************
  7273 ;; Defined at:
  7274 ;;		line 100 in file "soft_i2c.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  bit             1    6[COMRAM] unsigned char 
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      unsigned char 
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7288 ;;      Params:         0       0       0       0       0       0       0       0       0
  7289 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7291 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7292 ;;Total ram usage:        1 bytes
  7293 ;; Hardware stack levels used: 1
  7294 ;; Hardware stack levels required when called: 2
  7295 ;; This function calls:
  7296 ;;		_I2C_delay
  7297 ;;		_clear_SCL
  7298 ;;		_read_SCL
  7299 ;;		_read_SDA
  7300 ;; This function is called by:
  7301 ;;		_i2cWriteByte
  7302 ;;		_i2cReadByte
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text37
  7307   004FEA                     __ptext37:
  7308                           	callstack 0
  7309   004FEA                     _i2c_read_bit:
  7310                           	callstack 24
  7311   004FEA                     
  7312                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  7313   004FEA  EC60  F028         	call	_read_SDA	;wreg free
  7314   004FEE                     
  7315                           ;soft_i2c.c: 103:  I2C_delay();
  7316   004FEE  EC51  F026         	call	_I2C_delay	;wreg free
  7317   004FF2                     l3590:
  7318   004FF2  EC44  F028         	call	_read_SCL	;wreg free
  7319   004FF6  0900               	iorlw	0
  7320   004FF8  B4D8               	btfsc	status,2,c
  7321   004FFA  EF01  F028         	goto	u3081
  7322   004FFE  EF03  F028         	goto	u3080
  7323   005002                     u3081:
  7324   005002  EFF9  F027         	goto	l3590
  7325   005006                     u3080:
  7326   005006                     
  7327                           ;soft_i2c.c: 105:  bit = read_SDA();
  7328   005006  EC60  F028         	call	_read_SDA	;wreg free
  7329   00500A  6E07               	movwf	i2c_read_bit@bit^0,c
  7330   00500C                     
  7331                           ;soft_i2c.c: 106:  I2C_delay();
  7332   00500C  EC51  F026         	call	_I2C_delay	;wreg free
  7333   005010                     
  7334                           ;soft_i2c.c: 107:  clear_SCL();
  7335   005010  EC13  F027         	call	_clear_SCL	;wreg free
  7336                           
  7337                           ;soft_i2c.c: 108:  I2C_delay();
  7338   005014  EC51  F026         	call	_I2C_delay	;wreg free
  7339   005018                     
  7340                           ;soft_i2c.c: 109:  return bit;
  7341   005018  5007               	movf	i2c_read_bit@bit^0,w,c
  7342   00501A  0012               	return		;funcret
  7343   00501C                     __end_of_i2c_read_bit:
  7344                           	callstack 0
  7345                           
  7346 ;; *************** function _read_SDA *****************
  7347 ;; Defined at:
  7348 ;;		line 34 in file "soft_i2c.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;		None
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;                  1    wreg      unsigned char 
  7355 ;; Registers used:
  7356 ;;		wreg, status,2, status,0, cstack
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7362 ;;      Params:         0       0       0       0       0       0       0       0       0
  7363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7366 ;;Total ram usage:        0 bytes
  7367 ;; Hardware stack levels used: 1
  7368 ;; Hardware stack levels required when called: 1
  7369 ;; This function calls:
  7370 ;;		_digitalRead
  7371 ;;		_pinMode
  7372 ;; This function is called by:
  7373 ;;		_i2c_start
  7374 ;;		_i2c_stop
  7375 ;;		_i2c_write_bit
  7376 ;;		_i2c_read_bit
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text38
  7381   0050C0                     __ptext38:
  7382                           	callstack 0
  7383   0050C0                     _read_SDA:
  7384                           	callstack 24
  7385   0050C0                     
  7386                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  7387   0050C0  0E00               	movlw	0
  7388   0050C2  6E02               	movwf	(pinMode@pin+1)^0,c
  7389   0050C4  0E08               	movlw	8
  7390   0050C6  6E01               	movwf	pinMode@pin^0,c
  7391   0050C8  0E00               	movlw	0
  7392   0050CA  6E04               	movwf	(pinMode@type+1)^0,c
  7393   0050CC  0E01               	movlw	1
  7394   0050CE  6E03               	movwf	pinMode@type^0,c
  7395   0050D0  ECD9  F031         	call	_pinMode	;wreg free
  7396                           
  7397                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  7398   0050D4  0E00               	movlw	0
  7399   0050D6  6E02               	movwf	(digitalRead@pin+1)^0,c
  7400   0050D8  0E08               	movlw	8
  7401   0050DA  6E01               	movwf	digitalRead@pin^0,c
  7402   0050DC  EC52  F02E         	call	_digitalRead	;wreg free
  7403   0050E0  5001               	movf	?_digitalRead^0,w,c
  7404   0050E2  1002               	iorwf	(?_digitalRead+1)^0,w,c
  7405   0050E4  A4D8               	btfss	status,2,c
  7406   0050E6  EF77  F028         	goto	u3001
  7407   0050EA  EF7A  F028         	goto	u3000
  7408   0050EE                     u3001:
  7409   0050EE  0E01               	movlw	1
  7410   0050F0  EF7B  F028         	goto	u3010
  7411   0050F4                     u3000:
  7412   0050F4  0E00               	movlw	0
  7413   0050F6                     u3010:
  7414   0050F6  0012               	return		;funcret
  7415   0050F8                     __end_of_read_SDA:
  7416                           	callstack 0
  7417                           
  7418 ;; *************** function _read_SCL *****************
  7419 ;; Defined at:
  7420 ;;		line 29 in file "soft_i2c.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      unsigned char 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used: 1
  7440 ;; Hardware stack levels required when called: 1
  7441 ;; This function calls:
  7442 ;;		_digitalRead
  7443 ;;		_pinMode
  7444 ;; This function is called by:
  7445 ;;		_i2c_start
  7446 ;;		_i2c_stop
  7447 ;;		_i2c_write_bit
  7448 ;;		_i2c_read_bit
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text39
  7453   005088                     __ptext39:
  7454                           	callstack 0
  7455   005088                     _read_SCL:
  7456                           	callstack 24
  7457   005088                     
  7458                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  7459   005088  0E00               	movlw	0
  7460   00508A  6E02               	movwf	(pinMode@pin+1)^0,c
  7461   00508C  0E09               	movlw	9
  7462   00508E  6E01               	movwf	pinMode@pin^0,c
  7463   005090  0E00               	movlw	0
  7464   005092  6E04               	movwf	(pinMode@type+1)^0,c
  7465   005094  0E01               	movlw	1
  7466   005096  6E03               	movwf	pinMode@type^0,c
  7467   005098  ECD9  F031         	call	_pinMode	;wreg free
  7468                           
  7469                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  7470   00509C  0E00               	movlw	0
  7471   00509E  6E02               	movwf	(digitalRead@pin+1)^0,c
  7472   0050A0  0E09               	movlw	9
  7473   0050A2  6E01               	movwf	digitalRead@pin^0,c
  7474   0050A4  EC52  F02E         	call	_digitalRead	;wreg free
  7475   0050A8  5001               	movf	?_digitalRead^0,w,c
  7476   0050AA  1002               	iorwf	(?_digitalRead+1)^0,w,c
  7477   0050AC  A4D8               	btfss	status,2,c
  7478   0050AE  EF5B  F028         	goto	u2981
  7479   0050B2  EF5E  F028         	goto	u2980
  7480   0050B6                     u2981:
  7481   0050B6  0E01               	movlw	1
  7482   0050B8  EF5F  F028         	goto	u2990
  7483   0050BC                     u2980:
  7484   0050BC  0E00               	movlw	0
  7485   0050BE                     u2990:
  7486   0050BE  0012               	return		;funcret
  7487   0050C0                     __end_of_read_SCL:
  7488                           	callstack 0
  7489                           
  7490 ;; *************** function _digitalRead *****************
  7491 ;; Defined at:
  7492 ;;		line 39 in file "io.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  pin             2    0[COMRAM] int 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  2    0[COMRAM] int 
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, status,0
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7506 ;;      Params:         2       0       0       0       0       0       0       0       0
  7507 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7508 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7509 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7510 ;;Total ram usage:        5 bytes
  7511 ;; Hardware stack levels used: 1
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_read_SCL
  7516 ;;		_read_SDA
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text40
  7521   005CA4                     __ptext40:
  7522                           	callstack 0
  7523   005CA4                     _digitalRead:
  7524                           	callstack 24
  7525   005CA4                     
  7526                           ;io.c: 40:     if(pin <8){
  7527   005CA4  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7528   005CA6  EF60  F02E         	goto	u2680
  7529   005CAA  5002               	movf	(digitalRead@pin+1)^0,w,c
  7530   005CAC  E107               	bnz	u2681
  7531   005CAE  0E08               	movlw	8
  7532   005CB0  5C01               	subwf	digitalRead@pin^0,w,c
  7533   005CB2  B0D8               	btfsc	status,0,c
  7534   005CB4  EF5E  F02E         	goto	u2681
  7535   005CB8  EF60  F02E         	goto	u2680
  7536   005CBC                     u2681:
  7537   005CBC  EF74  F02E         	goto	l3448
  7538   005CC0                     u2680:
  7539   005CC0                     
  7540                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  7541   005CC0  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7542   005CC4  0E01               	movlw	1
  7543   005CC6  6E04               	movwf	(??_digitalRead+1)^0,c
  7544   005CC8  2A03               	incf	??_digitalRead^0,f,c
  7545   005CCA  EF69  F02E         	goto	u2694
  7546   005CCE                     u2695:
  7547   005CCE  90D8               	bcf	status,0,c
  7548   005CD0  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7549   005CD2                     u2694:
  7550   005CD2  2E03               	decfsz	??_digitalRead^0,f,c
  7551   005CD4  EF67  F02E         	goto	u2695
  7552   005CD8  5004               	movf	(??_digitalRead+1)^0,w,c
  7553   005CDA  1480               	andwf	128,w,c	;volatile
  7554   005CDC  6E05               	movwf	(??_digitalRead+2)^0,c
  7555   005CDE  5005               	movf	(??_digitalRead+2)^0,w,c
  7556   005CE0  6E01               	movwf	?_digitalRead^0,c
  7557   005CE2  6A02               	clrf	(?_digitalRead+1)^0,c
  7558   005CE4  EF06  F02F         	goto	l83
  7559   005CE8                     l3448:
  7560   005CE8  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7561   005CEA  EF82  F02E         	goto	u2700
  7562   005CEE  5002               	movf	(digitalRead@pin+1)^0,w,c
  7563   005CF0  E107               	bnz	u2701
  7564   005CF2  0E10               	movlw	16
  7565   005CF4  5C01               	subwf	digitalRead@pin^0,w,c
  7566   005CF6  B0D8               	btfsc	status,0,c
  7567   005CF8  EF80  F02E         	goto	u2701
  7568   005CFC  EF82  F02E         	goto	u2700
  7569   005D00                     u2701:
  7570   005D00  EF98  F02E         	goto	l3456
  7571   005D04                     u2700:
  7572   005D04                     
  7573                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  7574   005D04  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7575   005D08  0EF8               	movlw	-8
  7576   005D0A  2603               	addwf	??_digitalRead^0,f,c
  7577   005D0C  0E01               	movlw	1
  7578   005D0E  6E04               	movwf	(??_digitalRead+1)^0,c
  7579   005D10  2A03               	incf	??_digitalRead^0,f,c
  7580   005D12  EF8D  F02E         	goto	u2714
  7581   005D16                     u2715:
  7582   005D16  90D8               	bcf	status,0,c
  7583   005D18  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7584   005D1A                     u2714:
  7585   005D1A  2E03               	decfsz	??_digitalRead^0,f,c
  7586   005D1C  EF8B  F02E         	goto	u2715
  7587   005D20  5004               	movf	(??_digitalRead+1)^0,w,c
  7588   005D22  1481               	andwf	129,w,c	;volatile
  7589   005D24  6E05               	movwf	(??_digitalRead+2)^0,c
  7590   005D26  5005               	movf	(??_digitalRead+2)^0,w,c
  7591   005D28  6E01               	movwf	?_digitalRead^0,c
  7592   005D2A  6A02               	clrf	(?_digitalRead+1)^0,c
  7593   005D2C  EF06  F02F         	goto	l83
  7594   005D30                     l3456:
  7595   005D30  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7596   005D32  EFA6  F02E         	goto	u2720
  7597   005D36  5002               	movf	(digitalRead@pin+1)^0,w,c
  7598   005D38  E107               	bnz	u2721
  7599   005D3A  0E18               	movlw	24
  7600   005D3C  5C01               	subwf	digitalRead@pin^0,w,c
  7601   005D3E  B0D8               	btfsc	status,0,c
  7602   005D40  EFA4  F02E         	goto	u2721
  7603   005D44  EFA6  F02E         	goto	u2720
  7604   005D48                     u2721:
  7605   005D48  EFBC  F02E         	goto	l3464
  7606   005D4C                     u2720:
  7607   005D4C                     
  7608                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  7609   005D4C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7610   005D50  0EF0               	movlw	-16
  7611   005D52  2603               	addwf	??_digitalRead^0,f,c
  7612   005D54  0E01               	movlw	1
  7613   005D56  6E04               	movwf	(??_digitalRead+1)^0,c
  7614   005D58  2A03               	incf	??_digitalRead^0,f,c
  7615   005D5A  EFB1  F02E         	goto	u2734
  7616   005D5E                     u2735:
  7617   005D5E  90D8               	bcf	status,0,c
  7618   005D60  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7619   005D62                     u2734:
  7620   005D62  2E03               	decfsz	??_digitalRead^0,f,c
  7621   005D64  EFAF  F02E         	goto	u2735
  7622   005D68  5004               	movf	(??_digitalRead+1)^0,w,c
  7623   005D6A  1482               	andwf	130,w,c	;volatile
  7624   005D6C  6E05               	movwf	(??_digitalRead+2)^0,c
  7625   005D6E  5005               	movf	(??_digitalRead+2)^0,w,c
  7626   005D70  6E01               	movwf	?_digitalRead^0,c
  7627   005D72  6A02               	clrf	(?_digitalRead+1)^0,c
  7628   005D74  EF06  F02F         	goto	l83
  7629   005D78                     l3464:
  7630   005D78  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7631   005D7A  EFCA  F02E         	goto	u2740
  7632   005D7E  5002               	movf	(digitalRead@pin+1)^0,w,c
  7633   005D80  E107               	bnz	u2741
  7634   005D82  0E20               	movlw	32
  7635   005D84  5C01               	subwf	digitalRead@pin^0,w,c
  7636   005D86  B0D8               	btfsc	status,0,c
  7637   005D88  EFC8  F02E         	goto	u2741
  7638   005D8C  EFCA  F02E         	goto	u2740
  7639   005D90                     u2741:
  7640   005D90  EFE0  F02E         	goto	l3472
  7641   005D94                     u2740:
  7642   005D94                     
  7643                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  7644   005D94  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7645   005D98  0EE8               	movlw	-24
  7646   005D9A  2603               	addwf	??_digitalRead^0,f,c
  7647   005D9C  0E01               	movlw	1
  7648   005D9E  6E04               	movwf	(??_digitalRead+1)^0,c
  7649   005DA0  2A03               	incf	??_digitalRead^0,f,c
  7650   005DA2  EFD5  F02E         	goto	u2754
  7651   005DA6                     u2755:
  7652   005DA6  90D8               	bcf	status,0,c
  7653   005DA8  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7654   005DAA                     u2754:
  7655   005DAA  2E03               	decfsz	??_digitalRead^0,f,c
  7656   005DAC  EFD3  F02E         	goto	u2755
  7657   005DB0  5004               	movf	(??_digitalRead+1)^0,w,c
  7658   005DB2  1483               	andwf	131,w,c	;volatile
  7659   005DB4  6E05               	movwf	(??_digitalRead+2)^0,c
  7660   005DB6  5005               	movf	(??_digitalRead+2)^0,w,c
  7661   005DB8  6E01               	movwf	?_digitalRead^0,c
  7662   005DBA  6A02               	clrf	(?_digitalRead+1)^0,c
  7663   005DBC  EF06  F02F         	goto	l83
  7664   005DC0                     l3472:
  7665   005DC0  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7666   005DC2  EFEE  F02E         	goto	u2760
  7667   005DC6  5002               	movf	(digitalRead@pin+1)^0,w,c
  7668   005DC8  E107               	bnz	u2761
  7669   005DCA  0E28               	movlw	40
  7670   005DCC  5C01               	subwf	digitalRead@pin^0,w,c
  7671   005DCE  B0D8               	btfsc	status,0,c
  7672   005DD0  EFEC  F02E         	goto	u2761
  7673   005DD4  EFEE  F02E         	goto	u2760
  7674   005DD8                     u2761:
  7675   005DD8  EF04  F02F         	goto	l88
  7676   005DDC                     u2760:
  7677   005DDC                     
  7678                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  7679   005DDC  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7680   005DE0  0EE0               	movlw	-32
  7681   005DE2  2603               	addwf	??_digitalRead^0,f,c
  7682   005DE4  0E01               	movlw	1
  7683   005DE6  6E04               	movwf	(??_digitalRead+1)^0,c
  7684   005DE8  2A03               	incf	??_digitalRead^0,f,c
  7685   005DEA  EFF9  F02E         	goto	u2774
  7686   005DEE                     u2775:
  7687   005DEE  90D8               	bcf	status,0,c
  7688   005DF0  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7689   005DF2                     u2774:
  7690   005DF2  2E03               	decfsz	??_digitalRead^0,f,c
  7691   005DF4  EFF7  F02E         	goto	u2775
  7692   005DF8  5004               	movf	(??_digitalRead+1)^0,w,c
  7693   005DFA  1484               	andwf	132,w,c	;volatile
  7694   005DFC  6E05               	movwf	(??_digitalRead+2)^0,c
  7695   005DFE  5005               	movf	(??_digitalRead+2)^0,w,c
  7696   005E00  6E01               	movwf	?_digitalRead^0,c
  7697   005E02  6A02               	clrf	(?_digitalRead+1)^0,c
  7698   005E04  EF06  F02F         	goto	l83
  7699   005E08                     l88:
  7700   005E08                     
  7701                           ;io.c: 51:     return -1;
  7702   005E08  6801               	setf	?_digitalRead^0,c
  7703   005E0A  6802               	setf	(?_digitalRead+1)^0,c
  7704   005E0C                     l83:
  7705   005E0C  0012               	return		;funcret
  7706   005E0E                     __end_of_digitalRead:
  7707                           	callstack 0
  7708                           
  7709 ;; *************** function _clear_SCL *****************
  7710 ;; Defined at:
  7711 ;;		line 39 in file "soft_i2c.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;		None
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;		None
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  1    wreg      void 
  7718 ;; Registers used:
  7719 ;;		wreg, status,2, status,0, cstack
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7725 ;;      Params:         0       0       0       0       0       0       0       0       0
  7726 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7728 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7729 ;;Total ram usage:        0 bytes
  7730 ;; Hardware stack levels used: 1
  7731 ;; Hardware stack levels required when called: 1
  7732 ;; This function calls:
  7733 ;;		_digitalWrite
  7734 ;;		_pinMode
  7735 ;; This function is called by:
  7736 ;;		_i2c_start
  7737 ;;		_i2c_write_bit
  7738 ;;		_i2c_read_bit
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text41
  7743   004E26                     __ptext41:
  7744                           	callstack 0
  7745   004E26                     _clear_SCL:
  7746                           	callstack 24
  7747   004E26                     
  7748                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  7749   004E26  0E00               	movlw	0
  7750   004E28  6E02               	movwf	(pinMode@pin+1)^0,c
  7751   004E2A  0E09               	movlw	9
  7752   004E2C  6E01               	movwf	pinMode@pin^0,c
  7753   004E2E  0E00               	movlw	0
  7754   004E30  6E04               	movwf	(pinMode@type+1)^0,c
  7755   004E32  0E00               	movlw	0
  7756   004E34  6E03               	movwf	pinMode@type^0,c
  7757   004E36  ECD9  F031         	call	_pinMode	;wreg free
  7758                           
  7759                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  7760   004E3A  0E00               	movlw	0
  7761   004E3C  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7762   004E3E  0E09               	movlw	9
  7763   004E40  6E01               	movwf	digitalWrite@pin^0,c
  7764   004E42  0E00               	movlw	0
  7765   004E44  6E04               	movwf	(digitalWrite@value+1)^0,c
  7766   004E46  0E00               	movlw	0
  7767   004E48  6E03               	movwf	digitalWrite@value^0,c
  7768   004E4A  EC00  F033         	call	_digitalWrite	;wreg free
  7769   004E4E  0012               	return		;funcret
  7770   004E50                     __end_of_clear_SCL:
  7771                           	callstack 0
  7772                           
  7773 ;; *************** function _digitalWrite *****************
  7774 ;; Defined at:
  7775 ;;		line 14 in file "io.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  pin             2    0[COMRAM] int 
  7778 ;;  value           2    2[COMRAM] int 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7790 ;;      Params:         4       0       0       0       0       0       0       0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7792 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7793 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7794 ;;Total ram usage:        6 bytes
  7795 ;; Hardware stack levels used: 1
  7796 ;; This function calls:
  7797 ;;		Nothing
  7798 ;; This function is called by:
  7799 ;;		_clear_SCL
  7800 ;;		_clear_SDA
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text42
  7805   006600                     __ptext42:
  7806                           	callstack 0
  7807   006600                     _digitalWrite:
  7808                           	callstack 24
  7809   006600                     
  7810                           ;io.c: 16:     if(pin <8){
  7811   006600  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7812   006602  EF0E  F033         	goto	u2480
  7813   006606  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7814   006608  E107               	bnz	u2481
  7815   00660A  0E08               	movlw	8
  7816   00660C  5C01               	subwf	digitalWrite@pin^0,w,c
  7817   00660E  B0D8               	btfsc	status,0,c
  7818   006610  EF0C  F033         	goto	u2481
  7819   006614  EF0E  F033         	goto	u2480
  7820   006618                     u2481:
  7821   006618  EF38  F033         	goto	l3408
  7822   00661C                     u2480:
  7823   00661C                     
  7824                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  7825   00661C  5003               	movf	digitalWrite@value^0,w,c
  7826   00661E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7827   006620  B4D8               	btfsc	status,2,c
  7828   006622  EF15  F033         	goto	u2491
  7829   006626  EF17  F033         	goto	u2490
  7830   00662A                     u2491:
  7831   00662A  EF27  F033         	goto	l3406
  7832   00662E                     u2490:
  7833   00662E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7834   006632  0E01               	movlw	1
  7835   006634  6E06               	movwf	(??_digitalWrite+1)^0,c
  7836   006636  2A05               	incf	??_digitalWrite^0,f,c
  7837   006638  EF20  F033         	goto	u2504
  7838   00663C                     u2505:
  7839   00663C  90D8               	bcf	status,0,c
  7840   00663E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7841   006640                     u2504:
  7842   006640  2E05               	decfsz	??_digitalWrite^0,f,c
  7843   006642  EF1E  F033         	goto	u2505
  7844   006646  5006               	movf	(??_digitalWrite+1)^0,w,c
  7845   006648  1280               	iorwf	128,f,c	;volatile
  7846   00664A  EF26  F034         	goto	l79
  7847   00664E                     l3406:
  7848   00664E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7849   006652  0E01               	movlw	1
  7850   006654  6E06               	movwf	(??_digitalWrite+1)^0,c
  7851   006656  2A05               	incf	??_digitalWrite^0,f,c
  7852   006658  EF30  F033         	goto	u2514
  7853   00665C                     u2515:
  7854   00665C  90D8               	bcf	status,0,c
  7855   00665E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7856   006660                     u2514:
  7857   006660  2E05               	decfsz	??_digitalWrite^0,f,c
  7858   006662  EF2E  F033         	goto	u2515
  7859   006666  5006               	movf	(??_digitalWrite+1)^0,w,c
  7860   006668  0AFF               	xorlw	255
  7861   00666A  1680               	andwf	128,f,c	;volatile
  7862   00666C  EF26  F034         	goto	l79
  7863   006670                     l3408:
  7864   006670  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7865   006672  EF46  F033         	goto	u2520
  7866   006676  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7867   006678  E107               	bnz	u2521
  7868   00667A  0E10               	movlw	16
  7869   00667C  5C01               	subwf	digitalWrite@pin^0,w,c
  7870   00667E  B0D8               	btfsc	status,0,c
  7871   006680  EF44  F033         	goto	u2521
  7872   006684  EF46  F033         	goto	u2520
  7873   006688                     u2521:
  7874   006688  EF74  F033         	goto	l3416
  7875   00668C                     u2520:
  7876   00668C                     
  7877                           ;io.c: 20:         pin -=8;
  7878   00668C  0EF8               	movlw	248
  7879   00668E  2601               	addwf	digitalWrite@pin^0,f,c
  7880   006690  0EFF               	movlw	255
  7881   006692  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7882                           
  7883                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  7884   006694  5003               	movf	digitalWrite@value^0,w,c
  7885   006696  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7886   006698  B4D8               	btfsc	status,2,c
  7887   00669A  EF51  F033         	goto	u2531
  7888   00669E  EF53  F033         	goto	u2530
  7889   0066A2                     u2531:
  7890   0066A2  EF63  F033         	goto	l3414
  7891   0066A6                     u2530:
  7892   0066A6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7893   0066AA  0E01               	movlw	1
  7894   0066AC  6E06               	movwf	(??_digitalWrite+1)^0,c
  7895   0066AE  2A05               	incf	??_digitalWrite^0,f,c
  7896   0066B0  EF5C  F033         	goto	u2544
  7897   0066B4                     u2545:
  7898   0066B4  90D8               	bcf	status,0,c
  7899   0066B6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7900   0066B8                     u2544:
  7901   0066B8  2E05               	decfsz	??_digitalWrite^0,f,c
  7902   0066BA  EF5A  F033         	goto	u2545
  7903   0066BE  5006               	movf	(??_digitalWrite+1)^0,w,c
  7904   0066C0  1281               	iorwf	129,f,c	;volatile
  7905   0066C2  EF26  F034         	goto	l79
  7906   0066C6                     l3414:
  7907   0066C6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7908   0066CA  0E01               	movlw	1
  7909   0066CC  6E06               	movwf	(??_digitalWrite+1)^0,c
  7910   0066CE  2A05               	incf	??_digitalWrite^0,f,c
  7911   0066D0  EF6C  F033         	goto	u2554
  7912   0066D4                     u2555:
  7913   0066D4  90D8               	bcf	status,0,c
  7914   0066D6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7915   0066D8                     u2554:
  7916   0066D8  2E05               	decfsz	??_digitalWrite^0,f,c
  7917   0066DA  EF6A  F033         	goto	u2555
  7918   0066DE  5006               	movf	(??_digitalWrite+1)^0,w,c
  7919   0066E0  0AFF               	xorlw	255
  7920   0066E2  1681               	andwf	129,f,c	;volatile
  7921   0066E4  EF26  F034         	goto	l79
  7922   0066E8                     l3416:
  7923   0066E8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7924   0066EA  EF82  F033         	goto	u2560
  7925   0066EE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7926   0066F0  E107               	bnz	u2561
  7927   0066F2  0E18               	movlw	24
  7928   0066F4  5C01               	subwf	digitalWrite@pin^0,w,c
  7929   0066F6  B0D8               	btfsc	status,0,c
  7930   0066F8  EF80  F033         	goto	u2561
  7931   0066FC  EF82  F033         	goto	u2560
  7932   006700                     u2561:
  7933   006700  EFB0  F033         	goto	l3424
  7934   006704                     u2560:
  7935   006704                     
  7936                           ;io.c: 24:         pin -=16;
  7937   006704  0EF0               	movlw	240
  7938   006706  2601               	addwf	digitalWrite@pin^0,f,c
  7939   006708  0EFF               	movlw	255
  7940   00670A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7941                           
  7942                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  7943   00670C  5003               	movf	digitalWrite@value^0,w,c
  7944   00670E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7945   006710  B4D8               	btfsc	status,2,c
  7946   006712  EF8D  F033         	goto	u2571
  7947   006716  EF8F  F033         	goto	u2570
  7948   00671A                     u2571:
  7949   00671A  EF9F  F033         	goto	l3422
  7950   00671E                     u2570:
  7951   00671E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7952   006722  0E01               	movlw	1
  7953   006724  6E06               	movwf	(??_digitalWrite+1)^0,c
  7954   006726  2A05               	incf	??_digitalWrite^0,f,c
  7955   006728  EF98  F033         	goto	u2584
  7956   00672C                     u2585:
  7957   00672C  90D8               	bcf	status,0,c
  7958   00672E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7959   006730                     u2584:
  7960   006730  2E05               	decfsz	??_digitalWrite^0,f,c
  7961   006732  EF96  F033         	goto	u2585
  7962   006736  5006               	movf	(??_digitalWrite+1)^0,w,c
  7963   006738  1282               	iorwf	130,f,c	;volatile
  7964   00673A  EF26  F034         	goto	l79
  7965   00673E                     l3422:
  7966   00673E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7967   006742  0E01               	movlw	1
  7968   006744  6E06               	movwf	(??_digitalWrite+1)^0,c
  7969   006746  2A05               	incf	??_digitalWrite^0,f,c
  7970   006748  EFA8  F033         	goto	u2594
  7971   00674C                     u2595:
  7972   00674C  90D8               	bcf	status,0,c
  7973   00674E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7974   006750                     u2594:
  7975   006750  2E05               	decfsz	??_digitalWrite^0,f,c
  7976   006752  EFA6  F033         	goto	u2595
  7977   006756  5006               	movf	(??_digitalWrite+1)^0,w,c
  7978   006758  0AFF               	xorlw	255
  7979   00675A  1682               	andwf	130,f,c	;volatile
  7980   00675C  EF26  F034         	goto	l79
  7981   006760                     l3424:
  7982   006760  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7983   006762  EFBE  F033         	goto	u2600
  7984   006766  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7985   006768  E107               	bnz	u2601
  7986   00676A  0E20               	movlw	32
  7987   00676C  5C01               	subwf	digitalWrite@pin^0,w,c
  7988   00676E  B0D8               	btfsc	status,0,c
  7989   006770  EFBC  F033         	goto	u2601
  7990   006774  EFBE  F033         	goto	u2600
  7991   006778                     u2601:
  7992   006778  EFEC  F033         	goto	l3432
  7993   00677C                     u2600:
  7994   00677C                     
  7995                           ;io.c: 28:         pin -=24;
  7996   00677C  0EE8               	movlw	232
  7997   00677E  2601               	addwf	digitalWrite@pin^0,f,c
  7998   006780  0EFF               	movlw	255
  7999   006782  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  8000                           
  8001                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  8002   006784  5003               	movf	digitalWrite@value^0,w,c
  8003   006786  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  8004   006788  B4D8               	btfsc	status,2,c
  8005   00678A  EFC9  F033         	goto	u2611
  8006   00678E  EFCB  F033         	goto	u2610
  8007   006792                     u2611:
  8008   006792  EFDB  F033         	goto	l3430
  8009   006796                     u2610:
  8010   006796  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8011   00679A  0E01               	movlw	1
  8012   00679C  6E06               	movwf	(??_digitalWrite+1)^0,c
  8013   00679E  2A05               	incf	??_digitalWrite^0,f,c
  8014   0067A0  EFD4  F033         	goto	u2624
  8015   0067A4                     u2625:
  8016   0067A4  90D8               	bcf	status,0,c
  8017   0067A6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8018   0067A8                     u2624:
  8019   0067A8  2E05               	decfsz	??_digitalWrite^0,f,c
  8020   0067AA  EFD2  F033         	goto	u2625
  8021   0067AE  5006               	movf	(??_digitalWrite+1)^0,w,c
  8022   0067B0  1283               	iorwf	131,f,c	;volatile
  8023   0067B2  EF26  F034         	goto	l79
  8024   0067B6                     l3430:
  8025   0067B6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8026   0067BA  0E01               	movlw	1
  8027   0067BC  6E06               	movwf	(??_digitalWrite+1)^0,c
  8028   0067BE  2A05               	incf	??_digitalWrite^0,f,c
  8029   0067C0  EFE4  F033         	goto	u2634
  8030   0067C4                     u2635:
  8031   0067C4  90D8               	bcf	status,0,c
  8032   0067C6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8033   0067C8                     u2634:
  8034   0067C8  2E05               	decfsz	??_digitalWrite^0,f,c
  8035   0067CA  EFE2  F033         	goto	u2635
  8036   0067CE  5006               	movf	(??_digitalWrite+1)^0,w,c
  8037   0067D0  0AFF               	xorlw	255
  8038   0067D2  1683               	andwf	131,f,c	;volatile
  8039   0067D4  EF26  F034         	goto	l79
  8040   0067D8                     l3432:
  8041   0067D8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  8042   0067DA  EFFA  F033         	goto	u2640
  8043   0067DE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  8044   0067E0  E107               	bnz	u2641
  8045   0067E2  0E28               	movlw	40
  8046   0067E4  5C01               	subwf	digitalWrite@pin^0,w,c
  8047   0067E6  B0D8               	btfsc	status,0,c
  8048   0067E8  EFF8  F033         	goto	u2641
  8049   0067EC  EFFA  F033         	goto	u2640
  8050   0067F0                     u2641:
  8051   0067F0  EF26  F034         	goto	l79
  8052   0067F4                     u2640:
  8053   0067F4                     
  8054                           ;io.c: 32:         pin -=32;
  8055   0067F4  0EE0               	movlw	224
  8056   0067F6  2601               	addwf	digitalWrite@pin^0,f,c
  8057   0067F8  0EFF               	movlw	255
  8058   0067FA  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  8059                           
  8060                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  8061   0067FC  5003               	movf	digitalWrite@value^0,w,c
  8062   0067FE  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  8063   006800  B4D8               	btfsc	status,2,c
  8064   006802  EF05  F034         	goto	u2651
  8065   006806  EF07  F034         	goto	u2650
  8066   00680A                     u2651:
  8067   00680A  EF17  F034         	goto	l3438
  8068   00680E                     u2650:
  8069   00680E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8070   006812  0E01               	movlw	1
  8071   006814  6E06               	movwf	(??_digitalWrite+1)^0,c
  8072   006816  2A05               	incf	??_digitalWrite^0,f,c
  8073   006818  EF10  F034         	goto	u2664
  8074   00681C                     u2665:
  8075   00681C  90D8               	bcf	status,0,c
  8076   00681E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8077   006820                     u2664:
  8078   006820  2E05               	decfsz	??_digitalWrite^0,f,c
  8079   006822  EF0E  F034         	goto	u2665
  8080   006826  5006               	movf	(??_digitalWrite+1)^0,w,c
  8081   006828  1284               	iorwf	132,f,c	;volatile
  8082   00682A  EF26  F034         	goto	l79
  8083   00682E                     l3438:
  8084   00682E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8085   006832  0E01               	movlw	1
  8086   006834  6E06               	movwf	(??_digitalWrite+1)^0,c
  8087   006836  2A05               	incf	??_digitalWrite^0,f,c
  8088   006838  EF20  F034         	goto	u2674
  8089   00683C                     u2675:
  8090   00683C  90D8               	bcf	status,0,c
  8091   00683E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8092   006840                     u2674:
  8093   006840  2E05               	decfsz	??_digitalWrite^0,f,c
  8094   006842  EF1E  F034         	goto	u2675
  8095   006846  5006               	movf	(??_digitalWrite+1)^0,w,c
  8096   006848  0AFF               	xorlw	255
  8097   00684A  1684               	andwf	132,f,c	;volatile
  8098   00684C                     l79:
  8099   00684C  0012               	return		;funcret
  8100   00684E                     __end_of_digitalWrite:
  8101                           	callstack 0
  8102                           
  8103 ;; *************** function _I2C_delay *****************
  8104 ;; Defined at:
  8105 ;;		line 22 in file "soft_i2c.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  i               2    0        int 
  8110 ;;  v               2    0        volatile int 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  1    wreg      void 
  8113 ;; Registers used:
  8114 ;;		None
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8120 ;;      Params:         0       0       0       0       0       0       0       0       0
  8121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8123 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8124 ;;Total ram usage:        0 bytes
  8125 ;; Hardware stack levels used: 1
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_i2c_start
  8130 ;;		_i2c_stop
  8131 ;;		_i2c_write_bit
  8132 ;;		_i2c_read_bit
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text43
  8137   004CA2                     __ptext43:
  8138                           	callstack 0
  8139   004CA2                     _I2C_delay:
  8140                           	callstack 25
  8141   004CA2  0012               	return		;funcret
  8142   004CA4                     __end_of_I2C_delay:
  8143                           	callstack 0
  8144                           
  8145 ;; *************** function _dec2bcd *****************
  8146 ;; Defined at:
  8147 ;;		line 9 in file "ds1307.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  value           2   14[COMRAM] int 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  2   14[COMRAM] int 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8161 ;;      Params:         2       0       0       0       0       0       0       0       0
  8162 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8163 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8164 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8165 ;;Total ram usage:        6 bytes
  8166 ;; Hardware stack levels used: 1
  8167 ;; Hardware stack levels required when called: 1
  8168 ;; This function calls:
  8169 ;;		___awdiv
  8170 ;;		___awmod
  8171 ;; This function is called by:
  8172 ;;		_varInit
  8173 ;;		_setTime
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           	psect	text44
  8178   0053A6                     __ptext44:
  8179                           	callstack 0
  8180   0053A6                     _dec2bcd:
  8181                           	callstack 27
  8182   0053A6                     
  8183                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  8184   0053A6  C00F  F001         	movff	dec2bcd@value,___awdiv@dividend
  8185   0053AA  C010  F002         	movff	dec2bcd@value+1,___awdiv@dividend+1
  8186   0053AE  0E00               	movlw	0
  8187   0053B0  6E04               	movwf	(___awdiv@divisor+1)^0,c
  8188   0053B2  0E0A               	movlw	10
  8189   0053B4  6E03               	movwf	___awdiv@divisor^0,c
  8190   0053B6  EC18  F02B         	call	___awdiv	;wreg free
  8191   0053BA  C001  F011         	movff	?___awdiv,??_dec2bcd
  8192   0053BE  C002  F012         	movff	?___awdiv+1,??_dec2bcd+1
  8193   0053C2  3A11               	swapf	??_dec2bcd^0,f,c
  8194   0053C4  3A12               	swapf	(??_dec2bcd+1)^0,f,c
  8195   0053C6  0EF0               	movlw	240
  8196   0053C8  1612               	andwf	(??_dec2bcd+1)^0,f,c
  8197   0053CA  5011               	movf	??_dec2bcd^0,w,c
  8198   0053CC  0B0F               	andlw	15
  8199   0053CE  1212               	iorwf	(??_dec2bcd+1)^0,f,c
  8200   0053D0  0EF0               	movlw	240
  8201   0053D2  1611               	andwf	??_dec2bcd^0,f,c
  8202   0053D4  C00F  F009         	movff	dec2bcd@value,___awmod@dividend
  8203   0053D8  C010  F00A         	movff	dec2bcd@value+1,___awmod@dividend+1
  8204   0053DC  0E00               	movlw	0
  8205   0053DE  6E0C               	movwf	(___awmod@divisor+1)^0,c
  8206   0053E0  0E0A               	movlw	10
  8207   0053E2  6E0B               	movwf	___awmod@divisor^0,c
  8208   0053E4  ECC0  F02A         	call	___awmod	;wreg free
  8209   0053E8  5009               	movf	?___awmod^0,w,c
  8210   0053EA  2411               	addwf	??_dec2bcd^0,w,c
  8211   0053EC  6E13               	movwf	(??_dec2bcd+2)^0,c
  8212   0053EE  500A               	movf	(?___awmod+1)^0,w,c
  8213   0053F0  2012               	addwfc	(??_dec2bcd+1)^0,w,c
  8214   0053F2  6E14               	movwf	(??_dec2bcd+3)^0,c
  8215   0053F4  0E80               	movlw	128
  8216   0053F6  1013               	iorwf	(??_dec2bcd+2)^0,w,c
  8217   0053F8  6E0F               	movwf	dec2bcd@value^0,c
  8218   0053FA  5014               	movf	(??_dec2bcd+3)^0,w,c
  8219   0053FC  6E10               	movwf	(dec2bcd@value+1)^0,c
  8220   0053FE                     
  8221                           ;ds1307.c: 11:     return value;
  8222   0053FE  C00F  F00F         	movff	dec2bcd@value,?_dec2bcd
  8223   005402  C010  F010         	movff	dec2bcd@value+1,?_dec2bcd+1
  8224   005406  0012               	return		;funcret
  8225   005408                     __end_of_dec2bcd:
  8226                           	callstack 0
  8227                           
  8228 ;; *************** function ___awmod *****************
  8229 ;; Defined at:
  8230 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  dividend        2    8[COMRAM] int 
  8233 ;;  divisor         2   10[COMRAM] int 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  sign            1   13[COMRAM] unsigned char 
  8236 ;;  counter         1   12[COMRAM] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  2    8[COMRAM] int 
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8246 ;;      Params:         4       0       0       0       0       0       0       0       0
  8247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8249 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8250 ;;Total ram usage:        6 bytes
  8251 ;; Hardware stack levels used: 1
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_dec2bcd
  8256 ;;		_lcdInt
  8257 ;;		_rtcPutSeconds
  8258 ;;		_rtcPutMinutes
  8259 ;;		_rtcPutHours
  8260 ;;		_rtcPutDate
  8261 ;;		_rtcPutMonth
  8262 ;;		_rtcPutYear
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           	psect	text45
  8267   005580                     __ptext45:
  8268                           	callstack 0
  8269   005580                     ___awmod:
  8270                           	callstack 27
  8271   005580  0E00               	movlw	0
  8272   005582  6E0E               	movwf	___awmod@sign^0,c
  8273   005584  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  8274   005586  EFC9  F02A         	goto	u3300
  8275   00558A  EFC7  F02A         	goto	u3301
  8276   00558E                     u3301:
  8277   00558E  EFCF  F02A         	goto	l3774
  8278   005592                     u3300:
  8279   005592  6C09               	negf	___awmod@dividend^0,c
  8280   005594  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  8281   005596  B0D8               	btfsc	status,0,c
  8282   005598  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  8283   00559A  0E01               	movlw	1
  8284   00559C  6E0E               	movwf	___awmod@sign^0,c
  8285   00559E                     l3774:
  8286   00559E  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  8287   0055A0  EFD6  F02A         	goto	u3310
  8288   0055A4  EFD4  F02A         	goto	u3311
  8289   0055A8                     u3311:
  8290   0055A8  EFDA  F02A         	goto	l3778
  8291   0055AC                     u3310:
  8292   0055AC  6C0B               	negf	___awmod@divisor^0,c
  8293   0055AE  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  8294   0055B0  B0D8               	btfsc	status,0,c
  8295   0055B2  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  8296   0055B4                     l3778:
  8297   0055B4  500B               	movf	___awmod@divisor^0,w,c
  8298   0055B6  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  8299   0055B8  B4D8               	btfsc	status,2,c
  8300   0055BA  EFE1  F02A         	goto	u3321
  8301   0055BE  EFE3  F02A         	goto	u3320
  8302   0055C2                     u3321:
  8303   0055C2  EF07  F02B         	goto	l3794
  8304   0055C6                     u3320:
  8305   0055C6  0E01               	movlw	1
  8306   0055C8  6E0D               	movwf	___awmod@counter^0,c
  8307   0055CA  EFEB  F02A         	goto	l3784
  8308   0055CE                     l3782:
  8309   0055CE  90D8               	bcf	status,0,c
  8310   0055D0  360B               	rlcf	___awmod@divisor^0,f,c
  8311   0055D2  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  8312   0055D4  2A0D               	incf	___awmod@counter^0,f,c
  8313   0055D6                     l3784:
  8314   0055D6  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  8315   0055D8  EFF0  F02A         	goto	u3331
  8316   0055DC  EFF2  F02A         	goto	u3330
  8317   0055E0                     u3331:
  8318   0055E0  EFE7  F02A         	goto	l3782
  8319   0055E4                     u3330:
  8320   0055E4                     l3786:
  8321   0055E4  500B               	movf	___awmod@divisor^0,w,c
  8322   0055E6  5C09               	subwf	___awmod@dividend^0,w,c
  8323   0055E8  500C               	movf	(___awmod@divisor+1)^0,w,c
  8324   0055EA  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  8325   0055EC  A0D8               	btfss	status,0,c
  8326   0055EE  EFFB  F02A         	goto	u3341
  8327   0055F2  EFFD  F02A         	goto	u3340
  8328   0055F6                     u3341:
  8329   0055F6  EF01  F02B         	goto	l3790
  8330   0055FA                     u3340:
  8331   0055FA  500B               	movf	___awmod@divisor^0,w,c
  8332   0055FC  5E09               	subwf	___awmod@dividend^0,f,c
  8333   0055FE  500C               	movf	(___awmod@divisor+1)^0,w,c
  8334   005600  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  8335   005602                     l3790:
  8336   005602  90D8               	bcf	status,0,c
  8337   005604  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  8338   005606  320B               	rrcf	___awmod@divisor^0,f,c
  8339   005608  2E0D               	decfsz	___awmod@counter^0,f,c
  8340   00560A  EFF2  F02A         	goto	l3786
  8341   00560E                     l3794:
  8342   00560E  500E               	movf	___awmod@sign^0,w,c
  8343   005610  B4D8               	btfsc	status,2,c
  8344   005612  EF0D  F02B         	goto	u3351
  8345   005616  EF0F  F02B         	goto	u3350
  8346   00561A                     u3351:
  8347   00561A  EF13  F02B         	goto	l3798
  8348   00561E                     u3350:
  8349   00561E  6C09               	negf	___awmod@dividend^0,c
  8350   005620  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  8351   005622  B0D8               	btfsc	status,0,c
  8352   005624  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  8353   005626                     l3798:
  8354   005626  C009  F009         	movff	___awmod@dividend,?___awmod
  8355   00562A  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  8356   00562E  0012               	return		;funcret
  8357   005630                     __end_of___awmod:
  8358                           	callstack 0
  8359                           
  8360 ;; *************** function _bcd2dec *****************
  8361 ;; Defined at:
  8362 ;;		line 14 in file "ds1307.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  value           2   18[COMRAM] int 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;		None
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  2   18[COMRAM] int 
  8369 ;; Registers used:
  8370 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8376 ;;      Params:         2       0       0       0       0       0       0       0       0
  8377 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8378 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8379 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8380 ;;Total ram usage:        4 bytes
  8381 ;; Hardware stack levels used: 1
  8382 ;; Hardware stack levels required when called: 1
  8383 ;; This function calls:
  8384 ;;		___awdiv
  8385 ;;		___wmul
  8386 ;; This function is called by:
  8387 ;;		_outputPrint
  8388 ;;		_varInit
  8389 ;;		_getTime
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           	psect	text46
  8394   0050F8                     __ptext46:
  8395                           	callstack 0
  8396   0050F8                     _bcd2dec:
  8397                           	callstack 27
  8398   0050F8                     
  8399                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  8400   0050F8  0E0F               	movlw	15
  8401   0050FA  1413               	andwf	bcd2dec@value^0,w,c
  8402   0050FC  6E15               	movwf	??_bcd2dec^0,c
  8403   0050FE  0E00               	movlw	0
  8404   005100  1414               	andwf	(bcd2dec@value+1)^0,w,c
  8405   005102  6E16               	movwf	(??_bcd2dec+1)^0,c
  8406   005104  0E00               	movlw	0
  8407   005106  6E04               	movwf	(___awdiv@divisor+1)^0,c
  8408   005108  0E10               	movlw	16
  8409   00510A  6E03               	movwf	___awdiv@divisor^0,c
  8410   00510C  C013  F001         	movff	bcd2dec@value,___awdiv@dividend
  8411   005110  C014  F002         	movff	bcd2dec@value+1,___awdiv@dividend+1
  8412   005114  EC18  F02B         	call	___awdiv	;wreg free
  8413   005118  C001  F009         	movff	?___awdiv,___wmul@multiplier
  8414   00511C  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  8415   005120  0E00               	movlw	0
  8416   005122  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  8417   005124  0E0A               	movlw	10
  8418   005126  6E0B               	movwf	___wmul@multiplicand^0,c
  8419   005128  ECD7  F026         	call	___wmul	;wreg free
  8420   00512C  5015               	movf	??_bcd2dec^0,w,c
  8421   00512E  2409               	addwf	?___wmul^0,w,c
  8422   005130  6E13               	movwf	?_bcd2dec^0,c
  8423   005132  5016               	movf	(??_bcd2dec+1)^0,w,c
  8424   005134  200A               	addwfc	(?___wmul+1)^0,w,c
  8425   005136  6E14               	movwf	(?_bcd2dec+1)^0,c
  8426   005138  0012               	return		;funcret
  8427   00513A                     __end_of_bcd2dec:
  8428                           	callstack 0
  8429                           
  8430 ;; *************** function ___wmul *****************
  8431 ;; Defined at:
  8432 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;  multiplier      2    8[COMRAM] unsigned int 
  8435 ;;  multiplicand    2   10[COMRAM] unsigned int 
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;  product         2   12[COMRAM] unsigned int 
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  2    8[COMRAM] unsigned int 
  8440 ;; Registers used:
  8441 ;;		wreg, status,2, status,0, prodl, prodh
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8447 ;;      Params:         4       0       0       0       0       0       0       0       0
  8448 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8450 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8451 ;;Total ram usage:        6 bytes
  8452 ;; Hardware stack levels used: 1
  8453 ;; This function calls:
  8454 ;;		Nothing
  8455 ;; This function is called by:
  8456 ;;		_bcd2dec
  8457 ;;		_lcdInt
  8458 ;;		_smLoop
  8459 ;;		_pwmSet1
  8460 ;;		_pwmSet2
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           	psect	text47
  8465   004DAE                     __ptext47:
  8466                           	callstack 0
  8467   004DAE                     ___wmul:
  8468                           	callstack 27
  8469   004DAE  5009               	movf	___wmul@multiplier^0,w,c
  8470   004DB0  020B               	mulwf	___wmul@multiplicand^0,c
  8471   004DB2  CFF3 F00D          	movff	prodl,___wmul@product
  8472   004DB6  CFF4 F00E          	movff	prodh,___wmul@product+1
  8473   004DBA  5009               	movf	___wmul@multiplier^0,w,c
  8474   004DBC  020C               	mulwf	(___wmul@multiplicand+1)^0,c
  8475   004DBE  50F3               	movf	243,w,c
  8476   004DC0  260E               	addwf	(___wmul@product+1)^0,f,c
  8477   004DC2  500A               	movf	(___wmul@multiplier+1)^0,w,c
  8478   004DC4  020B               	mulwf	___wmul@multiplicand^0,c
  8479   004DC6  50F3               	movf	243,w,c
  8480   004DC8  260E               	addwf	(___wmul@product+1)^0,f,c
  8481   004DCA  C00D  F009         	movff	___wmul@product,?___wmul
  8482   004DCE  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  8483   004DD2  0012               	return		;funcret
  8484   004DD4                     __end_of___wmul:
  8485                           	callstack 0
  8486                           
  8487 ;; *************** function ___awdiv *****************
  8488 ;; Defined at:
  8489 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  dividend        2    0[COMRAM] int 
  8492 ;;  divisor         2    2[COMRAM] int 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;  quotient        2    6[COMRAM] int 
  8495 ;;  sign            1    5[COMRAM] unsigned char 
  8496 ;;  counter         1    4[COMRAM] unsigned char 
  8497 ;; Return value:  Size  Location     Type
  8498 ;;                  2    0[COMRAM] int 
  8499 ;; Registers used:
  8500 ;;		wreg, status,2, status,0
  8501 ;; Tracked objects:
  8502 ;;		On entry : 0/0
  8503 ;;		On exit  : 0/0
  8504 ;;		Unchanged: 0/0
  8505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8506 ;;      Params:         4       0       0       0       0       0       0       0       0
  8507 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8508 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8509 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8510 ;;Total ram usage:        8 bytes
  8511 ;; Hardware stack levels used: 1
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		_dec2bcd
  8516 ;;		_bcd2dec
  8517 ;;		_lcdInt
  8518 ;;		_readTemp
  8519 ;;		_rtcPutSeconds
  8520 ;;		_rtcPutMinutes
  8521 ;;		_rtcPutHours
  8522 ;;		_rtcPutDate
  8523 ;;		_rtcPutMonth
  8524 ;;		_rtcPutYear
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text48
  8529   005630                     __ptext48:
  8530                           	callstack 0
  8531   005630                     ___awdiv:
  8532                           	callstack 27
  8533   005630  0E00               	movlw	0
  8534   005632  6E06               	movwf	___awdiv@sign^0,c
  8535   005634  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  8536   005636  EF21  F02B         	goto	u3240
  8537   00563A  EF1F  F02B         	goto	u3241
  8538   00563E                     u3241:
  8539   00563E  EF27  F02B         	goto	l3730
  8540   005642                     u3240:
  8541   005642  6C03               	negf	___awdiv@divisor^0,c
  8542   005644  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  8543   005646  B0D8               	btfsc	status,0,c
  8544   005648  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  8545   00564A  0E01               	movlw	1
  8546   00564C  6E06               	movwf	___awdiv@sign^0,c
  8547   00564E                     l3730:
  8548   00564E  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  8549   005650  EF2E  F02B         	goto	u3250
  8550   005654  EF2C  F02B         	goto	u3251
  8551   005658                     u3251:
  8552   005658  EF34  F02B         	goto	l3736
  8553   00565C                     u3250:
  8554   00565C  6C01               	negf	___awdiv@dividend^0,c
  8555   00565E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  8556   005660  B0D8               	btfsc	status,0,c
  8557   005662  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  8558   005664  0E01               	movlw	1
  8559   005666  1A06               	xorwf	___awdiv@sign^0,f,c
  8560   005668                     l3736:
  8561   005668  0E00               	movlw	0
  8562   00566A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  8563   00566C  0E00               	movlw	0
  8564   00566E  6E07               	movwf	___awdiv@quotient^0,c
  8565   005670  5003               	movf	___awdiv@divisor^0,w,c
  8566   005672  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  8567   005674  B4D8               	btfsc	status,2,c
  8568   005676  EF3F  F02B         	goto	u3261
  8569   00567A  EF41  F02B         	goto	u3260
  8570   00567E                     u3261:
  8571   00567E  EF69  F02B         	goto	l3758
  8572   005682                     u3260:
  8573   005682  0E01               	movlw	1
  8574   005684  6E05               	movwf	___awdiv@counter^0,c
  8575   005686  EF49  F02B         	goto	l3744
  8576   00568A                     l3742:
  8577   00568A  90D8               	bcf	status,0,c
  8578   00568C  3603               	rlcf	___awdiv@divisor^0,f,c
  8579   00568E  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  8580   005690  2A05               	incf	___awdiv@counter^0,f,c
  8581   005692                     l3744:
  8582   005692  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  8583   005694  EF4E  F02B         	goto	u3271
  8584   005698  EF50  F02B         	goto	u3270
  8585   00569C                     u3271:
  8586   00569C  EF45  F02B         	goto	l3742
  8587   0056A0                     u3270:
  8588   0056A0                     l3746:
  8589   0056A0  90D8               	bcf	status,0,c
  8590   0056A2  3607               	rlcf	___awdiv@quotient^0,f,c
  8591   0056A4  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  8592   0056A6  5003               	movf	___awdiv@divisor^0,w,c
  8593   0056A8  5C01               	subwf	___awdiv@dividend^0,w,c
  8594   0056AA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  8595   0056AC  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  8596   0056AE  A0D8               	btfss	status,0,c
  8597   0056B0  EF5C  F02B         	goto	u3281
  8598   0056B4  EF5E  F02B         	goto	u3280
  8599   0056B8                     u3281:
  8600   0056B8  EF63  F02B         	goto	l3754
  8601   0056BC                     u3280:
  8602   0056BC  5003               	movf	___awdiv@divisor^0,w,c
  8603   0056BE  5E01               	subwf	___awdiv@dividend^0,f,c
  8604   0056C0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  8605   0056C2  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  8606   0056C4  8007               	bsf	___awdiv@quotient^0,0,c
  8607   0056C6                     l3754:
  8608   0056C6  90D8               	bcf	status,0,c
  8609   0056C8  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  8610   0056CA  3203               	rrcf	___awdiv@divisor^0,f,c
  8611   0056CC  2E05               	decfsz	___awdiv@counter^0,f,c
  8612   0056CE  EF50  F02B         	goto	l3746
  8613   0056D2                     l3758:
  8614   0056D2  5006               	movf	___awdiv@sign^0,w,c
  8615   0056D4  B4D8               	btfsc	status,2,c
  8616   0056D6  EF6F  F02B         	goto	u3291
  8617   0056DA  EF71  F02B         	goto	u3290
  8618   0056DE                     u3291:
  8619   0056DE  EF75  F02B         	goto	l3762
  8620   0056E2                     u3290:
  8621   0056E2  6C07               	negf	___awdiv@quotient^0,c
  8622   0056E4  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  8623   0056E6  B0D8               	btfsc	status,0,c
  8624   0056E8  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  8625   0056EA                     l3762:
  8626   0056EA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8627   0056EE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8628   0056F2  0012               	return		;funcret
  8629   0056F4                     __end_of___awdiv:
  8630                           	callstack 0
  8631                           
  8632 ;; *************** function _setState *****************
  8633 ;; Defined at:
  8634 ;;		line 59 in file "var.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  newState        1    wreg     unsigned char 
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;  newState        1    3[COMRAM] unsigned char 
  8639 ;; Return value:  Size  Location     Type
  8640 ;;                  1    wreg      void 
  8641 ;; Registers used:
  8642 ;;		wreg, status,2, status,0, cstack
  8643 ;; Tracked objects:
  8644 ;;		On entry : 0/0
  8645 ;;		On exit  : 0/0
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8648 ;;      Params:         0       0       0       0       0       0       0       0       0
  8649 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8651 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8652 ;;Total ram usage:        1 bytes
  8653 ;; Hardware stack levels used: 1
  8654 ;; Hardware stack levels required when called: 3
  8655 ;; This function calls:
  8656 ;;		_lcdCommand
  8657 ;; This function is called by:
  8658 ;;		_smInit
  8659 ;;		_smLoop
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text49
  8664   004CD8                     __ptext49:
  8665                           	callstack 0
  8666   004CD8                     _setState:
  8667                           	callstack 26
  8668                           
  8669                           ;incstack = 0
  8670                           ;setState@newState stored from wreg
  8671   004CD8  6E04               	movwf	setState@newState^0,c
  8672   004CDA                     
  8673                           ;var.c: 60:     state = newState;
  8674   004CDA  C004  F052         	movff	setState@newState,_state
  8675   004CDE                     
  8676                           ;var.c: 61:     lcdCommand(0x01);
  8677   004CDE  0E01               	movlw	1
  8678   004CE0  EC04  F029         	call	_lcdCommand
  8679   004CE4  0012               	return		;funcret
  8680   004CE6                     __end_of_setState:
  8681                           	callstack 0
  8682                           
  8683 ;; *************** function _eventInit *****************
  8684 ;; Defined at:
  8685 ;;		line 18 in file "event.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;		None
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      void 
  8692 ;; Registers used:
  8693 ;;		wreg, status,2, status,0, cstack
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8701 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8702 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8703 ;;Total ram usage:        0 bytes
  8704 ;; Hardware stack levels used: 1
  8705 ;; Hardware stack levels required when called: 1
  8706 ;; This function calls:
  8707 ;;		_kpInit
  8708 ;; This function is called by:
  8709 ;;		_smInit
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text50
  8714   004D24                     __ptext50:
  8715                           	callstack 0
  8716   004D24                     _eventInit:
  8717                           	callstack 28
  8718   004D24                     
  8719                           ;event.c: 19:     kpInit();
  8720   004D24  EC65  F026         	call	_kpInit	;wreg free
  8721   004D28                     
  8722                           ;event.c: 21:     ev_ant = 0;
  8723   004D28  0E00               	movlw	0
  8724   004D2A  0100               	movlb	0	; () banked
  8725   004D2C  6FBA               	movwf	(_ev_ant+1)& (0+255),b
  8726   004D2E  0E00               	movlw	0
  8727   004D30  6FB9               	movwf	_ev_ant& (0+255),b
  8728   004D32                     
  8729                           ; BSR set to: 0
  8730                           ;event.c: 22:     key = 1;
  8731   004D32  0E00               	movlw	0
  8732   004D34  6FB6               	movwf	(_key+1)& (0+255),b
  8733   004D36  0E01               	movlw	1
  8734   004D38  6FB5               	movwf	_key& (0+255),b
  8735   004D3A                     
  8736                           ; BSR set to: 0
  8737   004D3A  0012               	return		;funcret
  8738   004D3C                     __end_of_eventInit:
  8739                           	callstack 0
  8740                           
  8741 ;; *************** function _kpInit *****************
  8742 ;; Defined at:
  8743 ;;		line 81 in file "keypad.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;		None
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;		None
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		wreg, status,2, status,0
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0
  8758 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8760 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8761 ;;Total ram usage:        0 bytes
  8762 ;; Hardware stack levels used: 1
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_main
  8767 ;;		_eventInit
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text51
  8772   004CCA                     __ptext51:
  8773                           	callstack 0
  8774   004CCA                     _kpInit:
  8775                           	callstack 28
  8776   004CCA                     
  8777                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  8778   004CCA  6893               	setf	147,c	;volatile
  8779   004CCC                     
  8780                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  8781   004CCC  9EF1               	bcf	241,7,c	;volatile
  8782   004CCE                     
  8783                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  8784   004CCE  0E0E               	movlw	14
  8785   004CD0  6EC1               	movwf	193,c	;volatile
  8786   004CD2                     
  8787                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  8788   004CD2  0E00               	movlw	0
  8789   004CD4  6E63               	movwf	99,c	;volatile
  8790   004CD6  0012               	return		;funcret
  8791   004CD8                     __end_of_kpInit:
  8792                           	callstack 0
  8793                           
  8794 ;; *************** function _serialInit *****************
  8795 ;; Defined at:
  8796 ;;		line 48 in file "serial.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;		None
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;		None
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, status,2, status,0
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0
  8811 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8813 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8814 ;;Total ram usage:        0 bytes
  8815 ;; Hardware stack levels used: 1
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	text52
  8824   004D54                     __ptext52:
  8825                           	callstack 0
  8826   004D54                     _serialInit:
  8827                           	callstack 30
  8828   004D54                     
  8829                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  8830   004D54  0E2C               	movlw	44
  8831   004D56  6EAC               	movwf	172,c	;volatile
  8832                           
  8833                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  8834   004D58  0E90               	movlw	144
  8835   004D5A  6EAB               	movwf	171,c	;volatile
  8836                           
  8837                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  8838   004D5C  0E08               	movlw	8
  8839   004D5E  6EB8               	movwf	184,c	;volatile
  8840                           
  8841                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  8842   004D60  0E00               	movlw	0
  8843   004D62  6EB0               	movwf	176,c	;volatile
  8844                           
  8845                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  8846   004D64  0E22               	movlw	34
  8847   004D66  6EAF               	movwf	175,c	;volatile
  8848   004D68                     
  8849                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  8850   004D68  8C94               	bsf	148,6,c	;volatile
  8851   004D6A                     
  8852                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  8853   004D6A  8E94               	bsf	148,7,c	;volatile
  8854   004D6C  0012               	return		;funcret
  8855   004D6E                     __end_of_serialInit:
  8856                           	callstack 0
  8857                           
  8858 ;; *************** function _lcdInit *****************
  8859 ;; Defined at:
  8860 ;;		line 117 in file "lcd.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;  i               1    3[COMRAM] unsigned char 
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      void 
  8867 ;; Registers used:
  8868 ;;		wreg, status,2, status,0, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0
  8875 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8877 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8878 ;;Total ram usage:        1 bytes
  8879 ;; Hardware stack levels used: 1
  8880 ;; Hardware stack levels required when called: 3
  8881 ;; This function calls:
  8882 ;;		_Delay2ms
  8883 ;;		_lcdCommand
  8884 ;;		_lcdCommand4bits
  8885 ;; This function is called by:
  8886 ;;		_main
  8887 ;;		_outputInit
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text53
  8892   005480                     __ptext53:
  8893                           	callstack 0
  8894   005480                     _lcdInit:
  8895                           	callstack 27
  8896   005480                     
  8897                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  8898   005480  9095               	bcf	149,0,c	;volatile
  8899                           
  8900                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  8901   005482  9E95               	bcf	149,7,c	;volatile
  8902                           
  8903                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  8904   005484  9C95               	bcf	149,6,c	;volatile
  8905                           
  8906                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  8907   005486  9A95               	bcf	149,5,c	;volatile
  8908                           
  8909                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  8910   005488  9895               	bcf	149,4,c	;volatile
  8911                           
  8912                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  8913   00548A  9495               	bcf	149,2,c	;volatile
  8914   00548C                     
  8915                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  8916   00548C  0E00               	movlw	0
  8917   00548E  6E04               	movwf	lcdInit@i^0,c
  8918   005490                     l4650:
  8919                           
  8920                           ;lcd.c: 133:         Delay2ms();
  8921   005490  EC69  F027         	call	_Delay2ms	;wreg free
  8922   005494  2A04               	incf	lcdInit@i^0,f,c
  8923   005496  0E06               	movlw	6
  8924   005498  6404               	cpfsgt	lcdInit@i^0,c
  8925   00549A  EF51  F02A         	goto	u4281
  8926   00549E  EF53  F02A         	goto	u4280
  8927   0054A2                     u4281:
  8928   0054A2  EF48  F02A         	goto	l4650
  8929   0054A6                     u4280:
  8930   0054A6                     
  8931                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  8932   0054A6  0E00               	movlw	0
  8933   0054A8  6E01               	movwf	lcdCommand4bits@data^0,c
  8934   0054AA  0E30               	movlw	48
  8935   0054AC  EC04  F02A         	call	_lcdCommand4bits
  8936                           
  8937                           ;lcd.c: 138:     Delay2ms();
  8938   0054B0  EC69  F027         	call	_Delay2ms	;wreg free
  8939                           
  8940                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  8941   0054B4  0E00               	movlw	0
  8942   0054B6  6E01               	movwf	lcdCommand4bits@data^0,c
  8943   0054B8  0E30               	movlw	48
  8944   0054BA  EC04  F02A         	call	_lcdCommand4bits
  8945                           
  8946                           ;lcd.c: 142:     Delay2ms();
  8947   0054BE  EC69  F027         	call	_Delay2ms	;wreg free
  8948                           
  8949                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  8950   0054C2  0E00               	movlw	0
  8951   0054C4  6E01               	movwf	lcdCommand4bits@data^0,c
  8952   0054C6  0E30               	movlw	48
  8953   0054C8  EC04  F02A         	call	_lcdCommand4bits
  8954                           
  8955                           ;lcd.c: 146:     Delay2ms();
  8956   0054CC  EC69  F027         	call	_Delay2ms	;wreg free
  8957                           
  8958                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  8959   0054D0  0E00               	movlw	0
  8960   0054D2  6E01               	movwf	lcdCommand4bits@data^0,c
  8961   0054D4  0E20               	movlw	32
  8962   0054D6  EC04  F02A         	call	_lcdCommand4bits
  8963                           
  8964                           ;lcd.c: 150:     Delay2ms();
  8965   0054DA  EC69  F027         	call	_Delay2ms	;wreg free
  8966                           
  8967                           ;lcd.c: 153:     lcdCommand(0x28);
  8968   0054DE  0E28               	movlw	40
  8969   0054E0  EC04  F029         	call	_lcdCommand
  8970                           
  8971                           ;lcd.c: 154:     lcdCommand(0x06);
  8972   0054E4  0E06               	movlw	6
  8973   0054E6  EC04  F029         	call	_lcdCommand
  8974                           
  8975                           ;lcd.c: 156:     lcdCommand(0x0C);
  8976   0054EA  0E0C               	movlw	12
  8977   0054EC  EC04  F029         	call	_lcdCommand
  8978                           
  8979                           ;lcd.c: 157:     lcdCommand(0x01);
  8980   0054F0  0E01               	movlw	1
  8981   0054F2  EC04  F029         	call	_lcdCommand
  8982   0054F6  0012               	return		;funcret
  8983   0054F8                     __end_of_lcdInit:
  8984                           	callstack 0
  8985                           
  8986 ;; *************** function _lcdCommand *****************
  8987 ;; Defined at:
  8988 ;;		line 93 in file "lcd.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;  cmd             1    wreg     unsigned char 
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;  cmd             1    2[COMRAM] unsigned char 
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  1    wreg      void 
  8995 ;; Registers used:
  8996 ;;		wreg, status,2, status,0, cstack
  8997 ;; Tracked objects:
  8998 ;;		On entry : 0/0
  8999 ;;		On exit  : 0/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9002 ;;      Params:         0       0       0       0       0       0       0       0       0
  9003 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9005 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9006 ;;Total ram usage:        1 bytes
  9007 ;; Hardware stack levels used: 1
  9008 ;; Hardware stack levels required when called: 2
  9009 ;; This function calls:
  9010 ;;		_Delay2ms
  9011 ;;		_Delay40us
  9012 ;;		_lcdCommand4bits
  9013 ;; This function is called by:
  9014 ;;		_lcdInit
  9015 ;;		_outputPrint
  9016 ;;		_setState
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text54
  9021   005208                     __ptext54:
  9022                           	callstack 0
  9023   005208                     _lcdCommand:
  9024                           	callstack 26
  9025                           
  9026                           ;incstack = 0
  9027                           ;lcdCommand@cmd stored from wreg
  9028   005208  6E03               	movwf	lcdCommand@cmd^0,c
  9029   00520A                     
  9030                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  9031   00520A  0E00               	movlw	0
  9032   00520C  6E01               	movwf	lcdCommand4bits@data^0,c
  9033   00520E  5003               	movf	lcdCommand@cmd^0,w,c
  9034   005210  EC04  F02A         	call	_lcdCommand4bits
  9035                           
  9036                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  9037   005214  0E00               	movlw	0
  9038   005216  6E01               	movwf	lcdCommand4bits@data^0,c
  9039   005218  3803               	swapf	lcdCommand@cmd^0,w,c
  9040   00521A  0BF0               	andlw	240
  9041   00521C  EC04  F02A         	call	_lcdCommand4bits
  9042   005220                     
  9043                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  9044   005220  0E02               	movlw	2
  9045   005222  1803               	xorwf	lcdCommand@cmd^0,w,c
  9046   005224  B4D8               	btfsc	status,2,c
  9047   005226  EF17  F029         	goto	u3371
  9048   00522A  EF19  F029         	goto	u3370
  9049   00522E                     u3371:
  9050   00522E  EF21  F029         	goto	l3850
  9051   005232                     u3370:
  9052   005232  0403               	decf	lcdCommand@cmd^0,w,c
  9053   005234  A4D8               	btfss	status,2,c
  9054   005236  EF1F  F029         	goto	u3381
  9055   00523A  EF21  F029         	goto	u3380
  9056   00523E                     u3381:
  9057   00523E  EF25  F029         	goto	l3852
  9058   005242                     u3380:
  9059   005242                     l3850:
  9060                           
  9061                           ;lcd.c: 100:         Delay2ms();
  9062   005242  EC69  F027         	call	_Delay2ms	;wreg free
  9063                           
  9064                           ;lcd.c: 102:     } else {
  9065   005246  EF27  F029         	goto	l180
  9066   00524A                     l3852:
  9067                           
  9068                           ;lcd.c: 103:         Delay40us();
  9069   00524A  EC86  F026         	call	_Delay40us	;wreg free
  9070   00524E                     l180:
  9071   00524E  0012               	return		;funcret
  9072   005250                     __end_of_lcdCommand:
  9073                           	callstack 0
  9074                           
  9075 ;; *************** function _lcdCommand4bits *****************
  9076 ;; Defined at:
  9077 ;;		line 52 in file "lcd.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;  cmd             1    wreg     unsigned char 
  9080 ;;  data            1    0[COMRAM] unsigned char 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  cmd             1    1[COMRAM] unsigned char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      void 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9092 ;;      Params:         1       0       0       0       0       0       0       0       0
  9093 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9095 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9096 ;;Total ram usage:        2 bytes
  9097 ;; Hardware stack levels used: 1
  9098 ;; Hardware stack levels required when called: 1
  9099 ;; This function calls:
  9100 ;;		_pulseEnable
  9101 ;; This function is called by:
  9102 ;;		_lcdCommand
  9103 ;;		_lcdData
  9104 ;;		_lcdInit
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	text55
  9109   005408                     __ptext55:
  9110                           	callstack 0
  9111   005408                     _lcdCommand4bits:
  9112                           	callstack 26
  9113                           
  9114                           ;incstack = 0
  9115                           ;lcdCommand4bits@cmd stored from wreg
  9116   005408  6E02               	movwf	lcdCommand4bits@cmd^0,c
  9117   00540A                     
  9118                           ;lcd.c: 54:     if (data) {
  9119   00540A  5001               	movf	lcdCommand4bits@data^0,w,c
  9120   00540C  B4D8               	btfsc	status,2,c
  9121   00540E  EF0B  F02A         	goto	u3151
  9122   005412  EF0D  F02A         	goto	u3150
  9123   005416                     u3151:
  9124   005416  EF10  F02A         	goto	l3642
  9125   00541A                     u3150:
  9126   00541A                     
  9127                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  9128   00541A  8083               	bsf	131,0,c	;volatile
  9129                           
  9130                           ;lcd.c: 56:     } else {
  9131   00541C  EF11  F02A         	goto	l3644
  9132   005420                     l3642:
  9133                           
  9134                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  9135   005420  9083               	bcf	131,0,c	;volatile
  9136   005422                     l3644:
  9137                           
  9138                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  9139   005422  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  9140   005424  EF16  F02A         	goto	u3161
  9141   005428  EF18  F02A         	goto	u3160
  9142   00542C                     u3161:
  9143   00542C  EF1B  F02A         	goto	l3648
  9144   005430                     u3160:
  9145   005430                     
  9146                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  9147   005430  8483               	bsf	131,2,c	;volatile
  9148                           
  9149                           ;lcd.c: 65:     } else {
  9150   005432  EF1C  F02A         	goto	l3650
  9151   005436                     l3648:
  9152                           
  9153                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  9154   005436  9483               	bcf	131,2,c	;volatile
  9155   005438                     l3650:
  9156                           
  9157                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  9158   005438  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  9159   00543A  EF21  F02A         	goto	u3171
  9160   00543E  EF23  F02A         	goto	u3170
  9161   005442                     u3171:
  9162   005442  EF26  F02A         	goto	l3654
  9163   005446                     u3170:
  9164   005446                     
  9165                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  9166   005446  8883               	bsf	131,4,c	;volatile
  9167                           
  9168                           ;lcd.c: 72:     } else {
  9169   005448  EF27  F02A         	goto	l3656
  9170   00544C                     l3654:
  9171                           
  9172                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  9173   00544C  9883               	bcf	131,4,c	;volatile
  9174   00544E                     l3656:
  9175                           
  9176                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  9177   00544E  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  9178   005450  EF2C  F02A         	goto	u3181
  9179   005454  EF2E  F02A         	goto	u3180
  9180   005458                     u3181:
  9181   005458  EF31  F02A         	goto	l3660
  9182   00545C                     u3180:
  9183   00545C                     
  9184                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  9185   00545C  8A83               	bsf	131,5,c	;volatile
  9186                           
  9187                           ;lcd.c: 79:     } else {
  9188   00545E  EF32  F02A         	goto	l3662
  9189   005462                     l3660:
  9190                           
  9191                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  9192   005462  9A83               	bcf	131,5,c	;volatile
  9193   005464                     l3662:
  9194                           
  9195                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  9196   005464  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  9197   005466  EF37  F02A         	goto	u3191
  9198   00546A  EF39  F02A         	goto	u3190
  9199   00546E                     u3191:
  9200   00546E  EF3C  F02A         	goto	l3666
  9201   005472                     u3190:
  9202   005472                     
  9203                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  9204   005472  8C83               	bsf	131,6,c	;volatile
  9205                           
  9206                           ;lcd.c: 86:     } else {
  9207   005474  EF3D  F02A         	goto	l3668
  9208   005478                     l3666:
  9209                           
  9210                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  9211   005478  9C83               	bcf	131,6,c	;volatile
  9212   00547A                     l3668:
  9213                           
  9214                           ;lcd.c: 90:     pulseEnable();
  9215   00547A  EC5D  F026         	call	_pulseEnable	;wreg free
  9216   00547E  0012               	return		;funcret
  9217   005480                     __end_of_lcdCommand4bits:
  9218                           	callstack 0
  9219                           
  9220 ;; *************** function _pulseEnable *****************
  9221 ;; Defined at:
  9222 ;;		line 47 in file "lcd.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		status,2, status,0
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9239 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9240 ;;Total ram usage:        0 bytes
  9241 ;; Hardware stack levels used: 1
  9242 ;; This function calls:
  9243 ;;		Nothing
  9244 ;; This function is called by:
  9245 ;;		_lcdCommand4bits
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text56
  9250   004CBA                     __ptext56:
  9251                           	callstack 0
  9252   004CBA                     _pulseEnable:
  9253                           	callstack 26
  9254   004CBA                     
  9255                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  9256   004CBA  8E83               	bsf	131,7,c	;volatile
  9257                           
  9258                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  9259   004CBC  9E83               	bcf	131,7,c	;volatile
  9260   004CBE  0012               	return		;funcret
  9261   004CC0                     __end_of_pulseEnable:
  9262                           	callstack 0
  9263                           
  9264 ;; *************** function _Delay40us *****************
  9265 ;; Defined at:
  9266 ;;		line 36 in file "lcd.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  j               1    0[COMRAM] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0
  9281 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9283 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9284 ;;Total ram usage:        1 bytes
  9285 ;; Hardware stack levels used: 1
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_lcdCommand
  9290 ;;		_lcdData
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           	psect	text57
  9295   004D0C                     __ptext57:
  9296                           	callstack 0
  9297   004D0C                     _Delay40us:
  9298                           	callstack 27
  9299   004D0C                     
  9300                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  9301   004D0C  0E00               	movlw	0
  9302   004D0E  6E01               	movwf	Delay40us@j^0,c
  9303   004D10                     l3634:
  9304   004D10  2A01               	incf	Delay40us@j^0,f,c
  9305   004D12  0E43               	movlw	67
  9306   004D14  6401               	cpfsgt	Delay40us@j^0,c
  9307   004D16  EF8F  F026         	goto	u3141
  9308   004D1A  EF91  F026         	goto	u3140
  9309   004D1E                     u3141:
  9310   004D1E  EF88  F026         	goto	l3634
  9311   004D22                     u3140:
  9312   004D22  0012               	return		;funcret
  9313   004D24                     __end_of_Delay40us:
  9314                           	callstack 0
  9315                           
  9316 ;; *************** function _Delay2ms *****************
  9317 ;; Defined at:
  9318 ;;		line 41 in file "lcd.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;		None
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;  k               1    1[COMRAM] unsigned char 
  9323 ;;  j               1    0[COMRAM] unsigned char 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		wreg, status,2, status,0
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0
  9334 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9336 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9337 ;;Total ram usage:        2 bytes
  9338 ;; Hardware stack levels used: 1
  9339 ;; This function calls:
  9340 ;;		Nothing
  9341 ;; This function is called by:
  9342 ;;		_lcdCommand
  9343 ;;		_lcdInit
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           	psect	text58
  9348   004ED2                     __ptext58:
  9349                           	callstack 0
  9350   004ED2                     _Delay2ms:
  9351                           	callstack 27
  9352   004ED2                     
  9353                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  9354   004ED2  0E00               	movlw	0
  9355   004ED4  6E01               	movwf	Delay2ms@j^0,c
  9356   004ED6                     l3700:
  9357                           
  9358                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  9359   004ED6  0E00               	movlw	0
  9360   004ED8  6E02               	movwf	Delay2ms@k^0,c
  9361   004EDA                     l3706:
  9362   004EDA  2A02               	incf	Delay2ms@k^0,f,c
  9363   004EDC  0EB1               	movlw	177
  9364   004EDE  6402               	cpfsgt	Delay2ms@k^0,c
  9365   004EE0  EF74  F027         	goto	u3221
  9366   004EE4  EF76  F027         	goto	u3220
  9367   004EE8                     u3221:
  9368   004EE8  EF6D  F027         	goto	l3706
  9369   004EEC                     u3220:
  9370   004EEC  2A01               	incf	Delay2ms@j^0,f,c
  9371   004EEE  0E13               	movlw	19
  9372   004EF0  6401               	cpfsgt	Delay2ms@j^0,c
  9373   004EF2  EF7D  F027         	goto	u3231
  9374   004EF6  EF7F  F027         	goto	u3230
  9375   004EFA                     u3231:
  9376   004EFA  EF6B  F027         	goto	l3700
  9377   004EFE                     u3230:
  9378   004EFE  0012               	return		;funcret
  9379   004F00                     __end_of_Delay2ms:
  9380                           	callstack 0
  9381                           
  9382 ;; *************** function _kpDebounce *****************
  9383 ;; Defined at:
  9384 ;;		line 33 in file "keypad.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;		None
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;  portes          5    8[COMRAM] unsigned char [5]
  9389 ;;  bits            5    3[COMRAM] unsigned char [5]
  9390 ;;  j               1   13[COMRAM] unsigned char 
  9391 ;;  i               1    0        unsigned char 
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  1    wreg      void 
  9394 ;; Registers used:
  9395 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9401 ;;      Params:         0       0       0       0       0       0       0       0       0
  9402 ;;      Locals:        11       0       0       0       0       0       0       0       0
  9403 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9404 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9405 ;;Total ram usage:       14 bytes
  9406 ;; Hardware stack levels used: 1
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_main
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text59
  9415   00598E                     __ptext59:
  9416                           	callstack 0
  9417   00598E                     _kpDebounce:
  9418                           	callstack 30
  9419   00598E                     
  9420                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  9421   00598E  EE20  F009         	lfsr	2,kpDebounce@portes
  9422   005992  0E04               	movlw	4
  9423   005994                     u4191:
  9424   005994  6ADE               	clrf	postinc2,c
  9425   005996  06E8               	decf	wreg,f,c
  9426   005998  E2FD               	bc	u4191
  9427   00599A  CF81 F009          	movff	3969,kpDebounce@portes	;volatile
  9428   00599E  CF81 F00A          	movff	3969,kpDebounce@portes+1	;volatile
  9429   0059A2  CF81 F00B          	movff	3969,kpDebounce@portes+2	;volatile
  9430   0059A6  CF81 F00C          	movff	3969,kpDebounce@portes+3	;volatile
  9431   0059AA  CF84 F00D          	movff	3972,kpDebounce@portes+4	;volatile
  9432   0059AE                     
  9433                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  9434   0059AE  EE20  F0EA         	lfsr	2,kpDebounce@F15
  9435   0059B2  EE10  F004         	lfsr	1,kpDebounce@bits
  9436   0059B6  0E04               	movlw	4
  9437   0059B8                     u4201:
  9438   0059B8  CFDB FFE3          	movff	plusw2,plusw1
  9439   0059BC  06E8               	decf	wreg,f,c
  9440   0059BE  E2FC               	bc	u4201
  9441   0059C0                     
  9442                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  9443   0059C0  0E00               	movlw	0
  9444   0059C2  6E0E               	movwf	kpDebounce@j^0,c
  9445   0059C4                     l4622:
  9446                           
  9447                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  9448   0059C4  500E               	movf	kpDebounce@j^0,w,c
  9449   0059C6  0F09               	addlw	low kpDebounce@portes
  9450   0059C8  6ED9               	movwf	fsr2l,c
  9451   0059CA  6ADA               	clrf	fsr2h,c
  9452   0059CC  50DF               	movf	indf2,w,c
  9453   0059CE  6E01               	movwf	??_kpDebounce^0,c
  9454   0059D0  500E               	movf	kpDebounce@j^0,w,c
  9455   0059D2  0F04               	addlw	low kpDebounce@bits
  9456   0059D4  6ED9               	movwf	fsr2l,c
  9457   0059D6  6ADA               	clrf	fsr2h,c
  9458   0059D8  50DF               	movf	indf2,w,c
  9459   0059DA  6E02               	movwf	(??_kpDebounce+1)^0,c
  9460   0059DC  0E01               	movlw	1
  9461   0059DE  6E03               	movwf	(??_kpDebounce+2)^0,c
  9462   0059E0  2A02               	incf	(??_kpDebounce+1)^0,f,c
  9463   0059E2  EFF5  F02C         	goto	u4214
  9464   0059E6                     u4215:
  9465   0059E6  90D8               	bcf	status,0,c
  9466   0059E8  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  9467   0059EA                     u4214:
  9468   0059EA  2E02               	decfsz	(??_kpDebounce+1)^0,f,c
  9469   0059EC  EFF3  F02C         	goto	u4215
  9470   0059F0  5003               	movf	(??_kpDebounce+2)^0,w,c
  9471   0059F2  1401               	andwf	??_kpDebounce^0,w,c
  9472   0059F4  0900               	iorlw	0
  9473   0059F6  A4D8               	btfss	status,2,c
  9474   0059F8  EF00  F02D         	goto	u4221
  9475   0059FC  EF02  F02D         	goto	u4220
  9476   005A00                     u4221:
  9477   005A00  EF12  F02D         	goto	l4626
  9478   005A04                     u4220:
  9479   005A04                     
  9480                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  9481   005A04  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  9482   005A08  0E01               	movlw	1
  9483   005A0A  6E02               	movwf	(??_kpDebounce+1)^0,c
  9484   005A0C  2A01               	incf	??_kpDebounce^0,f,c
  9485   005A0E  EF0B  F02D         	goto	u4234
  9486   005A12                     u4235:
  9487   005A12  90D8               	bcf	status,0,c
  9488   005A14  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9489   005A16                     u4234:
  9490   005A16  2E01               	decfsz	??_kpDebounce^0,f,c
  9491   005A18  EF09  F02D         	goto	u4235
  9492   005A1C  5002               	movf	(??_kpDebounce+1)^0,w,c
  9493   005A1E  125D               	iorwf	kpDebounce@valorNovo^0,f,c
  9494                           
  9495                           ;keypad.c: 65:             } else {
  9496   005A20  EF21  F02D         	goto	l4628
  9497   005A24                     l4626:
  9498                           
  9499                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  9500   005A24  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  9501   005A28  0E01               	movlw	1
  9502   005A2A  6E02               	movwf	(??_kpDebounce+1)^0,c
  9503   005A2C  2A01               	incf	??_kpDebounce^0,f,c
  9504   005A2E  EF1B  F02D         	goto	u4244
  9505   005A32                     u4245:
  9506   005A32  90D8               	bcf	status,0,c
  9507   005A34  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9508   005A36                     u4244:
  9509   005A36  2E01               	decfsz	??_kpDebounce^0,f,c
  9510   005A38  EF19  F02D         	goto	u4245
  9511   005A3C  5002               	movf	(??_kpDebounce+1)^0,w,c
  9512   005A3E  0AFF               	xorlw	255
  9513   005A40  165D               	andwf	kpDebounce@valorNovo^0,f,c
  9514   005A42                     l4628:
  9515                           
  9516                           ;keypad.c: 68:         }
  9517   005A42  2A0E               	incf	kpDebounce@j^0,f,c
  9518   005A44  0E04               	movlw	4
  9519   005A46  640E               	cpfsgt	kpDebounce@j^0,c
  9520   005A48  EF28  F02D         	goto	u4251
  9521   005A4C  EF2A  F02D         	goto	u4250
  9522   005A50                     u4251:
  9523   005A50  EFE2  F02C         	goto	l4622
  9524   005A54                     u4250:
  9525   005A54                     
  9526                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  9527   005A54  505D               	movf	kpDebounce@valorNovo^0,w,c
  9528   005A56  185C               	xorwf	kpDebounce@valorAntigo^0,w,c
  9529   005A58  A4D8               	btfss	status,2,c
  9530   005A5A  EF31  F02D         	goto	u4261
  9531   005A5E  EF33  F02D         	goto	u4260
  9532   005A62                     u4261:
  9533   005A62  EF36  F02D         	goto	l4636
  9534   005A66                     u4260:
  9535   005A66                     
  9536                           ;keypad.c: 70:         tempo--;
  9537   005A66  065E               	decf	kpDebounce@tempo^0,f,c
  9538                           
  9539                           ;keypad.c: 71:     } else {
  9540   005A68  EF3A  F02D         	goto	l136
  9541   005A6C                     l4636:
  9542                           
  9543                           ;keypad.c: 72:         tempo = 10;
  9544   005A6C  0E0A               	movlw	10
  9545   005A6E  6E5E               	movwf	kpDebounce@tempo^0,c
  9546   005A70                     
  9547                           ;keypad.c: 73:         valorAntigo = valorNovo;
  9548   005A70  C05D  F05C         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  9549   005A74                     l136:
  9550                           
  9551                           ;keypad.c: 75:     if (tempo == 0) {
  9552   005A74  505E               	movf	kpDebounce@tempo^0,w,c
  9553   005A76  A4D8               	btfss	status,2,c
  9554   005A78  EF40  F02D         	goto	u4271
  9555   005A7C  EF42  F02D         	goto	u4270
  9556   005A80                     u4271:
  9557   005A80  EF44  F02D         	goto	l138
  9558   005A84                     u4270:
  9559   005A84                     
  9560                           ;keypad.c: 76:         valor = valorAntigo;
  9561   005A84  C05C  F05F         	movff	kpDebounce@valorAntigo,_valor
  9562   005A88                     l138:
  9563   005A88  0012               	return		;funcret
  9564   005A8A                     __end_of_kpDebounce:
  9565                           	callstack 0
  9566                           
  9567 ;; *************** function _dsInit *****************
  9568 ;; Defined at:
  9569 ;;		line 17 in file "ds1307.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;		None
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;		None
  9574 ;; Return value:  Size  Location     Type
  9575 ;;                  1    wreg      void 
  9576 ;; Registers used:
  9577 ;;		wreg, status,2, status,0, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9583 ;;      Params:         0       0       0       0       0       0       0       0       0
  9584 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9586 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9587 ;;Total ram usage:        0 bytes
  9588 ;; Hardware stack levels used: 1
  9589 ;; Hardware stack levels required when called: 2
  9590 ;; This function calls:
  9591 ;;		_i2cInit
  9592 ;; This function is called by:
  9593 ;;		_main
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text60
  9598   004CB4                     __ptext60:
  9599                           	callstack 0
  9600   004CB4                     _dsInit:
  9601                           	callstack 28
  9602   004CB4                     
  9603                           ;ds1307.c: 18:  i2cInit();
  9604   004CB4  ECFE  F026         	call	_i2cInit	;wreg free
  9605   004CB8  0012               	return		;funcret
  9606   004CBA                     __end_of_dsInit:
  9607                           	callstack 0
  9608                           
  9609 ;; *************** function _i2cInit *****************
  9610 ;; Defined at:
  9611 ;;		line 14 in file "soft_i2c.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  1    wreg      void 
  9618 ;; Registers used:
  9619 ;;		wreg, status,2, status,0, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used: 1
  9631 ;; Hardware stack levels required when called: 1
  9632 ;; This function calls:
  9633 ;;		_pinMode
  9634 ;; This function is called by:
  9635 ;;		_dsInit
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text61
  9640   004DFC                     __ptext61:
  9641                           	callstack 0
  9642   004DFC                     _i2cInit:
  9643                           	callstack 28
  9644   004DFC                     
  9645                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  9646   004DFC  0E00               	movlw	0
  9647   004DFE  6E02               	movwf	(pinMode@pin+1)^0,c
  9648   004E00  0E08               	movlw	8
  9649   004E02  6E01               	movwf	pinMode@pin^0,c
  9650   004E04  0E00               	movlw	0
  9651   004E06  6E04               	movwf	(pinMode@type+1)^0,c
  9652   004E08  0E01               	movlw	1
  9653   004E0A  6E03               	movwf	pinMode@type^0,c
  9654   004E0C  ECD9  F031         	call	_pinMode	;wreg free
  9655                           
  9656                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  9657   004E10  0E00               	movlw	0
  9658   004E12  6E02               	movwf	(pinMode@pin+1)^0,c
  9659   004E14  0E09               	movlw	9
  9660   004E16  6E01               	movwf	pinMode@pin^0,c
  9661   004E18  0E00               	movlw	0
  9662   004E1A  6E04               	movwf	(pinMode@type+1)^0,c
  9663   004E1C  0E01               	movlw	1
  9664   004E1E  6E03               	movwf	pinMode@type^0,c
  9665   004E20  ECD9  F031         	call	_pinMode	;wreg free
  9666   004E24  0012               	return		;funcret
  9667   004E26                     __end_of_i2cInit:
  9668                           	callstack 0
  9669                           
  9670 ;; *************** function _pinMode *****************
  9671 ;; Defined at:
  9672 ;;		line 54 in file "io.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  pin             2    0[COMRAM] int 
  9675 ;;  type            2    2[COMRAM] int 
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  1    wreg      void 
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9687 ;;      Params:         4       0       0       0       0       0       0       0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9689 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9690 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9691 ;;Total ram usage:        6 bytes
  9692 ;; Hardware stack levels used: 1
  9693 ;; This function calls:
  9694 ;;		Nothing
  9695 ;; This function is called by:
  9696 ;;		_i2cInit
  9697 ;;		_read_SCL
  9698 ;;		_read_SDA
  9699 ;;		_clear_SCL
  9700 ;;		_clear_SDA
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           	psect	text62
  9705   0063B2                     __ptext62:
  9706                           	callstack 0
  9707   0063B2                     _pinMode:
  9708                           	callstack 24
  9709   0063B2                     
  9710                           ;io.c: 56:     if(pin <8){
  9711   0063B2  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9712   0063B4  EFE7  F031         	goto	u2780
  9713   0063B8  5002               	movf	(pinMode@pin+1)^0,w,c
  9714   0063BA  E107               	bnz	u2781
  9715   0063BC  0E08               	movlw	8
  9716   0063BE  5C01               	subwf	pinMode@pin^0,w,c
  9717   0063C0  B0D8               	btfsc	status,0,c
  9718   0063C2  EFE5  F031         	goto	u2781
  9719   0063C6  EFE7  F031         	goto	u2780
  9720   0063CA                     u2781:
  9721   0063CA  EF11  F032         	goto	l3486
  9722   0063CE                     u2780:
  9723   0063CE                     
  9724                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  9725   0063CE  5003               	movf	pinMode@type^0,w,c
  9726   0063D0  1004               	iorwf	(pinMode@type+1)^0,w,c
  9727   0063D2  B4D8               	btfsc	status,2,c
  9728   0063D4  EFEE  F031         	goto	u2791
  9729   0063D8  EFF0  F031         	goto	u2790
  9730   0063DC                     u2791:
  9731   0063DC  EF00  F032         	goto	l3484
  9732   0063E0                     u2790:
  9733   0063E0  C001  F005         	movff	pinMode@pin,??_pinMode
  9734   0063E4  0E01               	movlw	1
  9735   0063E6  6E06               	movwf	(??_pinMode+1)^0,c
  9736   0063E8  2A05               	incf	??_pinMode^0,f,c
  9737   0063EA  EFF9  F031         	goto	u2804
  9738   0063EE                     u2805:
  9739   0063EE  90D8               	bcf	status,0,c
  9740   0063F0  3606               	rlcf	(??_pinMode+1)^0,f,c
  9741   0063F2                     u2804:
  9742   0063F2  2E05               	decfsz	??_pinMode^0,f,c
  9743   0063F4  EFF7  F031         	goto	u2805
  9744   0063F8  5006               	movf	(??_pinMode+1)^0,w,c
  9745   0063FA  1292               	iorwf	146,f,c	;volatile
  9746   0063FC  EFFF  F032         	goto	l113
  9747   006400                     l3484:
  9748   006400  C001  F005         	movff	pinMode@pin,??_pinMode
  9749   006404  0E01               	movlw	1
  9750   006406  6E06               	movwf	(??_pinMode+1)^0,c
  9751   006408  2A05               	incf	??_pinMode^0,f,c
  9752   00640A  EF09  F032         	goto	u2814
  9753   00640E                     u2815:
  9754   00640E  90D8               	bcf	status,0,c
  9755   006410  3606               	rlcf	(??_pinMode+1)^0,f,c
  9756   006412                     u2814:
  9757   006412  2E05               	decfsz	??_pinMode^0,f,c
  9758   006414  EF07  F032         	goto	u2815
  9759   006418  5006               	movf	(??_pinMode+1)^0,w,c
  9760   00641A  0AFF               	xorlw	255
  9761   00641C  1692               	andwf	146,f,c	;volatile
  9762   00641E  EFFF  F032         	goto	l113
  9763   006422                     l3486:
  9764   006422  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9765   006424  EF1F  F032         	goto	u2820
  9766   006428  5002               	movf	(pinMode@pin+1)^0,w,c
  9767   00642A  E107               	bnz	u2821
  9768   00642C  0E10               	movlw	16
  9769   00642E  5C01               	subwf	pinMode@pin^0,w,c
  9770   006430  B0D8               	btfsc	status,0,c
  9771   006432  EF1D  F032         	goto	u2821
  9772   006436  EF1F  F032         	goto	u2820
  9773   00643A                     u2821:
  9774   00643A  EF4D  F032         	goto	l3494
  9775   00643E                     u2820:
  9776   00643E                     
  9777                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  9778   00643E  5003               	movf	pinMode@type^0,w,c
  9779   006440  1004               	iorwf	(pinMode@type+1)^0,w,c
  9780   006442  B4D8               	btfsc	status,2,c
  9781   006444  EF26  F032         	goto	u2831
  9782   006448  EF28  F032         	goto	u2830
  9783   00644C                     u2831:
  9784   00644C  EF3A  F032         	goto	l3492
  9785   006450                     u2830:
  9786   006450  C001  F005         	movff	pinMode@pin,??_pinMode
  9787   006454  0EF8               	movlw	-8
  9788   006456  2605               	addwf	??_pinMode^0,f,c
  9789   006458  0E01               	movlw	1
  9790   00645A  6E06               	movwf	(??_pinMode+1)^0,c
  9791   00645C  2A05               	incf	??_pinMode^0,f,c
  9792   00645E  EF33  F032         	goto	u2844
  9793   006462                     u2845:
  9794   006462  90D8               	bcf	status,0,c
  9795   006464  3606               	rlcf	(??_pinMode+1)^0,f,c
  9796   006466                     u2844:
  9797   006466  2E05               	decfsz	??_pinMode^0,f,c
  9798   006468  EF31  F032         	goto	u2845
  9799   00646C  5006               	movf	(??_pinMode+1)^0,w,c
  9800   00646E  1293               	iorwf	147,f,c	;volatile
  9801   006470  EFFF  F032         	goto	l113
  9802   006474                     l3492:
  9803   006474  C001  F005         	movff	pinMode@pin,??_pinMode
  9804   006478  0EF8               	movlw	-8
  9805   00647A  2605               	addwf	??_pinMode^0,f,c
  9806   00647C  0E01               	movlw	1
  9807   00647E  6E06               	movwf	(??_pinMode+1)^0,c
  9808   006480  2A05               	incf	??_pinMode^0,f,c
  9809   006482  EF45  F032         	goto	u2854
  9810   006486                     u2855:
  9811   006486  90D8               	bcf	status,0,c
  9812   006488  3606               	rlcf	(??_pinMode+1)^0,f,c
  9813   00648A                     u2854:
  9814   00648A  2E05               	decfsz	??_pinMode^0,f,c
  9815   00648C  EF43  F032         	goto	u2855
  9816   006490  5006               	movf	(??_pinMode+1)^0,w,c
  9817   006492  0AFF               	xorlw	255
  9818   006494  1693               	andwf	147,f,c	;volatile
  9819   006496  EFFF  F032         	goto	l113
  9820   00649A                     l3494:
  9821   00649A  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9822   00649C  EF5B  F032         	goto	u2860
  9823   0064A0  5002               	movf	(pinMode@pin+1)^0,w,c
  9824   0064A2  E107               	bnz	u2861
  9825   0064A4  0E18               	movlw	24
  9826   0064A6  5C01               	subwf	pinMode@pin^0,w,c
  9827   0064A8  B0D8               	btfsc	status,0,c
  9828   0064AA  EF59  F032         	goto	u2861
  9829   0064AE  EF5B  F032         	goto	u2860
  9830   0064B2                     u2861:
  9831   0064B2  EF89  F032         	goto	l3502
  9832   0064B6                     u2860:
  9833   0064B6                     
  9834                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  9835   0064B6  5003               	movf	pinMode@type^0,w,c
  9836   0064B8  1004               	iorwf	(pinMode@type+1)^0,w,c
  9837   0064BA  B4D8               	btfsc	status,2,c
  9838   0064BC  EF62  F032         	goto	u2871
  9839   0064C0  EF64  F032         	goto	u2870
  9840   0064C4                     u2871:
  9841   0064C4  EF76  F032         	goto	l3500
  9842   0064C8                     u2870:
  9843   0064C8  C001  F005         	movff	pinMode@pin,??_pinMode
  9844   0064CC  0EF0               	movlw	-16
  9845   0064CE  2605               	addwf	??_pinMode^0,f,c
  9846   0064D0  0E01               	movlw	1
  9847   0064D2  6E06               	movwf	(??_pinMode+1)^0,c
  9848   0064D4  2A05               	incf	??_pinMode^0,f,c
  9849   0064D6  EF6F  F032         	goto	u2884
  9850   0064DA                     u2885:
  9851   0064DA  90D8               	bcf	status,0,c
  9852   0064DC  3606               	rlcf	(??_pinMode+1)^0,f,c
  9853   0064DE                     u2884:
  9854   0064DE  2E05               	decfsz	??_pinMode^0,f,c
  9855   0064E0  EF6D  F032         	goto	u2885
  9856   0064E4  5006               	movf	(??_pinMode+1)^0,w,c
  9857   0064E6  1294               	iorwf	148,f,c	;volatile
  9858   0064E8  EFFF  F032         	goto	l113
  9859   0064EC                     l3500:
  9860   0064EC  C001  F005         	movff	pinMode@pin,??_pinMode
  9861   0064F0  0EF0               	movlw	-16
  9862   0064F2  2605               	addwf	??_pinMode^0,f,c
  9863   0064F4  0E01               	movlw	1
  9864   0064F6  6E06               	movwf	(??_pinMode+1)^0,c
  9865   0064F8  2A05               	incf	??_pinMode^0,f,c
  9866   0064FA  EF81  F032         	goto	u2894
  9867   0064FE                     u2895:
  9868   0064FE  90D8               	bcf	status,0,c
  9869   006500  3606               	rlcf	(??_pinMode+1)^0,f,c
  9870   006502                     u2894:
  9871   006502  2E05               	decfsz	??_pinMode^0,f,c
  9872   006504  EF7F  F032         	goto	u2895
  9873   006508  5006               	movf	(??_pinMode+1)^0,w,c
  9874   00650A  0AFF               	xorlw	255
  9875   00650C  1694               	andwf	148,f,c	;volatile
  9876   00650E  EFFF  F032         	goto	l113
  9877   006512                     l3502:
  9878   006512  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9879   006514  EF97  F032         	goto	u2900
  9880   006518  5002               	movf	(pinMode@pin+1)^0,w,c
  9881   00651A  E107               	bnz	u2901
  9882   00651C  0E20               	movlw	32
  9883   00651E  5C01               	subwf	pinMode@pin^0,w,c
  9884   006520  B0D8               	btfsc	status,0,c
  9885   006522  EF95  F032         	goto	u2901
  9886   006526  EF97  F032         	goto	u2900
  9887   00652A                     u2901:
  9888   00652A  EFC5  F032         	goto	l3510
  9889   00652E                     u2900:
  9890   00652E                     
  9891                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  9892   00652E  5003               	movf	pinMode@type^0,w,c
  9893   006530  1004               	iorwf	(pinMode@type+1)^0,w,c
  9894   006532  B4D8               	btfsc	status,2,c
  9895   006534  EF9E  F032         	goto	u2911
  9896   006538  EFA0  F032         	goto	u2910
  9897   00653C                     u2911:
  9898   00653C  EFB2  F032         	goto	l3508
  9899   006540                     u2910:
  9900   006540  C001  F005         	movff	pinMode@pin,??_pinMode
  9901   006544  0EE8               	movlw	-24
  9902   006546  2605               	addwf	??_pinMode^0,f,c
  9903   006548  0E01               	movlw	1
  9904   00654A  6E06               	movwf	(??_pinMode+1)^0,c
  9905   00654C  2A05               	incf	??_pinMode^0,f,c
  9906   00654E  EFAB  F032         	goto	u2924
  9907   006552                     u2925:
  9908   006552  90D8               	bcf	status,0,c
  9909   006554  3606               	rlcf	(??_pinMode+1)^0,f,c
  9910   006556                     u2924:
  9911   006556  2E05               	decfsz	??_pinMode^0,f,c
  9912   006558  EFA9  F032         	goto	u2925
  9913   00655C  5006               	movf	(??_pinMode+1)^0,w,c
  9914   00655E  1295               	iorwf	149,f,c	;volatile
  9915   006560  EFFF  F032         	goto	l113
  9916   006564                     l3508:
  9917   006564  C001  F005         	movff	pinMode@pin,??_pinMode
  9918   006568  0EE8               	movlw	-24
  9919   00656A  2605               	addwf	??_pinMode^0,f,c
  9920   00656C  0E01               	movlw	1
  9921   00656E  6E06               	movwf	(??_pinMode+1)^0,c
  9922   006570  2A05               	incf	??_pinMode^0,f,c
  9923   006572  EFBD  F032         	goto	u2934
  9924   006576                     u2935:
  9925   006576  90D8               	bcf	status,0,c
  9926   006578  3606               	rlcf	(??_pinMode+1)^0,f,c
  9927   00657A                     u2934:
  9928   00657A  2E05               	decfsz	??_pinMode^0,f,c
  9929   00657C  EFBB  F032         	goto	u2935
  9930   006580  5006               	movf	(??_pinMode+1)^0,w,c
  9931   006582  0AFF               	xorlw	255
  9932   006584  1695               	andwf	149,f,c	;volatile
  9933   006586  EFFF  F032         	goto	l113
  9934   00658A                     l3510:
  9935   00658A  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9936   00658C  EFD3  F032         	goto	u2940
  9937   006590  5002               	movf	(pinMode@pin+1)^0,w,c
  9938   006592  E107               	bnz	u2941
  9939   006594  0E28               	movlw	40
  9940   006596  5C01               	subwf	pinMode@pin^0,w,c
  9941   006598  B0D8               	btfsc	status,0,c
  9942   00659A  EFD1  F032         	goto	u2941
  9943   00659E  EFD3  F032         	goto	u2940
  9944   0065A2                     u2941:
  9945   0065A2  EFFF  F032         	goto	l113
  9946   0065A6                     u2940:
  9947   0065A6                     
  9948                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  9949   0065A6  5003               	movf	pinMode@type^0,w,c
  9950   0065A8  1004               	iorwf	(pinMode@type+1)^0,w,c
  9951   0065AA  B4D8               	btfsc	status,2,c
  9952   0065AC  EFDA  F032         	goto	u2951
  9953   0065B0  EFDC  F032         	goto	u2950
  9954   0065B4                     u2951:
  9955   0065B4  EFEE  F032         	goto	l3516
  9956   0065B8                     u2950:
  9957   0065B8  C001  F005         	movff	pinMode@pin,??_pinMode
  9958   0065BC  0EE0               	movlw	-32
  9959   0065BE  2605               	addwf	??_pinMode^0,f,c
  9960   0065C0  0E01               	movlw	1
  9961   0065C2  6E06               	movwf	(??_pinMode+1)^0,c
  9962   0065C4  2A05               	incf	??_pinMode^0,f,c
  9963   0065C6  EFE7  F032         	goto	u2964
  9964   0065CA                     u2965:
  9965   0065CA  90D8               	bcf	status,0,c
  9966   0065CC  3606               	rlcf	(??_pinMode+1)^0,f,c
  9967   0065CE                     u2964:
  9968   0065CE  2E05               	decfsz	??_pinMode^0,f,c
  9969   0065D0  EFE5  F032         	goto	u2965
  9970   0065D4  5006               	movf	(??_pinMode+1)^0,w,c
  9971   0065D6  1296               	iorwf	150,f,c	;volatile
  9972   0065D8  EFFF  F032         	goto	l113
  9973   0065DC                     l3516:
  9974   0065DC  C001  F005         	movff	pinMode@pin,??_pinMode
  9975   0065E0  0EE0               	movlw	-32
  9976   0065E2  2605               	addwf	??_pinMode^0,f,c
  9977   0065E4  0E01               	movlw	1
  9978   0065E6  6E06               	movwf	(??_pinMode+1)^0,c
  9979   0065E8  2A05               	incf	??_pinMode^0,f,c
  9980   0065EA  EFF9  F032         	goto	u2974
  9981   0065EE                     u2975:
  9982   0065EE  90D8               	bcf	status,0,c
  9983   0065F0  3606               	rlcf	(??_pinMode+1)^0,f,c
  9984   0065F2                     u2974:
  9985   0065F2  2E05               	decfsz	??_pinMode^0,f,c
  9986   0065F4  EFF7  F032         	goto	u2975
  9987   0065F8  5006               	movf	(??_pinMode+1)^0,w,c
  9988   0065FA  0AFF               	xorlw	255
  9989   0065FC  1696               	andwf	150,f,c	;volatile
  9990   0065FE                     l113:
  9991   0065FE  0012               	return		;funcret
  9992   006600                     __end_of_pinMode:
  9993                           	callstack 0
  9994                           
  9995 ;; *************** function _adcInit *****************
  9996 ;; Defined at:
  9997 ;;		line 27 in file "adc.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;		None
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;		None
 10002 ;; Return value:  Size  Location     Type
 10003 ;;                  1    wreg      void 
 10004 ;; Registers used:
 10005 ;;		wreg, status,2, status,0
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10011 ;;      Params:         0       0       0       0       0       0       0       0       0
 10012 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10013 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10014 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10015 ;;Total ram usage:        0 bytes
 10016 ;; Hardware stack levels used: 1
 10017 ;; This function calls:
 10018 ;;		Nothing
 10019 ;; This function is called by:
 10020 ;;		_main
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           	psect	text63
 10025   004CE6                     __ptext63:
 10026                           	callstack 0
 10027   004CE6                     _adcInit:
 10028                           	callstack 30
 10029   004CE6                     
 10030                           ;adc.c: 29:  (((*(volatile __near unsigned char*)0xF96)) |= (1<<0));
 10031   004CE6  8096               	bsf	150,0,c	;volatile
 10032   004CE8                     
 10033                           ;adc.c: 31:  (*(volatile __near unsigned char*)0xFC2) = 0b00010101;
 10034   004CE8  0E15               	movlw	21
 10035   004CEA  6EC2               	movwf	194,c	;volatile
 10036   004CEC                     
 10037                           ;adc.c: 32:  (*(volatile __near unsigned char*)0xFC1) = 0b00001111;
 10038   004CEC  0E0F               	movlw	15
 10039   004CEE  6EC1               	movwf	193,c	;volatile
 10040   004CF0                     
 10041                           ;adc.c: 33:  (*(volatile __near unsigned char*)0xFC0) = 0b10101010;
 10042   004CF0  0EAA               	movlw	170
 10043   004CF2  6EC0               	movwf	192,c	;volatile
 10044   004CF4  0012               	return		;funcret
 10045   004CF6                     __end_of_adcInit:
 10046                           	callstack 0
 10047                           
 10048                           	psect	rparam
 10049   000000                     
 10050                           	psect	config
 10051                           
 10052                           ;Config register CONFIG1L @ 0x300000
 10053                           ;	unspecified, using default values
 10054                           ;	PLL Prescaler Selection bits
 10055                           ;	PLLDIV = 0x0, unprogrammed default
 10056                           ;	System Clock Postscaler Selection bits
 10057                           ;	CPUDIV = 0x0, unprogrammed default
 10058                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 10059                           ;	USBDIV = 0x0, unprogrammed default
 10060   300000                     	org	3145728
 10061   300000  00                 	db	0
 10062                           
 10063                           ;Config register CONFIG1H @ 0x300001
 10064                           ;	Oscillator Selection bits
 10065                           ;	FOSC = HS, HS oscillator (HS)
 10066                           ;	Fail-Safe Clock Monitor Enable bit
 10067                           ;	FCMEN = 0x0, unprogrammed default
 10068                           ;	Internal/External Oscillator Switchover bit
 10069                           ;	IESO = 0x0, unprogrammed default
 10070   300001                     	org	3145729
 10071   300001  0C                 	db	12
 10072                           
 10073                           ;Config register CONFIG2L @ 0x300002
 10074                           ;	unspecified, using default values
 10075                           ;	Power-up Timer Enable bit
 10076                           ;	PWRT = 0x1, unprogrammed default
 10077                           ;	Brown-out Reset Enable bits
 10078                           ;	BOR = 0x3, unprogrammed default
 10079                           ;	Brown-out Reset Voltage bits
 10080                           ;	BORV = 0x3, unprogrammed default
 10081                           ;	USB Voltage Regulator Enable bit
 10082                           ;	VREGEN = 0x0, unprogrammed default
 10083   300002                     	org	3145730
 10084   300002  1F                 	db	31
 10085                           
 10086                           ;Config register CONFIG2H @ 0x300003
 10087                           ;	Watchdog Timer Enable bit
 10088                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10089                           ;	Watchdog Timer Postscale Select bits
 10090                           ;	WDTPS = 0xF, unprogrammed default
 10091   300003                     	org	3145731
 10092   300003  1E                 	db	30
 10093                           
 10094                           ; Padding undefined space
 10095   300004                     	org	3145732
 10096   300004  FF                 	db	255
 10097                           
 10098                           ;Config register CONFIG3H @ 0x300005
 10099                           ;	CCP2 MUX bit
 10100                           ;	CCP2MX = 0x1, unprogrammed default
 10101                           ;	PORTB A/D Enable bit
 10102                           ;	PBADEN = 0x1, unprogrammed default
 10103                           ;	Low-Power Timer 1 Oscillator Enable bit
 10104                           ;	LPT1OSC = 0x0, unprogrammed default
 10105                           ;	MCLR Pin Enable bit
 10106                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10107   300005                     	org	3145733
 10108   300005  83                 	db	131
 10109                           
 10110                           ;Config register CONFIG4L @ 0x300006
 10111                           ;	Stack Full/Underflow Reset Enable bit
 10112                           ;	STVREN = 0x1, unprogrammed default
 10113                           ;	Single-Supply ICSP Enable bit
 10114                           ;	LVP = OFF, Single-Supply ICSP disabled
 10115                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 10116                           ;	ICPRT = 0x0, unprogrammed default
 10117                           ;	Extended Instruction Set Enable bit
 10118                           ;	XINST = 0x0, unprogrammed default
 10119                           ;	Background Debugger Enable bit
 10120                           ;	DEBUG = 0x1, unprogrammed default
 10121   300006                     	org	3145734
 10122   300006  81                 	db	129
 10123                           
 10124                           ; Padding undefined space
 10125   300007                     	org	3145735
 10126   300007  FF                 	db	255
 10127                           tosu	equ	0xFFF
 10128                           tosh	equ	0xFFE
 10129                           tosl	equ	0xFFD
 10130                           stkptr	equ	0xFFC
 10131                           pclatu	equ	0xFFB
 10132                           pclath	equ	0xFFA
 10133                           pcl	equ	0xFF9
 10134                           tblptru	equ	0xFF8
 10135                           tblptrh	equ	0xFF7
 10136                           tblptrl	equ	0xFF6
 10137                           tablat	equ	0xFF5
 10138                           prodh	equ	0xFF4
 10139                           prodl	equ	0xFF3
 10140                           indf0	equ	0xFEF
 10141                           postinc0	equ	0xFEE
 10142                           postdec0	equ	0xFED
 10143                           preinc0	equ	0xFEC
 10144                           plusw0	equ	0xFEB
 10145                           fsr0h	equ	0xFEA
 10146                           fsr0l	equ	0xFE9
 10147                           wreg	equ	0xFE8
 10148                           indf1	equ	0xFE7
 10149                           postinc1	equ	0xFE6
 10150                           postdec1	equ	0xFE5
 10151                           preinc1	equ	0xFE4
 10152                           plusw1	equ	0xFE3
 10153                           fsr1h	equ	0xFE2
 10154                           fsr1l	equ	0xFE1
 10155                           bsr	equ	0xFE0
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           preinc2	equ	0xFDC
 10160                           plusw2	equ	0xFDB
 10161                           fsr2h	equ	0xFDA
 10162                           fsr2l	equ	0xFD9
 10163                           status	equ	0xFD8

Data Sizes:
    Strings     158
    Constant    16
    Data        47
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      95
    BANK0           160      0     145
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eventRead@prot	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 

    lcdString@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_11(CODE[12]), STR_12(CODE[12]), 
		 -> STR_13(CODE[12]), STR_14(CODE[12]), STR_15(CODE[4]), STR_16(CODE[12]), 
		 -> STR_17(CODE[4]), STR_18(CODE[12]), STR_19(CODE[17]), STR_2(CODE[16]), 
		 -> STR_20(CODE[17]), STR_21(CODE[4]), STR_22(CODE[16]), STR_23(CODE[16]), 
		 -> STR_3(CODE[16]), STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), 
		 -> STR_7(CODE[16]), STR_8(CODE[16]), STR_9(CODE[16]), 

    msgs	PTR unsigned char [2][10] size(2) Largest target is 16
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), 
		 -> STR_8(CODE[16]), STR_9(CODE[16]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_readTemp
    _setTime->_getTime
    _readTemp->___fltol
    ___xxtofl->_adcRead
    ___fltol->___flmul
    ___flmul->___xxtofl
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_bcd2dec
    _lcdData->_lcdCommand4bits
    _getTime->_bcd2dec
    _eventRead->_setLanguage
    _setLanguage->_dsWriteData
    _smInit->_varInit
    _varInit->_setAlarmLevel
    _setAlarmLevel->_dsWriteData
    _dsWriteData->_dec2bcd
    _dsReadData->_i2cReadByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _dec2bcd->___awmod
    ___awmod->___awdiv
    _bcd2dec->_dsReadData
    ___wmul->___awdiv
    _setState->_lcdCommand
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  389973
                            _adcInit
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                              17    17      0  265694
                                             58 COMRAM    17    17      0
                            ___llmod
                             ___wmul
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                            _getProt
                           _getState
                            _getTemp
                            _getTime
                        _outputPrint
                           _readTemp
                          _resetProt
                      _setAlarmLevel
                        _setLanguage
                           _setState
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setTime                                              3     0      3   34812
                                             25 COMRAM     3     0      3
                            _dec2bcd
                        _dsWriteData
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readTemp                                             5     5      0    4407
                                             53 COMRAM     5     5      0
                            ___awdiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                            _adcRead
 ---------------------------------------------------------------------------------
 (3) _adcRead                                              4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     398
                                              4 COMRAM    14    10      4
                            _adcRead (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     305
                                             43 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                            _adcRead (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                             18 COMRAM    25    17      8
                           ___xxtofl (ARG)
                            _adcRead (ARG)
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          9     5      4   74497
                                             32 COMRAM     9     5      4
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTemp
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            2     0      2    2373
                                              3 COMRAM     2     0      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                              10     7      3   11898
                                             22 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                             ___wmul
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _getTemp (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getTemp                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        4     2      2     958
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2   56812
                                             22 COMRAM     3     1      2
                            _bcd2dec
                         _dsReadData
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            7     7      0   29144
                                             24 COMRAM     7     7      0
                        _getLanguage
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                        _setLanguage
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28773
                                             23 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0  120847
                          _eventInit
                           _setState
                            _varInit
 ---------------------------------------------------------------------------------
 (2) _varInit                                              8     8      0  119881
                                             26 COMRAM     8     8      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                      _setAlarmLevel
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        3     0      3   30033
                                             23 COMRAM     3     0      3
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28751
                                             20 COMRAM     3     1      2
                            _dec2bcd (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   49143
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (3) _dec2bcd                                              6     4      2    4235
                                             14 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1512
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _bcd2dec                                              4     2      2    7647
                                             18 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3579
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0     966
                                              3 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (4) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (5) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     279
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcInit
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
       _lcdCommand
     _varInit
       _bcd2dec
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _dsReadData (ARG)
           _i2cReadByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
                 _digitalWrite
                 _pinMode
               _read_SCL
                 _digitalRead
                 _pinMode
               _read_SDA
                 _digitalRead
                 _pinMode
             _i2c_stop
               _I2C_delay
               _clear_SDA
                 _digitalWrite
                 _pinMode
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
           _i2cWriteByte
             _i2c_read_bit
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_stop
             _i2c_write_bit
       _dec2bcd
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _dsReadData
       _dsWriteData
         _dec2bcd (ARG)
         _i2cWriteByte (ARG)
       _setAlarmLevel
         _dsWriteData
         _getAlarmLevel (ARG)
   _smLoop
     ___llmod
     ___wmul
     _eventRead
       _getLanguage
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setLanguage
         _dsWriteData
       _setProt
     _getAlarmLevel
     _getLanguage
     _getProt
     _getState
     _getTemp
     _getTime
       _bcd2dec
       _dsReadData
     _outputPrint
       _bcd2dec
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTemp (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         ___wmul
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _getTemp (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _readTemp
       ___awdiv
       ___flmul
         ___xxtofl (ARG)
           _adcRead (ARG)
         _adcRead (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
         _adcRead (ARG)
       ___xxtofl
       _adcRead
     _resetProt
     _setAlarmLevel
     _setLanguage
     _setState
     _setTime
       _dec2bcd
       _dsWriteData
       _getTime (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      29        0.0%
BIGRAM             3EE      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      17        0.0%
BANK7              100      0       0      18        0.0%
BITBANK6           100      0       0      15        0.0%
BANK6              100      0       0      16        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK3            EF      0       0       9        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      91       4       90.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4B      5F       1      100.0%
BITBIGSFR_1         37      0       0      23        0.0%
BITBIGSFRl          20      0       0      27        0.0%
BITBIGSFR_5          C      0       0      19        0.0%
BITBIGSFRhlh         8      0       0      25        0.0%
BITBIGSFR_2          6      0       0      22        0.0%
BITBIGSFRhh          5      0       0      24        0.0%
BITBIGSFRhll         4      0       0      26        0.0%
BITBIGSFR_4          3      0       0      20        0.0%
BITBIGSFR_3          3      0       0      21        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      28        0.0%
DATA                 0      0      F0      31        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Jul 08 17:26:33 2024

     __end_of_setAlarmLevel 529A                           l3 4CF4                           l6 5058  
                         l8 5066                           l9 5086                           _i 004C  
                         _m 00A7                           _t 0060                          l22 5406  
                        l25 5138                          l34 4F5A                          l28 4CB8  
                        l37 5206                          l83 5E0C                          l84 5E08  
            setTime@newTime 001A                          l79 684C                          l88 5E08  
              lcdString@str 0004                ___awdiv@sign 0006                          _v0 0058  
                        _v1 0057                          _v2 0056                          _v3 0055  
                        _de 005B                          _ev 00EF         ___wmul@multiplicand 000B  
             ??_i2cReadByte 0009       i2cWriteByte@send_stop 0008              i2cReadByte@bit 000B  
                       l113 65FE                         l203 57BA                         l141 4CD6  
                       l150 4D22                         l118 4CAE                         l136 5A74  
                       l160 4CBE                         l401 5344                         l138 5A88  
                       l180 524E                         l500 4D3A                         l420 52EC  
                       l340 4CF8                         l157 4EFE                         l173 547E  
                       l414 53A4                         l351 4D6C                         l407 501A  
                       l343 4D0A                         l183 4D8A                         l360 4E24  
                       l194 5050                         l363 4CA2                         l188 54F6  
                       l372 4E4E                         l348 4EA4                         l525 6176  
                       l509 6174                         l366 50BE                         l375 4E78  
                       l392 4F2C                         l800 5276                         l624 4DAC  
                       l369 50F6                         l385 51C0                         l801 5288  
                       l802 5298                         l811 4CAA                         l805 4CA6  
                       l581 739E                         l821 4F88                         l830 589C  
                       l815 4DFA                         l808 4D52                         l824 4CC8  
                       l833 4DD2                         l770 4CE4                         l764 63B0  
                       l767 4CB2                         l775 5CA2                         l696 7C6A  
                       l786 598C                         l795 4EC2                         l699 7C8E  
                       l796 4EC8                         l797 4ED0                         _key 00B5  
              ___awmod@sign 000E                         wreg 0FE8            i2c_write_bit@bit 0007  
              ___flmul@aexp 0024                ___flmul@bexp 0025                ___flmul@sign 001F  
              ___flmul@temp 002A                ___flmul@prod 0026               ?_i2cWriteByte 0008  
    i2cWriteByte@send_start 000A             i2cReadByte@nack 000A                ___fltol@exp1 0035  
           i2cReadByte@byte 000D                        l1130 5B8E                        l1064 56F2  
                      l1260 557E                        l1077 562E                        l1253 556E  
                      l1502 5F58                        l4000 69D8                        l4010 6A3A  
                      l4002 69E4                        l1451 6C76                        l4020 6AD0  
                      l4012 6A46                        l4004 69F4                        l4030 6B26  
                      l1454 6B08                        l4022 6AEE                        l4014 6A62  
                      l4006 6A0E                        l4110 5B7E                        l4102 5B42  
                      l1447 6912                        l3400 6600                        l4200 6072  
                      l1464 6C38                        l4040 6B90                        l1456 6B80  
                      l4032 6B2A                        l4024 6AF8                        l4016 6A8C  
                      l4008 6A1E                        l4104 5B4E                        l4120 5E74  
                      l1457 6B6E                        l3410 668C                        l3402 661C  
                      l4210 60AE                        l4202 6082                        l4050 6BF2  
                      l4042 6B9C                        l4034 6B38                        l4026 6B06  
                      l4018 6AC2                        l4106 5B5E                        l4130 5EB2  
                      l4122 5E8A                        l4114 5E10                        l1491 5FC0  
                      l3500 64EC                        l3420 671E                        l3412 66A6  
                      l3404 662E                        l4220 60E6                        l4212 60BA  
                      l4204 6088                        l4300 6EC0                        l4060 6C5A  
                      l4052 6C06                        l4044 6BAA                        l4036 6B66  
                      l4028 6B18                        l4108 5B6E                        l4140 5F3A  
                      l4132 5EE4                        l4116 5E20                        l3510 658A  
                      l3502 6512                        l3430 67B6                        l3422 673E  
                      l3414 66C6                        l3406 664E                        l4222 60F0  
                      l4214 60C6                        l4230 6156                        l4310 6F3A  
                      l4302 6EC6                        l4062 6C5C                        l4054 6C20  
                      l4046 6BD4                        l4070 5A8A                        l4150 5F90  
                      l4142 5F48                        l4134 5EE6                        l4126 5E9E  
                      l4118 5E2E                        l1495 5EFC                        l3512 65A6  
                      l3504 652E                        l4160 4DFC                        l3432 67D8  
                      l3424 6760                        l3416 66E8                        l3408 6670  
                      l3440 5CA4                        l4232 615C                        l4224 60F8  
                      l4216 60D2                        l4208 60A2                        l4400 71FC  
                      l4320 6F8C                        l4312 6F40                        l4304 6EF4  
                      l4240 6C8C                        l4056 6C3C                        l4064 6C62  
                      l4048 6BD8                        l4080 5AE0                        l4072 5AA0  
                      l4152 5FA0                        l4144 5F66                        l4136 5EF2  
                      l4128 5EA6                        l1488 5E64                        l3514 65B8  
                      l3506 6540                        l3530 4CBA                        l4162 4D24  
                      l3434 67F4                        l3426 677C                        l3418 6704  
                      l3450 5D04                        l3442 5CC0                        l3522 50C0  
                      l3602 5348                        l4234 616C                        l4218 60DE  
                      l4170 5FCA                        l4410 7280                        l4402 722A  
                      l4322 6F92                        l4314 6F58                        l4330 6FF2  
                      l4306 6F1A                        l4250 6CE8                        l4242 6C92  
                      l4066 6C66                        l4058 6C4C                        l4082 5AF0  
                      l4154 5FAE                        l4146 5F68                        l4138 5F2E  
                      l3516 65DC                        l3508 6564                        l3700 4ED6  
                      l4164 4D28                        l3436 680E                        l3428 6796  
                      l3540 51A8                        l3532 517C                        l3620 538C  
                      l3612 5360                        l3604 5358                        l4228 6108  
                      l4180 6014                        l4172 5FD6                        l4420 72F0  
                      l4412 7290                        l4404 7236                        l4340 7038  
                      l4332 7004                        l4324 6FBA                        l4316 6F5E  
                      l4308 6F26                        l4252 6CEE                        l4244 6CB4  
                      l4260 6D50                        l4092 5B1A                        l4084 5AF4  
                      l4076 5AB4                        l4156 5FB0                        l4148 5F6C  
                      l4500 5854                        l3710 4EEC                        l4166 4D32  
                      l3438 682E                        l3526 4E26                        l3518 5088  
                      l3550 51BC                        l3534 518C                        l3542 51AC  
                      l3622 5390                        l3614 5376                        l3606 535C  
                      l4190 6048                        l4182 601C                        l4174 5FF0  
                      l4510 5B92                        l4430 734C                        l4422 72F6  
                      l4414 7296                        l4406 7256                        l4350 7088  
                      l4342 7054                        l4334 700A                        l4326 6FC0  
                      l4318 6F86                        l4270 6DBA                        l4262 6D64  
                      l4254 6D16                        l4246 6CBA                        l4238 6C78  
                      l4094 5B24                        l4086 5B02                        l4078 5ADE  
                      l4502 5864                        l3480 63CE                        l4600 4CB4  
                      l3712 4EEE                        l3640 541A                        l3472 5DC0  
                      l3464 5D78                        l3456 5D30                        l3448 5CE8  
                      l3528 4E50                        l3560 4F20                        l3552 4F00  
                      l3544 51B0                        l3536 5190                        l3624 53A0  
                      l3616 537A                        l4440 6178                        l4192 6056  
                      l4184 602A                        l4176 5FFE                        l4168 5FC2  
                      l4520 5BDE                        l4512 5B96                        l4424 7324  
                      l4416 72C4                        l4408 7268                        l4432 7366  
                      l4360 70D4                        l4352 708E                        l4344 705A  
                      l4336 702C                        l4328 6FE6                        l4280 6E1C  
                      l4272 6DC0                        l4264 6D6A                        l4256 6D1C  
                      l4248 6CC0                        l4096 5B2E                        l4504 5880  
                      l3490 6450                        l3482 63E0                        l4610 59A6  
                      l4602 598E                        l3706 4EDA                        l3634 4D10  
                      l3650 5438                        l3642 5420                        l3730 564E  
                      l3722 5630                        l3474 5DDC                        l3466 5D94  
                      l3458 5D4C                        l3562 4F24                        l3554 4F04  
                      l3570 5308                        l3546 51B4                        l3538 5194  
                      l3618 537C                        l4450 620C                        l4442 6196  
                      l4186 6032                        l4178 6006                        l4194 605E  
                      l3714 4D70                        l4434 737A                        l4426 7340  
                      l4418 72EA                        l4370 710E                        l4362 70DA  
                      l4346 7066                        l4338 7032                        l4354 709A  
                      l4290 6E60                        l4274 6DC6                        l4266 6D8C  
                      l4282 6E28                        l4258 6D44                        l3810 507A  
                      l3802 5052                        l4506 5890                        l3492 6474  
                      l3484 6400                        l4612 59AA                        l4604 599A  
                      l3708 4EDC                        l3636 4D12                        l3628 4D0C  
                      l3660 5462                        l3652 5446                        l3644 5422  
                      l3740 5682                        l3732 565C                        l3724 5634  
                      l3716 4DAE                        l3564 4F28                        l3556 4F08  
                      l3580 5338                        l3572 530C                        l3548 51B8  
                      l4460 629C                        l4452 622C                        l4444 61A6  
                      l3900 4E9E                        l4196 6066                        l4188 6040  
                      l4532 5C4A                        l4524 5C02                        l4516 5BBA  
                      l4436 7380                        l4428 7346                        l4380 7156  
                      l4372 7114                        l4364 70E0                        l4356 70AC  
                      l4348 706C                        l4292 6E66                        l4284 6E3C  
                      l4276 6DEE                        l4268 6D92                        l3812 507E  
                      l3804 5056                        l4508 5894                        l4540 589E  
                      l4700 74AE                        l2790 4CE8                        l3494 649A  
                      l3486 6422                        l3478 63B2                        l4630 5A44  
                      l4622 59C4                        l4614 59AE                        l4606 599E  
                      l3662 5464                        l3654 544C                        l3646 5430  
                      l3638 540A                        l2862 4D54                        l3750 56BC  
                      l3742 568A                        l3734 5664                        l3726 5642  
                      l3718 4DCA                        l3822 50F8                        l3590 4FF2  
                      l3558 4F1C                        l3582 533C                        l3574 5310  
                      l3566 52F0                        l3670 4F30                        l4470 6336  
                      l4462 62C6                        l4454 6256                        l4446 61B6  
                      l3902 4EA2                        l3910 4DD6                        l4198 606C  
                      l4438 738C                        l4390 719A                        l4382 715C  
                      l4374 7130                        l4366 70FC                        l4358 70B2  
                      l4294 6E86                        l4286 6E42                        l4278 6DF4  
                      l3806 506C                        l4550 58DE                        l4542 58A2  
                      l4710 7516                        l4702 74B6                        l2792 4CEC  
                      l3496 64B6                        l3488 643E                        l4640 5A84  
                      l4632 5A54                        l4624 5A04                        l4616 59C0  
                      l4608 59A2                        l3664 5472                        l3656 544E  
                      l3648 5436                        l2864 4D68                        l3840 4CCE  
                      l4480 4CDA                        l3760 56E2                        l3752 56C4  
                      l3744 5692                        l3736 5668                        l3728 564A  
                      l3816 53A6                        l3592 5006                        l3584 5340  
                      l3576 5324                        l3568 5300                        l3680 52B6  
                      l3672 529C                        l4472 635A                        l4464 62EA  
                      l4456 627A                        l4448 61DA                        l3832 4CAC  
                      l3912 4DE2                        l4528 5C26                        l4392 71AE  
                      l4384 7174                        l4376 7136                        l4368 7102  
                      l4296 6E98                        l4288 6E5A                        l3808 5072  
                      l4800 7798                        l4720 7558                        l4712 7528  
                      l4704 74C6                        l2794 4CF0                        l3498 64C8  
                      l4634 5A66                        l4626 5A24                        l3666 5478  
                      l3658 545C                        l3850 5242                        l4650 5490  
                      l4642 5480                        l2866 4D6A                        l3842 4CD2  
                      l4482 4CDE                        l3762 56EA                        l3754 56C6  
                      l3746 56A0                        l3738 5670                        l3770 5592  
                      l3818 53FE                        l3594 500C                        l3586 4FEA  
                      l3578 5334                        l3690 52EA                        l3682 52BA  
                      l3826 51C2                        l4474 6362                        l4466 62F2  
                      l4458 6282                        l3906 4CA8                        l3922 4D3E  
                      l3914 4DE4                        l4570 4CB0                        l4538 5C6C  
                      l3930 4CC0                        l4386 717A                        l4394 71BA  
                      l4378 7142                        l4298 6EB0                        l4490 583A  
                      l4562 5938                        l4554 58FC                        l4546 58C0  
                      l4802 779E                        l4730 7590                        l4722 755E  
                      l4714 752E                        l4706 74E6                        l2788 4CE6  
                      l4636 5A6C                        l4628 5A42                        l3668 547A  
                      l3852 524A                        l3844 520A                        l4652 5494  
                      l4644 548C                        l3836 4CCA                        l3756 56CC  
                      l3748 56A6                        l3780 55C6                        l3772 559A  
                      l3596 5010                        l3588 4FEE                        l3684 52D0  
                      l3828 51FE                        l3932 5250                        l4476 637C  
                      l4468 630C                        l4660 4D90                        l3924 4D44  
                      l3916 4DF6                        l3860 5034                        l4396 71CE  
                      l4388 718E                        l3940 684E                        l4484 57BC  
                      l4580 4F70                        l4900 7BFC                        l4820 7826  
                      l4812 77D2                        l4804 77B0                        l4740 75C2  
                      l4732 7596                        l4724 7566                        l4716 7540  
                      l4708 74F6                        l4638 5A70                        l3694 4ED2  
                      l3846 5220                        l4654 5496                        l3838 4CCC  
                      l3758 56D2                        l3790 5602                        l3782 55CE  
                      l3774 559E                        l3766 5580                        l3598 5018  
                      l3686 52D6                        l3678 52A8                        l3934 5260  
                      l4478 6396                        l4662 4D96                        l4590 5522  
                      l3918 4CA4                        l3926 4EA6                        l3870 571C  
                      l3862 56F4                        l3854 501C                        l4398 71D4  
                      l3950 688A                        l3942 685A                        l4486 5830  
                      l4582 4F80                        l4574 4F5C                        l4558 591A  
                      l4902 7C10                        l4830 7868                        l4822 7838  
                      l4814 77E2                        l4806 77B6                        l4750 7618  
                      l4742 75CE                        l4734 75A8                        l4726 7578  
                      l4718 7546                        l4670 73AA                        l3848 5232  
                      l4656 54A6                        l3792 5608                        l3784 55D6  
                      l3776 55AC                        l3768 5584                        l3688 52E6  
                      l3936 5264                        l4664 4D9A                        l4592 5530  
                      l4584 54F8                        l3928 4EB8                        l3880 5762  
                      l3864 5702                        l3856 5020                        l3960 68BC  
                      l3952 689A                        l3944 6868                        l4496 583E  
                      l4488 5832                        l4576 4F64                        l4568 5956  
                      l4904 7C3A                        l4840 789A                        l4824 783E  
                      l4816 77FC                        l4808 77C8                        l4760 766C  
                      l4752 7628                        l4744 75DE                        l4736 75AE  
                      l4728 757E                        l4680 7406                        l4672 73BC  
                      l4920 4FCA                        l3786 55E4                        l3794 560E  
                      l3778 55B4                        l3938 527A                        l4658 4D8C  
                      l4594 554E                        l4586 550E                        l3890 4D06  
                      l3882 5780                        l3874 572E                        l3866 570A  
                      l3858 5030                        l3970 68FC                        l3962 68CA  
                      l3954 68A0                        l3946 686A                        l4498 5852  
                      l4578 4F6E                        l4906 7C64                        l4834 7872  
                      l4826 7850                        l4818 780C                        l4770 76A2  
                      l4762 7672                        l4754 7642                        l4746 75EE  
                      l4738 75B2                        l4690 7478                        l4682 7416  
                      l4674 73CE                        l4666 73A0                        l4930 4FDA  
                      l4922 4FCE                        l4914 4FBA                        l3796 561E  
                      l3788 55FA                        l4596 555E                        l4588 5516  
                      l3892 4E7A                        l3884 57B0                        l3876 5742  
                      l3868 5710                        l3980 6946                        l3972 6902  
                      l3964 68CC                        l3956 68B0                        l3948 687A  
                      l4908 7C76                        l4860 79CC                        l4844 78B8  
                      l4836 7884                        l4828 7856                        l4780 76FE  
                      l4772 76BC                        l4764 7684                        l4756 7654  
                      l4748 75FE                        l4692 747E                        l4684 7436  
                      l4852 7904                        l4676 73E0                        l4668 73A4  
                      l4932 4FDE                        l4924 4FD2                        l4916 4FC2  
                      l3798 5626                        l4598 5568                        l3894 4E7E  
                      l3878 575E                        l3990 6996                        l3982 6952  
                      l3974 6922                        l3966 68DC                        l3958 68B6  
                      l4870 7A7C                        l4862 79EE                        l4846 78F6  
                      l4838 788A                        l4790 7732                        l4782 7710  
                      l4774 76CC                        l4766 768A                        l4758 765A  
                      l4854 7954                        l4694 7490                        l4686 7446  
                      l4678 73FC                        l4926 4FD6                        l4918 4FC6  
                      l3896 4E8C                        l3888 4CF8                        l3992 69A2  
                      l3984 695C                        l3976 6932                        l3968 68EC  
                      l4880 7B10                        l4864 79FE                        l4856 7966  
                      l4848 78FC                        l4792 7742                        l4784 7716  
                      l4776 76E6                        l4768 7692                        l4696 7496  
                      l4688 7466                        l4928 4FDA                        l3898 4E90  
                      l3994 69AE                        l3986 6972                        l4890 7BA8  
                      l4882 7B2C                        l4874 7A90                        l4866 7A2C  
                      l4858 7970                        l4794 775C                        l4786 7728  
                      l4778 76F8                        l4698 74A8                        l3996 69BC  
                      l3988 697E                        l4884 7B3C                        l4876 7AC0  
                      l4868 7A5A                        l4796 776C                        l3998 69C8  
                      l4886 7B6A                        l4878 7AEE                        l4894 7BBC  
                      l4798 7786                        l4896 7BEC                        l4888 7B8C  
                      l4898 7BF0                        STR_1 7D03                        STR_2 7CD3  
                      STR_3 7D03                        STR_4 7CD3                        STR_5 7CE3  
                      STR_6 7CC3                        STR_7 7CE3                        STR_8 7CC3  
                      STR_9 7CF3                        u3000 50F4                        u3001 50EE  
                      u3010 50F6                        u3020 518C                        u3100 5370  
                      u3021 5188                        u3101 536A                        _LATA 0F89  
                      u3030 51A8                        u3110 5372                        u3031 51A4  
                      u3040 4F1C                        u3200 52D0                        u3120 538C  
                      u4000 70AC                        u3041 4F18                        u3201 52CC  
                      u3121 5388                        u4001 70A8                        u3050 5300  
                      u3210 52E6                        u3130 53A0                        u4010 7156  
                      u3051 52FC                        u3211 52E2                        u3131 539C  
                      u4011 7152                        u3220 4EEC                        u3140 4D22  
                      u3300 5592                        u3060 5324                        u4100 6256  
                      u4020 718E                        u3221 4EE8                        u3141 4D1E  
                      u3301 558E                        u3061 5320                        u4101 6252  
                      u4021 718A                        u3230 4EFE                        u3150 541A  
                      u3310 55AC                        u3070 5334                        u4110 62C6  
                      u4030 71AE                        u3231 4EFA                        u3151 5416  
                      u3311 55A8                        u3071 5330                        u4111 62C2  
                      u4031 71AA                        u3160 5430                        u3240 5642  
                      u3320 55C6                        u2600 677C                        u2520 668C  
                      u2504 6640                        u3080 5006                        u4120 6336  
                      u3400 5702                        u4040 71CE                        u4201 59B8  
                      u3161 542C                        u3241 563E                        u3321 55C2  
                      u2601 6778                        u2521 6688                        u2505 663C  
                      u3081 5002                        u4121 6332                        u3401 56FE  
                      u4041 71CA                        u3170 5446                        u3250 565C  
                      u3330 55E4                        u2610 6796                        u2530 66A6  
                      u2514 6660                        u3090 5358                        u3410 572A  
                      u4050 7268                        u4130 5864                        u3171 5442  
                      u3251 5658                        u3331 55E0                        u2611 6792  
                      u2531 66A2                        u2515 665C                        u3091 5354  
                      u3411 5726                        u4051 7264                        u4131 5860  
                      u4220 5A04                        u3180 545C                        u3260 5682  
                      u3340 55FA                        u2700 5D04                        u3420 5780  
                      u4060 737A                        u3500 687A                        u4140 5890  
                      u4300 73FC                        u4221 5A00                        u3181 5458  
                      u3261 567E                        u3341 55F6                        u2701 5D00  
                      u3421 577C                        u4061 7376                        u3501 6876  
                      u4141 588C                        u4301 73F8                        u4214 59EA  
                      u3190 5472                        u3270 56A0                        u3350 561E  
                      u4070 61D6                        u3430 4D06                        u3510 688A  
                      u4150 4F80                        u4310 7416                        u4215 59E6  
                      u3191 546E                        u3271 569C                        u3351 561A  
                      u4071 61D0                        u3431 4D02                        u3511 6886  
                      u4151 4F7C                        u4311 7412                        u3280 56BC  
                      u2640 67F4                        u2624 67A8                        u2560 6704  
                      u2544 66B8                        u2480 661C                        u2720 5D4C  
                      u4080 61D8                        u4160 550E                        u3440 4E8C  
                      u3600 6B38                        u3520 68CA                        u3360 5066  
                      u4400 7558                        u4320 7446                        u3281 56B8  
                      u2641 67F0                        u2625 67A4                        u2561 6700  
                      u2545 66B4                        u2481 6618                        u2721 5D48  
                      u4161 550A                        u3441 4E88                        u3601 6B34  
                      u3521 68C6                        u3361 5062                        u4401 7554  
                      u4321 7442                        u4250 5A54                        u4234 5A16  
                      u3370 5232                        u3290 56E2                        u2650 680E  
                      u2634 67C8                        u2570 671E                        u2554 66D8  
                      u2490 662E                        u2714 5D1A                        u4090 620C  
                      u4170 5530                        u3450 4E9E                        u3610 6B66  
                      u3530 68DC                        u4410 7578                        u4330 7478  
                      u4251 5A50                        u4235 5A12                        u3371 522E  
                      u3291 56DE                        u2651 680A                        u2635 67C4  
                      u2571 671A                        u2555 66D4                        u2491 662A  
                      u2715 5D16                        u4091 6208                        u4171 552C  
                      u3451 4E9A                        u3611 6B62                        u3531 68D8  
                      u4411 7574                        u4331 7474                        u2900 652E  
                      u2820 643E                        u2804 63F2                        u4260 5A66  
                      u4244 5A36                        u3380 5242                        u2740 5D94  
                      u4180 554E                        u3460 4DF6                        u3620 6B7C  
                      u3540 68EC                        u3700 5B02                        u4500 7684  
                      u4420 7590                        u4340 7490                        u2901 652A  
                      u2821 643A                        u2805 63EE                        u4261 5A62  
                      u4245 5A32                        u3381 523E                        u2741 5D90  
                      u4181 554A                        u3461 4DF2                        u3621 6B78  
                      u3541 68E8                        u3701 5AFE                        u4501 7680  
                      u4421 758C                        u4341 748C                        u2910 6540  
                      u2830 6450                        u2814 6412                        u4270 5A84  
                      u2734 5D62                        u3470 4EB8                        u3390 5050  
                      u3630 6B90                        u3550 6922                        u3710 5B16  
                      u4510 76A2                        u4430 75A8                        u4350 74A8  
                      u2911 653C                        u2831 644C                        u2815 640E  
                      u4271 5A80                        u4191 5994                        u2735 5D5E  
                      u3471 4EB4                        u3391 504C                        u3631 6B8C  
                      u3551 691E                        u3711 5B12                        u4511 769E  
                      u4431 75A4                        u4351 74A4                        u4280 54A6  
                      u2664 6820                        u2584 6730                        u2760 5DDC  
                      u2680 5CC0                        u3480 5260                        u3640 6BAA  
                      u3560 6932                        u3720 5B3E                        u3800 5F48  
                      u4600 77C8                        u4520 76CC                        u4440 75C2  
                      u4360 74C6                        u4281 54A2                        u2665 681C  
                      u2585 672C                        u2761 5DD8                        u2681 5CBC  
                      u3481 525C                        u3641 6BA6                        u3561 692E  
                      u3721 5B3A                        u3801 5F44                        u4601 77C4  
                      u4521 76C8                        u4441 75BE                        u4361 74C2  
                      u2674 6840                        u2594 6750                        u2754 5DAA  
                      u3650 6BF2                        u3570 6AAC                        u3490 6868  
                      u3730 5B5E                        u3810 5F58                        u4610 77E2  
                      u4530 76F8                        u4450 75DE                        u4370 74F6  
                      u4290 73BC                        u2675 683C                        u2595 674C  
                      u2755 5DA6                        u3651 6BEE                        u3491 6864  
                      u3731 5B5A                        u3811 5F54                        u4611 77DE  
                      u4531 76F4                        u4451 75DA                        u4371 74F2  
                      u4291 73B8                        u2940 65A6                        u2924 6556  
                      u2860 64B6                        u2844 6466                        u2780 63CE  
                      u3900 6056                        u3660 6C20                        u3580 6B06  
                      u3740 5B6E                        u3820 5F66                        u4700 7B2C  
                      u4620 780C                        u4540 7710                        u4460 75FE  
                      u4380 7528                        u2941 65A2                        u2925 6552  
                      u2861 64B2                        u2845 6462                        u2781 63CA  
                      u3901 6052                        u3661 6C1C                        u3581 6B02  
                      u3741 5B6A                        u3821 5F62                        u4701 7B28  
                      u4621 7808                        u4541 770C                        u4461 75FA  
                      u4381 7524                        u2950 65B8                        u2934 657A  
                      u2870 64C8                        u2854 648A                        u2790 63E0  
                      u2774 5DF2                        u2694 5CD2                        u3910 6082  
                      u3670 6C5A                        u3590 6B26                        u3830 5FA0  
                      u3750 5E20                        u4710 7BA8                        u4630 7838  
                      u4550 7728                        u4470 7628                        u4390 7540  
                      u2951 65B4                        u2935 6576                        u2871 64C4  
                      u2855 6486                        u2791 63DC                        u2775 5DEE  
                      u2695 5CCE                        u3911 607E                        u3671 6C56  
                      u3591 6B22                        u3575 6AA2                        u3831 5F9C  
                      u3751 5E1C                        u4711 7BA4                        u4631 7834  
                      u4551 7724                        u4471 7624                        u4391 753C  
                      u3920 609E                        u3680 5AA0                        u3840 5FAE  
                      u3760 5E2E                        u4720 7C10                        u4640 7850  
                      u4560 7742                        u4480 7654                        u3921 609A  
                      u3681 5A9C                        u3841 5FAA                        u3761 5E2A  
                      u4721 7C0C                        u4641 784C                        u4561 773E  
                      u4481 7650                        u3930 616C                        u3850 5FF0  
                      u3690 5AD4                        u3770 5E8A                        u4730 7C3A  
                      u4650 7868                        u4570 776C                        u4490 766C  
                      u3931 6168                        u3851 5FEC                        u3771 5E86  
                      u4731 7C36                        u4651 7864                        u4571 7768  
                      u4491 7668                        u2964 65CE                        u2884 64DE  
                      u2980 50BC                        u3860 5FFE                        u3940 6C8C  
                      u3780 5EE0                        u4740 7C64                        u4660 7884  
                      u4580 7798                        u2965 65CA                        u2885 64DA  
                      u2981 50B6                        u3861 5FFA                        u3941 6C88  
                      u3781 5EDC                        u4741 7C60                        u4661 7880  
                      u4581 7794                        u2974 65F2                        u2894 6502  
                      u2990 50BE                        u3870 6014                        u3950 6D64  
                      u3790 5F2A                        u4670 789A                        u4590 77B0  
                      u2975 65EE                        u2895 64FE                        u3871 6010  
                      u3951 6D60                        u3695 5ACA                        u3791 5F26  
                      u4671 7896                        u4591 77AC                        u3880 602A  
                      u3960 6E3C                        u4680 78F6                        u3881 6026  
                      u3961 6E38                        u4681 78F2                        u3890 6040  
                      u3970 6E98                        u4690 7966                        u3891 603C  
                      u3971 6E94                        u4691 7962                        u3980 6F3A  
                      u3981 6F36                        u3990 7004                        u3991 7000  
               _outputPrint 6C78                        _main 4FBA                        _msgs 00C2  
                      _temp 00AD                        _time 00AF                        _prot 00BC  
                      fsr2h 0FDA                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        _volt 004D               ?_i2c_read_bit 0001  
                      prodh 0FF4                        prodl 0FF3                        start 0002  
              ___param_bank 0000             __end_of_i2cInit 4E26              _alarmLevelHigh 0050  
           __end_of_bcd2dec 513A               ___fltol@sign1 0034                       ?_main 0001  
           __end_of_dec2bcd 5408             __end_of_adcInit 4CF6             __end_of_adcRead 5088  
           __end_of___awdiv 56F4            ?_lcdCommand4bits 0001                       STR_10 7D23  
                     STR_11 7D33                       STR_12 7D33                       STR_20 7CA1  
                     STR_21 7D3B                       STR_13 7D33                       STR_14 7D33  
                     STR_22 7D13                       STR_15 7D3B                       STR_23 7D13  
                     STR_16 7D33                       STR_17 7D3B                       STR_18 7D33  
                     STR_19 7CB2             __end_of___awmod 5630             __end_of___flmul 6C78  
           __end_of___fltol 5B90             ___awdiv@divisor 0003             __end_of___llmod 5580  
           ___awdiv@counter 0005                       _PORTA 0F80                       _PORTB 0F81  
                     _PORTC 0F82                       _PORTD 0F83                       _PORTE 0F84  
                     _TRISA 0F92                       _TRISB 0F93                       _TRISC 0F94  
                     _TRISD 0F95                       _TRISE 0F96             __end_of_lcdData 4D8C  
           __end_of_lcdInit 54F8              ??_i2cWriteByte 000A             __end_of_getTemp 4CCA  
           __end_of_getTime 5CA4             __end_of_getProt 4CAC         __end_of_i2cReadByte 52EE  
        outputPrint@numTela 0021                       _index 004E              setProt@newChar 0001  
           __end_of_pinMode 6600                       _valor 005F                       _state 0052  
           __end_of_varInit 63B2                dec2bcd@value 000F             __end_of_setTime 598E  
           __end_of_setProt 4DFC                       tablat 0FF5           __end_of_I2C_delay 4CA4  
             _i2c_write_bit 52EE                       plusw1 0FE3                       plusw2 0FDB  
                     status 0FD8              ??_i2c_read_bit 0007            __end_of_Delay2ms 4F00  
      __end_of_digitalWrite 684E             __initialization 513A                __end_of_main 4FEA  
           i2cWriteByte@bit 000B            __end_of_i2c_stop 4F2E                ?_setLanguage 0001  
                    ??_main 004C               __activetblptr 0002                 eventRead@ev 001B  
          ___llmod@dividend 0001            ___awdiv@dividend 0001              ?_i2c_write_bit 0001  
            getAlarmLevel@l 0003                   ??_i2cInit 0007            __end_of___xxtofl 5FC2  
     __end_of_getAlarmLevel 4ED2          dsWriteData@address 0015            __end_of_getState 4CB4  
                 ??_bcd2dec 0015                      _dTimer 00B3                   ??_dec2bcd 0011  
                    ___wmul 4DAE                   ??_adcInit 0001                   ??_adcRead 0003  
                 ??___awdiv 0005                   ??___awmod 000D                   ??___flmul 001B  
                 ??___fltol 0030                      _dsInit 4CB4                   ??___llmod 0009  
                    _lcdInt 56F4                      _kpInit 4CCA                      _kpRead 4CAC  
          __end_of_read_SDA 50F8            __end_of_read_SCL 50C0                      _ev_ant 00B9  
          __end_of_readTemp 589E                      _smInit 4D8C                      clear_0 5160  
                    clear_1 516C                      _smLoop 73A0            ___awdiv@quotient 0007  
           ___awmod@divisor 000B                   ??_lcdData 0003                      isa$std 0001  
               _i2cReadByte 529A                   ??_lcdInit 0004             ___awmod@counter 000D  
                 ??_getTemp 0003                   ??_getTime 0019                   ??_getProt 0003  
          __end_of_setState 4CE6                   ??_pinMode 0005                __mediumconst 7C90  
                 ??_varInit 001B                   ??_setTime 001D                   ??_setProt 0001  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
         __end_of_Delay40us 4D24                ___xxtofl@arg 000F                ___xxtofl@exp 000E  
              ___xxtofl@val 0005                  __accesstop 0060     __end_of__initialization 5172  
             ___rparam_used 0001                  ___fltol@f1 002C            outputPrint@d_449 0028  
              ?_pulseEnable 0001                 pinMode@type 0003        __end_of_i2cWriteByte 53A6  
            __pcstackCOMRAM 0001                __pidataBANK0 4F8B            i2cWriteByte@byte 0009  
               smLoop@h_537 0046           __end_of_i2c_start 51C2        __end_of_i2c_read_bit 501C  
                 ?_Delay2ms 0001             ??_i2c_write_bit 0007                  __pbssBANK0 0060  
              ?_outputPrint 0021                   ?_i2c_stop 0001                  _dsReadData 51C2  
          dsReadData@result 0011                outputPrint@d 0026                  _lcdCommand 5208  
                   ?___wmul 0009                     ?_dsInit 0001                     ?_lcdInt 0017  
                   ?_kpInit 0001                     ?_kpRead 0001                eventRead@key 001E  
                   ?_smInit 0001                     ?_smLoop 0001                  _kpDebounce 598E  
                 ?___xxtofl 0005                  ??_Delay2ms 0001        i2cReadByte@send_stop 0008  
           getAlarmLevel@lh 0001                _digitalWrite 6600                   ?_getState 0001  
         __end_of_clear_SDA 4E7A           __end_of_clear_SCL 4E50                   ?_read_SDA 0001  
                 ?_read_SCL 0001                  ??_i2c_stop 0007                   ?_readTemp 0001  
                   _i2cInit 4DFC                   _I2C_delay 4CA2                     __Hparam 0000  
                 ?_setState 0001                     __Lparam 0000           __end_of_lcdString 5052  
           kpDebounce@tempo 005E                     _bcd2dec 50F8                     _dec2bcd 53A6  
                _estado_ant 0053                     _adcInit 4CE6                     _adcRead 5052  
                   ___awdiv 5630                     ___awmod 5580                     ___flmul 684E  
                   ___fltol 5A8A                     ___llmod 54F8                     __pcinit 513A  
            serialRead@resp 0001                     _lcdData 4D6E                     __ramtop 0800  
                   _lcdInit 5480                     _getTemp 4CC0                     __ptext0 4FBA  
                   __ptext1 73A0                     __ptext2 589E                     __ptext3 4F5C  
                   _getTime 5B90                     __ptext4 57BC                     __ptext5 5052  
                   __ptext6 5E0E                     __ptext7 5A8A                     __ptext8 684E  
                   __ptext9 6C78                     _getProt 4CA8           __end_of_eventInit 4D3C  
         __end_of_eventRead 6178                     _display 0059                     _maxTemp 00AB  
                   _key_ant 00B7                  ??___xxtofl 0009                     _pinMode 63B2  
          ___awmod@dividend 0009                 serialSend@c 0001                     _varInit 6178  
                   _setTime 589E                     _setProt 4DD4                     lcdInt@i 001F  
                   lcdInt@j 001B                  ??_getState 0001                   Delay2ms@j 0001  
                 Delay2ms@k 0002                     _started 005A                     _voltMin 00BB  
       kpDebounce@valorNovo 005D        end_of_initialization 5172                  ??_read_SDA 0007  
                ??_read_SCL 0007           __end_of_resetProt 4F8A                  ??_readTemp 0036  
             __Lmediumconst 7C90                 ?_dsReadData 000E              digitalRead@pin 0001  
                   smLoop@h 0042                     smLoop@l 0040                     smLoop@m 0048  
                ?_I2C_delay 0001                  ??_setState 0004                  _serialInit 4D54  
                _serialRead 4E7A                  _serialSend 4CF6                     postdec1 0FE5  
                   postdec2 0FDD                 ?_lcdCommand 0001                     postinc0 0FEE  
                   postinc2 0FDE               _setAlarmLevel 5250               ??_digitalRead 0003  
             ??_getLanguage 0001                 ?_kpDebounce 0001                ?_i2cReadByte 0008  
           i2c_read_bit@bit 0007              _valor@ssd$F319 7C91               ___xxtofl@sign 000D  
                _prot_ready 0054                _i2cWriteByte 5346               ??_dsWriteData 0017  
               ___flmul@grs 0020                   _Delay40us 4D0C                _i2c_read_bit 4FEA  
            ?_setAlarmLevel 0018               _alarmLevelLow 004F           outputPrint@idioma 0023  
            adcRead@ADvalor 0003              __end_of___wmul 4DD4              __end_of_dsInit 4CBA  
            __end_of_lcdInt 57BC              __end_of_kpInit 4CD8              __end_of_kpRead 4CB0  
    __end_of_valor@ssd$F319 7CA1              __end_of_smInit 4DAE              __end_of_smLoop 7C90  
       start_initialization 513A         __end_of_digitalRead 5E0E         __end_of_getLanguage 4CA8  
                 _i2c_start 517C                  ?_Delay40us 0001             ___llmod@divisor 0005  
              smLoop@evento 004B             ___llmod@counter 0009           ??_lcdCommand4bits 0002  
               ??_I2C_delay 0001         __end_of_dsWriteData 4F5C                 ?_serialInit 0001  
               ?_serialRead 0001                 ?_serialSend 0001                    ??___wmul 000D  
                  ??_dsInit 0007                    ??_lcdInt 001A                    ??_kpInit 0001  
                  ??_kpRead 0001                 __pdataBANK0 00C2                    ??_smInit 0023  
                  ??_smLoop 003B           dsReadData@address 000E                   _dTimerMax 00B1  
                 ___flmul@a 0017                   ___flmul@b 0013                 __pbssCOMRAM 004C  
                pinMode@pin 0001                  ?_i2c_start 0001            setState@newState 0004  
     __end_of_i2c_write_bit 5346                  smLoop@temp 0044                  smLoop@prot 004A  
                  ?_i2cInit 0001               _getAlarmLevel 4EA6             ??_setAlarmLevel 001B  
                 _clear_SDA 4E50                   _clear_SCL 4E26                    ?_bcd2dec 0013  
             __pmediumconst 7C90                    ?_dec2bcd 000F                    ?_adcInit 0001  
                  ?_adcRead 0001                    ?___awdiv 0001                    ?___awmod 0009  
                  ?___flmul 0013                    ?___fltol 002C                    ?___llmod 0001  
                 _lcdString 501C                 _digitalRead 5CA4                 _getLanguage 4CA4  
                  ?_lcdData 0001               ??_setLanguage 0018                    ?_lcdInit 0001  
                  ?_getTemp 0001                    ?_getTime 0017                    ?_getProt 0001  
             lcdCommand@cmd 0003               eventRead@data 001D               eventRead@prot 001A  
                  ?_pinMode 0001                    ?_varInit 0001                    ?_setTime 001A  
                  ?_setProt 0001              kpDebounce@bits 0004                   _eventInit 4D24  
                 _eventRead 5FC2                  resetProt@i 0001                 _dsWriteData 4F2E  
setAlarmLevel@newAlarmLevel 0018                 ??_Delay40us 0001              ___wmul@product 000D  
              ??_dsReadData 0010              ?_getAlarmLevel 0001               lcdInt@divisor 001D  
                ?_clear_SDA 0001                  ?_clear_SCL 0001                   _resetProt 4F5C  
                 lcdInt@val 0017                ??_lcdCommand 0003                  ?_lcdString 0004  
              ??_kpDebounce 0001                setTime@index 001C           ___wmul@multiplier 0009  
     kpDebounce@valorAntigo 005C                    _Delay2ms 4ED2          __end_of_dsReadData 5208  
                ?_eventInit 0001                  ?_eventRead 0001                 ??_i2c_start 0007  
       __end_of_setLanguage 4D54                   copy_data0 514E          __end_of_lcdCommand 5250  
              lcdData@valor 0003                    _i2c_stop 4F00          __end_of_kpDebounce 5A8A  
                  __Hrparam 0000                  ?_resetProt 0001               ??_pulseEnable 0001  
                  __Lrparam 0000                   readTemp@j 003A            dsWriteData@value 0017  
          kpDebounce@portes 0009                    ___xxtofl 5E0E               readTemp@tempT 0038  
           _lcdCommand4bits 5408                    __ptext10 501C                    __ptext11 56F4  
                  __ptext20 4CF6                    __ptext12 4D6E                    __ptext21 4E7A  
                  __ptext13 4CC0                    __ptext30 51C2                    __ptext22 4CAC  
                  __ptext14 4EA6                    __ptext31 5346                    __ptext23 4CA8  
                  __ptext15 5B90                    __ptext40 5CA4                    __ptext32 517C  
                  __ptext24 4CA4                    __ptext16 4CB0                    __ptext41 4E26  
                  __ptext33 529A                    __ptext25 54F8                    __ptext17 5FC2  
                  __ptext50 4D24                    __ptext42 6600                    __ptext34 52EE  
                  __ptext26 4D8C                    __ptext18 4DD4                    __ptext51 4CCA  
                  __ptext43 4CA2                    __ptext35 4F00                    __ptext27 6178  
                  __ptext19 4D3C                    __ptext60 4CB4                    __ptext52 4D54  
                  __ptext44 53A6                    __ptext36 4E50                    __ptext28 5250  
                  __ptext61 4DFC                    __ptext53 5480                    __ptext45 5580  
                  __ptext37 4FEA                    __ptext29 4F2E                    __ptext62 63B2  
                  __ptext54 5208                    __ptext46 50F8                    __ptext38 50C0  
                  __ptext63 4CE6                    __ptext55 5408                    __ptext47 4DAE  
                  __ptext39 5088                    __ptext56 4CBA                    __ptext48 5630  
                  __ptext57 4D0C                    __ptext49 4CD8                    __ptext58 4ED2  
                  __ptext59 598E                    _getState 4CB0                 _smLoop$1478 003E  
             kpDebounce@F13 00A2               kpDebounce@F15 00EA               ??_outputPrint 0025  
                  _language 0051             ??_getAlarmLevel 0003                    _read_SDA 50C0  
                  _read_SCL 5088                    _readTemp 57BC                lcdInt@digNum 0019  
               ??_clear_SDA 0007                 ??_clear_SCL 0007                ??_serialInit 0001  
              ??_serialRead 0001                ??_serialSend 0001                    _setState 4CD8  
                Delay40us@j 0001             setAlarmLevel@lh 001A                    lcdInit@i 0004  
                  isa$xinst 0000                 ??_lcdString 0006         __end_of_pulseEnable 4CC0  
               _setLanguage 4D3C      setLanguage@newLanguage 0018                 _varInit$570 0021  
               _varInit$568 001D                 _varInit$569 001F                 ??_eventInit 0001  
               ??_eventRead 0019               ?_digitalWrite 0001          __end_of_serialInit 4D6E  
        __end_of_serialRead 4EA6          __end_of_serialSend 4D0C           digitalWrite@value 0003  
               ??_resetProt 0001         __end_of_outputPrint 73A0                bcd2dec@value 0013  
              getTime@index 0019                ?_digitalRead 0001                ?_getLanguage 0001  
   __end_of_lcdCommand4bits 5480                 kpDebounce@j 000E              ??_digitalWrite 0005  
           digitalWrite@pin 0001                ?_dsWriteData 0015         lcdCommand4bits@data 0001  
        lcdCommand4bits@cmd 0002                 _pulseEnable 4CBA  
