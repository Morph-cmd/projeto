

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Jun 20 10:28:39 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    70   000000                     
    71                           ; Generated 17/10/2023 GMT
    72                           ; 
    73                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4550 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105   000000                     
   106                           	psect	idataCOMRAM
   107   002570                     __pidataCOMRAM:
   108                           	callstack 0
   109                           
   110                           ;initializer for kpDebounce@F15
   111   002570  02                 	db	2
   112   002571  03                 	db	3
   113   002572  05                 	db	5
   114   002573  04                 	db	4
   115   002574  01                 	db	1
   116                           
   117                           ;initializer for _ev
   118   002575  0062               	dw	98
   119                           
   120                           	psect	idataBANK0
   121   00255C                     __pidataBANK0:
   122                           	callstack 0
   123                           
   124                           ;initializer for _msgs
   125   00255C  73                 	db	low STR_1
   126   00255D  43                 	db	low STR_2
   127   00255E  73                 	db	low STR_1
   128   00255F  43                 	db	low STR_2
   129   002560  53                 	db	low STR_5
   130   002561  33                 	db	low STR_6
   131   002562  53                 	db	low STR_5
   132   002563  33                 	db	low STR_6
   133   002564  63                 	db	low STR_9
   134   002565  83                 	db	low STR_10
   135   002566  00                 	db	0
   136   002567  00                 	db	0
   137                           
   138                           	psect	smallconst
   139   000800                     __psmallconst:
   140                           	callstack 0
   141   000800  00                 	db	0
   142   000801                     _valor@ssd$F316:
   143                           	callstack 0
   144   000801  3F                 	db	63
   145   000802  06                 	db	6
   146   000803  5B                 	db	91
   147   000804  4F                 	db	79
   148   000805  66                 	db	102
   149   000806  6D                 	db	109
   150   000807  7D                 	db	125
   151   000808  07                 	db	7
   152   000809  7F                 	db	127
   153   00080A  6F                 	db	111
   154   00080B  77                 	db	119
   155   00080C  7C                 	db	124
   156   00080D  39                 	db	57
   157   00080E  5E                 	db	94
   158   00080F  79                 	db	121
   159   000810  71                 	db	113
   160   000811                     __end_of_valor@ssd$F316:
   161                           	callstack 0
   162   000000                     _PORTA	set	3968
   163   000000                     _LATA	set	3977
   164   000000                     _TRISA	set	3986
   165   000000                     _PORTE	set	3972
   166   000000                     _PORTD	set	3971
   167   000000                     _PORTC	set	3970
   168   000000                     _PORTB	set	3969
   169   000000                     _TRISE	set	3990
   170   000000                     _TRISD	set	3989
   171   000000                     _TRISC	set	3988
   172   000000                     _TRISB	set	3987
   173   000811                     STR_18:
   174   000811  45                 	db	69	;'E'
   175   000812  6E                 	db	110	;'n'
   176   000813  67                 	db	103	;'g'
   177   000814  6C                 	db	108	;'l'
   178   000815  69                 	db	105	;'i'
   179   000816  73                 	db	115	;'s'
   180   000817  68                 	db	104	;'h'
   181   000818  20                 	db	32
   182   000819  20                 	db	32
   183   00081A  20                 	db	32
   184   00081B  20                 	db	32
   185   00081C  20                 	db	32
   186   00081D  20                 	db	32
   187   00081E  20                 	db	32
   188   00081F  20                 	db	32
   189   000820  20                 	db	32
   190   000821  00                 	db	0
   191   000822                     STR_17:
   192   000822  50                 	db	80	;'P'
   193   000823  6F                 	db	111	;'o'
   194   000824  72                 	db	114	;'r'
   195   000825  74                 	db	116	;'t'
   196   000826  75                 	db	117	;'u'
   197   000827  67                 	db	103	;'g'
   198   000828  75                 	db	117	;'u'
   199   000829  65                 	db	101	;'e'
   200   00082A  73                 	db	115	;'s'
   201   00082B  20                 	db	32
   202   00082C  20                 	db	32
   203   00082D  20                 	db	32
   204   00082E  20                 	db	32
   205   00082F  20                 	db	32
   206   000830  20                 	db	32
   207   000831  20                 	db	32
   208   000832  00                 	db	0
   209   000833                     STR_6:
   210   000833  43                 	db	67	;'C'
   211   000834  68                 	db	104	;'h'
   212   000835  61                 	db	97	;'a'
   213   000836  6E                 	db	110	;'n'
   214   000837  67                 	db	103	;'g'
   215   000838  65                 	db	101	;'e'
   216   000839  20                 	db	32
   217   00083A  74                 	db	116	;'t'
   218   00083B  69                 	db	105	;'i'
   219   00083C  6D                 	db	109	;'m'
   220   00083D  65                 	db	101	;'e'
   221   00083E  20                 	db	32
   222   00083F  20                 	db	32
   223   000840  20                 	db	32
   224   000841  20                 	db	32
   225   000842  00                 	db	0
   226   000843                     STR_2:
   227   000843  43                 	db	67	;'C'
   228   000844  68                 	db	104	;'h'
   229   000845  61                 	db	97	;'a'
   230   000846  6E                 	db	110	;'n'
   231   000847  67                 	db	103	;'g'
   232   000848  65                 	db	101	;'e'
   233   000849  20                 	db	32
   234   00084A  61                 	db	97	;'a'
   235   00084B  6C                 	db	108	;'l'
   236   00084C  61                 	db	97	;'a'
   237   00084D  72                 	db	114	;'r'
   238   00084E  6D                 	db	109	;'m'
   239   00084F  20                 	db	32
   240   000850  20                 	db	32
   241   000851  20                 	db	32
   242   000852  00                 	db	0
   243   000853                     STR_5:
   244   000853  41                 	db	65	;'A'
   245   000854  6C                 	db	108	;'l'
   246   000855  74                 	db	116	;'t'
   247   000856  65                 	db	101	;'e'
   248   000857  72                 	db	114	;'r'
   249   000858  61                 	db	97	;'a'
   250   000859  72                 	db	114	;'r'
   251   00085A  20                 	db	32
   252   00085B  74                 	db	116	;'t'
   253   00085C  65                 	db	101	;'e'
   254   00085D  6D                 	db	109	;'m'
   255   00085E  70                 	db	112	;'p'
   256   00085F  6F                 	db	111	;'o'
   257   000860  20                 	db	32
   258   000861  20                 	db	32
   259   000862  00                 	db	0
   260   000863                     STR_9:
   261   000863  41                 	db	65	;'A'
   262   000864  6C                 	db	108	;'l'
   263   000865  74                 	db	116	;'t'
   264   000866  65                 	db	101	;'e'
   265   000867  72                 	db	114	;'r'
   266   000868  61                 	db	97	;'a'
   267   000869  72                 	db	114	;'r'
   268   00086A  20                 	db	32
   269   00086B  69                 	db	105	;'i'
   270   00086C  64                 	db	100	;'d'
   271   00086D  69                 	db	105	;'i'
   272   00086E  6F                 	db	111	;'o'
   273   00086F  6D                 	db	109	;'m'
   274   000870  61                 	db	97	;'a'
   275   000871  20                 	db	32
   276   000872  00                 	db	0
   277   000873                     STR_1:
   278   000873  41                 	db	65	;'A'
   279   000874  6C                 	db	108	;'l'
   280   000875  74                 	db	116	;'t'
   281   000876  65                 	db	101	;'e'
   282   000877  72                 	db	114	;'r'
   283   000878  61                 	db	97	;'a'
   284   000879  72                 	db	114	;'r'
   285   00087A  20                 	db	32
   286   00087B  61                 	db	97	;'a'
   287   00087C  6C                 	db	108	;'l'
   288   00087D  61                 	db	97	;'a'
   289   00087E  72                 	db	114	;'r'
   290   00087F  6D                 	db	109	;'m'
   291   000880  65                 	db	101	;'e'
   292   000881  20                 	db	32
   293   000882  00                 	db	0
   294   000883                     STR_10:
   295   000883  43                 	db	67	;'C'
   296   000884  68                 	db	104	;'h'
   297   000885  61                 	db	97	;'a'
   298   000886  6E                 	db	110	;'n'
   299   000887  67                 	db	103	;'g'
   300   000888  65                 	db	101	;'e'
   301   000889  20                 	db	32
   302   00088A  6C                 	db	108	;'l'
   303   00088B  61                 	db	97	;'a'
   304   00088C  6E                 	db	110	;'n'
   305   00088D  67                 	db	103	;'g'
   306   00088E  75                 	db	117	;'u'
   307   00088F  61                 	db	97	;'a'
   308   000890  67                 	db	103	;'g'
   309   000891  65                 	db	101	;'e'
   310   000892  00                 	db	0
   311   000893                     STR_11:
   312   000893  20                 	db	32
   313   000894  20                 	db	32
   314   000895  20                 	db	32
   315   000896  20                 	db	32
   316   000897  20                 	db	32
   317   000898  20                 	db	32
   318   000899  20                 	db	32
   319   00089A  20                 	db	32
   320   00089B  20                 	db	32
   321   00089C  20                 	db	32
   322   00089D  20                 	db	32
   323   00089E  00                 	db	0
   324   00089F  00                 	db	0	; dummy byte at the end
   325   000000                     
   326                           ; #config settings
   327                           
   328                           	psect	cinit
   329   001FC2                     __pcinit:
   330                           	callstack 0
   331   001FC2                     start_initialization:
   332                           	callstack 0
   333   001FC2                     __initialization:
   334                           	callstack 0
   335                           
   336                           ; Initialize objects allocated to BANK0 (12 bytes)
   337                           ; load TBLPTR registers with __pidataBANK0
   338   001FC2  0E5C               	movlw	low __pidataBANK0
   339   001FC4  6EF6               	movwf	tblptrl,c
   340   001FC6  0E25               	movlw	high __pidataBANK0
   341   001FC8  6EF7               	movwf	tblptrh,c
   342   001FCA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   343   001FCC  6EF8               	movwf	tblptru,c
   344   001FCE  EE00  F060         	lfsr	0,__pdataBANK0
   345   001FD2  EE10 F00C          	lfsr	1,12
   346   001FD6                     copy_data0:
   347   001FD6  0009               	tblrd		*+
   348   001FD8  CFF5 FFEE          	movff	tablat,postinc0
   349   001FDC  50E5               	movf	postdec1,w,c
   350   001FDE  50E1               	movf	fsr1l,w,c
   351   001FE0  E1FA               	bnz	copy_data0
   352                           
   353                           ; Initialize objects allocated to COMRAM (7 bytes)
   354                           ; load TBLPTR registers with __pidataCOMRAM
   355   001FE2  0E70               	movlw	low __pidataCOMRAM
   356   001FE4  6EF6               	movwf	tblptrl,c
   357   001FE6  0E25               	movlw	high __pidataCOMRAM
   358   001FE8  6EF7               	movwf	tblptrh,c
   359   001FEA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   360   001FEC  6EF8               	movwf	tblptru,c
   361   001FEE  EE00  F053         	lfsr	0,__pdataCOMRAM
   362   001FF2  EE10 F007          	lfsr	1,7
   363   001FF6                     copy_data1:
   364   001FF6  0009               	tblrd		*+
   365   001FF8  CFF5 FFEE          	movff	tablat,postinc0
   366   001FFC  50E5               	movf	postdec1,w,c
   367   001FFE  50E1               	movf	fsr1l,w,c
   368   002000  E1FA               	bnz	copy_data1
   369                           
   370                           ; Clear objects allocated to COMRAM (40 bytes)
   371   002002  EE00  F02B         	lfsr	0,__pbssCOMRAM
   372   002006  0E28               	movlw	40
   373   002008                     clear_0:
   374   002008  6AEE               	clrf	postinc0,c
   375   00200A  06E8               	decf	wreg,f,c
   376   00200C  E1FD               	bnz	clear_0
   377   00200E                     end_of_initialization:
   378                           	callstack 0
   379   00200E                     __end_of__initialization:
   380                           	callstack 0
   381   00200E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   382   002010  6EF8               	movwf	tblptru,c
   383   002012  0100               	movlb	0
   384   002014  EFAD  F011         	goto	_main	;jump to C main() function
   385                           
   386                           	psect	bssCOMRAM
   387   00002B                     __pbssCOMRAM:
   388                           	callstack 0
   389   00002B                     	ds	5
   390   000030                     _time:
   391                           	callstack 0
   392   000030                     	ds	2
   393   000032                     	ds	2
   394   000034                     	ds	2
   395   000036                     _key:
   396                           	callstack 0
   397   000036                     	ds	2
   398   000038                     _key_ant:
   399                           	callstack 0
   400   000038                     	ds	2
   401   00003A                     _ev_ant:
   402                           	callstack 0
   403   00003A                     	ds	2
   404   00003C                     _index:
   405                           	callstack 0
   406   00003C                     	ds	1
   407   00003D                     _alarmLevelLow:
   408                           	callstack 0
   409   00003D                     	ds	1
   410   00003E                     _alarmLevelHigh:
   411                           	callstack 0
   412   00003E                     	ds	1
   413   00003F                     _language:
   414                           	callstack 0
   415   00003F                     	ds	1
   416   000040                     _state:
   417                           	callstack 0
   418   000040                     	ds	1
   419   000041                     _estado_ant:
   420                           	callstack 0
   421   000041                     	ds	1
   422   000042                     _prot_ready:
   423                           	callstack 0
   424   000042                     	ds	1
   425   000043                     _v3:
   426                           	callstack 0
   427   000043                     	ds	1
   428   000044                     _v2:
   429                           	callstack 0
   430   000044                     	ds	1
   431   000045                     _v1:
   432                           	callstack 0
   433   000045                     	ds	1
   434   000046                     _v0:
   435                           	callstack 0
   436   000046                     	ds	1
   437   000047                     _display:
   438                           	callstack 0
   439   000047                     	ds	1
   440   000048                     _started:
   441                           	callstack 0
   442   000048                     	ds	1
   443   000049                     _de:
   444                           	callstack 0
   445   000049                     	ds	1
   446   00004A                     kpDebounce@valorAntigo:
   447                           	callstack 0
   448   00004A                     	ds	1
   449   00004B                     kpDebounce@valorNovo:
   450                           	callstack 0
   451   00004B                     	ds	1
   452   00004C                     kpDebounce@tempo:
   453                           	callstack 0
   454   00004C                     	ds	1
   455   00004D                     _valor:
   456                           	callstack 0
   457   00004D                     	ds	1
   458   00004E                     _prot:
   459                           	callstack 0
   460   00004E                     	ds	5
   461                           
   462                           	psect	dataCOMRAM
   463   000053                     __pdataCOMRAM:
   464                           	callstack 0
   465   000053                     kpDebounce@F15:
   466                           	callstack 0
   467   000053                     	ds	5
   468   000058                     	ds	2
   469                           
   470                           	psect	dataBANK0
   471   000060                     __pdataBANK0:
   472                           	callstack 0
   473   000060                     _msgs:
   474                           	callstack 0
   475   000060                     	ds	12
   476                           
   477                           	psect	cstackCOMRAM
   478   000001                     __pcstackCOMRAM:
   479                           	callstack 0
   480   000001                     ??_kpDebounce:
   481   000001                     ?_getAlarmLevel:
   482                           	callstack 0
   483   000001                     ?_digitalRead:
   484                           	callstack 0
   485   000001                     ?___awdiv:
   486                           	callstack 0
   487   000001                     Delay40us@j:
   488                           	callstack 0
   489   000001                     Delay2ms@j:
   490                           	callstack 0
   491   000001                     lcdCommand4bits@data:
   492                           	callstack 0
   493   000001                     serialSend@c:
   494                           	callstack 0
   495   000001                     serialRead@resp:
   496                           	callstack 0
   497   000001                     setState@newState:
   498                           	callstack 0
   499   000001                     setProt@newChar:
   500                           	callstack 0
   501   000001                     resetProt@i:
   502                           	callstack 0
   503   000001                     digitalWrite@pin:
   504                           	callstack 0
   505   000001                     digitalRead@pin:
   506                           	callstack 0
   507   000001                     pinMode@pin:
   508                           	callstack 0
   509   000001                     getAlarmLevel@lh:
   510                           	callstack 0
   511   000001                     ___awdiv@dividend:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0x0
   515   000001                     	ds	1
   516   000002                     Delay2ms@k:
   517                           	callstack 0
   518   000002                     lcdCommand4bits@cmd:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x1
   522   000002                     	ds	1
   523   000003                     ??_digitalRead:
   524   000003                     ?_eventRead:
   525                           	callstack 0
   526   000003                     lcdCommand@cmd:
   527                           	callstack 0
   528   000003                     lcdData@valor:
   529                           	callstack 0
   530   000003                     digitalWrite@value:
   531                           	callstack 0
   532   000003                     pinMode@type:
   533                           	callstack 0
   534   000003                     getAlarmLevel@l:
   535                           	callstack 0
   536   000003                     ___awdiv@divisor:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0x2
   540   000003                     	ds	1
   541   000004                     lcdInit@i:
   542                           	callstack 0
   543   000004                     lcdString@str:
   544                           	callstack 0
   545   000004                     kpDebounce@bits:
   546                           	callstack 0
   547                           
   548                           ; 5 bytes @ 0x3
   549   000004                     	ds	1
   550   000005                     ??_digitalWrite:
   551   000005                     ??_pinMode:
   552   000005                     ??_eventRead:
   553   000005                     ___awdiv@counter:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x4
   557   000005                     	ds	1
   558   000006                     eventRead@prot:
   559                           	callstack 0
   560   000006                     ___awdiv@sign:
   561                           	callstack 0
   562                           
   563                           ; 1 bytes @ 0x5
   564   000006                     	ds	1
   565   000007                     i2c_write_bit@bit:
   566                           	callstack 0
   567   000007                     i2c_read_bit@bit:
   568                           	callstack 0
   569   000007                     eventRead@ev:
   570                           	callstack 0
   571   000007                     ___awdiv@quotient:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x6
   575   000007                     	ds	1
   576   000008                     i2cWriteByte@send_stop:
   577                           	callstack 0
   578   000008                     i2cReadByte@send_stop:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x7
   582   000008                     	ds	1
   583   000009                     ??_i2cReadByte:
   584   000009                     ?___wmul:
   585                           	callstack 0
   586   000009                     ?___awmod:
   587                           	callstack 0
   588   000009                     i2cWriteByte@byte:
   589                           	callstack 0
   590   000009                     eventRead@data:
   591                           	callstack 0
   592   000009                     ___wmul@multiplier:
   593                           	callstack 0
   594   000009                     ___awmod@dividend:
   595                           	callstack 0
   596   000009                     kpDebounce@portes:
   597                           	callstack 0
   598                           
   599                           ; 5 bytes @ 0x8
   600   000009                     	ds	1
   601   00000A                     i2cWriteByte@send_start:
   602                           	callstack 0
   603   00000A                     i2cReadByte@nack:
   604                           	callstack 0
   605   00000A                     eventRead@key:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x9
   609   00000A                     	ds	1
   610   00000B                     i2cWriteByte@bit:
   611                           	callstack 0
   612   00000B                     i2cReadByte@bit:
   613                           	callstack 0
   614   00000B                     ___wmul@multiplicand:
   615                           	callstack 0
   616   00000B                     ___awmod@divisor:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0xA
   620   00000B                     	ds	2
   621   00000D                     i2cReadByte@byte:
   622                           	callstack 0
   623   00000D                     ___awmod@counter:
   624                           	callstack 0
   625   00000D                     ___wmul@product:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0xC
   629   00000D                     	ds	1
   630   00000E                     ?_dsReadData:
   631                           	callstack 0
   632   00000E                     kpDebounce@j:
   633                           	callstack 0
   634   00000E                     ___awmod@sign:
   635                           	callstack 0
   636   00000E                     dsReadData@address:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0xD
   640   00000E                     	ds	2
   641   000010                     ??_dsReadData:
   642                           
   643                           ; 1 bytes @ 0xF
   644   000010                     	ds	1
   645   000011                     dsReadData@result:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x10
   649   000011                     	ds	2
   650   000013                     ?_bcd2dec:
   651                           	callstack 0
   652   000013                     bcd2dec@value:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x12
   656   000013                     	ds	2
   657   000015                     ??_bcd2dec:
   658                           
   659                           ; 1 bytes @ 0x14
   660   000015                     	ds	2
   661   000017                     ?_dec2bcd:
   662                           	callstack 0
   663   000017                     dec2bcd@value:
   664                           	callstack 0
   665   000017                     lcdInt@val:
   666                           	callstack 0
   667                           
   668                           ; 2 bytes @ 0x16
   669   000017                     	ds	2
   670   000019                     ??_dec2bcd:
   671   000019                     lcdInt@digNum:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0x18
   675   000019                     	ds	1
   676   00001A                     ??_lcdInt:
   677                           
   678                           ; 1 bytes @ 0x19
   679   00001A                     	ds	1
   680   00001B                     lcdInt@j:
   681                           	callstack 0
   682                           
   683                           ; 2 bytes @ 0x1A
   684   00001B                     	ds	2
   685   00001D                     dsWriteData@address:
   686                           	callstack 0
   687   00001D                     lcdInt@divisor:
   688                           	callstack 0
   689                           
   690                           ; 2 bytes @ 0x1C
   691   00001D                     	ds	2
   692   00001F                     dsWriteData@value:
   693                           	callstack 0
   694   00001F                     lcdInt@i:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x1E
   698   00001F                     	ds	1
   699   000020                     setLanguage@newLanguage:
   700                           	callstack 0
   701   000020                     setAlarmLevel@newAlarmLevel:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x1F
   705   000020                     	ds	1
   706   000021                     outputPrint@numTela:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x20
   710   000021                     	ds	1
   711   000022                     setAlarmLevel@lh:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0x21
   715   000022                     	ds	1
   716   000023                     ??_varInit:
   717   000023                     outputPrint@idioma:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x22
   721   000023                     	ds	2
   722   000025                     ??_smLoop:
   723   000025                     _varInit$510:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x24
   727   000025                     	ds	1
   728   000026                     _smLoop$1419:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x25
   732   000026                     	ds	1
   733   000027                     _varInit$511:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x26
   737   000027                     	ds	1
   738   000028                     smLoop@evento:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0x27
   742   000028                     	ds	1
   743   000029                     _varInit$512:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x28
   747   000029                     	ds	2
   748   00002B                     
   749                           ; 1 bytes @ 0x2A
   750 ;;
   751 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   752 ;;
   753 ;; *************** function _main *****************
   754 ;; Defined at:
   755 ;;		line 23 in file "main.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;		None
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   769 ;;      Params:         0       0       0       0       0       0       0       0       0
   770 ;;      Locals:         0       0       0       0       0       0       0       0       0
   771 ;;      Temps:          0       0       0       0       0       0       0       0       0
   772 ;;      Totals:         0       0       0       0       0       0       0       0       0
   773 ;;Total ram usage:        0 bytes
   774 ;; Hardware stack levels required when called: 8
   775 ;; This function calls:
   776 ;;		_dsInit
   777 ;;		_kpDebounce
   778 ;;		_kpInit
   779 ;;		_lcdInit
   780 ;;		_serialInit
   781 ;;		_smInit
   782 ;;		_smLoop
   783 ;; This function is called by:
   784 ;;		Startup code after reset
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	text0
   789   00235A                     __ptext0:
   790                           	callstack 0
   791   00235A                     _main:
   792                           	callstack 23
   793   00235A                     
   794                           ;main.c: 26:     kpInit();
   795   00235A  ECA7  F012         	call	_kpInit	;wreg free
   796                           
   797                           ;main.c: 27:     lcdInit();
   798   00235E  ECDC  F00E         	call	_lcdInit	;wreg free
   799                           
   800                           ;main.c: 28:     dsInit();
   801   002362  ECBF  F012         	call	_dsInit	;wreg free
   802   002366                     
   803                           ;main.c: 29:     smInit();
   804   002366  EC9F  F012         	call	_smInit	;wreg free
   805   00236A                     
   806                           ;main.c: 30:     serialInit();
   807   00236A  EC64  F012         	call	_serialInit	;wreg free
   808   00236E                     
   809                           ;main.c: 31:     TRISA = 0x00;
   810   00236E  0E00               	movlw	0
   811   002370  6E92               	movwf	146,c	;volatile
   812   002372                     
   813                           ;main.c: 32:     LATA = 0x00;
   814   002372  0E00               	movlw	0
   815   002374  6E89               	movwf	137,c	;volatile
   816   002376                     l3711:
   817                           
   818                           ;main.c: 38:         kpDebounce();
   819   002376  EC40  F00D         	call	_kpDebounce	;wreg free
   820   00237A                     
   821                           ;main.c: 40:         smLoop();
   822   00237A  EC50  F004         	call	_smLoop	;wreg free
   823   00237E  EFBB  F011         	goto	l3711
   824   002382  EF00  F000         	goto	start
   825   002386                     __end_of_main:
   826                           	callstack 0
   827                           
   828 ;; *************** function _smLoop *****************
   829 ;; Defined at:
   830 ;;		line 18 in file "stateMachine.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  prot            1    0        PTR unsigned char 
   835 ;;		 -> prot(5), 
   836 ;;  evento          1   39[COMRAM] unsigned char 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   846 ;;      Params:         0       0       0       0       0       0       0       0       0
   847 ;;      Locals:         3       0       0       0       0       0       0       0       0
   848 ;;      Temps:          1       0       0       0       0       0       0       0       0
   849 ;;      Totals:         4       0       0       0       0       0       0       0       0
   850 ;;Total ram usage:        4 bytes
   851 ;; Hardware stack levels used: 1
   852 ;; Hardware stack levels required when called: 6
   853 ;; This function calls:
   854 ;;		_bcd2dec
   855 ;;		_dec2bcd
   856 ;;		_dsReadData
   857 ;;		_dsWriteData
   858 ;;		_eventRead
   859 ;;		_getAlarmLevel
   860 ;;		_getLanguage
   861 ;;		_getProt
   862 ;;		_getState
   863 ;;		_outputPrint
   864 ;;		_resetProt
   865 ;;		_setAlarmLevel
   866 ;;		_setLanguage
   867 ;;		_setState
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text1
   874   0008A0                     __ptext1:
   875                           	callstack 0
   876   0008A0                     _smLoop:
   877                           	callstack 24
   878   0008A0                     
   879                           ;stateMachine.c: 19:     unsigned char evento;;stateMachine.c: 22:     evento = eventRea
      +                          d();
   880   0008A0  ECC0  F00B         	call	_eventRead	;wreg free
   881   0008A4  5003               	movf	?_eventRead^0,w,c
   882   0008A6  6E28               	movwf	smLoop@evento^0,c
   883                           
   884                           ;stateMachine.c: 24:     switch (getState()) {
   885   0008A8  EF55  F006         	goto	l3683
   886   0008AC                     l3561:
   887                           
   888                           ;stateMachine.c: 26:             if (evento == EV_B_0) {
   889   0008AC  5028               	movf	smLoop@evento^0,w,c
   890   0008AE  A4D8               	btfss	status,2,c
   891   0008B0  EF5C  F004         	goto	u3091
   892   0008B4  EF5E  F004         	goto	u3090
   893   0008B8                     u3091:
   894   0008B8  EF6E  F004         	goto	l3565
   895   0008BC                     u3090:
   896   0008BC                     
   897                           ;stateMachine.c: 27:                 setAlarmLevel(getAlarmLevel(0) - 1, 0);
   898   0008BC  0E00               	movlw	0
   899   0008BE  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
   900   0008C0  0E00               	movlw	0
   901   0008C2  6E01               	movwf	getAlarmLevel@lh^0,c
   902   0008C4  ECC3  F011         	call	_getAlarmLevel	;wreg free
   903   0008C8  0EFF               	movlw	255
   904   0008CA  2401               	addwf	?_getAlarmLevel^0,w,c
   905   0008CC  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
   906   0008CE  0EFF               	movlw	255
   907   0008D0  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
   908   0008D2  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   909   0008D4  0E00               	movlw	0
   910   0008D6  6E22               	movwf	setAlarmLevel@lh^0,c
   911   0008D8  EC36  F010         	call	_setAlarmLevel	;wreg free
   912   0008DC                     l3565:
   913                           
   914                           ;stateMachine.c: 30:             if (evento == EV_B_1) {
   915   0008DC  0428               	decf	smLoop@evento^0,w,c
   916   0008DE  A4D8               	btfss	status,2,c
   917   0008E0  EF74  F004         	goto	u3101
   918   0008E4  EF76  F004         	goto	u3100
   919   0008E8                     u3101:
   920   0008E8  EF86  F004         	goto	l3569
   921   0008EC                     u3100:
   922   0008EC                     
   923                           ;stateMachine.c: 31:                 setAlarmLevel(getAlarmLevel(0) + 1, 0);
   924   0008EC  0E00               	movlw	0
   925   0008EE  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
   926   0008F0  0E00               	movlw	0
   927   0008F2  6E01               	movwf	getAlarmLevel@lh^0,c
   928   0008F4  ECC3  F011         	call	_getAlarmLevel	;wreg free
   929   0008F8  0E01               	movlw	1
   930   0008FA  2401               	addwf	?_getAlarmLevel^0,w,c
   931   0008FC  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
   932   0008FE  0E00               	movlw	0
   933   000900  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
   934   000902  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   935   000904  0E00               	movlw	0
   936   000906  6E22               	movwf	setAlarmLevel@lh^0,c
   937   000908  EC36  F010         	call	_setAlarmLevel	;wreg free
   938   00090C                     l3569:
   939                           
   940                           ;stateMachine.c: 34:             if (evento == EV_B_2) {
   941   00090C  0E02               	movlw	2
   942   00090E  1828               	xorwf	smLoop@evento^0,w,c
   943   000910  A4D8               	btfss	status,2,c
   944   000912  EF8D  F004         	goto	u3111
   945   000916  EF8F  F004         	goto	u3110
   946   00091A                     u3111:
   947   00091A  EF92  F004         	goto	l3573
   948   00091E                     u3110:
   949   00091E                     
   950                           ;stateMachine.c: 35:                 setState(STATE_TEMPOM);
   951   00091E  0E03               	movlw	3
   952   000920  ECB4  F012         	call	_setState
   953   000924                     l3573:
   954                           
   955                           ;stateMachine.c: 38:             if (evento == EV_B_3) {
   956   000924  0E03               	movlw	3
   957   000926  1828               	xorwf	smLoop@evento^0,w,c
   958   000928  A4D8               	btfss	status,2,c
   959   00092A  EF99  F004         	goto	u3121
   960   00092E  EF9B  F004         	goto	u3120
   961   000932                     u3121:
   962   000932  EF9E  F004         	goto	l3577
   963   000936                     u3120:
   964   000936                     
   965                           ;stateMachine.c: 39:                 setState(STATE_ALARMEH);
   966   000936  0E01               	movlw	1
   967   000938  ECB4  F012         	call	_setState
   968   00093C                     l3577:
   969                           
   970                           ;stateMachine.c: 42:             if(evento == EV_B_4)
   971   00093C  0E04               	movlw	4
   972   00093E  1828               	xorwf	smLoop@evento^0,w,c
   973   000940  A4D8               	btfss	status,2,c
   974   000942  EFA5  F004         	goto	u3131
   975   000946  EFA7  F004         	goto	u3130
   976   00094A                     u3131:
   977   00094A  EF71  F006         	goto	l3685
   978   00094E                     u3130:
   979   00094E                     
   980                           ;stateMachine.c: 43:             {;stateMachine.c: 44:                 setState(STATE_MA
      +                          IN);
   981   00094E  0E05               	movlw	5
   982   000950  ECB4  F012         	call	_setState
   983   000954                     
   984                           ;stateMachine.c: 45:                 estado_ant = STATE_ALARMEL;
   985   000954  0E00               	movlw	0
   986   000956  6E41               	movwf	_estado_ant^0,c
   987   000958  EF71  F006         	goto	l3685
   988   00095C                     l3583:
   989                           
   990                           ;stateMachine.c: 50:             if (evento == EV_B_0) {
   991   00095C  5028               	movf	smLoop@evento^0,w,c
   992   00095E  A4D8               	btfss	status,2,c
   993   000960  EFB4  F004         	goto	u3141
   994   000964  EFB6  F004         	goto	u3140
   995   000968                     u3141:
   996   000968  EFC6  F004         	goto	l3587
   997   00096C                     u3140:
   998   00096C                     
   999                           ;stateMachine.c: 51:                 setAlarmLevel(getAlarmLevel(1) - 1, 1);
  1000   00096C  0E00               	movlw	0
  1001   00096E  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1002   000970  0E01               	movlw	1
  1003   000972  6E01               	movwf	getAlarmLevel@lh^0,c
  1004   000974  ECC3  F011         	call	_getAlarmLevel	;wreg free
  1005   000978  0EFF               	movlw	255
  1006   00097A  2401               	addwf	?_getAlarmLevel^0,w,c
  1007   00097C  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1008   00097E  0EFF               	movlw	255
  1009   000980  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1010   000982  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1011   000984  0E01               	movlw	1
  1012   000986  6E22               	movwf	setAlarmLevel@lh^0,c
  1013   000988  EC36  F010         	call	_setAlarmLevel	;wreg free
  1014   00098C                     l3587:
  1015                           
  1016                           ;stateMachine.c: 54:             if (evento == EV_B_1) {
  1017   00098C  0428               	decf	smLoop@evento^0,w,c
  1018   00098E  A4D8               	btfss	status,2,c
  1019   000990  EFCC  F004         	goto	u3151
  1020   000994  EFCE  F004         	goto	u3150
  1021   000998                     u3151:
  1022   000998  EFDE  F004         	goto	l3591
  1023   00099C                     u3150:
  1024   00099C                     
  1025                           ;stateMachine.c: 55:                 setAlarmLevel(getAlarmLevel(1) + 1, 1);
  1026   00099C  0E00               	movlw	0
  1027   00099E  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1028   0009A0  0E01               	movlw	1
  1029   0009A2  6E01               	movwf	getAlarmLevel@lh^0,c
  1030   0009A4  ECC3  F011         	call	_getAlarmLevel	;wreg free
  1031   0009A8  0E01               	movlw	1
  1032   0009AA  2401               	addwf	?_getAlarmLevel^0,w,c
  1033   0009AC  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1034   0009AE  0E00               	movlw	0
  1035   0009B0  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1036   0009B2  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1037   0009B4  0E01               	movlw	1
  1038   0009B6  6E22               	movwf	setAlarmLevel@lh^0,c
  1039   0009B8  EC36  F010         	call	_setAlarmLevel	;wreg free
  1040   0009BC                     l3591:
  1041                           
  1042                           ;stateMachine.c: 58:             if (evento == EV_B_2) {
  1043   0009BC  0E02               	movlw	2
  1044   0009BE  1828               	xorwf	smLoop@evento^0,w,c
  1045   0009C0  A4D8               	btfss	status,2,c
  1046   0009C2  EFE5  F004         	goto	u3161
  1047   0009C6  EFE7  F004         	goto	u3160
  1048   0009CA                     u3161:
  1049   0009CA  EFEA  F004         	goto	l3595
  1050   0009CE                     u3160:
  1051   0009CE                     
  1052                           ;stateMachine.c: 59:                 setState(STATE_ALARMEL);
  1053   0009CE  0E00               	movlw	0
  1054   0009D0  ECB4  F012         	call	_setState
  1055   0009D4                     l3595:
  1056                           
  1057                           ;stateMachine.c: 62:             if (evento == EV_B_3) {
  1058   0009D4  0E03               	movlw	3
  1059   0009D6  1828               	xorwf	smLoop@evento^0,w,c
  1060   0009D8  A4D8               	btfss	status,2,c
  1061   0009DA  EFF1  F004         	goto	u3171
  1062   0009DE  EFF3  F004         	goto	u3170
  1063   0009E2                     u3171:
  1064   0009E2  EFF6  F004         	goto	l3599
  1065   0009E6                     u3170:
  1066   0009E6                     
  1067                           ;stateMachine.c: 63:                 setState(STATE_IDIOMA);
  1068   0009E6  0E04               	movlw	4
  1069   0009E8  ECB4  F012         	call	_setState
  1070   0009EC                     l3599:
  1071                           
  1072                           ;stateMachine.c: 66:             if(evento == EV_B_4)
  1073   0009EC  0E04               	movlw	4
  1074   0009EE  1828               	xorwf	smLoop@evento^0,w,c
  1075   0009F0  A4D8               	btfss	status,2,c
  1076   0009F2  EFFD  F004         	goto	u3181
  1077   0009F6  EFFF  F004         	goto	u3180
  1078   0009FA                     u3181:
  1079   0009FA  EF71  F006         	goto	l3685
  1080   0009FE                     u3180:
  1081   0009FE                     
  1082                           ;stateMachine.c: 67:             {;stateMachine.c: 68:                 setState(STATE_MA
      +                          IN);
  1083   0009FE  0E05               	movlw	5
  1084   000A00  ECB4  F012         	call	_setState
  1085   000A04                     
  1086                           ;stateMachine.c: 69:                 estado_ant = STATE_ALARMEH;
  1087   000A04  0E01               	movlw	1
  1088   000A06  6E41               	movwf	_estado_ant^0,c
  1089   000A08  EF71  F006         	goto	l3685
  1090   000A0C                     l3605:
  1091                           
  1092                           ;stateMachine.c: 77:             if (evento == EV_B_2) {
  1093   000A0C  0E02               	movlw	2
  1094   000A0E  1828               	xorwf	smLoop@evento^0,w,c
  1095   000A10  A4D8               	btfss	status,2,c
  1096   000A12  EF0D  F005         	goto	u3191
  1097   000A16  EF0F  F005         	goto	u3190
  1098   000A1A                     u3191:
  1099   000A1A  EF12  F005         	goto	l3609
  1100   000A1E                     u3190:
  1101   000A1E                     
  1102                           ;stateMachine.c: 78:                 setState(STATE_ALARMEH);
  1103   000A1E  0E01               	movlw	1
  1104   000A20  ECB4  F012         	call	_setState
  1105   000A24                     l3609:
  1106                           
  1107                           ;stateMachine.c: 81:             if (evento == EV_B_3) {
  1108   000A24  0E03               	movlw	3
  1109   000A26  1828               	xorwf	smLoop@evento^0,w,c
  1110   000A28  A4D8               	btfss	status,2,c
  1111   000A2A  EF19  F005         	goto	u3201
  1112   000A2E  EF1B  F005         	goto	u3200
  1113   000A32                     u3201:
  1114   000A32  EF1E  F005         	goto	l3613
  1115   000A36                     u3200:
  1116   000A36                     
  1117                           ;stateMachine.c: 82:                 setState(STATE_TEMPO);
  1118   000A36  0E02               	movlw	2
  1119   000A38  ECB4  F012         	call	_setState
  1120   000A3C                     l3613:
  1121                           
  1122                           ;stateMachine.c: 85:             if(evento == EV_B_4)
  1123   000A3C  0E04               	movlw	4
  1124   000A3E  1828               	xorwf	smLoop@evento^0,w,c
  1125   000A40  A4D8               	btfss	status,2,c
  1126   000A42  EF25  F005         	goto	u3211
  1127   000A46  EF27  F005         	goto	u3210
  1128   000A4A                     u3211:
  1129   000A4A  EF2C  F005         	goto	l3619
  1130   000A4E                     u3210:
  1131   000A4E                     
  1132                           ;stateMachine.c: 86:             {;stateMachine.c: 87:                 setState(STATE_MA
      +                          IN);
  1133   000A4E  0E05               	movlw	5
  1134   000A50  ECB4  F012         	call	_setState
  1135   000A54                     
  1136                           ;stateMachine.c: 88:                 estado_ant = STATE_IDIOMA;
  1137   000A54  0E04               	movlw	4
  1138   000A56  6E41               	movwf	_estado_ant^0,c
  1139   000A58                     l3619:
  1140                           
  1141                           ;stateMachine.c: 91:             if (evento == EV_B_0) {
  1142   000A58  5028               	movf	smLoop@evento^0,w,c
  1143   000A5A  A4D8               	btfss	status,2,c
  1144   000A5C  EF32  F005         	goto	u3221
  1145   000A60  EF34  F005         	goto	u3220
  1146   000A64                     u3221:
  1147   000A64  EF3A  F005         	goto	l3623
  1148   000A68                     u3220:
  1149   000A68                     
  1150                           ;stateMachine.c: 93:                 setLanguage(getLanguage() + 1);
  1151   000A68  ECC2  F012         	call	_getLanguage	;wreg free
  1152   000A6C  6E25               	movwf	??_smLoop^0,c
  1153   000A6E  2825               	incf	??_smLoop^0,w,c
  1154   000A70  EC71  F012         	call	_setLanguage
  1155   000A74                     l3623:
  1156                           
  1157                           ;stateMachine.c: 97:             if (evento == EV_B_1) {
  1158   000A74  0428               	decf	smLoop@evento^0,w,c
  1159   000A76  A4D8               	btfss	status,2,c
  1160   000A78  EF40  F005         	goto	u3231
  1161   000A7C  EF42  F005         	goto	u3230
  1162   000A80                     u3231:
  1163   000A80  EF71  F006         	goto	l3685
  1164   000A84                     u3230:
  1165   000A84                     
  1166                           ;stateMachine.c: 98:                 setLanguage(getLanguage() - 1);
  1167   000A84  ECC2  F012         	call	_getLanguage	;wreg free
  1168   000A88  6E25               	movwf	??_smLoop^0,c
  1169   000A8A  0425               	decf	??_smLoop^0,w,c
  1170   000A8C  EC71  F012         	call	_setLanguage
  1171   000A90  EF71  F006         	goto	l3685
  1172   000A94                     l3627:
  1173                           
  1174                           ;stateMachine.c: 106:             if (evento == EV_B_0) {
  1175   000A94  5028               	movf	smLoop@evento^0,w,c
  1176   000A96  A4D8               	btfss	status,2,c
  1177   000A98  EF50  F005         	goto	u3241
  1178   000A9C  EF52  F005         	goto	u3240
  1179   000AA0                     u3241:
  1180   000AA0  EF6D  F005         	goto	l3631
  1181   000AA4                     u3240:
  1182   000AA4                     
  1183                           ;stateMachine.c: 108:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x
      +                          7f)) - 1),0x02));
  1184   000AA4  0E00               	movlw	0
  1185   000AA6  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1186   000AA8  0E02               	movlw	2
  1187   000AAA  6E1D               	movwf	dsWriteData@address^0,c
  1188   000AAC  0E00               	movlw	0
  1189   000AAE  6E0F               	movwf	(dsReadData@address+1)^0,c
  1190   000AB0  0E02               	movlw	2
  1191   000AB2  6E0E               	movwf	dsReadData@address^0,c
  1192   000AB4  EC7F  F010         	call	_dsReadData	;wreg free
  1193   000AB8  0E7F               	movlw	127
  1194   000ABA  140E               	andwf	?_dsReadData^0,w,c
  1195   000ABC  6E13               	movwf	bcd2dec@value^0,c
  1196   000ABE  6A14               	clrf	(bcd2dec@value+1)^0,c
  1197   000AC0  ECC5  F010         	call	_bcd2dec	;wreg free
  1198   000AC4  0EFF               	movlw	255
  1199   000AC6  2413               	addwf	?_bcd2dec^0,w,c
  1200   000AC8  6E17               	movwf	dec2bcd@value^0,c
  1201   000ACA  0EFF               	movlw	255
  1202   000ACC  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1203   000ACE  6E18               	movwf	(dec2bcd@value+1)^0,c
  1204   000AD0  EC54  F00F         	call	_dec2bcd	;wreg free
  1205   000AD4  5017               	movf	?_dec2bcd^0,w,c
  1206   000AD6  EC68  F011         	call	_dsWriteData
  1207   000ADA                     l3631:
  1208                           
  1209                           ;stateMachine.c: 110:             if (evento == EV_B_1) {
  1210   000ADA  0428               	decf	smLoop@evento^0,w,c
  1211   000ADC  A4D8               	btfss	status,2,c
  1212   000ADE  EF73  F005         	goto	u3251
  1213   000AE2  EF75  F005         	goto	u3250
  1214   000AE6                     u3251:
  1215   000AE6  EF90  F005         	goto	l3635
  1216   000AEA                     u3250:
  1217   000AEA                     
  1218                           ;stateMachine.c: 111:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x
      +                          7f)) + 1),0x02));
  1219   000AEA  0E00               	movlw	0
  1220   000AEC  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1221   000AEE  0E02               	movlw	2
  1222   000AF0  6E1D               	movwf	dsWriteData@address^0,c
  1223   000AF2  0E00               	movlw	0
  1224   000AF4  6E0F               	movwf	(dsReadData@address+1)^0,c
  1225   000AF6  0E02               	movlw	2
  1226   000AF8  6E0E               	movwf	dsReadData@address^0,c
  1227   000AFA  EC7F  F010         	call	_dsReadData	;wreg free
  1228   000AFE  0E7F               	movlw	127
  1229   000B00  140E               	andwf	?_dsReadData^0,w,c
  1230   000B02  6E13               	movwf	bcd2dec@value^0,c
  1231   000B04  6A14               	clrf	(bcd2dec@value+1)^0,c
  1232   000B06  ECC5  F010         	call	_bcd2dec	;wreg free
  1233   000B0A  0E01               	movlw	1
  1234   000B0C  2413               	addwf	?_bcd2dec^0,w,c
  1235   000B0E  6E17               	movwf	dec2bcd@value^0,c
  1236   000B10  0E00               	movlw	0
  1237   000B12  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1238   000B14  6E18               	movwf	(dec2bcd@value+1)^0,c
  1239   000B16  EC54  F00F         	call	_dec2bcd	;wreg free
  1240   000B1A  5017               	movf	?_dec2bcd^0,w,c
  1241   000B1C  EC68  F011         	call	_dsWriteData
  1242   000B20                     l3635:
  1243                           
  1244                           ;stateMachine.c: 113:             if (evento == EV_B_2) {
  1245   000B20  0E02               	movlw	2
  1246   000B22  1828               	xorwf	smLoop@evento^0,w,c
  1247   000B24  A4D8               	btfss	status,2,c
  1248   000B26  EF97  F005         	goto	u3261
  1249   000B2A  EF99  F005         	goto	u3260
  1250   000B2E                     u3261:
  1251   000B2E  EF9C  F005         	goto	l3639
  1252   000B32                     u3260:
  1253   000B32                     
  1254                           ;stateMachine.c: 114:                 setState(STATE_IDIOMA);
  1255   000B32  0E04               	movlw	4
  1256   000B34  ECB4  F012         	call	_setState
  1257   000B38                     l3639:
  1258                           
  1259                           ;stateMachine.c: 117:             if (evento == EV_B_3) {
  1260   000B38  0E03               	movlw	3
  1261   000B3A  1828               	xorwf	smLoop@evento^0,w,c
  1262   000B3C  A4D8               	btfss	status,2,c
  1263   000B3E  EFA3  F005         	goto	u3271
  1264   000B42  EFA5  F005         	goto	u3270
  1265   000B46                     u3271:
  1266   000B46  EFA8  F005         	goto	l3643
  1267   000B4A                     u3270:
  1268   000B4A                     
  1269                           ;stateMachine.c: 118:                 setState(STATE_TEMPOM);
  1270   000B4A  0E03               	movlw	3
  1271   000B4C  ECB4  F012         	call	_setState
  1272   000B50                     l3643:
  1273                           
  1274                           ;stateMachine.c: 121:             if(evento == EV_B_4)
  1275   000B50  0E04               	movlw	4
  1276   000B52  1828               	xorwf	smLoop@evento^0,w,c
  1277   000B54  A4D8               	btfss	status,2,c
  1278   000B56  EFAF  F005         	goto	u3281
  1279   000B5A  EFB1  F005         	goto	u3280
  1280   000B5E                     u3281:
  1281   000B5E  EF71  F006         	goto	l3685
  1282   000B62                     u3280:
  1283   000B62                     
  1284                           ;stateMachine.c: 122:             {;stateMachine.c: 123:                 setState(STATE_
      +                          MAIN);
  1285   000B62  0E05               	movlw	5
  1286   000B64  ECB4  F012         	call	_setState
  1287   000B68                     l3647:
  1288                           
  1289                           ;stateMachine.c: 124:                 estado_ant = STATE_TEMPO;
  1290   000B68  0E02               	movlw	2
  1291   000B6A  6E41               	movwf	_estado_ant^0,c
  1292   000B6C  EF71  F006         	goto	l3685
  1293   000B70                     l3649:
  1294                           
  1295                           ;stateMachine.c: 132:             if (evento == EV_B_0) {
  1296   000B70  5028               	movf	smLoop@evento^0,w,c
  1297   000B72  A4D8               	btfss	status,2,c
  1298   000B74  EFBE  F005         	goto	u3291
  1299   000B78  EFC0  F005         	goto	u3290
  1300   000B7C                     u3291:
  1301   000B7C  EFDB  F005         	goto	l3653
  1302   000B80                     u3290:
  1303   000B80                     
  1304                           ;stateMachine.c: 134:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) - 1),0x01));
  1305   000B80  0E00               	movlw	0
  1306   000B82  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1307   000B84  0E01               	movlw	1
  1308   000B86  6E1D               	movwf	dsWriteData@address^0,c
  1309   000B88  0E00               	movlw	0
  1310   000B8A  6E0F               	movwf	(dsReadData@address+1)^0,c
  1311   000B8C  0E01               	movlw	1
  1312   000B8E  6E0E               	movwf	dsReadData@address^0,c
  1313   000B90  EC7F  F010         	call	_dsReadData	;wreg free
  1314   000B94  0E7F               	movlw	127
  1315   000B96  140E               	andwf	?_dsReadData^0,w,c
  1316   000B98  6E13               	movwf	bcd2dec@value^0,c
  1317   000B9A  6A14               	clrf	(bcd2dec@value+1)^0,c
  1318   000B9C  ECC5  F010         	call	_bcd2dec	;wreg free
  1319   000BA0  0EFF               	movlw	255
  1320   000BA2  2413               	addwf	?_bcd2dec^0,w,c
  1321   000BA4  6E17               	movwf	dec2bcd@value^0,c
  1322   000BA6  0EFF               	movlw	255
  1323   000BA8  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1324   000BAA  6E18               	movwf	(dec2bcd@value+1)^0,c
  1325   000BAC  EC54  F00F         	call	_dec2bcd	;wreg free
  1326   000BB0  5017               	movf	?_dec2bcd^0,w,c
  1327   000BB2  EC68  F011         	call	_dsWriteData
  1328   000BB6                     l3653:
  1329                           
  1330                           ;stateMachine.c: 136:             if (evento == EV_B_1) {
  1331   000BB6  0428               	decf	smLoop@evento^0,w,c
  1332   000BB8  A4D8               	btfss	status,2,c
  1333   000BBA  EFE1  F005         	goto	u3301
  1334   000BBE  EFE3  F005         	goto	u3300
  1335   000BC2                     u3301:
  1336   000BC2  EFFE  F005         	goto	l3657
  1337   000BC6                     u3300:
  1338   000BC6                     
  1339                           ;stateMachine.c: 137:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) + 1),0x01));
  1340   000BC6  0E00               	movlw	0
  1341   000BC8  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1342   000BCA  0E01               	movlw	1
  1343   000BCC  6E1D               	movwf	dsWriteData@address^0,c
  1344   000BCE  0E00               	movlw	0
  1345   000BD0  6E0F               	movwf	(dsReadData@address+1)^0,c
  1346   000BD2  0E01               	movlw	1
  1347   000BD4  6E0E               	movwf	dsReadData@address^0,c
  1348   000BD6  EC7F  F010         	call	_dsReadData	;wreg free
  1349   000BDA  0E7F               	movlw	127
  1350   000BDC  140E               	andwf	?_dsReadData^0,w,c
  1351   000BDE  6E13               	movwf	bcd2dec@value^0,c
  1352   000BE0  6A14               	clrf	(bcd2dec@value+1)^0,c
  1353   000BE2  ECC5  F010         	call	_bcd2dec	;wreg free
  1354   000BE6  0E01               	movlw	1
  1355   000BE8  2413               	addwf	?_bcd2dec^0,w,c
  1356   000BEA  6E17               	movwf	dec2bcd@value^0,c
  1357   000BEC  0E00               	movlw	0
  1358   000BEE  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1359   000BF0  6E18               	movwf	(dec2bcd@value+1)^0,c
  1360   000BF2  EC54  F00F         	call	_dec2bcd	;wreg free
  1361   000BF6  5017               	movf	?_dec2bcd^0,w,c
  1362   000BF8  EC68  F011         	call	_dsWriteData
  1363   000BFC                     l3657:
  1364                           
  1365                           ;stateMachine.c: 139:             if (evento == EV_B_2) {
  1366   000BFC  0E02               	movlw	2
  1367   000BFE  1828               	xorwf	smLoop@evento^0,w,c
  1368   000C00  A4D8               	btfss	status,2,c
  1369   000C02  EF05  F006         	goto	u3311
  1370   000C06  EF07  F006         	goto	u3310
  1371   000C0A                     u3311:
  1372   000C0A  EF0A  F006         	goto	l3661
  1373   000C0E                     u3310:
  1374   000C0E                     
  1375                           ;stateMachine.c: 140:                 setState(STATE_TEMPO);
  1376   000C0E  0E02               	movlw	2
  1377   000C10  ECB4  F012         	call	_setState
  1378   000C14                     l3661:
  1379                           
  1380                           ;stateMachine.c: 143:             if (evento == EV_B_3) {
  1381   000C14  0E03               	movlw	3
  1382   000C16  1828               	xorwf	smLoop@evento^0,w,c
  1383   000C18  A4D8               	btfss	status,2,c
  1384   000C1A  EF11  F006         	goto	u3321
  1385   000C1E  EF13  F006         	goto	u3320
  1386   000C22                     u3321:
  1387   000C22  EF16  F006         	goto	l3665
  1388   000C26                     u3320:
  1389   000C26                     
  1390                           ;stateMachine.c: 144:                 setState(STATE_ALARMEL);
  1391   000C26  0E00               	movlw	0
  1392   000C28  ECB4  F012         	call	_setState
  1393   000C2C                     l3665:
  1394                           
  1395                           ;stateMachine.c: 147:             if(evento == EV_B_4)
  1396   000C2C  0E04               	movlw	4
  1397   000C2E  1828               	xorwf	smLoop@evento^0,w,c
  1398   000C30  A4D8               	btfss	status,2,c
  1399   000C32  EF1D  F006         	goto	u3331
  1400   000C36  EF1F  F006         	goto	u3330
  1401   000C3A                     u3331:
  1402   000C3A  EF71  F006         	goto	l3685
  1403   000C3E                     u3330:
  1404   000C3E                     
  1405                           ;stateMachine.c: 148:             {;stateMachine.c: 149:                 setState(STATE_
      +                          MAIN);
  1406   000C3E  0E05               	movlw	5
  1407   000C40  ECB4  F012         	call	_setState
  1408   000C44  EFB4  F005         	goto	l3647
  1409   000C48                     l3671:
  1410                           
  1411                           ;stateMachine.c: 156:             if(evento == EV_B_4)
  1412   000C48  0E04               	movlw	4
  1413   000C4A  1828               	xorwf	smLoop@evento^0,w,c
  1414   000C4C  A4D8               	btfss	status,2,c
  1415   000C4E  EF2B  F006         	goto	u3341
  1416   000C52  EF2D  F006         	goto	u3340
  1417   000C56                     u3341:
  1418   000C56  EF30  F006         	goto	l3675
  1419   000C5A                     u3340:
  1420   000C5A                     
  1421                           ;stateMachine.c: 157:                 setState(estado_ant);
  1422   000C5A  5041               	movf	_estado_ant^0,w,c
  1423   000C5C  ECB4  F012         	call	_setState
  1424   000C60                     l3675:
  1425                           
  1426                           ;stateMachine.c: 159:             if(evento == EV_B_0)
  1427   000C60  5028               	movf	smLoop@evento^0,w,c
  1428   000C62  A4D8               	btfss	status,2,c
  1429   000C64  EF36  F006         	goto	u3351
  1430   000C68  EF38  F006         	goto	u3350
  1431   000C6C                     u3351:
  1432   000C6C  EF71  F006         	goto	l3685
  1433   000C70                     u3350:
  1434   000C70                     
  1435                           ;stateMachine.c: 160:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) + 1),0x01));
  1436   000C70  0E00               	movlw	0
  1437   000C72  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1438   000C74  0E01               	movlw	1
  1439   000C76  6E1D               	movwf	dsWriteData@address^0,c
  1440   000C78  0E00               	movlw	0
  1441   000C7A  6E0F               	movwf	(dsReadData@address+1)^0,c
  1442   000C7C  0E01               	movlw	1
  1443   000C7E  6E0E               	movwf	dsReadData@address^0,c
  1444   000C80  EC7F  F010         	call	_dsReadData	;wreg free
  1445   000C84  0E7F               	movlw	127
  1446   000C86  140E               	andwf	?_dsReadData^0,w,c
  1447   000C88  6E13               	movwf	bcd2dec@value^0,c
  1448   000C8A  6A14               	clrf	(bcd2dec@value+1)^0,c
  1449   000C8C  ECC5  F010         	call	_bcd2dec	;wreg free
  1450   000C90  0E01               	movlw	1
  1451   000C92  2413               	addwf	?_bcd2dec^0,w,c
  1452   000C94  6E17               	movwf	dec2bcd@value^0,c
  1453   000C96  0E00               	movlw	0
  1454   000C98  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1455   000C9A  6E18               	movwf	(dec2bcd@value+1)^0,c
  1456   000C9C  EC54  F00F         	call	_dec2bcd	;wreg free
  1457   000CA0  5017               	movf	?_dec2bcd^0,w,c
  1458   000CA2  EC68  F011         	call	_dsWriteData
  1459   000CA6  EF71  F006         	goto	l3685
  1460   000CAA                     l3683:
  1461   000CAA  ECC4  F012         	call	_getState	;wreg free
  1462                           
  1463                           ; Switch size 1, requested type "simple"
  1464                           ; Number of cases is 6, Range of values is 0 to 5
  1465                           ; switch strategies available:
  1466                           ; Name         Instructions Cycles
  1467                           ; simple_byte           19    10 (average)
  1468                           ;	Chosen strategy is simple_byte
  1469   000CAE  0A00               	xorlw	0	; case 0
  1470   000CB0  B4D8               	btfsc	status,2,c
  1471   000CB2  EF56  F004         	goto	l3561
  1472   000CB6  0A01               	xorlw	1	; case 1
  1473   000CB8  B4D8               	btfsc	status,2,c
  1474   000CBA  EFAE  F004         	goto	l3583
  1475   000CBE  0A03               	xorlw	3	; case 2
  1476   000CC0  B4D8               	btfsc	status,2,c
  1477   000CC2  EF4A  F005         	goto	l3627
  1478   000CC6  0A01               	xorlw	1	; case 3
  1479   000CC8  B4D8               	btfsc	status,2,c
  1480   000CCA  EFB8  F005         	goto	l3649
  1481   000CCE  0A07               	xorlw	7	; case 4
  1482   000CD0  B4D8               	btfsc	status,2,c
  1483   000CD2  EF06  F005         	goto	l3605
  1484   000CD6  0A01               	xorlw	1	; case 5
  1485   000CD8  B4D8               	btfsc	status,2,c
  1486   000CDA  EF24  F006         	goto	l3671
  1487   000CDE  EF71  F006         	goto	l3685
  1488   000CE2                     l3685:
  1489                           
  1490                           ;stateMachine.c: 168:     if (evento == EV_PROT_SERIAL) {
  1491   000CE2  0E05               	movlw	5
  1492   000CE4  1828               	xorwf	smLoop@evento^0,w,c
  1493   000CE6  A4D8               	btfss	status,2,c
  1494   000CE8  EF78  F006         	goto	u3361
  1495   000CEC  EF7A  F006         	goto	u3360
  1496   000CF0                     u3361:
  1497   000CF0  EF7E  F006         	goto	l3693
  1498   000CF4                     u3360:
  1499   000CF4  ECC8  F012         	call	_getProt	;wreg free
  1500   000CF8                     
  1501                           ;stateMachine.c: 178:         resetProt();
  1502   000CF8  EC51  F011         	call	_resetProt	;wreg free
  1503   000CFC                     l3693:
  1504                           
  1505                           ;stateMachine.c: 181:     outputPrint(getState(), getLanguage());
  1506   000CFC  ECC2  F012         	call	_getLanguage	;wreg free
  1507   000D00  6E25               	movwf	??_smLoop^0,c
  1508   000D02  5025               	movf	??_smLoop^0,w,c
  1509   000D04  6E26               	movwf	_smLoop$1419^0,c
  1510   000D06  6A27               	clrf	(_smLoop$1419+1)^0,c
  1511   000D08                     
  1512                           ;stateMachine.c: 181:     outputPrint(getState(), getLanguage());
  1513   000D08  ECC4  F012         	call	_getState	;wreg free
  1514   000D0C  6E25               	movwf	??_smLoop^0,c
  1515   000D0E  5025               	movf	??_smLoop^0,w,c
  1516   000D10  6E21               	movwf	outputPrint@numTela^0,c
  1517   000D12  6A22               	clrf	(outputPrint@numTela+1)^0,c
  1518   000D14  C026  F023         	movff	_smLoop$1419,outputPrint@idioma
  1519   000D18  C027  F024         	movff	_smLoop$1419+1,outputPrint@idioma+1
  1520   000D1C  EC91  F006         	call	_outputPrint	;wreg free
  1521   000D20  0012               	return		;funcret
  1522   000D22                     __end_of_smLoop:
  1523                           	callstack 0
  1524                           
  1525 ;; *************** function _setLanguage *****************
  1526 ;; Defined at:
  1527 ;;		line 82 in file "var.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  newLanguage     1    wreg     unsigned char 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  newLanguage     1   31[COMRAM] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, status,0, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1541 ;;      Params:         0       0       0       0       0       0       0       0       0
  1542 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1544 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1545 ;;Total ram usage:        1 bytes
  1546 ;; Hardware stack levels used: 1
  1547 ;; Hardware stack levels required when called: 5
  1548 ;; This function calls:
  1549 ;;		_dsWriteData
  1550 ;; This function is called by:
  1551 ;;		_smLoop
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text2
  1556   0024E2                     __ptext2:
  1557                           	callstack 0
  1558   0024E2                     _setLanguage:
  1559                           	callstack 24
  1560                           
  1561                           ;incstack = 0
  1562                           ;setLanguage@newLanguage stored from wreg
  1563   0024E2  6E20               	movwf	setLanguage@newLanguage^0,c
  1564   0024E4                     
  1565                           ;var.c: 85:     language = newLanguage % 2;
  1566   0024E4  5020               	movf	setLanguage@newLanguage^0,w,c
  1567   0024E6  0B01               	andlw	1
  1568   0024E8  6E3F               	movwf	_language^0,c
  1569   0024EA                     
  1570                           ;var.c: 86:     dsWriteData(language, 0x23);
  1571   0024EA  0E00               	movlw	0
  1572   0024EC  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1573   0024EE  0E23               	movlw	35
  1574   0024F0  6E1D               	movwf	dsWriteData@address^0,c
  1575   0024F2  503F               	movf	_language^0,w,c
  1576   0024F4  EC68  F011         	call	_dsWriteData
  1577   0024F8  0012               	return		;funcret
  1578   0024FA                     __end_of_setLanguage:
  1579                           	callstack 0
  1580                           
  1581 ;; *************** function _resetProt *****************
  1582 ;; Defined at:
  1583 ;;		line 101 in file "var.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;		None
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  i               1    0[COMRAM] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  1    wreg      void 
  1590 ;; Registers used:
  1591 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1597 ;;      Params:         0       0       0       0       0       0       0       0       0
  1598 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1600 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1601 ;;Total ram usage:        1 bytes
  1602 ;; Hardware stack levels used: 1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_smLoop
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text3
  1611   0022A2                     __ptext3:
  1612                           	callstack 0
  1613   0022A2                     _resetProt:
  1614                           	callstack 29
  1615   0022A2                     
  1616                           ;var.c: 103:     char i = 0;
  1617   0022A2  0E00               	movlw	0
  1618   0022A4  6E01               	movwf	resetProt@i^0,c
  1619                           
  1620                           ;var.c: 104:     while (i < 5)
  1621   0022A6  EF5B  F011         	goto	l3531
  1622   0022AA                     l3527:
  1623                           
  1624                           ;var.c: 105:     {;var.c: 106:         prot[i] = 0;
  1625   0022AA  5001               	movf	resetProt@i^0,w,c
  1626   0022AC  0F4E               	addlw	low _prot
  1627   0022AE  6ED9               	movwf	fsr2l,c
  1628   0022B0  6ADA               	clrf	fsr2h,c
  1629   0022B2  6ADF               	clrf	indf2,c
  1630   0022B4                     
  1631                           ;var.c: 107:         i++;
  1632   0022B4  2A01               	incf	resetProt@i^0,f,c
  1633   0022B6                     l3531:
  1634                           
  1635                           ;var.c: 104:     while (i < 5)
  1636   0022B6  0E04               	movlw	4
  1637   0022B8  6401               	cpfsgt	resetProt@i^0,c
  1638   0022BA  EF61  F011         	goto	u3071
  1639   0022BE  EF63  F011         	goto	u3070
  1640   0022C2                     u3071:
  1641   0022C2  EF55  F011         	goto	l3527
  1642   0022C6                     u3070:
  1643   0022C6                     
  1644                           ;var.c: 109:     prot_ready = 0;
  1645   0022C6  0E00               	movlw	0
  1646   0022C8  6E42               	movwf	_prot_ready^0,c
  1647                           
  1648                           ;var.c: 110:     index = 0;
  1649   0022CA  0E00               	movlw	0
  1650   0022CC  6E3C               	movwf	_index^0,c
  1651   0022CE  0012               	return		;funcret
  1652   0022D0                     __end_of_resetProt:
  1653                           	callstack 0
  1654                           
  1655 ;; *************** function _outputPrint *****************
  1656 ;; Defined at:
  1657 ;;		line 23 in file "output.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  numTela         2   32[COMRAM] int 
  1660 ;;  idioma          2   34[COMRAM] int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1672 ;;      Params:         4       0       0       0       0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1675 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1676 ;;Total ram usage:        4 bytes
  1677 ;; Hardware stack levels used: 1
  1678 ;; Hardware stack levels required when called: 5
  1679 ;; This function calls:
  1680 ;;		_bcd2dec
  1681 ;;		_dsReadData
  1682 ;;		_getAlarmLevel
  1683 ;;		_getLanguage
  1684 ;;		_lcdCommand
  1685 ;;		_lcdData
  1686 ;;		_lcdInt
  1687 ;;		_lcdString
  1688 ;; This function is called by:
  1689 ;;		_smLoop
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text4
  1694   000D22                     __ptext4:
  1695                           	callstack 0
  1696   000D22                     _outputPrint:
  1697                           	callstack 24
  1698   000D22                     
  1699                           ;output.c: 25:     if (numTela == STATE_TEMPO) {
  1700   000D22  0E02               	movlw	2
  1701   000D24  1821               	xorwf	outputPrint@numTela^0,w,c
  1702   000D26  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1703   000D28  A4D8               	btfss	status,2,c
  1704   000D2A  EF99  F006         	goto	u2931
  1705   000D2E  EF9B  F006         	goto	u2930
  1706   000D32                     u2931:
  1707   000D32  EFF5  F006         	goto	l3379
  1708   000D36                     u2930:
  1709   000D36                     
  1710                           ;output.c: 26:         lcdCommand(0x80);
  1711   000D36  0E80               	movlw	128
  1712   000D38  EC5B  F010         	call	_lcdCommand
  1713   000D3C                     
  1714                           ;output.c: 27:         lcdString(msgs[numTela][idioma]);
  1715   000D3C  5021               	movf	outputPrint@numTela^0,w,c
  1716   000D3E  0D02               	mullw	2
  1717   000D40  50F3               	movf	243,w,c
  1718   000D42  0F60               	addlw	low _msgs
  1719   000D44  2423               	addwf	outputPrint@idioma^0,w,c
  1720   000D46  6ED9               	movwf	fsr2l,c
  1721   000D48  6ADA               	clrf	fsr2h,c
  1722   000D4A  50DF               	movf	indf2,w,c
  1723   000D4C  6E04               	movwf	lcdString@str^0,c
  1724   000D4E  EC1E  F011         	call	_lcdString	;wreg free
  1725   000D52                     
  1726                           ;output.c: 28:         lcdCommand(0xC0);
  1727   000D52  0EC0               	movlw	192
  1728   000D54  EC5B  F010         	call	_lcdCommand
  1729   000D58                     
  1730                           ;output.c: 30:         lcdData('>');
  1731   000D58  0E3E               	movlw	62
  1732   000D5A  EC55  F012         	call	_lcdData
  1733   000D5E                     
  1734                           ;output.c: 31:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  1735   000D5E  0E00               	movlw	0
  1736   000D60  6E0F               	movwf	(dsReadData@address+1)^0,c
  1737   000D62  0E02               	movlw	2
  1738   000D64  6E0E               	movwf	dsReadData@address^0,c
  1739   000D66  EC7F  F010         	call	_dsReadData	;wreg free
  1740   000D6A  0E7F               	movlw	127
  1741   000D6C  140E               	andwf	?_dsReadData^0,w,c
  1742   000D6E  6E13               	movwf	bcd2dec@value^0,c
  1743   000D70  6A14               	clrf	(bcd2dec@value+1)^0,c
  1744   000D72  ECC5  F010         	call	_bcd2dec	;wreg free
  1745   000D76  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1746   000D7A  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1747   000D7E  0E02               	movlw	2
  1748   000D80  6E19               	movwf	lcdInt@digNum^0,c
  1749   000D82  ECBE  F00D         	call	_lcdInt	;wreg free
  1750   000D86                     
  1751                           ;output.c: 32:         lcdData(':');
  1752   000D86  0E3A               	movlw	58
  1753   000D88  EC55  F012         	call	_lcdData
  1754   000D8C                     
  1755                           ;output.c: 33:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  1756   000D8C  0E00               	movlw	0
  1757   000D8E  6E0F               	movwf	(dsReadData@address+1)^0,c
  1758   000D90  0E01               	movlw	1
  1759   000D92  6E0E               	movwf	dsReadData@address^0,c
  1760   000D94  EC7F  F010         	call	_dsReadData	;wreg free
  1761   000D98  0E7F               	movlw	127
  1762   000D9A  140E               	andwf	?_dsReadData^0,w,c
  1763   000D9C  6E13               	movwf	bcd2dec@value^0,c
  1764   000D9E  6A14               	clrf	(bcd2dec@value+1)^0,c
  1765   000DA0  ECC5  F010         	call	_bcd2dec	;wreg free
  1766   000DA4  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1767   000DA8  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1768   000DAC  0E02               	movlw	2
  1769   000DAE  6E19               	movwf	lcdInt@digNum^0,c
  1770   000DB0  ECBE  F00D         	call	_lcdInt	;wreg free
  1771   000DB4                     
  1772                           ;output.c: 34:         lcdData(':');
  1773   000DB4  0E3A               	movlw	58
  1774   000DB6  EC55  F012         	call	_lcdData
  1775   000DBA                     
  1776                           ;output.c: 35:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  1777   000DBA  0E00               	movlw	0
  1778   000DBC  6E0F               	movwf	(dsReadData@address+1)^0,c
  1779   000DBE  0E00               	movlw	0
  1780   000DC0  6E0E               	movwf	dsReadData@address^0,c
  1781   000DC2  EC7F  F010         	call	_dsReadData	;wreg free
  1782   000DC6  0E7F               	movlw	127
  1783   000DC8  140E               	andwf	?_dsReadData^0,w,c
  1784   000DCA  6E13               	movwf	bcd2dec@value^0,c
  1785   000DCC  6A14               	clrf	(bcd2dec@value+1)^0,c
  1786   000DCE  ECC5  F010         	call	_bcd2dec	;wreg free
  1787   000DD2  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1788   000DD6  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1789   000DDA  0E02               	movlw	2
  1790   000DDC  6E19               	movwf	lcdInt@digNum^0,c
  1791   000DDE  ECBE  F00D         	call	_lcdInt	;wreg free
  1792   000DE2                     
  1793                           ;output.c: 36:         lcdString("           ");
  1794   000DE2  0E93               	movlw	low STR_11
  1795   000DE4  6E04               	movwf	lcdString@str^0,c
  1796   000DE6  EC1E  F011         	call	_lcdString	;wreg free
  1797   000DEA                     l3379:
  1798                           
  1799                           ;output.c: 38:     if (numTela == STATE_TEMPOM) {
  1800   000DEA  0E03               	movlw	3
  1801   000DEC  1821               	xorwf	outputPrint@numTela^0,w,c
  1802   000DEE  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1803   000DF0  A4D8               	btfss	status,2,c
  1804   000DF2  EFFD  F006         	goto	u2941
  1805   000DF6  EFFF  F006         	goto	u2940
  1806   000DFA                     u2941:
  1807   000DFA  EF59  F007         	goto	l3401
  1808   000DFE                     u2940:
  1809   000DFE                     
  1810                           ;output.c: 39:         lcdCommand(0x80);
  1811   000DFE  0E80               	movlw	128
  1812   000E00  EC5B  F010         	call	_lcdCommand
  1813   000E04                     
  1814                           ;output.c: 40:         lcdString(msgs[numTela][idioma]);
  1815   000E04  5021               	movf	outputPrint@numTela^0,w,c
  1816   000E06  0D02               	mullw	2
  1817   000E08  50F3               	movf	243,w,c
  1818   000E0A  0F60               	addlw	low _msgs
  1819   000E0C  2423               	addwf	outputPrint@idioma^0,w,c
  1820   000E0E  6ED9               	movwf	fsr2l,c
  1821   000E10  6ADA               	clrf	fsr2h,c
  1822   000E12  50DF               	movf	indf2,w,c
  1823   000E14  6E04               	movwf	lcdString@str^0,c
  1824   000E16  EC1E  F011         	call	_lcdString	;wreg free
  1825   000E1A                     
  1826                           ;output.c: 41:         lcdCommand(0xC0);
  1827   000E1A  0EC0               	movlw	192
  1828   000E1C  EC5B  F010         	call	_lcdCommand
  1829   000E20                     
  1830                           ;output.c: 43:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  1831   000E20  0E00               	movlw	0
  1832   000E22  6E0F               	movwf	(dsReadData@address+1)^0,c
  1833   000E24  0E02               	movlw	2
  1834   000E26  6E0E               	movwf	dsReadData@address^0,c
  1835   000E28  EC7F  F010         	call	_dsReadData	;wreg free
  1836   000E2C  0E7F               	movlw	127
  1837   000E2E  140E               	andwf	?_dsReadData^0,w,c
  1838   000E30  6E13               	movwf	bcd2dec@value^0,c
  1839   000E32  6A14               	clrf	(bcd2dec@value+1)^0,c
  1840   000E34  ECC5  F010         	call	_bcd2dec	;wreg free
  1841   000E38  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1842   000E3C  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1843   000E40  0E02               	movlw	2
  1844   000E42  6E19               	movwf	lcdInt@digNum^0,c
  1845   000E44  ECBE  F00D         	call	_lcdInt	;wreg free
  1846   000E48                     
  1847                           ;output.c: 44:         lcdData(':');
  1848   000E48  0E3A               	movlw	58
  1849   000E4A  EC55  F012         	call	_lcdData
  1850   000E4E                     
  1851                           ;output.c: 45:         lcdData('>');
  1852   000E4E  0E3E               	movlw	62
  1853   000E50  EC55  F012         	call	_lcdData
  1854   000E54                     
  1855                           ;output.c: 46:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  1856   000E54  0E00               	movlw	0
  1857   000E56  6E0F               	movwf	(dsReadData@address+1)^0,c
  1858   000E58  0E01               	movlw	1
  1859   000E5A  6E0E               	movwf	dsReadData@address^0,c
  1860   000E5C  EC7F  F010         	call	_dsReadData	;wreg free
  1861   000E60  0E7F               	movlw	127
  1862   000E62  140E               	andwf	?_dsReadData^0,w,c
  1863   000E64  6E13               	movwf	bcd2dec@value^0,c
  1864   000E66  6A14               	clrf	(bcd2dec@value+1)^0,c
  1865   000E68  ECC5  F010         	call	_bcd2dec	;wreg free
  1866   000E6C  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1867   000E70  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1868   000E74  0E02               	movlw	2
  1869   000E76  6E19               	movwf	lcdInt@digNum^0,c
  1870   000E78  ECBE  F00D         	call	_lcdInt	;wreg free
  1871   000E7C                     
  1872                           ;output.c: 47:         lcdData(':');
  1873   000E7C  0E3A               	movlw	58
  1874   000E7E  EC55  F012         	call	_lcdData
  1875   000E82                     
  1876                           ;output.c: 48:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  1877   000E82  0E00               	movlw	0
  1878   000E84  6E0F               	movwf	(dsReadData@address+1)^0,c
  1879   000E86  0E00               	movlw	0
  1880   000E88  6E0E               	movwf	dsReadData@address^0,c
  1881   000E8A  EC7F  F010         	call	_dsReadData	;wreg free
  1882   000E8E  0E7F               	movlw	127
  1883   000E90  140E               	andwf	?_dsReadData^0,w,c
  1884   000E92  6E13               	movwf	bcd2dec@value^0,c
  1885   000E94  6A14               	clrf	(bcd2dec@value+1)^0,c
  1886   000E96  ECC5  F010         	call	_bcd2dec	;wreg free
  1887   000E9A  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1888   000E9E  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1889   000EA2  0E02               	movlw	2
  1890   000EA4  6E19               	movwf	lcdInt@digNum^0,c
  1891   000EA6  ECBE  F00D         	call	_lcdInt	;wreg free
  1892   000EAA                     
  1893                           ;output.c: 49:         lcdString("           ");
  1894   000EAA  0E93               	movlw	low STR_11
  1895   000EAC  6E04               	movwf	lcdString@str^0,c
  1896   000EAE  EC1E  F011         	call	_lcdString	;wreg free
  1897   000EB2                     l3401:
  1898                           
  1899                           ;output.c: 51:     if (numTela == STATE_ALARMEL) {
  1900   000EB2  5021               	movf	outputPrint@numTela^0,w,c
  1901   000EB4  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1902   000EB6  A4D8               	btfss	status,2,c
  1903   000EB8  EF60  F007         	goto	u2951
  1904   000EBC  EF62  F007         	goto	u2950
  1905   000EC0                     u2951:
  1906   000EC0  EFA3  F007         	goto	l3425
  1907   000EC4                     u2950:
  1908   000EC4                     
  1909                           ;output.c: 52:         lcdCommand(0x80);
  1910   000EC4  0E80               	movlw	128
  1911   000EC6  EC5B  F010         	call	_lcdCommand
  1912   000ECA                     
  1913                           ;output.c: 53:         lcdString(msgs[numTela][idioma]);
  1914   000ECA  5021               	movf	outputPrint@numTela^0,w,c
  1915   000ECC  0D02               	mullw	2
  1916   000ECE  50F3               	movf	243,w,c
  1917   000ED0  0F60               	addlw	low _msgs
  1918   000ED2  2423               	addwf	outputPrint@idioma^0,w,c
  1919   000ED4  6ED9               	movwf	fsr2l,c
  1920   000ED6  6ADA               	clrf	fsr2h,c
  1921   000ED8  50DF               	movf	indf2,w,c
  1922   000EDA  6E04               	movwf	lcdString@str^0,c
  1923   000EDC  EC1E  F011         	call	_lcdString	;wreg free
  1924   000EE0                     
  1925                           ;output.c: 54:         lcdCommand(0xC0);
  1926   000EE0  0EC0               	movlw	192
  1927   000EE2  EC5B  F010         	call	_lcdCommand
  1928   000EE6                     
  1929                           ;output.c: 55:         lcdData('>');
  1930   000EE6  0E3E               	movlw	62
  1931   000EE8  EC55  F012         	call	_lcdData
  1932   000EEC                     
  1933                           ;output.c: 56:         lcdInt(getAlarmLevel(0), 3);
  1934   000EEC  0E00               	movlw	0
  1935   000EEE  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1936   000EF0  0E00               	movlw	0
  1937   000EF2  6E01               	movwf	getAlarmLevel@lh^0,c
  1938   000EF4  ECC3  F011         	call	_getAlarmLevel	;wreg free
  1939   000EF8  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  1940   000EFC  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1941   000F00  0E03               	movlw	3
  1942   000F02  6E19               	movwf	lcdInt@digNum^0,c
  1943   000F04  ECBE  F00D         	call	_lcdInt	;wreg free
  1944   000F08                     
  1945                           ;output.c: 57:         lcdData('L');
  1946   000F08  0E4C               	movlw	76
  1947   000F0A  EC55  F012         	call	_lcdData
  1948   000F0E                     
  1949                           ;output.c: 58:         lcdString("   ");
  1950   000F0E  0E9B               	movlw	low (STR_11+8)
  1951   000F10  6E04               	movwf	lcdString@str^0,c
  1952   000F12  EC1E  F011         	call	_lcdString	;wreg free
  1953   000F16                     
  1954                           ;output.c: 59:         lcdData(' ');
  1955   000F16  0E20               	movlw	32
  1956   000F18  EC55  F012         	call	_lcdData
  1957   000F1C                     
  1958                           ;output.c: 60:         lcdInt(getAlarmLevel(1), 3);
  1959   000F1C  0E00               	movlw	0
  1960   000F1E  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1961   000F20  0E01               	movlw	1
  1962   000F22  6E01               	movwf	getAlarmLevel@lh^0,c
  1963   000F24  ECC3  F011         	call	_getAlarmLevel	;wreg free
  1964   000F28  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  1965   000F2C  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1966   000F30  0E03               	movlw	3
  1967   000F32  6E19               	movwf	lcdInt@digNum^0,c
  1968   000F34  ECBE  F00D         	call	_lcdInt	;wreg free
  1969   000F38                     
  1970                           ;output.c: 61:         lcdData('H');
  1971   000F38  0E48               	movlw	72
  1972   000F3A  EC55  F012         	call	_lcdData
  1973   000F3E                     
  1974                           ;output.c: 63:         lcdString("           ");
  1975   000F3E  0E93               	movlw	low STR_11
  1976   000F40  6E04               	movwf	lcdString@str^0,c
  1977   000F42  EC1E  F011         	call	_lcdString	;wreg free
  1978   000F46                     l3425:
  1979                           
  1980                           ;output.c: 65:     if (numTela == STATE_ALARMEH) {
  1981   000F46  0421               	decf	outputPrint@numTela^0,w,c
  1982   000F48  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1983   000F4A  A4D8               	btfss	status,2,c
  1984   000F4C  EFAA  F007         	goto	u2961
  1985   000F50  EFAC  F007         	goto	u2960
  1986   000F54                     u2961:
  1987   000F54  EFED  F007         	goto	l3449
  1988   000F58                     u2960:
  1989   000F58                     
  1990                           ;output.c: 66:         lcdCommand(0x80);
  1991   000F58  0E80               	movlw	128
  1992   000F5A  EC5B  F010         	call	_lcdCommand
  1993   000F5E                     
  1994                           ;output.c: 67:         lcdString(msgs[numTela][idioma]);
  1995   000F5E  5021               	movf	outputPrint@numTela^0,w,c
  1996   000F60  0D02               	mullw	2
  1997   000F62  50F3               	movf	243,w,c
  1998   000F64  0F60               	addlw	low _msgs
  1999   000F66  2423               	addwf	outputPrint@idioma^0,w,c
  2000   000F68  6ED9               	movwf	fsr2l,c
  2001   000F6A  6ADA               	clrf	fsr2h,c
  2002   000F6C  50DF               	movf	indf2,w,c
  2003   000F6E  6E04               	movwf	lcdString@str^0,c
  2004   000F70  EC1E  F011         	call	_lcdString	;wreg free
  2005   000F74                     
  2006                           ;output.c: 68:         lcdCommand(0xC0);
  2007   000F74  0EC0               	movlw	192
  2008   000F76  EC5B  F010         	call	_lcdCommand
  2009   000F7A                     
  2010                           ;output.c: 69:         lcdData(' ');
  2011   000F7A  0E20               	movlw	32
  2012   000F7C  EC55  F012         	call	_lcdData
  2013   000F80                     
  2014                           ;output.c: 70:         lcdInt(getAlarmLevel(0), 3);
  2015   000F80  0E00               	movlw	0
  2016   000F82  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2017   000F84  0E00               	movlw	0
  2018   000F86  6E01               	movwf	getAlarmLevel@lh^0,c
  2019   000F88  ECC3  F011         	call	_getAlarmLevel	;wreg free
  2020   000F8C  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  2021   000F90  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2022   000F94  0E03               	movlw	3
  2023   000F96  6E19               	movwf	lcdInt@digNum^0,c
  2024   000F98  ECBE  F00D         	call	_lcdInt	;wreg free
  2025   000F9C                     
  2026                           ;output.c: 71:         lcdData('L');
  2027   000F9C  0E4C               	movlw	76
  2028   000F9E  EC55  F012         	call	_lcdData
  2029   000FA2                     
  2030                           ;output.c: 72:         lcdString("   ");
  2031   000FA2  0E9B               	movlw	low (STR_11+8)
  2032   000FA4  6E04               	movwf	lcdString@str^0,c
  2033   000FA6  EC1E  F011         	call	_lcdString	;wreg free
  2034   000FAA                     
  2035                           ;output.c: 73:         lcdData('>');
  2036   000FAA  0E3E               	movlw	62
  2037   000FAC  EC55  F012         	call	_lcdData
  2038   000FB0                     
  2039                           ;output.c: 74:         lcdInt(getAlarmLevel(1), 3);
  2040   000FB0  0E00               	movlw	0
  2041   000FB2  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2042   000FB4  0E01               	movlw	1
  2043   000FB6  6E01               	movwf	getAlarmLevel@lh^0,c
  2044   000FB8  ECC3  F011         	call	_getAlarmLevel	;wreg free
  2045   000FBC  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  2046   000FC0  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2047   000FC4  0E03               	movlw	3
  2048   000FC6  6E19               	movwf	lcdInt@digNum^0,c
  2049   000FC8  ECBE  F00D         	call	_lcdInt	;wreg free
  2050   000FCC                     
  2051                           ;output.c: 75:         lcdData('H');
  2052   000FCC  0E48               	movlw	72
  2053   000FCE  EC55  F012         	call	_lcdData
  2054   000FD2                     
  2055                           ;output.c: 76:         lcdString("           ");
  2056   000FD2  0E93               	movlw	low STR_11
  2057   000FD4  6E04               	movwf	lcdString@str^0,c
  2058   000FD6  EC1E  F011         	call	_lcdString	;wreg free
  2059   000FDA                     l3449:
  2060                           
  2061                           ;output.c: 78:     if (numTela == STATE_IDIOMA) {
  2062   000FDA  0E04               	movlw	4
  2063   000FDC  1821               	xorwf	outputPrint@numTela^0,w,c
  2064   000FDE  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2065   000FE0  A4D8               	btfss	status,2,c
  2066   000FE2  EFF5  F007         	goto	u2971
  2067   000FE6  EFF7  F007         	goto	u2970
  2068   000FEA                     u2971:
  2069   000FEA  EF24  F008         	goto	l3465
  2070   000FEE                     u2970:
  2071   000FEE                     
  2072                           ;output.c: 79:         lcdCommand(0x80);
  2073   000FEE  0E80               	movlw	128
  2074   000FF0  EC5B  F010         	call	_lcdCommand
  2075   000FF4                     
  2076                           ;output.c: 80:         lcdString(msgs[numTela][idioma]);
  2077   000FF4  5021               	movf	outputPrint@numTela^0,w,c
  2078   000FF6  0D02               	mullw	2
  2079   000FF8  50F3               	movf	243,w,c
  2080   000FFA  0F60               	addlw	low _msgs
  2081   000FFC  2423               	addwf	outputPrint@idioma^0,w,c
  2082   000FFE  6ED9               	movwf	fsr2l,c
  2083   001000  6ADA               	clrf	fsr2h,c
  2084   001002  50DF               	movf	indf2,w,c
  2085   001004  6E04               	movwf	lcdString@str^0,c
  2086   001006  EC1E  F011         	call	_lcdString	;wreg free
  2087   00100A                     
  2088                           ;output.c: 81:         lcdCommand(0xC0);
  2089   00100A  0EC0               	movlw	192
  2090   00100C  EC5B  F010         	call	_lcdCommand
  2091   001010                     
  2092                           ;output.c: 82:         if (getLanguage() == 0) {
  2093   001010  ECC2  F012         	call	_getLanguage	;wreg free
  2094   001014  0900               	iorlw	0
  2095   001016  A4D8               	btfss	status,2,c
  2096   001018  EF10  F008         	goto	u2981
  2097   00101C  EF12  F008         	goto	u2980
  2098   001020                     u2981:
  2099   001020  EF16  F008         	goto	l3461
  2100   001024                     u2980:
  2101   001024                     
  2102                           ;output.c: 83:             lcdString("Portugues       ");
  2103   001024  0E22               	movlw	low STR_17
  2104   001026  6E04               	movwf	lcdString@str^0,c
  2105   001028  EC1E  F011         	call	_lcdString	;wreg free
  2106   00102C                     l3461:
  2107                           
  2108                           ;output.c: 85:         if (getLanguage() == 1) {
  2109   00102C  ECC2  F012         	call	_getLanguage	;wreg free
  2110   001030  06E8               	decf	wreg,f,c
  2111   001032  A4D8               	btfss	status,2,c
  2112   001034  EF1E  F008         	goto	u2991
  2113   001038  EF20  F008         	goto	u2990
  2114   00103C                     u2991:
  2115   00103C  EF24  F008         	goto	l3465
  2116   001040                     u2990:
  2117   001040                     
  2118                           ;output.c: 86:             lcdString("English         ");
  2119   001040  0E11               	movlw	low STR_18
  2120   001042  6E04               	movwf	lcdString@str^0,c
  2121   001044  EC1E  F011         	call	_lcdString	;wreg free
  2122   001048                     l3465:
  2123                           
  2124                           ;output.c: 91:     if (numTela == STATE_MAIN) {
  2125   001048  0E05               	movlw	5
  2126   00104A  1821               	xorwf	outputPrint@numTela^0,w,c
  2127   00104C  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2128   00104E  A4D8               	btfss	status,2,c
  2129   001050  EF2C  F008         	goto	u3001
  2130   001054  EF2E  F008         	goto	u3000
  2131   001058                     u3001:
  2132   001058  EF77  F008         	goto	l562
  2133   00105C                     u3000:
  2134   00105C                     
  2135                           ;output.c: 92:         lcdCommand(0x80);
  2136   00105C  0E80               	movlw	128
  2137   00105E  EC5B  F010         	call	_lcdCommand
  2138   001062                     
  2139                           ;output.c: 93:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  2140   001062  0E00               	movlw	0
  2141   001064  6E0F               	movwf	(dsReadData@address+1)^0,c
  2142   001066  0E02               	movlw	2
  2143   001068  6E0E               	movwf	dsReadData@address^0,c
  2144   00106A  EC7F  F010         	call	_dsReadData	;wreg free
  2145   00106E  0E7F               	movlw	127
  2146   001070  140E               	andwf	?_dsReadData^0,w,c
  2147   001072  6E13               	movwf	bcd2dec@value^0,c
  2148   001074  6A14               	clrf	(bcd2dec@value+1)^0,c
  2149   001076  ECC5  F010         	call	_bcd2dec	;wreg free
  2150   00107A  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2151   00107E  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2152   001082  0E02               	movlw	2
  2153   001084  6E19               	movwf	lcdInt@digNum^0,c
  2154   001086  ECBE  F00D         	call	_lcdInt	;wreg free
  2155   00108A                     
  2156                           ;output.c: 94:         lcdData(':');
  2157   00108A  0E3A               	movlw	58
  2158   00108C  EC55  F012         	call	_lcdData
  2159                           
  2160                           ;output.c: 95:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  2161   001090  0E00               	movlw	0
  2162   001092  6E0F               	movwf	(dsReadData@address+1)^0,c
  2163   001094  0E01               	movlw	1
  2164   001096  6E0E               	movwf	dsReadData@address^0,c
  2165   001098  EC7F  F010         	call	_dsReadData	;wreg free
  2166   00109C  0E7F               	movlw	127
  2167   00109E  140E               	andwf	?_dsReadData^0,w,c
  2168   0010A0  6E13               	movwf	bcd2dec@value^0,c
  2169   0010A2  6A14               	clrf	(bcd2dec@value+1)^0,c
  2170   0010A4  ECC5  F010         	call	_bcd2dec	;wreg free
  2171   0010A8  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2172   0010AC  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2173   0010B0  0E02               	movlw	2
  2174   0010B2  6E19               	movwf	lcdInt@digNum^0,c
  2175   0010B4  ECBE  F00D         	call	_lcdInt	;wreg free
  2176   0010B8                     
  2177                           ;output.c: 96:         lcdData(':');
  2178   0010B8  0E3A               	movlw	58
  2179   0010BA  EC55  F012         	call	_lcdData
  2180   0010BE                     
  2181                           ;output.c: 97:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  2182   0010BE  0E00               	movlw	0
  2183   0010C0  6E0F               	movwf	(dsReadData@address+1)^0,c
  2184   0010C2  0E00               	movlw	0
  2185   0010C4  6E0E               	movwf	dsReadData@address^0,c
  2186   0010C6  EC7F  F010         	call	_dsReadData	;wreg free
  2187   0010CA  0E7F               	movlw	127
  2188   0010CC  140E               	andwf	?_dsReadData^0,w,c
  2189   0010CE  6E13               	movwf	bcd2dec@value^0,c
  2190   0010D0  6A14               	clrf	(bcd2dec@value+1)^0,c
  2191   0010D2  ECC5  F010         	call	_bcd2dec	;wreg free
  2192   0010D6  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2193   0010DA  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2194   0010DE  0E02               	movlw	2
  2195   0010E0  6E19               	movwf	lcdInt@digNum^0,c
  2196   0010E2  ECBE  F00D         	call	_lcdInt	;wreg free
  2197   0010E6                     
  2198                           ;output.c: 98:         lcdString("           ");
  2199   0010E6  0E93               	movlw	low STR_11
  2200   0010E8  6E04               	movwf	lcdString@str^0,c
  2201   0010EA  EC1E  F011         	call	_lcdString	;wreg free
  2202   0010EE                     l562:
  2203   0010EE  0012               	return		;funcret
  2204   0010F0                     __end_of_outputPrint:
  2205                           	callstack 0
  2206                           
  2207 ;; *************** function _lcdString *****************
  2208 ;; Defined at:
  2209 ;;		line 168 in file "lcd.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;  str             1    3[COMRAM] PTR const unsigned char 
  2212 ;;		 -> STR_19(12), STR_18(17), STR_17(17), STR_16(12), 
  2213 ;;		 -> STR_15(4), STR_14(12), STR_13(4), STR_12(12), 
  2214 ;;		 -> STR_11(12), STR_10(16), STR_9(16), STR_8(16), 
  2215 ;;		 -> STR_7(16), STR_6(16), STR_5(16), STR_4(16), 
  2216 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2228 ;;      Params:         1       0       0       0       0       0       0       0       0
  2229 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2231 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2232 ;;Total ram usage:        1 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 3
  2235 ;; This function calls:
  2236 ;;		_lcdData
  2237 ;; This function is called by:
  2238 ;;		_outputPrint
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text5
  2243   00223C                     __ptext5:
  2244                           	callstack 0
  2245   00223C                     _lcdString:
  2246                           	callstack 25
  2247   00223C                     
  2248                           ;lcd.c: 169:     while (*str) {
  2249   00223C  EF29  F011         	goto	l3213
  2250   002240                     l3209:
  2251                           
  2252                           ;lcd.c: 170:         lcdData(*str++);
  2253   002240  C004  FFF6         	movff	lcdString@str,tblptrl
  2254   002244                     	if	1	;There is more than 1 active tblptr byte
  2255   002244  0E08               	movlw	high __smallconst
  2256   002246  6EF7               	movwf	tblptrh,c
  2257   002248                     	endif
  2258   002248                     	if	0	;tblptru may be non-zero
  2259   002248                     	endif
  2260   002248                     	if	0	;tblptru may be non-zero
  2261   002248                     	endif
  2262   002248  0008               	tblrd		*
  2263   00224A  50F5               	movf	tablat,w,c
  2264   00224C  EC55  F012         	call	_lcdData
  2265   002250  2A04               	incf	lcdString@str^0,f,c
  2266   002252                     l3213:
  2267                           
  2268                           ;lcd.c: 169:     while (*str) {
  2269   002252  C004  FFF6         	movff	lcdString@str,tblptrl
  2270   002256                     	if	1	;There is more than 1 active tblptr byte
  2271   002256  0E08               	movlw	high __smallconst
  2272   002258  6EF7               	movwf	tblptrh,c
  2273   00225A                     	endif
  2274   00225A                     	if	0	;tblptru may be non-zero
  2275   00225A                     	endif
  2276   00225A                     	if	0	;tblptru may be non-zero
  2277   00225A                     	endif
  2278   00225A  0008               	tblrd		*
  2279   00225C  50F5               	movf	tablat,w,c
  2280   00225E  0900               	iorlw	0
  2281   002260  A4D8               	btfss	status,2,c
  2282   002262  EF35  F011         	goto	u2741
  2283   002266  EF37  F011         	goto	u2740
  2284   00226A                     u2741:
  2285   00226A  EF20  F011         	goto	l3209
  2286   00226E                     u2740:
  2287   00226E  0012               	return		;funcret
  2288   002270                     __end_of_lcdString:
  2289                           	callstack 0
  2290                           
  2291 ;; *************** function _lcdInt *****************
  2292 ;; Defined at:
  2293 ;;		line 174 in file "lcd.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  val             2   22[COMRAM] int 
  2296 ;;  digNum          1   24[COMRAM] unsigned char 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  j               2   26[COMRAM] int 
  2299 ;;  divisor         2   28[COMRAM] int 
  2300 ;;  i               2   30[COMRAM] int 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2310 ;;      Params:         3       0       0       0       0       0       0       0       0
  2311 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2312 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2313 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2314 ;;Total ram usage:       10 bytes
  2315 ;; Hardware stack levels used: 1
  2316 ;; Hardware stack levels required when called: 3
  2317 ;; This function calls:
  2318 ;;		___awdiv
  2319 ;;		___awmod
  2320 ;;		___wmul
  2321 ;;		_lcdData
  2322 ;; This function is called by:
  2323 ;;		_outputPrint
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text6
  2328   001B7C                     __ptext6:
  2329                           	callstack 0
  2330   001B7C                     _lcdInt:
  2331                           	callstack 25
  2332   001B7C                     
  2333                           ;lcd.c: 175:     if (val < 0) {
  2334   001B7C  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  2335   001B7E  EFC5  F00D         	goto	u2750
  2336   001B82  EFC3  F00D         	goto	u2751
  2337   001B86                     u2751:
  2338   001B86  EFCC  F00D         	goto	l3221
  2339   001B8A                     u2750:
  2340   001B8A                     
  2341                           ;lcd.c: 176:         val = val * (-1);
  2342   001B8A  6C17               	negf	lcdInt@val^0,c
  2343   001B8C  1E18               	comf	(lcdInt@val+1)^0,f,c
  2344   001B8E  B0D8               	btfsc	status,0,c
  2345   001B90  2A18               	incf	(lcdInt@val+1)^0,f,c
  2346   001B92                     
  2347                           ;lcd.c: 177:         lcdData('-');
  2348   001B92  0E2D               	movlw	45
  2349   001B94  EC55  F012         	call	_lcdData
  2350   001B98                     l3221:
  2351                           
  2352                           ;lcd.c: 188:     for (int i = digNum - 1; i >= 0; i--) {
  2353   001B98  0EFF               	movlw	255
  2354   001B9A  2419               	addwf	lcdInt@digNum^0,w,c
  2355   001B9C  6E1F               	movwf	lcdInt@i^0,c
  2356   001B9E  6A20               	clrf	(lcdInt@i+1)^0,c
  2357   001BA0  0EFF               	movlw	255
  2358   001BA2  2220               	addwfc	(lcdInt@i+1)^0,f,c
  2359   001BA4                     l3223:
  2360   001BA4  BE20               	btfsc	(lcdInt@i+1)^0,7,c
  2361   001BA6  EFD9  F00D         	goto	u2760
  2362   001BAA  EFD7  F00D         	goto	u2761
  2363   001BAE                     u2761:
  2364   001BAE  EFDB  F00D         	goto	l3227
  2365   001BB2                     u2760:
  2366   001BB2  EF21  F00E         	goto	l203
  2367   001BB6                     l3227:
  2368                           
  2369                           ;lcd.c: 189:         int divisor = 1;
  2370   001BB6  0E00               	movlw	0
  2371   001BB8  6E1E               	movwf	(lcdInt@divisor+1)^0,c
  2372   001BBA  0E01               	movlw	1
  2373   001BBC  6E1D               	movwf	lcdInt@divisor^0,c
  2374                           
  2375                           ;lcd.c: 190:         for (int j = 0; j < i; j++) {
  2376   001BBE  0E00               	movlw	0
  2377   001BC0  6E1C               	movwf	(lcdInt@j+1)^0,c
  2378   001BC2  0E00               	movlw	0
  2379   001BC4  6E1B               	movwf	lcdInt@j^0,c
  2380   001BC6  EFF5  F00D         	goto	l3233
  2381   001BCA                     l3229:
  2382                           
  2383                           ;lcd.c: 191:             divisor *= 10;
  2384   001BCA  C01D  F009         	movff	lcdInt@divisor,___wmul@multiplier
  2385   001BCE  C01E  F00A         	movff	lcdInt@divisor+1,___wmul@multiplier+1
  2386   001BD2  0E00               	movlw	0
  2387   001BD4  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2388   001BD6  0E0A               	movlw	10
  2389   001BD8  6E0B               	movwf	___wmul@multiplicand^0,c
  2390   001BDA  EC42  F012         	call	___wmul	;wreg free
  2391   001BDE  C009  F01D         	movff	?___wmul,lcdInt@divisor
  2392   001BE2  C00A  F01E         	movff	?___wmul+1,lcdInt@divisor+1
  2393   001BE6                     
  2394                           ;lcd.c: 192:         }
  2395   001BE6  4A1B               	infsnz	lcdInt@j^0,f,c
  2396   001BE8  2A1C               	incf	(lcdInt@j+1)^0,f,c
  2397   001BEA                     l3233:
  2398   001BEA  501F               	movf	lcdInt@i^0,w,c
  2399   001BEC  5C1B               	subwf	lcdInt@j^0,w,c
  2400   001BEE  501C               	movf	(lcdInt@j+1)^0,w,c
  2401   001BF0  0A80               	xorlw	128
  2402   001BF2  6E1A               	movwf	??_lcdInt^0,c
  2403   001BF4  5020               	movf	(lcdInt@i+1)^0,w,c
  2404   001BF6  0A80               	xorlw	128
  2405   001BF8  581A               	subwfb	??_lcdInt^0,w,c
  2406   001BFA  A0D8               	btfss	status,0,c
  2407   001BFC  EF02  F00E         	goto	u2771
  2408   001C00  EF04  F00E         	goto	u2770
  2409   001C04                     u2771:
  2410   001C04  EFE5  F00D         	goto	l3229
  2411   001C08                     u2770:
  2412   001C08                     
  2413                           ;lcd.c: 193:         lcdData((val / divisor) % 10 + 48);
  2414   001C08  C01D  F003         	movff	lcdInt@divisor,___awdiv@divisor
  2415   001C0C  C01E  F004         	movff	lcdInt@divisor+1,___awdiv@divisor+1
  2416   001C10  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  2417   001C14  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  2418   001C18  EC22  F00E         	call	___awdiv	;wreg free
  2419   001C1C  C001  F009         	movff	?___awdiv,___awmod@dividend
  2420   001C20  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2421   001C24  0E00               	movlw	0
  2422   001C26  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2423   001C28  0E0A               	movlw	10
  2424   001C2A  6E0B               	movwf	___awmod@divisor^0,c
  2425   001C2C  EC84  F00E         	call	___awmod	;wreg free
  2426   001C30  5009               	movf	?___awmod^0,w,c
  2427   001C32  0F30               	addlw	48
  2428   001C34  EC55  F012         	call	_lcdData
  2429   001C38                     
  2430                           ;lcd.c: 194:     }
  2431   001C38  061F               	decf	lcdInt@i^0,f,c
  2432   001C3A  A0D8               	btfss	status,0,c
  2433   001C3C  0620               	decf	(lcdInt@i+1)^0,f,c
  2434   001C3E  EFD2  F00D         	goto	l3223
  2435   001C42                     l203:
  2436   001C42  0012               	return		;funcret
  2437   001C44                     __end_of_lcdInt:
  2438                           	callstack 0
  2439                           
  2440 ;; *************** function _lcdData *****************
  2441 ;; Defined at:
  2442 ;;		line 108 in file "lcd.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  valor           1    wreg     unsigned char 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  valor           1    2[COMRAM] unsigned char 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2456 ;;      Params:         0       0       0       0       0       0       0       0       0
  2457 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2459 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2460 ;;Total ram usage:        1 bytes
  2461 ;; Hardware stack levels used: 1
  2462 ;; Hardware stack levels required when called: 2
  2463 ;; This function calls:
  2464 ;;		_Delay40us
  2465 ;;		_lcdCommand4bits
  2466 ;; This function is called by:
  2467 ;;		_lcdString
  2468 ;;		_lcdInt
  2469 ;;		_outputPrint
  2470 ;;		_printf
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text7
  2475   0024AA                     __ptext7:
  2476                           	callstack 0
  2477   0024AA                     _lcdData:
  2478                           	callstack 25
  2479                           
  2480                           ;incstack = 0
  2481                           ;lcdData@valor stored from wreg
  2482   0024AA  6E03               	movwf	lcdData@valor^0,c
  2483   0024AC                     
  2484                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  2485   0024AC  0E01               	movlw	1
  2486   0024AE  6E01               	movwf	lcdCommand4bits@data^0,c
  2487   0024B0  5003               	movf	lcdData@valor^0,w,c
  2488   0024B2  EC18  F00F         	call	_lcdCommand4bits
  2489                           
  2490                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  2491   0024B6  0E01               	movlw	1
  2492   0024B8  6E01               	movwf	lcdCommand4bits@data^0,c
  2493   0024BA  3803               	swapf	lcdData@valor^0,w,c
  2494   0024BC  0BF0               	andlw	240
  2495   0024BE  EC18  F00F         	call	_lcdCommand4bits
  2496                           
  2497                           ;lcd.c: 113:     Delay40us();
  2498   0024C2  EC7D  F012         	call	_Delay40us	;wreg free
  2499   0024C6  0012               	return		;funcret
  2500   0024C8                     __end_of_lcdData:
  2501                           	callstack 0
  2502                           
  2503 ;; *************** function _getLanguage *****************
  2504 ;; Defined at:
  2505 ;;		line 78 in file "var.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      unsigned char 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2522 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2523 ;;Total ram usage:        0 bytes
  2524 ;; Hardware stack levels used: 1
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_outputPrint
  2529 ;;		_smLoop
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text8
  2534   002584                     __ptext8:
  2535                           	callstack 0
  2536   002584                     _getLanguage:
  2537                           	callstack 28
  2538   002584                     
  2539                           ;var.c: 79:     return language;
  2540   002584  503F               	movf	_language^0,w,c
  2541   002586  0012               	return		;funcret
  2542   002588                     __end_of_getLanguage:
  2543                           	callstack 0
  2544                           
  2545 ;; *************** function _getAlarmLevel *****************
  2546 ;; Defined at:
  2547 ;;		line 50 in file "var.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  lh              2    0[COMRAM] int 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  l               2    2[COMRAM] int 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  2    0[COMRAM] int 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2561 ;;      Params:         2       0       0       0       0       0       0       0       0
  2562 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2564 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2565 ;;Total ram usage:        4 bytes
  2566 ;; Hardware stack levels used: 1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_outputPrint
  2571 ;;		_smLoop
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text9
  2576   002386                     __ptext9:
  2577                           	callstack 0
  2578   002386                     _getAlarmLevel:
  2579                           	callstack 28
  2580   002386                     
  2581                           ;var.c: 51:     int l;;var.c: 52:     if(lh == 0){
  2582   002386  5001               	movf	getAlarmLevel@lh^0,w,c
  2583   002388  1002               	iorwf	(getAlarmLevel@lh+1)^0,w,c
  2584   00238A  A4D8               	btfss	status,2,c
  2585   00238C  EFCA  F011         	goto	u2821
  2586   002390  EFCC  F011         	goto	u2820
  2587   002394                     u2821:
  2588   002394  EFD1  F011         	goto	l707
  2589   002398                     u2820:
  2590   002398                     
  2591                           ;var.c: 53:         l = alarmLevelLow;
  2592   002398  C03D  F003         	movff	_alarmLevelLow,getAlarmLevel@l
  2593   00239C  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2594                           
  2595                           ;var.c: 54:     }
  2596   00239E  EFD4  F011         	goto	l708
  2597   0023A2                     l707:
  2598                           
  2599                           ;var.c: 56:     {;var.c: 57:         l = alarmLevelHigh;
  2600   0023A2  C03E  F003         	movff	_alarmLevelHigh,getAlarmLevel@l
  2601   0023A6  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2602   0023A8                     l708:
  2603                           
  2604                           ;var.c: 59:     return l;
  2605   0023A8  C003  F001         	movff	getAlarmLevel@l,?_getAlarmLevel
  2606   0023AC  C004  F002         	movff	getAlarmLevel@l+1,?_getAlarmLevel+1
  2607   0023B0  0012               	return		;funcret
  2608   0023B2                     __end_of_getAlarmLevel:
  2609                           	callstack 0
  2610                           
  2611 ;; *************** function _getState *****************
  2612 ;; Defined at:
  2613 ;;		line 34 in file "var.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      unsigned char 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2627 ;;      Params:         0       0       0       0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2631 ;;Total ram usage:        0 bytes
  2632 ;; Hardware stack levels used: 1
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_smLoop
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text10
  2641   002588                     __ptext10:
  2642                           	callstack 0
  2643   002588                     _getState:
  2644                           	callstack 29
  2645   002588                     
  2646                           ;var.c: 35:     return state;
  2647   002588  5040               	movf	_state^0,w,c
  2648   00258A  0012               	return		;funcret
  2649   00258C                     __end_of_getState:
  2650                           	callstack 0
  2651                           
  2652 ;; *************** function _eventRead *****************
  2653 ;; Defined at:
  2654 ;;		line 26 in file "event.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  key             2    9[COMRAM] int 
  2659 ;;  ev              2    6[COMRAM] int 
  2660 ;;  data            1    8[COMRAM] unsigned char 
  2661 ;;  prot            1    5[COMRAM] PTR unsigned char 
  2662 ;;		 -> prot(5), 
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  2    2[COMRAM] unsigned int 
  2665 ;; Registers used:
  2666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2672 ;;      Params:         2       0       0       0       0       0       0       0       0
  2673 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2674 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2675 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2676 ;;Total ram usage:        9 bytes
  2677 ;; Hardware stack levels used: 1
  2678 ;; Hardware stack levels required when called: 1
  2679 ;; This function calls:
  2680 ;;		_getProt
  2681 ;;		_kpRead
  2682 ;;		_serialRead
  2683 ;;		_serialSend
  2684 ;;		_setProt
  2685 ;; This function is called by:
  2686 ;;		_smLoop
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text11
  2691   001780                     __ptext11:
  2692                           	callstack 0
  2693   001780                     _eventRead:
  2694                           	callstack 28
  2695   001780                     
  2696                           ;event.c: 27:     int key;;event.c: 28:     int ev = EV_NOEVENT;
  2697   001780  0E00               	movlw	0
  2698   001782  6E08               	movwf	(eventRead@ev+1)^0,c
  2699   001784  0E06               	movlw	6
  2700   001786  6E07               	movwf	eventRead@ev^0,c
  2701   001788                     
  2702                           ;event.c: 29:     key = kpRead();
  2703   001788  ECC6  F012         	call	_kpRead	;wreg free
  2704   00178C  6E05               	movwf	??_eventRead^0,c
  2705   00178E  5005               	movf	??_eventRead^0,w,c
  2706   001790  6E0A               	movwf	eventRead@key^0,c
  2707   001792  6A0B               	clrf	(eventRead@key+1)^0,c
  2708   001794                     
  2709                           ;event.c: 30:     if (key != key_ant) {
  2710   001794  5038               	movf	_key_ant^0,w,c
  2711   001796  180A               	xorwf	eventRead@key^0,w,c
  2712   001798  E109               	bnz	u2840
  2713   00179A  5039               	movf	(_key_ant+1)^0,w,c
  2714   00179C  180B               	xorwf	(eventRead@key+1)^0,w,c
  2715   00179E  B4D8               	btfsc	status,2,c
  2716   0017A0  EFD4  F00B         	goto	u2841
  2717   0017A4  EFD6  F00B         	goto	u2840
  2718   0017A8                     u2841:
  2719   0017A8  EF0D  F00C         	goto	l3315
  2720   0017AC                     u2840:
  2721   0017AC                     
  2722                           ;event.c: 31:         if (((key) & (1<<0))) {
  2723   0017AC  A00A               	btfss	eventRead@key^0,0,c
  2724   0017AE  EFDB  F00B         	goto	u2851
  2725   0017B2  EFDD  F00B         	goto	u2850
  2726   0017B6                     u2851:
  2727   0017B6  EFE1  F00B         	goto	l3299
  2728   0017BA                     u2850:
  2729   0017BA                     
  2730                           ;event.c: 32:             ev = EV_B_0;
  2731   0017BA  0E00               	movlw	0
  2732   0017BC  6E08               	movwf	(eventRead@ev+1)^0,c
  2733   0017BE  0E00               	movlw	0
  2734   0017C0  6E07               	movwf	eventRead@ev^0,c
  2735   0017C2                     l3299:
  2736                           
  2737                           ;event.c: 35:         if (((key) & (1<<1))) {
  2738   0017C2  A20A               	btfss	eventRead@key^0,1,c
  2739   0017C4  EFE6  F00B         	goto	u2861
  2740   0017C8  EFE8  F00B         	goto	u2860
  2741   0017CC                     u2861:
  2742   0017CC  EFEC  F00B         	goto	l3303
  2743   0017D0                     u2860:
  2744   0017D0                     
  2745                           ;event.c: 36:             ev = EV_B_1;
  2746   0017D0  0E00               	movlw	0
  2747   0017D2  6E08               	movwf	(eventRead@ev+1)^0,c
  2748   0017D4  0E01               	movlw	1
  2749   0017D6  6E07               	movwf	eventRead@ev^0,c
  2750   0017D8                     l3303:
  2751                           
  2752                           ;event.c: 39:         if (((key) & (1<<2))) {
  2753   0017D8  A40A               	btfss	eventRead@key^0,2,c
  2754   0017DA  EFF1  F00B         	goto	u2871
  2755   0017DE  EFF3  F00B         	goto	u2870
  2756   0017E2                     u2871:
  2757   0017E2  EFF7  F00B         	goto	l3307
  2758   0017E6                     u2870:
  2759   0017E6                     
  2760                           ;event.c: 40:             ev = EV_B_2;
  2761   0017E6  0E00               	movlw	0
  2762   0017E8  6E08               	movwf	(eventRead@ev+1)^0,c
  2763   0017EA  0E02               	movlw	2
  2764   0017EC  6E07               	movwf	eventRead@ev^0,c
  2765   0017EE                     l3307:
  2766                           
  2767                           ;event.c: 43:         if (((key) & (1<<3))) {
  2768   0017EE  A60A               	btfss	eventRead@key^0,3,c
  2769   0017F0  EFFC  F00B         	goto	u2881
  2770   0017F4  EFFE  F00B         	goto	u2880
  2771   0017F8                     u2881:
  2772   0017F8  EF02  F00C         	goto	l3311
  2773   0017FC                     u2880:
  2774   0017FC                     
  2775                           ;event.c: 44:             ev = EV_B_3;
  2776   0017FC  0E00               	movlw	0
  2777   0017FE  6E08               	movwf	(eventRead@ev+1)^0,c
  2778   001800  0E03               	movlw	3
  2779   001802  6E07               	movwf	eventRead@ev^0,c
  2780   001804                     l3311:
  2781                           
  2782                           ;event.c: 47:         if (((key) & (1<<4))) {
  2783   001804  A80A               	btfss	eventRead@key^0,4,c
  2784   001806  EF07  F00C         	goto	u2891
  2785   00180A  EF09  F00C         	goto	u2890
  2786   00180E                     u2891:
  2787   00180E  EF0D  F00C         	goto	l3315
  2788   001812                     u2890:
  2789   001812                     
  2790                           ;event.c: 48:             ev = EV_B_4;
  2791   001812  0E00               	movlw	0
  2792   001814  6E08               	movwf	(eventRead@ev+1)^0,c
  2793   001816  0E04               	movlw	4
  2794   001818  6E07               	movwf	eventRead@ev^0,c
  2795   00181A                     l3315:
  2796                           
  2797                           ;event.c: 52:     key_ant = key;
  2798   00181A  C00A  F038         	movff	eventRead@key,_key_ant
  2799   00181E  C00B  F039         	movff	eventRead@key+1,_key_ant+1
  2800   001822                     
  2801                           ;event.c: 55:     unsigned char data = serialRead();
  2802   001822  ECD9  F011         	call	_serialRead	;wreg free
  2803   001826  6E09               	movwf	eventRead@data^0,c
  2804   001828                     
  2805                           ;event.c: 56:     serialSend(data);
  2806   001828  5009               	movf	eventRead@data^0,w,c
  2807   00182A  EC89  F012         	call	_serialSend
  2808   00182E                     
  2809                           ;event.c: 57:     unsigned char* prot;;event.c: 58:     if (data != 0) {
  2810   00182E  5009               	movf	eventRead@data^0,w,c
  2811   001830  B4D8               	btfsc	status,2,c
  2812   001832  EF1D  F00C         	goto	u2901
  2813   001836  EF1F  F00C         	goto	u2900
  2814   00183A                     u2901:
  2815   00183A  EF86  F00C         	goto	l3353
  2816   00183E                     u2900:
  2817   00183E                     
  2818                           ;event.c: 59:         prot = getProt();
  2819   00183E  ECC8  F012         	call	_getProt	;wreg free
  2820   001842  6E06               	movwf	eventRead@prot^0,c
  2821   001844                     
  2822                           ;event.c: 60:         if (prot[0] == 0) {
  2823   001844  5006               	movf	eventRead@prot^0,w,c
  2824   001846  6ED9               	movwf	fsr2l,c
  2825   001848  6ADA               	clrf	fsr2h,c
  2826   00184A  50DF               	movf	indf2,w,c
  2827   00184C  A4D8               	btfss	status,2,c
  2828   00184E  EF2B  F00C         	goto	u2911
  2829   001852  EF2D  F00C         	goto	u2910
  2830   001856                     u2911:
  2831   001856  EF75  F00C         	goto	l3347
  2832   00185A                     u2910:
  2833   00185A  EF56  F00C         	goto	l3345
  2834   00185E                     l3329:
  2835                           
  2836                           ;event.c: 63:                     ev = EV_B_0;
  2837   00185E  0E00               	movlw	0
  2838   001860  6E08               	movwf	(eventRead@ev+1)^0,c
  2839   001862  0E00               	movlw	0
  2840   001864  6E07               	movwf	eventRead@ev^0,c
  2841                           
  2842                           ;event.c: 64:                     break;
  2843   001866  EF86  F00C         	goto	l3353
  2844   00186A                     l3331:
  2845                           
  2846                           ;event.c: 66:                     ev = EV_B_1;
  2847   00186A  0E00               	movlw	0
  2848   00186C  6E08               	movwf	(eventRead@ev+1)^0,c
  2849   00186E  0E01               	movlw	1
  2850   001870  6E07               	movwf	eventRead@ev^0,c
  2851                           
  2852                           ;event.c: 67:                     break;
  2853   001872  EF86  F00C         	goto	l3353
  2854   001876                     l3333:
  2855                           
  2856                           ;event.c: 69:                     ev = EV_B_2;
  2857   001876  0E00               	movlw	0
  2858   001878  6E08               	movwf	(eventRead@ev+1)^0,c
  2859   00187A  0E02               	movlw	2
  2860   00187C  6E07               	movwf	eventRead@ev^0,c
  2861                           
  2862                           ;event.c: 70:                     break;
  2863   00187E  EF86  F00C         	goto	l3353
  2864   001882                     l3335:
  2865                           
  2866                           ;event.c: 72:                     ev = EV_B_3;
  2867   001882  0E00               	movlw	0
  2868   001884  6E08               	movwf	(eventRead@ev+1)^0,c
  2869   001886  0E03               	movlw	3
  2870   001888  6E07               	movwf	eventRead@ev^0,c
  2871                           
  2872                           ;event.c: 73:                     break;
  2873   00188A  EF86  F00C         	goto	l3353
  2874   00188E                     l3337:
  2875                           
  2876                           ;event.c: 75:                     ev = EV_B_4;
  2877   00188E  0E00               	movlw	0
  2878   001890  6E08               	movwf	(eventRead@ev+1)^0,c
  2879   001892  0E04               	movlw	4
  2880   001894  6E07               	movwf	eventRead@ev^0,c
  2881                           
  2882                           ;event.c: 76:                     break;
  2883   001896  EF86  F00C         	goto	l3353
  2884   00189A                     l3339:
  2885                           
  2886                           ;event.c: 78:                     ev = EV_NOEVENT;
  2887   00189A  0E00               	movlw	0
  2888   00189C  6E08               	movwf	(eventRead@ev+1)^0,c
  2889   00189E  0E06               	movlw	6
  2890   0018A0  6E07               	movwf	eventRead@ev^0,c
  2891   0018A2                     
  2892                           ;event.c: 79:                     setProt('p');
  2893   0018A2  0E70               	movlw	112
  2894   0018A4  EC2E  F012         	call	_setProt
  2895                           
  2896                           ;event.c: 81:                     break;
  2897   0018A8  EF86  F00C         	goto	l3353
  2898   0018AC                     l3345:
  2899   0018AC  5009               	movf	eventRead@data^0,w,c
  2900                           
  2901                           ; Switch size 1, requested type "simple"
  2902                           ; Number of cases is 7, Range of values is 50 to 112
  2903                           ; switch strategies available:
  2904                           ; Name         Instructions Cycles
  2905                           ; simple_byte           22    12 (average)
  2906                           ;	Chosen strategy is simple_byte
  2907   0018AE  0A32               	xorlw	50	; case 50
  2908   0018B0  B4D8               	btfsc	status,2,c
  2909   0018B2  EF2F  F00C         	goto	l3329
  2910   0018B6  0A06               	xorlw	6	; case 52
  2911   0018B8  B4D8               	btfsc	status,2,c
  2912   0018BA  EF3B  F00C         	goto	l3333
  2913   0018BE  0A01               	xorlw	1	; case 53
  2914   0018C0  B4D8               	btfsc	status,2,c
  2915   0018C2  EF47  F00C         	goto	l3337
  2916   0018C6  0A03               	xorlw	3	; case 54
  2917   0018C8  B4D8               	btfsc	status,2,c
  2918   0018CA  EF41  F00C         	goto	l3335
  2919   0018CE  0A0E               	xorlw	14	; case 56
  2920   0018D0  B4D8               	btfsc	status,2,c
  2921   0018D2  EF35  F00C         	goto	l3331
  2922   0018D6  0A68               	xorlw	104	; case 80
  2923   0018D8  B4D8               	btfsc	status,2,c
  2924   0018DA  EF4D  F00C         	goto	l3339
  2925   0018DE  0A20               	xorlw	32	; case 112
  2926   0018E0  B4D8               	btfsc	status,2,c
  2927   0018E2  EF4D  F00C         	goto	l3339
  2928   0018E6  EF86  F00C         	goto	l515
  2929   0018EA                     l3347:
  2930                           
  2931                           ;event.c: 86:             setProt(data);
  2932   0018EA  5009               	movf	eventRead@data^0,w,c
  2933   0018EC  EC2E  F012         	call	_setProt
  2934   0018F0                     
  2935                           ;event.c: 88:             if (prot_ready) {
  2936   0018F0  5042               	movf	_prot_ready^0,w,c
  2937   0018F2  B4D8               	btfsc	status,2,c
  2938   0018F4  EF7E  F00C         	goto	u2921
  2939   0018F8  EF80  F00C         	goto	u2920
  2940   0018FC                     u2921:
  2941   0018FC  EF86  F00C         	goto	l3353
  2942   001900                     u2920:
  2943   001900                     
  2944                           ;event.c: 89:                 ev = EV_PROT_SERIAL;
  2945   001900  0E00               	movlw	0
  2946   001902  6E08               	movwf	(eventRead@ev+1)^0,c
  2947   001904  0E05               	movlw	5
  2948   001906  6E07               	movwf	eventRead@ev^0,c
  2949   001908  EF86  F00C         	goto	l3353
  2950   00190C                     l515:
  2951   00190C                     l3353:
  2952                           
  2953                           ;event.c: 95:     return ev;
  2954   00190C  C007  F003         	movff	eventRead@ev,?_eventRead
  2955   001910  C008  F004         	movff	eventRead@ev+1,?_eventRead+1
  2956   001914  0012               	return		;funcret
  2957   001916                     __end_of_eventRead:
  2958                           	callstack 0
  2959                           
  2960 ;; *************** function _setProt *****************
  2961 ;; Defined at:
  2962 ;;		line 94 in file "var.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  newChar         1    wreg     unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  newChar         1    0[COMRAM] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0
  2977 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2979 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2980 ;;Total ram usage:        1 bytes
  2981 ;; Hardware stack levels used: 1
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_eventRead
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text12
  2990   00245C                     __ptext12:
  2991                           	callstack 0
  2992   00245C                     _setProt:
  2993                           	callstack 28
  2994                           
  2995                           ;incstack = 0
  2996                           ;setProt@newChar stored from wreg
  2997   00245C  6E01               	movwf	setProt@newChar^0,c
  2998   00245E                     
  2999                           ;var.c: 96:     prot[index++] = newChar;
  3000   00245E  503C               	movf	_index^0,w,c
  3001   002460  0F4E               	addlw	low _prot
  3002   002462  6ED9               	movwf	fsr2l,c
  3003   002464  6ADA               	clrf	fsr2h,c
  3004   002466  C001  FFDF         	movff	setProt@newChar,indf2
  3005   00246A  2A3C               	incf	_index^0,f,c
  3006   00246C                     
  3007                           ;var.c: 98:     if(index == 5) prot_ready = 1;
  3008   00246C  0E05               	movlw	5
  3009   00246E  183C               	xorwf	_index^0,w,c
  3010   002470  A4D8               	btfss	status,2,c
  3011   002472  EF3D  F012         	goto	u2811
  3012   002476  EF3F  F012         	goto	u2810
  3013   00247A                     u2811:
  3014   00247A  EF41  F012         	goto	l727
  3015   00247E                     u2810:
  3016   00247E  0E01               	movlw	1
  3017   002480  6E42               	movwf	_prot_ready^0,c
  3018   002482                     l727:
  3019   002482  0012               	return		;funcret
  3020   002484                     __end_of_setProt:
  3021                           	callstack 0
  3022                           
  3023 ;; *************** function _serialSend *****************
  3024 ;; Defined at:
  3025 ;;		line 25 in file "serial.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  c               1    wreg     unsigned char 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  c               1    0[COMRAM] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3039 ;;      Params:         0       0       0       0       0       0       0       0       0
  3040 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3042 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3043 ;;Total ram usage:        1 bytes
  3044 ;; Hardware stack levels used: 1
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_eventRead
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text13
  3053   002512                     __ptext13:
  3054                           	callstack 0
  3055   002512                     _serialSend:
  3056                           	callstack 28
  3057                           
  3058                           ;incstack = 0
  3059                           ;serialSend@c stored from wreg
  3060   002512  6E01               	movwf	serialSend@c^0,c
  3061   002514                     l338:
  3062   002514  A89E               	btfss	158,4,c	;volatile
  3063   002516  EF8F  F012         	goto	u2781
  3064   00251A  EF91  F012         	goto	u2780
  3065   00251E                     u2781:
  3066   00251E  EF8A  F012         	goto	l338
  3067   002522                     u2780:
  3068   002522                     
  3069                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  3070   002522  C001  FFAD         	movff	serialSend@c,4013	;volatile
  3071   002526  0012               	return		;funcret
  3072   002528                     __end_of_serialSend:
  3073                           	callstack 0
  3074                           
  3075 ;; *************** function _serialRead *****************
  3076 ;; Defined at:
  3077 ;;		line 30 in file "serial.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  resp            1    0[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      unsigned char 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3091 ;;      Params:         0       0       0       0       0       0       0       0       0
  3092 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3094 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3095 ;;Total ram usage:        1 bytes
  3096 ;; Hardware stack levels used: 1
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_eventRead
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text14
  3105   0023B2                     __ptext14:
  3106                           	callstack 0
  3107   0023B2                     _serialRead:
  3108                           	callstack 28
  3109   0023B2                     
  3110                           ;serial.c: 31:     char resp = 0;
  3111   0023B2  0E00               	movlw	0
  3112   0023B4  6E01               	movwf	serialRead@resp^0,c
  3113   0023B6                     
  3114                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  3115   0023B6  A2AB               	btfss	171,1,c	;volatile
  3116   0023B8  EFE0  F011         	goto	u2791
  3117   0023BC  EFE2  F011         	goto	u2790
  3118   0023C0                     u2791:
  3119   0023C0  EFE4  F011         	goto	l3251
  3120   0023C4                     u2790:
  3121   0023C4                     
  3122                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  3123   0023C4  98AB               	bcf	171,4,c	;volatile
  3124                           
  3125                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  3126   0023C6  88AB               	bsf	171,4,c	;volatile
  3127   0023C8                     l3251:
  3128                           
  3129                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  3130   0023C8  AA9E               	btfss	158,5,c	;volatile
  3131   0023CA  EFE9  F011         	goto	u2801
  3132   0023CE  EFEB  F011         	goto	u2800
  3133   0023D2                     u2801:
  3134   0023D2  EFED  F011         	goto	l3255
  3135   0023D6                     u2800:
  3136   0023D6                     
  3137                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  3138   0023D6  CFAE F001          	movff	4014,serialRead@resp	;volatile
  3139   0023DA                     l3255:
  3140                           
  3141                           ;serial.c: 43:     return resp;
  3142   0023DA  5001               	movf	serialRead@resp^0,w,c
  3143   0023DC  0012               	return		;funcret
  3144   0023DE                     __end_of_serialRead:
  3145                           	callstack 0
  3146                           
  3147 ;; *************** function _kpRead *****************
  3148 ;; Defined at:
  3149 ;;		line 29 in file "keypad.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;		None
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;		None
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      unsigned char 
  3156 ;; Registers used:
  3157 ;;		wreg, status,2
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3163 ;;      Params:         0       0       0       0       0       0       0       0       0
  3164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3166 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3167 ;;Total ram usage:        0 bytes
  3168 ;; Hardware stack levels used: 1
  3169 ;; This function calls:
  3170 ;;		Nothing
  3171 ;; This function is called by:
  3172 ;;		_eventRead
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text15
  3177   00258C                     __ptext15:
  3178                           	callstack 0
  3179   00258C                     _kpRead:
  3180                           	callstack 28
  3181   00258C                     
  3182                           ;keypad.c: 30:     return valor;
  3183   00258C  504D               	movf	_valor^0,w,c
  3184   00258E  0012               	return		;funcret
  3185   002590                     __end_of_kpRead:
  3186                           	callstack 0
  3187                           
  3188 ;; *************** function _getProt *****************
  3189 ;; Defined at:
  3190 ;;		line 89 in file "var.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;		None
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      PTR unsigned char 
  3197 ;; Registers used:
  3198 ;;		wreg
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3204 ;;      Params:         2       0       0       0       0       0       0       0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3207 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3208 ;;Total ram usage:        2 bytes
  3209 ;; Hardware stack levels used: 1
  3210 ;; This function calls:
  3211 ;;		Nothing
  3212 ;; This function is called by:
  3213 ;;		_eventRead
  3214 ;;		_smLoop
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text16
  3219   002590                     __ptext16:
  3220                           	callstack 0
  3221   002590                     _getProt:
  3222                           	callstack 29
  3223   002590                     
  3224                           ;var.c: 91:     return prot;
  3225   002590  0E4E               	movlw	_prot& (0+255)
  3226   002592  0012               	return		;funcret
  3227   002594                     __end_of_getProt:
  3228                           	callstack 0
  3229                           
  3230 ;; *************** function _smInit *****************
  3231 ;; Defined at:
  3232 ;;		line 11 in file "stateMachine.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;		None
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;		None
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      void 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3246 ;;      Params:         0       0       0       0       0       0       0       0       0
  3247 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3249 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3250 ;;Total ram usage:        0 bytes
  3251 ;; Hardware stack levels used: 1
  3252 ;; Hardware stack levels required when called: 7
  3253 ;; This function calls:
  3254 ;;		_eventInit
  3255 ;;		_setState
  3256 ;;		_varInit
  3257 ;; This function is called by:
  3258 ;;		_main
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text17
  3263   00253E                     __ptext17:
  3264                           	callstack 0
  3265   00253E                     _smInit:
  3266                           	callstack 23
  3267   00253E                     
  3268                           ;stateMachine.c: 12:     varInit();
  3269   00253E  ECC6  F00A         	call	_varInit	;wreg free
  3270   002542                     
  3271                           ;stateMachine.c: 13:     setState(STATE_MAIN);
  3272   002542  0E05               	movlw	5
  3273   002544  ECB4  F012         	call	_setState
  3274   002548                     
  3275                           ;stateMachine.c: 14:     eventInit();
  3276   002548  EC94  F012         	call	_eventInit	;wreg free
  3277   00254C  0012               	return		;funcret
  3278   00254E                     __end_of_smInit:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function _varInit *****************
  3282 ;; Defined at:
  3283 ;;		line 16 in file "var.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3297 ;;      Params:         0       0       0       0       0       0       0       0       0
  3298 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3299 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3300 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3301 ;;Total ram usage:        8 bytes
  3302 ;; Hardware stack levels used: 1
  3303 ;; Hardware stack levels required when called: 6
  3304 ;; This function calls:
  3305 ;;		_bcd2dec
  3306 ;;		_dec2bcd
  3307 ;;		_dsReadData
  3308 ;;		_dsWriteData
  3309 ;;		_setAlarmLevel
  3310 ;; This function is called by:
  3311 ;;		_smInit
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text18
  3316   00158C                     __ptext18:
  3317                           	callstack 0
  3318   00158C                     _varInit:
  3319                           	callstack 23
  3320   00158C                     
  3321                           ;var.c: 17:     state = 0;
  3322   00158C  0E00               	movlw	0
  3323   00158E  6E40               	movwf	_state^0,c
  3324                           
  3325                           ;var.c: 18:     time = 1000;
  3326   001590  0E03               	movlw	3
  3327   001592  6E31               	movwf	(_time+1)^0,c
  3328   001594  0EE8               	movlw	232
  3329   001596  6E30               	movwf	_time^0,c
  3330   001598                     
  3331                           ;var.c: 20:     alarmLevelHigh = dsReadData(0x20);
  3332   001598  0E00               	movlw	0
  3333   00159A  6E0F               	movwf	(dsReadData@address+1)^0,c
  3334   00159C  0E20               	movlw	32
  3335   00159E  6E0E               	movwf	dsReadData@address^0,c
  3336   0015A0  EC7F  F010         	call	_dsReadData	;wreg free
  3337   0015A4  500E               	movf	?_dsReadData^0,w,c
  3338   0015A6  6E3E               	movwf	_alarmLevelHigh^0,c
  3339   0015A8                     
  3340                           ;var.c: 21:     alarmLevelLow = dsReadData(0x21);
  3341   0015A8  0E00               	movlw	0
  3342   0015AA  6E0F               	movwf	(dsReadData@address+1)^0,c
  3343   0015AC  0E21               	movlw	33
  3344   0015AE  6E0E               	movwf	dsReadData@address^0,c
  3345   0015B0  EC7F  F010         	call	_dsReadData	;wreg free
  3346   0015B4  500E               	movf	?_dsReadData^0,w,c
  3347   0015B6  6E3D               	movwf	_alarmLevelLow^0,c
  3348   0015B8                     
  3349                           ;var.c: 22:     language = dsReadData(0x23) != 1 ? 0 : 1;
  3350   0015B8  0E00               	movlw	0
  3351   0015BA  6E0F               	movwf	(dsReadData@address+1)^0,c
  3352   0015BC  0E23               	movlw	35
  3353   0015BE  6E0E               	movwf	dsReadData@address^0,c
  3354   0015C0  EC7F  F010         	call	_dsReadData	;wreg free
  3355   0015C4  040E               	decf	?_dsReadData^0,w,c
  3356   0015C6  100F               	iorwf	(?_dsReadData+1)^0,w,c
  3357   0015C8  B4D8               	btfsc	status,2,c
  3358   0015CA  EFE9  F00A         	goto	u3011
  3359   0015CE  EFEC  F00A         	goto	u3010
  3360   0015D2                     u3011:
  3361   0015D2  0E01               	movlw	1
  3362   0015D4  EFED  F00A         	goto	u3020
  3363   0015D8                     u3010:
  3364   0015D8  0E00               	movlw	0
  3365   0015DA                     u3020:
  3366   0015DA  6E3F               	movwf	_language^0,c
  3367   0015DC                     
  3368                           ;var.c: 23:     if(alarmLevelHigh + alarmLevelLow != dsReadData(0x22)){
  3369   0015DC  0E00               	movlw	0
  3370   0015DE  6E0F               	movwf	(dsReadData@address+1)^0,c
  3371   0015E0  0E22               	movlw	34
  3372   0015E2  6E0E               	movwf	dsReadData@address^0,c
  3373   0015E4  EC7F  F010         	call	_dsReadData	;wreg free
  3374   0015E8  503D               	movf	_alarmLevelLow^0,w,c
  3375   0015EA  C03E  F023         	movff	_alarmLevelHigh,??_varInit
  3376   0015EE  6A24               	clrf	(??_varInit+1)^0,c
  3377   0015F0  2623               	addwf	??_varInit^0,f,c
  3378   0015F2  0E00               	movlw	0
  3379   0015F4  2224               	addwfc	(??_varInit+1)^0,f,c
  3380   0015F6  500E               	movf	?_dsReadData^0,w,c
  3381   0015F8  1823               	xorwf	??_varInit^0,w,c
  3382   0015FA  E109               	bnz	u3030
  3383   0015FC  500F               	movf	(?_dsReadData+1)^0,w,c
  3384   0015FE  1824               	xorwf	(??_varInit+1)^0,w,c
  3385   001600  B4D8               	btfsc	status,2,c
  3386   001602  EF05  F00B         	goto	u3031
  3387   001606  EF07  F00B         	goto	u3030
  3388   00160A                     u3031:
  3389   00160A  EF17  F00B         	goto	l3491
  3390   00160E                     u3030:
  3391   00160E                     
  3392                           ;var.c: 24:         setAlarmLevel(50, 0);
  3393   00160E  0E00               	movlw	0
  3394   001610  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  3395   001612  0E32               	movlw	50
  3396   001614  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  3397   001616  0E00               	movlw	0
  3398   001618  6E22               	movwf	setAlarmLevel@lh^0,c
  3399   00161A  EC36  F010         	call	_setAlarmLevel	;wreg free
  3400                           
  3401                           ;var.c: 25:         setAlarmLevel(100, 1);
  3402   00161E  0E00               	movlw	0
  3403   001620  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  3404   001622  0E64               	movlw	100
  3405   001624  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  3406   001626  0E01               	movlw	1
  3407   001628  6E22               	movwf	setAlarmLevel@lh^0,c
  3408   00162A  EC36  F010         	call	_setAlarmLevel	;wreg free
  3409   00162E                     l3491:
  3410                           
  3411                           ;var.c: 28:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x00)& 0x7f)) == 0 ? 0 : (bcd2d
      +                          ec(dsReadData(0x00)& 0x7f))),0x00));
  3412   00162E  0E00               	movlw	0
  3413   001630  6E0F               	movwf	(dsReadData@address+1)^0,c
  3414   001632  0E00               	movlw	0
  3415   001634  6E0E               	movwf	dsReadData@address^0,c
  3416   001636  EC7F  F010         	call	_dsReadData	;wreg free
  3417   00163A  0E7F               	movlw	127
  3418   00163C  140E               	andwf	?_dsReadData^0,w,c
  3419   00163E  6E13               	movwf	bcd2dec@value^0,c
  3420   001640  6A14               	clrf	(bcd2dec@value+1)^0,c
  3421   001642  ECC5  F010         	call	_bcd2dec	;wreg free
  3422   001646  5013               	movf	?_bcd2dec^0,w,c
  3423   001648  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  3424   00164A  B4D8               	btfsc	status,2,c
  3425   00164C  EF2A  F00B         	goto	u3041
  3426   001650  EF2C  F00B         	goto	u3040
  3427   001654                     u3041:
  3428   001654  EF3E  F00B         	goto	l3495
  3429   001658                     u3040:
  3430   001658  0E00               	movlw	0
  3431   00165A  6E0F               	movwf	(dsReadData@address+1)^0,c
  3432   00165C  0E00               	movlw	0
  3433   00165E  6E0E               	movwf	dsReadData@address^0,c
  3434   001660  EC7F  F010         	call	_dsReadData	;wreg free
  3435   001664  0E7F               	movlw	127
  3436   001666  140E               	andwf	?_dsReadData^0,w,c
  3437   001668  6E13               	movwf	bcd2dec@value^0,c
  3438   00166A  6A14               	clrf	(bcd2dec@value+1)^0,c
  3439   00166C  ECC5  F010         	call	_bcd2dec	;wreg free
  3440   001670  C013  F025         	movff	?_bcd2dec,_varInit$510
  3441   001674  C014  F026         	movff	?_bcd2dec+1,_varInit$510+1
  3442   001678  EF42  F00B         	goto	l3497
  3443   00167C                     l3495:
  3444   00167C  0E00               	movlw	0
  3445   00167E  6E26               	movwf	(_varInit$510+1)^0,c
  3446   001680  0E00               	movlw	0
  3447   001682  6E25               	movwf	_varInit$510^0,c
  3448   001684                     l3497:
  3449   001684  0E00               	movlw	0
  3450   001686  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3451   001688  0E00               	movlw	0
  3452   00168A  6E1D               	movwf	dsWriteData@address^0,c
  3453   00168C  C025  F017         	movff	_varInit$510,dec2bcd@value
  3454   001690  C026  F018         	movff	_varInit$510+1,dec2bcd@value+1
  3455   001694  EC54  F00F         	call	_dec2bcd	;wreg free
  3456   001698  5017               	movf	?_dec2bcd^0,w,c
  3457   00169A  EC68  F011         	call	_dsWriteData
  3458   00169E                     
  3459                           ;var.c: 29:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x7f)) == 0 ? 45 : (bcd2
      +                          dec(dsReadData(0x01)& 0x7f))),0x01));
  3460   00169E  0E00               	movlw	0
  3461   0016A0  6E0F               	movwf	(dsReadData@address+1)^0,c
  3462   0016A2  0E01               	movlw	1
  3463   0016A4  6E0E               	movwf	dsReadData@address^0,c
  3464   0016A6  EC7F  F010         	call	_dsReadData	;wreg free
  3465   0016AA  0E7F               	movlw	127
  3466   0016AC  140E               	andwf	?_dsReadData^0,w,c
  3467   0016AE  6E13               	movwf	bcd2dec@value^0,c
  3468   0016B0  6A14               	clrf	(bcd2dec@value+1)^0,c
  3469   0016B2  ECC5  F010         	call	_bcd2dec	;wreg free
  3470   0016B6  5013               	movf	?_bcd2dec^0,w,c
  3471   0016B8  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  3472   0016BA  B4D8               	btfsc	status,2,c
  3473   0016BC  EF62  F00B         	goto	u3051
  3474   0016C0  EF64  F00B         	goto	u3050
  3475   0016C4                     u3051:
  3476   0016C4  EF76  F00B         	goto	l3503
  3477   0016C8                     u3050:
  3478   0016C8  0E00               	movlw	0
  3479   0016CA  6E0F               	movwf	(dsReadData@address+1)^0,c
  3480   0016CC  0E01               	movlw	1
  3481   0016CE  6E0E               	movwf	dsReadData@address^0,c
  3482   0016D0  EC7F  F010         	call	_dsReadData	;wreg free
  3483   0016D4  0E7F               	movlw	127
  3484   0016D6  140E               	andwf	?_dsReadData^0,w,c
  3485   0016D8  6E13               	movwf	bcd2dec@value^0,c
  3486   0016DA  6A14               	clrf	(bcd2dec@value+1)^0,c
  3487   0016DC  ECC5  F010         	call	_bcd2dec	;wreg free
  3488   0016E0  C013  F027         	movff	?_bcd2dec,_varInit$511
  3489   0016E4  C014  F028         	movff	?_bcd2dec+1,_varInit$511+1
  3490   0016E8  EF7A  F00B         	goto	l3505
  3491   0016EC                     l3503:
  3492   0016EC  0E00               	movlw	0
  3493   0016EE  6E28               	movwf	(_varInit$511+1)^0,c
  3494   0016F0  0E2D               	movlw	45
  3495   0016F2  6E27               	movwf	_varInit$511^0,c
  3496   0016F4                     l3505:
  3497   0016F4  0E00               	movlw	0
  3498   0016F6  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3499   0016F8  0E01               	movlw	1
  3500   0016FA  6E1D               	movwf	dsWriteData@address^0,c
  3501   0016FC  C027  F017         	movff	_varInit$511,dec2bcd@value
  3502   001700  C028  F018         	movff	_varInit$511+1,dec2bcd@value+1
  3503   001704  EC54  F00F         	call	_dec2bcd	;wreg free
  3504   001708  5017               	movf	?_dec2bcd^0,w,c
  3505   00170A  EC68  F011         	call	_dsWriteData
  3506   00170E                     
  3507                           ;var.c: 30:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x7f)) == 0 ? 15 : (bcd2
      +                          dec(dsReadData(0x02)& 0x7f))),0x02));
  3508   00170E  0E00               	movlw	0
  3509   001710  6E0F               	movwf	(dsReadData@address+1)^0,c
  3510   001712  0E02               	movlw	2
  3511   001714  6E0E               	movwf	dsReadData@address^0,c
  3512   001716  EC7F  F010         	call	_dsReadData	;wreg free
  3513   00171A  0E7F               	movlw	127
  3514   00171C  140E               	andwf	?_dsReadData^0,w,c
  3515   00171E  6E13               	movwf	bcd2dec@value^0,c
  3516   001720  6A14               	clrf	(bcd2dec@value+1)^0,c
  3517   001722  ECC5  F010         	call	_bcd2dec	;wreg free
  3518   001726  5013               	movf	?_bcd2dec^0,w,c
  3519   001728  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  3520   00172A  B4D8               	btfsc	status,2,c
  3521   00172C  EF9A  F00B         	goto	u3061
  3522   001730  EF9C  F00B         	goto	u3060
  3523   001734                     u3061:
  3524   001734  EFAE  F00B         	goto	l3511
  3525   001738                     u3060:
  3526   001738  0E00               	movlw	0
  3527   00173A  6E0F               	movwf	(dsReadData@address+1)^0,c
  3528   00173C  0E02               	movlw	2
  3529   00173E  6E0E               	movwf	dsReadData@address^0,c
  3530   001740  EC7F  F010         	call	_dsReadData	;wreg free
  3531   001744  0E7F               	movlw	127
  3532   001746  140E               	andwf	?_dsReadData^0,w,c
  3533   001748  6E13               	movwf	bcd2dec@value^0,c
  3534   00174A  6A14               	clrf	(bcd2dec@value+1)^0,c
  3535   00174C  ECC5  F010         	call	_bcd2dec	;wreg free
  3536   001750  C013  F029         	movff	?_bcd2dec,_varInit$512
  3537   001754  C014  F02A         	movff	?_bcd2dec+1,_varInit$512+1
  3538   001758  EFB2  F00B         	goto	l3513
  3539   00175C                     l3511:
  3540   00175C  0E00               	movlw	0
  3541   00175E  6E2A               	movwf	(_varInit$512+1)^0,c
  3542   001760  0E0F               	movlw	15
  3543   001762  6E29               	movwf	_varInit$512^0,c
  3544   001764                     l3513:
  3545   001764  0E00               	movlw	0
  3546   001766  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3547   001768  0E02               	movlw	2
  3548   00176A  6E1D               	movwf	dsWriteData@address^0,c
  3549   00176C  C029  F017         	movff	_varInit$512,dec2bcd@value
  3550   001770  C02A  F018         	movff	_varInit$512+1,dec2bcd@value+1
  3551   001774  EC54  F00F         	call	_dec2bcd	;wreg free
  3552   001778  5017               	movf	?_dec2bcd^0,w,c
  3553   00177A  EC68  F011         	call	_dsWriteData
  3554   00177E  0012               	return		;funcret
  3555   001780                     __end_of_varInit:
  3556                           	callstack 0
  3557                           
  3558 ;; *************** function _setAlarmLevel *****************
  3559 ;; Defined at:
  3560 ;;		line 62 in file "var.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  newAlarmLeve    2   31[COMRAM] int 
  3563 ;;  lh              1   33[COMRAM] unsigned char 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3575 ;;      Params:         3       0       0       0       0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3578 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3579 ;;Total ram usage:        3 bytes
  3580 ;; Hardware stack levels used: 1
  3581 ;; Hardware stack levels required when called: 5
  3582 ;; This function calls:
  3583 ;;		_dsWriteData
  3584 ;; This function is called by:
  3585 ;;		_smLoop
  3586 ;;		_varInit
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text19
  3591   00206C                     __ptext19:
  3592                           	callstack 0
  3593   00206C                     _setAlarmLevel:
  3594                           	callstack 24
  3595   00206C                     
  3596                           ;var.c: 63:     if(lh == 1){
  3597   00206C  0422               	decf	setAlarmLevel@lh^0,w,c
  3598   00206E  A4D8               	btfss	status,2,c
  3599   002070  EF3C  F010         	goto	u2831
  3600   002074  EF3E  F010         	goto	u2830
  3601   002078                     u2831:
  3602   002078  EF49  F010         	goto	l712
  3603   00207C                     u2830:
  3604   00207C                     
  3605                           ;var.c: 64:         alarmLevelHigh = newAlarmLevel;
  3606   00207C  C020  F03E         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelHigh
  3607   002080                     
  3608                           ;var.c: 66:         dsWriteData(alarmLevelHigh, 0x20);
  3609   002080  0E00               	movlw	0
  3610   002082  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3611   002084  0E20               	movlw	32
  3612   002086  6E1D               	movwf	dsWriteData@address^0,c
  3613   002088  503E               	movf	_alarmLevelHigh^0,w,c
  3614   00208A  EC68  F011         	call	_dsWriteData
  3615                           
  3616                           ;var.c: 67:     }
  3617   00208E  EF52  F010         	goto	l713
  3618   002092                     l712:
  3619                           
  3620                           ;var.c: 69:     {;var.c: 70:         alarmLevelLow = newAlarmLevel;
  3621   002092  C020  F03D         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelLow
  3622   002096                     
  3623                           ;var.c: 72:         dsWriteData(alarmLevelLow, 0x21);
  3624   002096  0E00               	movlw	0
  3625   002098  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3626   00209A  0E21               	movlw	33
  3627   00209C  6E1D               	movwf	dsWriteData@address^0,c
  3628   00209E  503D               	movf	_alarmLevelLow^0,w,c
  3629   0020A0  EC68  F011         	call	_dsWriteData
  3630   0020A4                     l713:
  3631                           
  3632                           ;var.c: 74:     dsWriteData(alarmLevelHigh + alarmLevelLow, 0x22);
  3633   0020A4  0E00               	movlw	0
  3634   0020A6  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3635   0020A8  0E22               	movlw	34
  3636   0020AA  6E1D               	movwf	dsWriteData@address^0,c
  3637   0020AC  503E               	movf	_alarmLevelHigh^0,w,c
  3638   0020AE  243D               	addwf	_alarmLevelLow^0,w,c
  3639   0020B0  EC68  F011         	call	_dsWriteData
  3640   0020B4  0012               	return		;funcret
  3641   0020B6                     __end_of_setAlarmLevel:
  3642                           	callstack 0
  3643                           
  3644 ;; *************** function _dsWriteData *****************
  3645 ;; Defined at:
  3646 ;;		line 26 in file "ds1307.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  value           1    wreg     unsigned char 
  3649 ;;  address         2   28[COMRAM] int 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  value           1   30[COMRAM] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3661 ;;      Params:         2       0       0       0       0       0       0       0       0
  3662 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3664 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3665 ;;Total ram usage:        3 bytes
  3666 ;; Hardware stack levels used: 1
  3667 ;; Hardware stack levels required when called: 4
  3668 ;; This function calls:
  3669 ;;		_i2cWriteByte
  3670 ;; This function is called by:
  3671 ;;		_smLoop
  3672 ;;		_varInit
  3673 ;;		_setAlarmLevel
  3674 ;;		_setLanguage
  3675 ;;		_dsStartClock
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text20
  3680   0022D0                     __ptext20:
  3681                           	callstack 0
  3682   0022D0                     _dsWriteData:
  3683                           	callstack 24
  3684                           
  3685                           ;incstack = 0
  3686                           ;dsWriteData@value stored from wreg
  3687   0022D0  6E1F               	movwf	dsWriteData@value^0,c
  3688   0022D2                     
  3689                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  3690   0022D2  0E00               	movlw	0
  3691   0022D4  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3692   0022D6  0EDE               	movlw	222
  3693   0022D8  6E09               	movwf	i2cWriteByte@byte^0,c
  3694   0022DA  0E01               	movlw	1
  3695   0022DC  EC85  F00F         	call	_i2cWriteByte
  3696                           
  3697                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  3698   0022E0  0E00               	movlw	0
  3699   0022E2  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3700   0022E4  C01D  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  3701   0022E8  0E00               	movlw	0
  3702   0022EA  EC85  F00F         	call	_i2cWriteByte
  3703                           
  3704                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  3705   0022EE  0E01               	movlw	1
  3706   0022F0  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3707   0022F2  C01F  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  3708   0022F6  0E00               	movlw	0
  3709   0022F8  EC85  F00F         	call	_i2cWriteByte
  3710   0022FC  0012               	return		;funcret
  3711   0022FE                     __end_of_dsWriteData:
  3712                           	callstack 0
  3713                           
  3714 ;; *************** function _dsReadData *****************
  3715 ;; Defined at:
  3716 ;;		line 31 in file "ds1307.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  address         2   13[COMRAM] int 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  result          2   16[COMRAM] int 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  2   13[COMRAM] int 
  3723 ;; Registers used:
  3724 ;;		wreg, status,2, status,0, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3730 ;;      Params:         2       0       0       0       0       0       0       0       0
  3731 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3732 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3733 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3734 ;;Total ram usage:        5 bytes
  3735 ;; Hardware stack levels used: 1
  3736 ;; Hardware stack levels required when called: 4
  3737 ;; This function calls:
  3738 ;;		_i2cReadByte
  3739 ;;		_i2cWriteByte
  3740 ;; This function is called by:
  3741 ;;		_outputPrint
  3742 ;;		_smLoop
  3743 ;;		_varInit
  3744 ;;		_dsStartClock
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text21
  3749   0020FE                     __ptext21:
  3750                           	callstack 0
  3751   0020FE                     _dsReadData:
  3752                           	callstack 24
  3753   0020FE                     
  3754                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  3755   0020FE  0E00               	movlw	0
  3756   002100  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3757   002102  0EDE               	movlw	222
  3758   002104  6E09               	movwf	i2cWriteByte@byte^0,c
  3759   002106  0E01               	movlw	1
  3760   002108  EC85  F00F         	call	_i2cWriteByte
  3761                           
  3762                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  3763   00210C  0E00               	movlw	0
  3764   00210E  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3765   002110  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  3766   002114  0E00               	movlw	0
  3767   002116  EC85  F00F         	call	_i2cWriteByte
  3768                           
  3769                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  3770   00211A  0E00               	movlw	0
  3771   00211C  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3772   00211E  0EDF               	movlw	223
  3773   002120  6E09               	movwf	i2cWriteByte@byte^0,c
  3774   002122  0E01               	movlw	1
  3775   002124  EC85  F00F         	call	_i2cWriteByte
  3776                           
  3777                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  3778   002128  0E01               	movlw	1
  3779   00212A  6E08               	movwf	i2cReadByte@send_stop^0,c
  3780   00212C  0E01               	movlw	1
  3781   00212E  EC0C  F010         	call	_i2cReadByte
  3782   002132  6E10               	movwf	??_dsReadData^0,c
  3783   002134  5010               	movf	??_dsReadData^0,w,c
  3784   002136  6E11               	movwf	dsReadData@result^0,c
  3785   002138  6A12               	clrf	(dsReadData@result+1)^0,c
  3786   00213A                     
  3787                           ;ds1307.c: 37:  return result;
  3788   00213A  C011  F00E         	movff	dsReadData@result,?_dsReadData
  3789   00213E  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  3790   002142  0012               	return		;funcret
  3791   002144                     __end_of_dsReadData:
  3792                           	callstack 0
  3793                           
  3794 ;; *************** function _i2cWriteByte *****************
  3795 ;; Defined at:
  3796 ;;		line 113 in file "soft_i2c.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  send_start      1    wreg     unsigned char 
  3799 ;;  send_stop       1    7[COMRAM] unsigned char 
  3800 ;;  byte            1    8[COMRAM] unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  send_start      1    9[COMRAM] unsigned char 
  3803 ;;  bit             1   10[COMRAM] unsigned char 
  3804 ;;  nack            1    0        unsigned char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  1    wreg      unsigned char 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0, cstack
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3814 ;;      Params:         2       0       0       0       0       0       0       0       0
  3815 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3816 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3817 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3818 ;;Total ram usage:        4 bytes
  3819 ;; Hardware stack levels used: 1
  3820 ;; Hardware stack levels required when called: 3
  3821 ;; This function calls:
  3822 ;;		_i2c_read_bit
  3823 ;;		_i2c_start
  3824 ;;		_i2c_stop
  3825 ;;		_i2c_write_bit
  3826 ;; This function is called by:
  3827 ;;		_dsWriteData
  3828 ;;		_dsReadData
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text22
  3833   001F0A                     __ptext22:
  3834                           	callstack 0
  3835   001F0A                     _i2cWriteByte:
  3836                           	callstack 24
  3837                           
  3838                           ;incstack = 0
  3839                           ;i2cWriteByte@send_start stored from wreg
  3840   001F0A  6E0A               	movwf	i2cWriteByte@send_start^0,c
  3841   001F0C                     
  3842                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  3843   001F0C  500A               	movf	i2cWriteByte@send_start^0,w,c
  3844   001F0E  B4D8               	btfsc	status,2,c
  3845   001F10  EF8C  F00F         	goto	u2451
  3846   001F14  EF8E  F00F         	goto	u2450
  3847   001F18                     u2451:
  3848   001F18  EF90  F00F         	goto	l2981
  3849   001F1C                     u2450:
  3850   001F1C                     
  3851                           ;soft_i2c.c: 117:   i2c_start();
  3852   001F1C  ECA2  F010         	call	_i2c_start	;wreg free
  3853   001F20                     l2981:
  3854                           
  3855                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  3856   001F20  0E00               	movlw	0
  3857   001F22  6E0B               	movwf	i2cWriteByte@bit^0,c
  3858   001F24                     l2987:
  3859                           
  3860                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  3861   001F24  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  3862   001F26  EF97  F00F         	goto	u2461
  3863   001F2A  EF9A  F00F         	goto	u2460
  3864   001F2E                     u2461:
  3865   001F2E  0E01               	movlw	1
  3866   001F30  EF9B  F00F         	goto	u2470
  3867   001F34                     u2460:
  3868   001F34  0E00               	movlw	0
  3869   001F36                     u2470:
  3870   001F36  ECB5  F00F         	call	_i2c_write_bit
  3871   001F3A                     
  3872                           ;soft_i2c.c: 121:   byte <<= 1;
  3873   001F3A  90D8               	bcf	status,0,c
  3874   001F3C  3609               	rlcf	i2cWriteByte@byte^0,f,c
  3875   001F3E                     
  3876                           ;soft_i2c.c: 122:  }
  3877   001F3E  2A0B               	incf	i2cWriteByte@bit^0,f,c
  3878   001F40  0E07               	movlw	7
  3879   001F42  640B               	cpfsgt	i2cWriteByte@bit^0,c
  3880   001F44  EFA6  F00F         	goto	u2481
  3881   001F48  EFA8  F00F         	goto	u2480
  3882   001F4C                     u2481:
  3883   001F4C  EF92  F00F         	goto	l2987
  3884   001F50                     u2480:
  3885   001F50  EC38  F011         	call	_i2c_read_bit	;wreg free
  3886   001F54                     
  3887                           ;soft_i2c.c: 124:  if (send_stop) {
  3888   001F54  5008               	movf	i2cWriteByte@send_stop^0,w,c
  3889   001F56  B4D8               	btfsc	status,2,c
  3890   001F58  EFB0  F00F         	goto	u2491
  3891   001F5C  EFB2  F00F         	goto	u2490
  3892   001F60                     u2491:
  3893   001F60  EFB4  F00F         	goto	l412
  3894   001F64                     u2490:
  3895   001F64                     
  3896                           ;soft_i2c.c: 125:   i2c_stop();
  3897   001F64  EC7F  F011         	call	_i2c_stop	;wreg free
  3898   001F68                     l412:
  3899   001F68  0012               	return		;funcret
  3900   001F6A                     __end_of_i2cWriteByte:
  3901                           	callstack 0
  3902                           
  3903 ;; *************** function _i2c_start *****************
  3904 ;; Defined at:
  3905 ;;		line 52 in file "soft_i2c.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3919 ;;      Params:         0       0       0       0       0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3922 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3923 ;;Total ram usage:        0 bytes
  3924 ;; Hardware stack levels used: 1
  3925 ;; Hardware stack levels required when called: 2
  3926 ;; This function calls:
  3927 ;;		_I2C_delay
  3928 ;;		_clear_SCL
  3929 ;;		_clear_SDA
  3930 ;;		_read_SCL
  3931 ;;		_read_SDA
  3932 ;; This function is called by:
  3933 ;;		_i2cWriteByte
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text23
  3938   002144                     __ptext23:
  3939                           	callstack 0
  3940   002144                     _i2c_start:
  3941                           	callstack 24
  3942   002144                     
  3943                           ;soft_i2c.c: 54:  if (started) {
  3944   002144  5048               	movf	_started^0,w,c
  3945   002146  B4D8               	btfsc	status,2,c
  3946   002148  EFA8  F010         	goto	u2381
  3947   00214C  EFAA  F010         	goto	u2380
  3948   002150                     u2381:
  3949   002150  EFBA  F010         	goto	l2917
  3950   002154                     u2380:
  3951   002154                     
  3952                           ;soft_i2c.c: 55:   read_SDA();
  3953   002154  ECE6  F010         	call	_read_SDA	;wreg free
  3954   002158                     
  3955                           ;soft_i2c.c: 56:   I2C_delay();
  3956   002158  ECCA  F012         	call	_I2C_delay	;wreg free
  3957   00215C                     l2913:
  3958   00215C  EC02  F011         	call	_read_SCL	;wreg free
  3959   002160  0900               	iorlw	0
  3960   002162  B4D8               	btfsc	status,2,c
  3961   002164  EFB6  F010         	goto	u2391
  3962   002168  EFB8  F010         	goto	u2390
  3963   00216C                     u2391:
  3964   00216C  EFAE  F010         	goto	l2913
  3965   002170                     u2390:
  3966   002170                     
  3967                           ;soft_i2c.c: 59:   I2C_delay();
  3968   002170  ECCA  F012         	call	_I2C_delay	;wreg free
  3969   002174                     l2917:
  3970                           
  3971                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  3972   002174  ECE6  F010         	call	_read_SDA	;wreg free
  3973   002178                     
  3974                           ;soft_i2c.c: 65:  clear_SDA();
  3975   002178  ECEF  F011         	call	_clear_SDA	;wreg free
  3976   00217C                     
  3977                           ;soft_i2c.c: 66:  I2C_delay();
  3978   00217C  ECCA  F012         	call	_I2C_delay	;wreg free
  3979   002180                     
  3980                           ;soft_i2c.c: 67:  clear_SCL();
  3981   002180  EC04  F012         	call	_clear_SCL	;wreg free
  3982   002184                     
  3983                           ;soft_i2c.c: 68:  started = 1;
  3984   002184  0E01               	movlw	1
  3985   002186  6E48               	movwf	_started^0,c
  3986   002188  0012               	return		;funcret
  3987   00218A                     __end_of_i2c_start:
  3988                           	callstack 0
  3989                           
  3990 ;; *************** function _i2cReadByte *****************
  3991 ;; Defined at:
  3992 ;;		line 131 in file "soft_i2c.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  nack            1    wreg     unsigned char 
  3995 ;;  send_stop       1    7[COMRAM] unsigned char 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  nack            1    9[COMRAM] unsigned char 
  3998 ;;  bit             2   10[COMRAM] unsigned int 
  3999 ;;  byte            1   12[COMRAM] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      unsigned char 
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4009 ;;      Params:         1       0       0       0       0       0       0       0       0
  4010 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4011 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4012 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4013 ;;Total ram usage:        6 bytes
  4014 ;; Hardware stack levels used: 1
  4015 ;; Hardware stack levels required when called: 3
  4016 ;; This function calls:
  4017 ;;		_i2c_read_bit
  4018 ;;		_i2c_stop
  4019 ;;		_i2c_write_bit
  4020 ;; This function is called by:
  4021 ;;		_dsReadData
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	text24
  4026   002018                     __ptext24:
  4027                           	callstack 0
  4028   002018                     _i2cReadByte:
  4029                           	callstack 24
  4030                           
  4031                           ;incstack = 0
  4032                           ;i2cReadByte@nack stored from wreg
  4033   002018  6E0A               	movwf	i2cReadByte@nack^0,c
  4034   00201A                     
  4035                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  4036   00201A  0E00               	movlw	0
  4037   00201C  6E0D               	movwf	i2cReadByte@byte^0,c
  4038                           
  4039                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  4040   00201E  0E00               	movlw	0
  4041   002020  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  4042   002022  0E00               	movlw	0
  4043   002024  6E0B               	movwf	i2cReadByte@bit^0,c
  4044   002026                     l3053:
  4045                           
  4046                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  4047   002026  EC38  F011         	call	_i2c_read_bit	;wreg free
  4048   00202A  6E09               	movwf	??_i2cReadByte^0,c
  4049   00202C  500D               	movf	i2cReadByte@byte^0,w,c
  4050   00202E  240D               	addwf	i2cReadByte@byte^0,w,c
  4051   002030  1009               	iorwf	??_i2cReadByte^0,w,c
  4052   002032  6E0D               	movwf	i2cReadByte@byte^0,c
  4053   002034                     
  4054                           ;soft_i2c.c: 136:  }
  4055   002034  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  4056   002036  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  4057   002038  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  4058   00203A  E109               	bnz	u2560
  4059   00203C  0E08               	movlw	8
  4060   00203E  5C0B               	subwf	i2cReadByte@bit^0,w,c
  4061   002040  A0D8               	btfss	status,0,c
  4062   002042  EF25  F010         	goto	u2561
  4063   002046  EF27  F010         	goto	u2560
  4064   00204A                     u2561:
  4065   00204A  EF13  F010         	goto	l3053
  4066   00204E                     u2560:
  4067   00204E                     
  4068                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  4069   00204E  500A               	movf	i2cReadByte@nack^0,w,c
  4070   002050  ECB5  F00F         	call	_i2c_write_bit
  4071   002054                     
  4072                           ;soft_i2c.c: 138:  if (send_stop) {
  4073   002054  5008               	movf	i2cReadByte@send_stop^0,w,c
  4074   002056  B4D8               	btfsc	status,2,c
  4075   002058  EF30  F010         	goto	u2571
  4076   00205C  EF32  F010         	goto	u2570
  4077   002060                     u2571:
  4078   002060  EF34  F010         	goto	l3065
  4079   002064                     u2570:
  4080   002064                     
  4081                           ;soft_i2c.c: 139:   i2c_stop();
  4082   002064  EC7F  F011         	call	_i2c_stop	;wreg free
  4083   002068                     l3065:
  4084                           
  4085                           ;soft_i2c.c: 141:  return byte;
  4086   002068  500D               	movf	i2cReadByte@byte^0,w,c
  4087   00206A  0012               	return		;funcret
  4088   00206C                     __end_of_i2cReadByte:
  4089                           	callstack 0
  4090                           
  4091 ;; *************** function _i2c_write_bit *****************
  4092 ;; Defined at:
  4093 ;;		line 84 in file "soft_i2c.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  bit             1    wreg     unsigned char 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  bit             1    6[COMRAM] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4107 ;;      Params:         0       0       0       0       0       0       0       0       0
  4108 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4110 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4111 ;;Total ram usage:        1 bytes
  4112 ;; Hardware stack levels used: 1
  4113 ;; Hardware stack levels required when called: 2
  4114 ;; This function calls:
  4115 ;;		_I2C_delay
  4116 ;;		_clear_SCL
  4117 ;;		_clear_SDA
  4118 ;;		_read_SCL
  4119 ;;		_read_SDA
  4120 ;; This function is called by:
  4121 ;;		_i2cWriteByte
  4122 ;;		_i2cReadByte
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text25
  4127   001F6A                     __ptext25:
  4128                           	callstack 0
  4129   001F6A                     _i2c_write_bit:
  4130                           	callstack 24
  4131                           
  4132                           ;incstack = 0
  4133                           ;i2c_write_bit@bit stored from wreg
  4134   001F6A  6E07               	movwf	i2c_write_bit@bit^0,c
  4135   001F6C                     
  4136                           ;soft_i2c.c: 85:  if (bit) {
  4137   001F6C  5007               	movf	i2c_write_bit@bit^0,w,c
  4138   001F6E  B4D8               	btfsc	status,2,c
  4139   001F70  EFBC  F00F         	goto	u2411
  4140   001F74  EFBE  F00F         	goto	u2410
  4141   001F78                     u2411:
  4142   001F78  EFC2  F00F         	goto	l2945
  4143   001F7C                     u2410:
  4144   001F7C                     
  4145                           ;soft_i2c.c: 86:   read_SDA();
  4146   001F7C  ECE6  F010         	call	_read_SDA	;wreg free
  4147                           
  4148                           ;soft_i2c.c: 87:  } else {
  4149   001F80  EFC4  F00F         	goto	l2947
  4150   001F84                     l2945:
  4151                           
  4152                           ;soft_i2c.c: 88:   clear_SDA();
  4153   001F84  ECEF  F011         	call	_clear_SDA	;wreg free
  4154   001F88                     l2947:
  4155                           
  4156                           ;soft_i2c.c: 90:  I2C_delay();
  4157   001F88  ECCA  F012         	call	_I2C_delay	;wreg free
  4158   001F8C                     l2949:
  4159   001F8C  EC02  F011         	call	_read_SCL	;wreg free
  4160   001F90  0900               	iorlw	0
  4161   001F92  B4D8               	btfsc	status,2,c
  4162   001F94  EFCE  F00F         	goto	u2421
  4163   001F98  EFD0  F00F         	goto	u2420
  4164   001F9C                     u2421:
  4165   001F9C  EFC6  F00F         	goto	l2949
  4166   001FA0                     u2420:
  4167   001FA0                     
  4168                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  4169   001FA0  5007               	movf	i2c_write_bit@bit^0,w,c
  4170   001FA2  B4D8               	btfsc	status,2,c
  4171   001FA4  EFD6  F00F         	goto	u2431
  4172   001FA8  EFD8  F00F         	goto	u2430
  4173   001FAC                     u2431:
  4174   001FAC  EFDA  F00F         	goto	l2955
  4175   001FB0                     u2430:
  4176   001FB0  ECE6  F010         	call	_read_SDA	;wreg free
  4177   001FB4                     l2955:
  4178                           
  4179                           ;soft_i2c.c: 95:  I2C_delay();
  4180   001FB4  ECCA  F012         	call	_I2C_delay	;wreg free
  4181   001FB8                     
  4182                           ;soft_i2c.c: 96:  clear_SCL();
  4183   001FB8  EC04  F012         	call	_clear_SCL	;wreg free
  4184   001FBC                     
  4185                           ;soft_i2c.c: 97:  I2C_delay();
  4186   001FBC  ECCA  F012         	call	_I2C_delay	;wreg free
  4187   001FC0  0012               	return		;funcret
  4188   001FC2                     __end_of_i2c_write_bit:
  4189                           	callstack 0
  4190                           
  4191 ;; *************** function _i2c_stop *****************
  4192 ;; Defined at:
  4193 ;;		line 71 in file "soft_i2c.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used: 1
  4213 ;; Hardware stack levels required when called: 2
  4214 ;; This function calls:
  4215 ;;		_I2C_delay
  4216 ;;		_clear_SDA
  4217 ;;		_read_SCL
  4218 ;;		_read_SDA
  4219 ;; This function is called by:
  4220 ;;		_i2cWriteByte
  4221 ;;		_i2cReadByte
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text26
  4226   0022FE                     __ptext26:
  4227                           	callstack 0
  4228   0022FE                     _i2c_stop:
  4229                           	callstack 24
  4230   0022FE                     
  4231                           ;soft_i2c.c: 73:  clear_SDA();
  4232   0022FE  ECEF  F011         	call	_clear_SDA	;wreg free
  4233   002302                     
  4234                           ;soft_i2c.c: 74:  I2C_delay();
  4235   002302  ECCA  F012         	call	_I2C_delay	;wreg free
  4236   002306                     l2931:
  4237   002306  EC02  F011         	call	_read_SCL	;wreg free
  4238   00230A  0900               	iorlw	0
  4239   00230C  B4D8               	btfsc	status,2,c
  4240   00230E  EF8B  F011         	goto	u2401
  4241   002312  EF8D  F011         	goto	u2400
  4242   002316                     u2401:
  4243   002316  EF83  F011         	goto	l2931
  4244   00231A                     u2400:
  4245   00231A                     
  4246                           ;soft_i2c.c: 76:  I2C_delay();
  4247   00231A  ECCA  F012         	call	_I2C_delay	;wreg free
  4248   00231E                     
  4249                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  4250   00231E  ECE6  F010         	call	_read_SDA	;wreg free
  4251   002322                     
  4252                           ;soft_i2c.c: 80:  I2C_delay();
  4253   002322  ECCA  F012         	call	_I2C_delay	;wreg free
  4254   002326                     
  4255                           ;soft_i2c.c: 81:  started = 0;
  4256   002326  0E00               	movlw	0
  4257   002328  6E48               	movwf	_started^0,c
  4258   00232A  0012               	return		;funcret
  4259   00232C                     __end_of_i2c_stop:
  4260                           	callstack 0
  4261                           
  4262 ;; *************** function _clear_SDA *****************
  4263 ;; Defined at:
  4264 ;;		line 45 in file "soft_i2c.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2, status,0, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4278 ;;      Params:         0       0       0       0       0       0       0       0       0
  4279 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4281 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4282 ;;Total ram usage:        0 bytes
  4283 ;; Hardware stack levels used: 1
  4284 ;; Hardware stack levels required when called: 1
  4285 ;; This function calls:
  4286 ;;		_digitalWrite
  4287 ;;		_pinMode
  4288 ;; This function is called by:
  4289 ;;		_i2c_start
  4290 ;;		_i2c_stop
  4291 ;;		_i2c_write_bit
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text27
  4296   0023DE                     __ptext27:
  4297                           	callstack 0
  4298   0023DE                     _clear_SDA:
  4299                           	callstack 24
  4300   0023DE                     
  4301                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  4302   0023DE  0E00               	movlw	0
  4303   0023E0  6E02               	movwf	(pinMode@pin+1)^0,c
  4304   0023E2  0E08               	movlw	8
  4305   0023E4  6E01               	movwf	pinMode@pin^0,c
  4306   0023E6  0E00               	movlw	0
  4307   0023E8  6E04               	movwf	(pinMode@type+1)^0,c
  4308   0023EA  0E00               	movlw	0
  4309   0023EC  6E03               	movwf	pinMode@type^0,c
  4310   0023EE  EC9F  F009         	call	_pinMode	;wreg free
  4311                           
  4312                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  4313   0023F2  0E00               	movlw	0
  4314   0023F4  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4315   0023F6  0E08               	movlw	8
  4316   0023F8  6E01               	movwf	digitalWrite@pin^0,c
  4317   0023FA  0E00               	movlw	0
  4318   0023FC  6E04               	movwf	(digitalWrite@value+1)^0,c
  4319   0023FE  0E00               	movlw	0
  4320   002400  6E03               	movwf	digitalWrite@value^0,c
  4321   002402  EC78  F008         	call	_digitalWrite	;wreg free
  4322   002406  0012               	return		;funcret
  4323   002408                     __end_of_clear_SDA:
  4324                           	callstack 0
  4325                           
  4326 ;; *************** function _i2c_read_bit *****************
  4327 ;; Defined at:
  4328 ;;		line 100 in file "soft_i2c.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;		None
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  bit             1    6[COMRAM] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      unsigned char 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4342 ;;      Params:         0       0       0       0       0       0       0       0       0
  4343 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4345 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4346 ;;Total ram usage:        1 bytes
  4347 ;; Hardware stack levels used: 1
  4348 ;; Hardware stack levels required when called: 2
  4349 ;; This function calls:
  4350 ;;		_I2C_delay
  4351 ;;		_clear_SCL
  4352 ;;		_read_SCL
  4353 ;;		_read_SDA
  4354 ;; This function is called by:
  4355 ;;		_i2cWriteByte
  4356 ;;		_i2cReadByte
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text28
  4361   002270                     __ptext28:
  4362                           	callstack 0
  4363   002270                     _i2c_read_bit:
  4364                           	callstack 24
  4365   002270                     
  4366                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  4367   002270  ECE6  F010         	call	_read_SDA	;wreg free
  4368   002274                     
  4369                           ;soft_i2c.c: 103:  I2C_delay();
  4370   002274  ECCA  F012         	call	_I2C_delay	;wreg free
  4371   002278                     l2965:
  4372   002278  EC02  F011         	call	_read_SCL	;wreg free
  4373   00227C  0900               	iorlw	0
  4374   00227E  B4D8               	btfsc	status,2,c
  4375   002280  EF44  F011         	goto	u2441
  4376   002284  EF46  F011         	goto	u2440
  4377   002288                     u2441:
  4378   002288  EF3C  F011         	goto	l2965
  4379   00228C                     u2440:
  4380   00228C                     
  4381                           ;soft_i2c.c: 105:  bit = read_SDA();
  4382   00228C  ECE6  F010         	call	_read_SDA	;wreg free
  4383   002290  6E07               	movwf	i2c_read_bit@bit^0,c
  4384   002292                     
  4385                           ;soft_i2c.c: 106:  I2C_delay();
  4386   002292  ECCA  F012         	call	_I2C_delay	;wreg free
  4387   002296                     
  4388                           ;soft_i2c.c: 107:  clear_SCL();
  4389   002296  EC04  F012         	call	_clear_SCL	;wreg free
  4390                           
  4391                           ;soft_i2c.c: 108:  I2C_delay();
  4392   00229A  ECCA  F012         	call	_I2C_delay	;wreg free
  4393   00229E                     
  4394                           ;soft_i2c.c: 109:  return bit;
  4395   00229E  5007               	movf	i2c_read_bit@bit^0,w,c
  4396   0022A0  0012               	return		;funcret
  4397   0022A2                     __end_of_i2c_read_bit:
  4398                           	callstack 0
  4399                           
  4400 ;; *************** function _read_SDA *****************
  4401 ;; Defined at:
  4402 ;;		line 34 in file "soft_i2c.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      unsigned char 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4416 ;;      Params:         0       0       0       0       0       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4419 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4420 ;;Total ram usage:        0 bytes
  4421 ;; Hardware stack levels used: 1
  4422 ;; Hardware stack levels required when called: 1
  4423 ;; This function calls:
  4424 ;;		_digitalRead
  4425 ;;		_pinMode
  4426 ;; This function is called by:
  4427 ;;		_i2c_start
  4428 ;;		_i2c_stop
  4429 ;;		_i2c_write_bit
  4430 ;;		_i2c_read_bit
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text29
  4435   0021CC                     __ptext29:
  4436                           	callstack 0
  4437   0021CC                     _read_SDA:
  4438                           	callstack 24
  4439   0021CC                     
  4440                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  4441   0021CC  0E00               	movlw	0
  4442   0021CE  6E02               	movwf	(pinMode@pin+1)^0,c
  4443   0021D0  0E08               	movlw	8
  4444   0021D2  6E01               	movwf	pinMode@pin^0,c
  4445   0021D4  0E00               	movlw	0
  4446   0021D6  6E04               	movwf	(pinMode@type+1)^0,c
  4447   0021D8  0E01               	movlw	1
  4448   0021DA  6E03               	movwf	pinMode@type^0,c
  4449   0021DC  EC9F  F009         	call	_pinMode	;wreg free
  4450                           
  4451                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  4452   0021E0  0E00               	movlw	0
  4453   0021E2  6E02               	movwf	(digitalRead@pin+1)^0,c
  4454   0021E4  0E08               	movlw	8
  4455   0021E6  6E01               	movwf	digitalRead@pin^0,c
  4456   0021E8  EC8B  F00C         	call	_digitalRead	;wreg free
  4457   0021EC  5001               	movf	?_digitalRead^0,w,c
  4458   0021EE  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4459   0021F0  A4D8               	btfss	status,2,c
  4460   0021F2  EFFD  F010         	goto	u2361
  4461   0021F6  EF00  F011         	goto	u2360
  4462   0021FA                     u2361:
  4463   0021FA  0E01               	movlw	1
  4464   0021FC  EF01  F011         	goto	u2370
  4465   002200                     u2360:
  4466   002200  0E00               	movlw	0
  4467   002202                     u2370:
  4468   002202  0012               	return		;funcret
  4469   002204                     __end_of_read_SDA:
  4470                           	callstack 0
  4471                           
  4472 ;; *************** function _read_SCL *****************
  4473 ;; Defined at:
  4474 ;;		line 29 in file "soft_i2c.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;		None
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;		None
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  1    wreg      unsigned char 
  4481 ;; Registers used:
  4482 ;;		wreg, status,2, status,0, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0
  4489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4491 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4492 ;;Total ram usage:        0 bytes
  4493 ;; Hardware stack levels used: 1
  4494 ;; Hardware stack levels required when called: 1
  4495 ;; This function calls:
  4496 ;;		_digitalRead
  4497 ;;		_pinMode
  4498 ;; This function is called by:
  4499 ;;		_i2c_start
  4500 ;;		_i2c_stop
  4501 ;;		_i2c_write_bit
  4502 ;;		_i2c_read_bit
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text30
  4507   002204                     __ptext30:
  4508                           	callstack 0
  4509   002204                     _read_SCL:
  4510                           	callstack 24
  4511   002204                     
  4512                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  4513   002204  0E00               	movlw	0
  4514   002206  6E02               	movwf	(pinMode@pin+1)^0,c
  4515   002208  0E09               	movlw	9
  4516   00220A  6E01               	movwf	pinMode@pin^0,c
  4517   00220C  0E00               	movlw	0
  4518   00220E  6E04               	movwf	(pinMode@type+1)^0,c
  4519   002210  0E01               	movlw	1
  4520   002212  6E03               	movwf	pinMode@type^0,c
  4521   002214  EC9F  F009         	call	_pinMode	;wreg free
  4522                           
  4523                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  4524   002218  0E00               	movlw	0
  4525   00221A  6E02               	movwf	(digitalRead@pin+1)^0,c
  4526   00221C  0E09               	movlw	9
  4527   00221E  6E01               	movwf	digitalRead@pin^0,c
  4528   002220  EC8B  F00C         	call	_digitalRead	;wreg free
  4529   002224  5001               	movf	?_digitalRead^0,w,c
  4530   002226  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4531   002228  A4D8               	btfss	status,2,c
  4532   00222A  EF19  F011         	goto	u2341
  4533   00222E  EF1C  F011         	goto	u2340
  4534   002232                     u2341:
  4535   002232  0E01               	movlw	1
  4536   002234  EF1D  F011         	goto	u2350
  4537   002238                     u2340:
  4538   002238  0E00               	movlw	0
  4539   00223A                     u2350:
  4540   00223A  0012               	return		;funcret
  4541   00223C                     __end_of_read_SCL:
  4542                           	callstack 0
  4543                           
  4544 ;; *************** function _digitalRead *****************
  4545 ;; Defined at:
  4546 ;;		line 39 in file "io.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  pin             2    0[COMRAM] int 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  2    0[COMRAM] int 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4560 ;;      Params:         2       0       0       0       0       0       0       0       0
  4561 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4562 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4563 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4564 ;;Total ram usage:        5 bytes
  4565 ;; Hardware stack levels used: 1
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_read_SCL
  4570 ;;		_read_SDA
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           	psect	text31
  4575   001916                     __ptext31:
  4576                           	callstack 0
  4577   001916                     _digitalRead:
  4578                           	callstack 24
  4579   001916                     
  4580                           ;io.c: 40:     if(pin <8){
  4581   001916  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4582   001918  EF99  F00C         	goto	u2040
  4583   00191C  5002               	movf	(digitalRead@pin+1)^0,w,c
  4584   00191E  E107               	bnz	u2041
  4585   001920  0E08               	movlw	8
  4586   001922  5C01               	subwf	digitalRead@pin^0,w,c
  4587   001924  B0D8               	btfsc	status,0,c
  4588   001926  EF97  F00C         	goto	u2041
  4589   00192A  EF99  F00C         	goto	u2040
  4590   00192E                     u2041:
  4591   00192E  EFAD  F00C         	goto	l2823
  4592   001932                     u2040:
  4593   001932                     
  4594                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  4595   001932  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4596   001936  0E01               	movlw	1
  4597   001938  6E04               	movwf	(??_digitalRead+1)^0,c
  4598   00193A  2A03               	incf	??_digitalRead^0,f,c
  4599   00193C  EFA2  F00C         	goto	u2054
  4600   001940                     u2055:
  4601   001940  90D8               	bcf	status,0,c
  4602   001942  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4603   001944                     u2054:
  4604   001944  2E03               	decfsz	??_digitalRead^0,f,c
  4605   001946  EFA0  F00C         	goto	u2055
  4606   00194A  5004               	movf	(??_digitalRead+1)^0,w,c
  4607   00194C  1480               	andwf	128,w,c	;volatile
  4608   00194E  6E05               	movwf	(??_digitalRead+2)^0,c
  4609   001950  5005               	movf	(??_digitalRead+2)^0,w,c
  4610   001952  6E01               	movwf	?_digitalRead^0,c
  4611   001954  6A02               	clrf	(?_digitalRead+1)^0,c
  4612   001956  EF3F  F00D         	goto	l83
  4613   00195A                     l2823:
  4614   00195A  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4615   00195C  EFBB  F00C         	goto	u2060
  4616   001960  5002               	movf	(digitalRead@pin+1)^0,w,c
  4617   001962  E107               	bnz	u2061
  4618   001964  0E10               	movlw	16
  4619   001966  5C01               	subwf	digitalRead@pin^0,w,c
  4620   001968  B0D8               	btfsc	status,0,c
  4621   00196A  EFB9  F00C         	goto	u2061
  4622   00196E  EFBB  F00C         	goto	u2060
  4623   001972                     u2061:
  4624   001972  EFD1  F00C         	goto	l2831
  4625   001976                     u2060:
  4626   001976                     
  4627                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  4628   001976  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4629   00197A  0EF8               	movlw	-8
  4630   00197C  2603               	addwf	??_digitalRead^0,f,c
  4631   00197E  0E01               	movlw	1
  4632   001980  6E04               	movwf	(??_digitalRead+1)^0,c
  4633   001982  2A03               	incf	??_digitalRead^0,f,c
  4634   001984  EFC6  F00C         	goto	u2074
  4635   001988                     u2075:
  4636   001988  90D8               	bcf	status,0,c
  4637   00198A  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4638   00198C                     u2074:
  4639   00198C  2E03               	decfsz	??_digitalRead^0,f,c
  4640   00198E  EFC4  F00C         	goto	u2075
  4641   001992  5004               	movf	(??_digitalRead+1)^0,w,c
  4642   001994  1481               	andwf	129,w,c	;volatile
  4643   001996  6E05               	movwf	(??_digitalRead+2)^0,c
  4644   001998  5005               	movf	(??_digitalRead+2)^0,w,c
  4645   00199A  6E01               	movwf	?_digitalRead^0,c
  4646   00199C  6A02               	clrf	(?_digitalRead+1)^0,c
  4647   00199E  EF3F  F00D         	goto	l83
  4648   0019A2                     l2831:
  4649   0019A2  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4650   0019A4  EFDF  F00C         	goto	u2080
  4651   0019A8  5002               	movf	(digitalRead@pin+1)^0,w,c
  4652   0019AA  E107               	bnz	u2081
  4653   0019AC  0E18               	movlw	24
  4654   0019AE  5C01               	subwf	digitalRead@pin^0,w,c
  4655   0019B0  B0D8               	btfsc	status,0,c
  4656   0019B2  EFDD  F00C         	goto	u2081
  4657   0019B6  EFDF  F00C         	goto	u2080
  4658   0019BA                     u2081:
  4659   0019BA  EFF5  F00C         	goto	l2839
  4660   0019BE                     u2080:
  4661   0019BE                     
  4662                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  4663   0019BE  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4664   0019C2  0EF0               	movlw	-16
  4665   0019C4  2603               	addwf	??_digitalRead^0,f,c
  4666   0019C6  0E01               	movlw	1
  4667   0019C8  6E04               	movwf	(??_digitalRead+1)^0,c
  4668   0019CA  2A03               	incf	??_digitalRead^0,f,c
  4669   0019CC  EFEA  F00C         	goto	u2094
  4670   0019D0                     u2095:
  4671   0019D0  90D8               	bcf	status,0,c
  4672   0019D2  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4673   0019D4                     u2094:
  4674   0019D4  2E03               	decfsz	??_digitalRead^0,f,c
  4675   0019D6  EFE8  F00C         	goto	u2095
  4676   0019DA  5004               	movf	(??_digitalRead+1)^0,w,c
  4677   0019DC  1482               	andwf	130,w,c	;volatile
  4678   0019DE  6E05               	movwf	(??_digitalRead+2)^0,c
  4679   0019E0  5005               	movf	(??_digitalRead+2)^0,w,c
  4680   0019E2  6E01               	movwf	?_digitalRead^0,c
  4681   0019E4  6A02               	clrf	(?_digitalRead+1)^0,c
  4682   0019E6  EF3F  F00D         	goto	l83
  4683   0019EA                     l2839:
  4684   0019EA  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4685   0019EC  EF03  F00D         	goto	u2100
  4686   0019F0  5002               	movf	(digitalRead@pin+1)^0,w,c
  4687   0019F2  E107               	bnz	u2101
  4688   0019F4  0E20               	movlw	32
  4689   0019F6  5C01               	subwf	digitalRead@pin^0,w,c
  4690   0019F8  B0D8               	btfsc	status,0,c
  4691   0019FA  EF01  F00D         	goto	u2101
  4692   0019FE  EF03  F00D         	goto	u2100
  4693   001A02                     u2101:
  4694   001A02  EF19  F00D         	goto	l2847
  4695   001A06                     u2100:
  4696   001A06                     
  4697                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  4698   001A06  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4699   001A0A  0EE8               	movlw	-24
  4700   001A0C  2603               	addwf	??_digitalRead^0,f,c
  4701   001A0E  0E01               	movlw	1
  4702   001A10  6E04               	movwf	(??_digitalRead+1)^0,c
  4703   001A12  2A03               	incf	??_digitalRead^0,f,c
  4704   001A14  EF0E  F00D         	goto	u2114
  4705   001A18                     u2115:
  4706   001A18  90D8               	bcf	status,0,c
  4707   001A1A  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4708   001A1C                     u2114:
  4709   001A1C  2E03               	decfsz	??_digitalRead^0,f,c
  4710   001A1E  EF0C  F00D         	goto	u2115
  4711   001A22  5004               	movf	(??_digitalRead+1)^0,w,c
  4712   001A24  1483               	andwf	131,w,c	;volatile
  4713   001A26  6E05               	movwf	(??_digitalRead+2)^0,c
  4714   001A28  5005               	movf	(??_digitalRead+2)^0,w,c
  4715   001A2A  6E01               	movwf	?_digitalRead^0,c
  4716   001A2C  6A02               	clrf	(?_digitalRead+1)^0,c
  4717   001A2E  EF3F  F00D         	goto	l83
  4718   001A32                     l2847:
  4719   001A32  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4720   001A34  EF27  F00D         	goto	u2120
  4721   001A38  5002               	movf	(digitalRead@pin+1)^0,w,c
  4722   001A3A  E107               	bnz	u2121
  4723   001A3C  0E28               	movlw	40
  4724   001A3E  5C01               	subwf	digitalRead@pin^0,w,c
  4725   001A40  B0D8               	btfsc	status,0,c
  4726   001A42  EF25  F00D         	goto	u2121
  4727   001A46  EF27  F00D         	goto	u2120
  4728   001A4A                     u2121:
  4729   001A4A  EF3D  F00D         	goto	l88
  4730   001A4E                     u2120:
  4731   001A4E                     
  4732                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  4733   001A4E  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4734   001A52  0EE0               	movlw	-32
  4735   001A54  2603               	addwf	??_digitalRead^0,f,c
  4736   001A56  0E01               	movlw	1
  4737   001A58  6E04               	movwf	(??_digitalRead+1)^0,c
  4738   001A5A  2A03               	incf	??_digitalRead^0,f,c
  4739   001A5C  EF32  F00D         	goto	u2134
  4740   001A60                     u2135:
  4741   001A60  90D8               	bcf	status,0,c
  4742   001A62  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4743   001A64                     u2134:
  4744   001A64  2E03               	decfsz	??_digitalRead^0,f,c
  4745   001A66  EF30  F00D         	goto	u2135
  4746   001A6A  5004               	movf	(??_digitalRead+1)^0,w,c
  4747   001A6C  1484               	andwf	132,w,c	;volatile
  4748   001A6E  6E05               	movwf	(??_digitalRead+2)^0,c
  4749   001A70  5005               	movf	(??_digitalRead+2)^0,w,c
  4750   001A72  6E01               	movwf	?_digitalRead^0,c
  4751   001A74  6A02               	clrf	(?_digitalRead+1)^0,c
  4752   001A76  EF3F  F00D         	goto	l83
  4753   001A7A                     l88:
  4754   001A7A                     
  4755                           ;io.c: 51:     return -1;
  4756   001A7A  6801               	setf	?_digitalRead^0,c
  4757   001A7C  6802               	setf	(?_digitalRead+1)^0,c
  4758   001A7E                     l83:
  4759   001A7E  0012               	return		;funcret
  4760   001A80                     __end_of_digitalRead:
  4761                           	callstack 0
  4762                           
  4763 ;; *************** function _clear_SCL *****************
  4764 ;; Defined at:
  4765 ;;		line 39 in file "soft_i2c.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;		None
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;		None
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      void 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0, cstack
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4779 ;;      Params:         0       0       0       0       0       0       0       0       0
  4780 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4782 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4783 ;;Total ram usage:        0 bytes
  4784 ;; Hardware stack levels used: 1
  4785 ;; Hardware stack levels required when called: 1
  4786 ;; This function calls:
  4787 ;;		_digitalWrite
  4788 ;;		_pinMode
  4789 ;; This function is called by:
  4790 ;;		_i2c_start
  4791 ;;		_i2c_write_bit
  4792 ;;		_i2c_read_bit
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text32
  4797   002408                     __ptext32:
  4798                           	callstack 0
  4799   002408                     _clear_SCL:
  4800                           	callstack 24
  4801   002408                     
  4802                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  4803   002408  0E00               	movlw	0
  4804   00240A  6E02               	movwf	(pinMode@pin+1)^0,c
  4805   00240C  0E09               	movlw	9
  4806   00240E  6E01               	movwf	pinMode@pin^0,c
  4807   002410  0E00               	movlw	0
  4808   002412  6E04               	movwf	(pinMode@type+1)^0,c
  4809   002414  0E00               	movlw	0
  4810   002416  6E03               	movwf	pinMode@type^0,c
  4811   002418  EC9F  F009         	call	_pinMode	;wreg free
  4812                           
  4813                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  4814   00241C  0E00               	movlw	0
  4815   00241E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4816   002420  0E09               	movlw	9
  4817   002422  6E01               	movwf	digitalWrite@pin^0,c
  4818   002424  0E00               	movlw	0
  4819   002426  6E04               	movwf	(digitalWrite@value+1)^0,c
  4820   002428  0E00               	movlw	0
  4821   00242A  6E03               	movwf	digitalWrite@value^0,c
  4822   00242C  EC78  F008         	call	_digitalWrite	;wreg free
  4823   002430  0012               	return		;funcret
  4824   002432                     __end_of_clear_SCL:
  4825                           	callstack 0
  4826                           
  4827 ;; *************** function _digitalWrite *****************
  4828 ;; Defined at:
  4829 ;;		line 14 in file "io.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;  pin             2    0[COMRAM] int 
  4832 ;;  value           2    2[COMRAM] int 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2, status,0
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4844 ;;      Params:         4       0       0       0       0       0       0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4846 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4847 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4848 ;;Total ram usage:        6 bytes
  4849 ;; Hardware stack levels used: 1
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_clear_SCL
  4854 ;;		_clear_SDA
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text33
  4859   0010F0                     __ptext33:
  4860                           	callstack 0
  4861   0010F0                     _digitalWrite:
  4862                           	callstack 24
  4863   0010F0                     
  4864                           ;io.c: 16:     if(pin <8){
  4865   0010F0  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4866   0010F2  EF86  F008         	goto	u1840
  4867   0010F6  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4868   0010F8  E107               	bnz	u1841
  4869   0010FA  0E08               	movlw	8
  4870   0010FC  5C01               	subwf	digitalWrite@pin^0,w,c
  4871   0010FE  B0D8               	btfsc	status,0,c
  4872   001100  EF84  F008         	goto	u1841
  4873   001104  EF86  F008         	goto	u1840
  4874   001108                     u1841:
  4875   001108  EFB0  F008         	goto	l2783
  4876   00110C                     u1840:
  4877   00110C                     
  4878                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  4879   00110C  5003               	movf	digitalWrite@value^0,w,c
  4880   00110E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4881   001110  B4D8               	btfsc	status,2,c
  4882   001112  EF8D  F008         	goto	u1851
  4883   001116  EF8F  F008         	goto	u1850
  4884   00111A                     u1851:
  4885   00111A  EF9F  F008         	goto	l2781
  4886   00111E                     u1850:
  4887   00111E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4888   001122  0E01               	movlw	1
  4889   001124  6E06               	movwf	(??_digitalWrite+1)^0,c
  4890   001126  2A05               	incf	??_digitalWrite^0,f,c
  4891   001128  EF98  F008         	goto	u1864
  4892   00112C                     u1865:
  4893   00112C  90D8               	bcf	status,0,c
  4894   00112E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4895   001130                     u1864:
  4896   001130  2E05               	decfsz	??_digitalWrite^0,f,c
  4897   001132  EF96  F008         	goto	u1865
  4898   001136  5006               	movf	(??_digitalWrite+1)^0,w,c
  4899   001138  1280               	iorwf	128,f,c	;volatile
  4900   00113A  EF9E  F009         	goto	l79
  4901   00113E                     l2781:
  4902   00113E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4903   001142  0E01               	movlw	1
  4904   001144  6E06               	movwf	(??_digitalWrite+1)^0,c
  4905   001146  2A05               	incf	??_digitalWrite^0,f,c
  4906   001148  EFA8  F008         	goto	u1874
  4907   00114C                     u1875:
  4908   00114C  90D8               	bcf	status,0,c
  4909   00114E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4910   001150                     u1874:
  4911   001150  2E05               	decfsz	??_digitalWrite^0,f,c
  4912   001152  EFA6  F008         	goto	u1875
  4913   001156  5006               	movf	(??_digitalWrite+1)^0,w,c
  4914   001158  0AFF               	xorlw	255
  4915   00115A  1680               	andwf	128,f,c	;volatile
  4916   00115C  EF9E  F009         	goto	l79
  4917   001160                     l2783:
  4918   001160  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4919   001162  EFBE  F008         	goto	u1880
  4920   001166  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4921   001168  E107               	bnz	u1881
  4922   00116A  0E10               	movlw	16
  4923   00116C  5C01               	subwf	digitalWrite@pin^0,w,c
  4924   00116E  B0D8               	btfsc	status,0,c
  4925   001170  EFBC  F008         	goto	u1881
  4926   001174  EFBE  F008         	goto	u1880
  4927   001178                     u1881:
  4928   001178  EFEC  F008         	goto	l2791
  4929   00117C                     u1880:
  4930   00117C                     
  4931                           ;io.c: 20:         pin -=8;
  4932   00117C  0EF8               	movlw	248
  4933   00117E  2601               	addwf	digitalWrite@pin^0,f,c
  4934   001180  0EFF               	movlw	255
  4935   001182  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4936                           
  4937                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  4938   001184  5003               	movf	digitalWrite@value^0,w,c
  4939   001186  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4940   001188  B4D8               	btfsc	status,2,c
  4941   00118A  EFC9  F008         	goto	u1891
  4942   00118E  EFCB  F008         	goto	u1890
  4943   001192                     u1891:
  4944   001192  EFDB  F008         	goto	l2789
  4945   001196                     u1890:
  4946   001196  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4947   00119A  0E01               	movlw	1
  4948   00119C  6E06               	movwf	(??_digitalWrite+1)^0,c
  4949   00119E  2A05               	incf	??_digitalWrite^0,f,c
  4950   0011A0  EFD4  F008         	goto	u1904
  4951   0011A4                     u1905:
  4952   0011A4  90D8               	bcf	status,0,c
  4953   0011A6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4954   0011A8                     u1904:
  4955   0011A8  2E05               	decfsz	??_digitalWrite^0,f,c
  4956   0011AA  EFD2  F008         	goto	u1905
  4957   0011AE  5006               	movf	(??_digitalWrite+1)^0,w,c
  4958   0011B0  1281               	iorwf	129,f,c	;volatile
  4959   0011B2  EF9E  F009         	goto	l79
  4960   0011B6                     l2789:
  4961   0011B6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4962   0011BA  0E01               	movlw	1
  4963   0011BC  6E06               	movwf	(??_digitalWrite+1)^0,c
  4964   0011BE  2A05               	incf	??_digitalWrite^0,f,c
  4965   0011C0  EFE4  F008         	goto	u1914
  4966   0011C4                     u1915:
  4967   0011C4  90D8               	bcf	status,0,c
  4968   0011C6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4969   0011C8                     u1914:
  4970   0011C8  2E05               	decfsz	??_digitalWrite^0,f,c
  4971   0011CA  EFE2  F008         	goto	u1915
  4972   0011CE  5006               	movf	(??_digitalWrite+1)^0,w,c
  4973   0011D0  0AFF               	xorlw	255
  4974   0011D2  1681               	andwf	129,f,c	;volatile
  4975   0011D4  EF9E  F009         	goto	l79
  4976   0011D8                     l2791:
  4977   0011D8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4978   0011DA  EFFA  F008         	goto	u1920
  4979   0011DE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4980   0011E0  E107               	bnz	u1921
  4981   0011E2  0E18               	movlw	24
  4982   0011E4  5C01               	subwf	digitalWrite@pin^0,w,c
  4983   0011E6  B0D8               	btfsc	status,0,c
  4984   0011E8  EFF8  F008         	goto	u1921
  4985   0011EC  EFFA  F008         	goto	u1920
  4986   0011F0                     u1921:
  4987   0011F0  EF28  F009         	goto	l2799
  4988   0011F4                     u1920:
  4989   0011F4                     
  4990                           ;io.c: 24:         pin -=16;
  4991   0011F4  0EF0               	movlw	240
  4992   0011F6  2601               	addwf	digitalWrite@pin^0,f,c
  4993   0011F8  0EFF               	movlw	255
  4994   0011FA  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4995                           
  4996                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  4997   0011FC  5003               	movf	digitalWrite@value^0,w,c
  4998   0011FE  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4999   001200  B4D8               	btfsc	status,2,c
  5000   001202  EF05  F009         	goto	u1931
  5001   001206  EF07  F009         	goto	u1930
  5002   00120A                     u1931:
  5003   00120A  EF17  F009         	goto	l2797
  5004   00120E                     u1930:
  5005   00120E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5006   001212  0E01               	movlw	1
  5007   001214  6E06               	movwf	(??_digitalWrite+1)^0,c
  5008   001216  2A05               	incf	??_digitalWrite^0,f,c
  5009   001218  EF10  F009         	goto	u1944
  5010   00121C                     u1945:
  5011   00121C  90D8               	bcf	status,0,c
  5012   00121E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5013   001220                     u1944:
  5014   001220  2E05               	decfsz	??_digitalWrite^0,f,c
  5015   001222  EF0E  F009         	goto	u1945
  5016   001226  5006               	movf	(??_digitalWrite+1)^0,w,c
  5017   001228  1282               	iorwf	130,f,c	;volatile
  5018   00122A  EF9E  F009         	goto	l79
  5019   00122E                     l2797:
  5020   00122E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5021   001232  0E01               	movlw	1
  5022   001234  6E06               	movwf	(??_digitalWrite+1)^0,c
  5023   001236  2A05               	incf	??_digitalWrite^0,f,c
  5024   001238  EF20  F009         	goto	u1954
  5025   00123C                     u1955:
  5026   00123C  90D8               	bcf	status,0,c
  5027   00123E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5028   001240                     u1954:
  5029   001240  2E05               	decfsz	??_digitalWrite^0,f,c
  5030   001242  EF1E  F009         	goto	u1955
  5031   001246  5006               	movf	(??_digitalWrite+1)^0,w,c
  5032   001248  0AFF               	xorlw	255
  5033   00124A  1682               	andwf	130,f,c	;volatile
  5034   00124C  EF9E  F009         	goto	l79
  5035   001250                     l2799:
  5036   001250  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5037   001252  EF36  F009         	goto	u1960
  5038   001256  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5039   001258  E107               	bnz	u1961
  5040   00125A  0E20               	movlw	32
  5041   00125C  5C01               	subwf	digitalWrite@pin^0,w,c
  5042   00125E  B0D8               	btfsc	status,0,c
  5043   001260  EF34  F009         	goto	u1961
  5044   001264  EF36  F009         	goto	u1960
  5045   001268                     u1961:
  5046   001268  EF64  F009         	goto	l2807
  5047   00126C                     u1960:
  5048   00126C                     
  5049                           ;io.c: 28:         pin -=24;
  5050   00126C  0EE8               	movlw	232
  5051   00126E  2601               	addwf	digitalWrite@pin^0,f,c
  5052   001270  0EFF               	movlw	255
  5053   001272  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5054                           
  5055                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  5056   001274  5003               	movf	digitalWrite@value^0,w,c
  5057   001276  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5058   001278  B4D8               	btfsc	status,2,c
  5059   00127A  EF41  F009         	goto	u1971
  5060   00127E  EF43  F009         	goto	u1970
  5061   001282                     u1971:
  5062   001282  EF53  F009         	goto	l2805
  5063   001286                     u1970:
  5064   001286  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5065   00128A  0E01               	movlw	1
  5066   00128C  6E06               	movwf	(??_digitalWrite+1)^0,c
  5067   00128E  2A05               	incf	??_digitalWrite^0,f,c
  5068   001290  EF4C  F009         	goto	u1984
  5069   001294                     u1985:
  5070   001294  90D8               	bcf	status,0,c
  5071   001296  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5072   001298                     u1984:
  5073   001298  2E05               	decfsz	??_digitalWrite^0,f,c
  5074   00129A  EF4A  F009         	goto	u1985
  5075   00129E  5006               	movf	(??_digitalWrite+1)^0,w,c
  5076   0012A0  1283               	iorwf	131,f,c	;volatile
  5077   0012A2  EF9E  F009         	goto	l79
  5078   0012A6                     l2805:
  5079   0012A6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5080   0012AA  0E01               	movlw	1
  5081   0012AC  6E06               	movwf	(??_digitalWrite+1)^0,c
  5082   0012AE  2A05               	incf	??_digitalWrite^0,f,c
  5083   0012B0  EF5C  F009         	goto	u1994
  5084   0012B4                     u1995:
  5085   0012B4  90D8               	bcf	status,0,c
  5086   0012B6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5087   0012B8                     u1994:
  5088   0012B8  2E05               	decfsz	??_digitalWrite^0,f,c
  5089   0012BA  EF5A  F009         	goto	u1995
  5090   0012BE  5006               	movf	(??_digitalWrite+1)^0,w,c
  5091   0012C0  0AFF               	xorlw	255
  5092   0012C2  1683               	andwf	131,f,c	;volatile
  5093   0012C4  EF9E  F009         	goto	l79
  5094   0012C8                     l2807:
  5095   0012C8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5096   0012CA  EF72  F009         	goto	u2000
  5097   0012CE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5098   0012D0  E107               	bnz	u2001
  5099   0012D2  0E28               	movlw	40
  5100   0012D4  5C01               	subwf	digitalWrite@pin^0,w,c
  5101   0012D6  B0D8               	btfsc	status,0,c
  5102   0012D8  EF70  F009         	goto	u2001
  5103   0012DC  EF72  F009         	goto	u2000
  5104   0012E0                     u2001:
  5105   0012E0  EF9E  F009         	goto	l79
  5106   0012E4                     u2000:
  5107   0012E4                     
  5108                           ;io.c: 32:         pin -=32;
  5109   0012E4  0EE0               	movlw	224
  5110   0012E6  2601               	addwf	digitalWrite@pin^0,f,c
  5111   0012E8  0EFF               	movlw	255
  5112   0012EA  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5113                           
  5114                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  5115   0012EC  5003               	movf	digitalWrite@value^0,w,c
  5116   0012EE  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5117   0012F0  B4D8               	btfsc	status,2,c
  5118   0012F2  EF7D  F009         	goto	u2011
  5119   0012F6  EF7F  F009         	goto	u2010
  5120   0012FA                     u2011:
  5121   0012FA  EF8F  F009         	goto	l2813
  5122   0012FE                     u2010:
  5123   0012FE  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5124   001302  0E01               	movlw	1
  5125   001304  6E06               	movwf	(??_digitalWrite+1)^0,c
  5126   001306  2A05               	incf	??_digitalWrite^0,f,c
  5127   001308  EF88  F009         	goto	u2024
  5128   00130C                     u2025:
  5129   00130C  90D8               	bcf	status,0,c
  5130   00130E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5131   001310                     u2024:
  5132   001310  2E05               	decfsz	??_digitalWrite^0,f,c
  5133   001312  EF86  F009         	goto	u2025
  5134   001316  5006               	movf	(??_digitalWrite+1)^0,w,c
  5135   001318  1284               	iorwf	132,f,c	;volatile
  5136   00131A  EF9E  F009         	goto	l79
  5137   00131E                     l2813:
  5138   00131E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5139   001322  0E01               	movlw	1
  5140   001324  6E06               	movwf	(??_digitalWrite+1)^0,c
  5141   001326  2A05               	incf	??_digitalWrite^0,f,c
  5142   001328  EF98  F009         	goto	u2034
  5143   00132C                     u2035:
  5144   00132C  90D8               	bcf	status,0,c
  5145   00132E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5146   001330                     u2034:
  5147   001330  2E05               	decfsz	??_digitalWrite^0,f,c
  5148   001332  EF96  F009         	goto	u2035
  5149   001336  5006               	movf	(??_digitalWrite+1)^0,w,c
  5150   001338  0AFF               	xorlw	255
  5151   00133A  1684               	andwf	132,f,c	;volatile
  5152   00133C                     l79:
  5153   00133C  0012               	return		;funcret
  5154   00133E                     __end_of_digitalWrite:
  5155                           	callstack 0
  5156                           
  5157 ;; *************** function _I2C_delay *****************
  5158 ;; Defined at:
  5159 ;;		line 22 in file "soft_i2c.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  i               2    0        int 
  5164 ;;  v               2    0        volatile int 
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      void 
  5167 ;; Registers used:
  5168 ;;		None
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used: 1
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_i2c_start
  5184 ;;		_i2c_stop
  5185 ;;		_i2c_write_bit
  5186 ;;		_i2c_read_bit
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text34
  5191   002594                     __ptext34:
  5192                           	callstack 0
  5193   002594                     _I2C_delay:
  5194                           	callstack 25
  5195   002594  0012               	return		;funcret
  5196   002596                     __end_of_I2C_delay:
  5197                           	callstack 0
  5198                           
  5199 ;; *************** function _dec2bcd *****************
  5200 ;; Defined at:
  5201 ;;		line 9 in file "ds1307.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  value           2   22[COMRAM] int 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  2   22[COMRAM] int 
  5208 ;; Registers used:
  5209 ;;		wreg, status,2, status,0, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5215 ;;      Params:         2       0       0       0       0       0       0       0       0
  5216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5217 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5218 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5219 ;;Total ram usage:        6 bytes
  5220 ;; Hardware stack levels used: 1
  5221 ;; Hardware stack levels required when called: 1
  5222 ;; This function calls:
  5223 ;;		___awdiv
  5224 ;;		___awmod
  5225 ;; This function is called by:
  5226 ;;		_smLoop
  5227 ;;		_varInit
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	text35
  5232   001EA8                     __ptext35:
  5233                           	callstack 0
  5234   001EA8                     _dec2bcd:
  5235                           	callstack 28
  5236   001EA8                     
  5237                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  5238   001EA8  C017  F001         	movff	dec2bcd@value,___awdiv@dividend
  5239   001EAC  C018  F002         	movff	dec2bcd@value+1,___awdiv@dividend+1
  5240   001EB0  0E00               	movlw	0
  5241   001EB2  6E04               	movwf	(___awdiv@divisor+1)^0,c
  5242   001EB4  0E0A               	movlw	10
  5243   001EB6  6E03               	movwf	___awdiv@divisor^0,c
  5244   001EB8  EC22  F00E         	call	___awdiv	;wreg free
  5245   001EBC  C001  F019         	movff	?___awdiv,??_dec2bcd
  5246   001EC0  C002  F01A         	movff	?___awdiv+1,??_dec2bcd+1
  5247   001EC4  3A19               	swapf	??_dec2bcd^0,f,c
  5248   001EC6  3A1A               	swapf	(??_dec2bcd+1)^0,f,c
  5249   001EC8  0EF0               	movlw	240
  5250   001ECA  161A               	andwf	(??_dec2bcd+1)^0,f,c
  5251   001ECC  5019               	movf	??_dec2bcd^0,w,c
  5252   001ECE  0B0F               	andlw	15
  5253   001ED0  121A               	iorwf	(??_dec2bcd+1)^0,f,c
  5254   001ED2  0EF0               	movlw	240
  5255   001ED4  1619               	andwf	??_dec2bcd^0,f,c
  5256   001ED6  C017  F009         	movff	dec2bcd@value,___awmod@dividend
  5257   001EDA  C018  F00A         	movff	dec2bcd@value+1,___awmod@dividend+1
  5258   001EDE  0E00               	movlw	0
  5259   001EE0  6E0C               	movwf	(___awmod@divisor+1)^0,c
  5260   001EE2  0E0A               	movlw	10
  5261   001EE4  6E0B               	movwf	___awmod@divisor^0,c
  5262   001EE6  EC84  F00E         	call	___awmod	;wreg free
  5263   001EEA  5009               	movf	?___awmod^0,w,c
  5264   001EEC  2419               	addwf	??_dec2bcd^0,w,c
  5265   001EEE  6E1B               	movwf	(??_dec2bcd+2)^0,c
  5266   001EF0  500A               	movf	(?___awmod+1)^0,w,c
  5267   001EF2  201A               	addwfc	(??_dec2bcd+1)^0,w,c
  5268   001EF4  6E1C               	movwf	(??_dec2bcd+3)^0,c
  5269   001EF6  0E80               	movlw	128
  5270   001EF8  101B               	iorwf	(??_dec2bcd+2)^0,w,c
  5271   001EFA  6E17               	movwf	dec2bcd@value^0,c
  5272   001EFC  501C               	movf	(??_dec2bcd+3)^0,w,c
  5273   001EFE  6E18               	movwf	(dec2bcd@value+1)^0,c
  5274   001F00                     
  5275                           ;ds1307.c: 11:     return value;
  5276   001F00  C017  F017         	movff	dec2bcd@value,?_dec2bcd
  5277   001F04  C018  F018         	movff	dec2bcd@value+1,?_dec2bcd+1
  5278   001F08  0012               	return		;funcret
  5279   001F0A                     __end_of_dec2bcd:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function ___awmod *****************
  5283 ;; Defined at:
  5284 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  dividend        2    8[COMRAM] int 
  5287 ;;  divisor         2   10[COMRAM] int 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  sign            1   13[COMRAM] unsigned char 
  5290 ;;  counter         1   12[COMRAM] unsigned char 
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  2    8[COMRAM] int 
  5293 ;; Registers used:
  5294 ;;		wreg, status,2, status,0
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5300 ;;      Params:         4       0       0       0       0       0       0       0       0
  5301 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5303 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5304 ;;Total ram usage:        6 bytes
  5305 ;; Hardware stack levels used: 1
  5306 ;; This function calls:
  5307 ;;		Nothing
  5308 ;; This function is called by:
  5309 ;;		_dec2bcd
  5310 ;;		_lcdInt
  5311 ;;		_rtcPutSeconds
  5312 ;;		_rtcPutMinutes
  5313 ;;		_rtcPutHours
  5314 ;;		_rtcPutDate
  5315 ;;		_rtcPutMonth
  5316 ;;		_rtcPutYear
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text36
  5321   001D08                     __ptext36:
  5322                           	callstack 0
  5323   001D08                     ___awmod:
  5324                           	callstack 27
  5325   001D08  0E00               	movlw	0
  5326   001D0A  6E0E               	movwf	___awmod@sign^0,c
  5327   001D0C  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  5328   001D0E  EF8D  F00E         	goto	u2660
  5329   001D12  EF8B  F00E         	goto	u2661
  5330   001D16                     u2661:
  5331   001D16  EF93  F00E         	goto	l3149
  5332   001D1A                     u2660:
  5333   001D1A  6C09               	negf	___awmod@dividend^0,c
  5334   001D1C  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  5335   001D1E  B0D8               	btfsc	status,0,c
  5336   001D20  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  5337   001D22  0E01               	movlw	1
  5338   001D24  6E0E               	movwf	___awmod@sign^0,c
  5339   001D26                     l3149:
  5340   001D26  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  5341   001D28  EF9A  F00E         	goto	u2670
  5342   001D2C  EF98  F00E         	goto	u2671
  5343   001D30                     u2671:
  5344   001D30  EF9E  F00E         	goto	l3153
  5345   001D34                     u2670:
  5346   001D34  6C0B               	negf	___awmod@divisor^0,c
  5347   001D36  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  5348   001D38  B0D8               	btfsc	status,0,c
  5349   001D3A  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  5350   001D3C                     l3153:
  5351   001D3C  500B               	movf	___awmod@divisor^0,w,c
  5352   001D3E  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  5353   001D40  B4D8               	btfsc	status,2,c
  5354   001D42  EFA5  F00E         	goto	u2681
  5355   001D46  EFA7  F00E         	goto	u2680
  5356   001D4A                     u2681:
  5357   001D4A  EFCB  F00E         	goto	l3169
  5358   001D4E                     u2680:
  5359   001D4E  0E01               	movlw	1
  5360   001D50  6E0D               	movwf	___awmod@counter^0,c
  5361   001D52  EFAF  F00E         	goto	l3159
  5362   001D56                     l3157:
  5363   001D56  90D8               	bcf	status,0,c
  5364   001D58  360B               	rlcf	___awmod@divisor^0,f,c
  5365   001D5A  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  5366   001D5C  2A0D               	incf	___awmod@counter^0,f,c
  5367   001D5E                     l3159:
  5368   001D5E  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  5369   001D60  EFB4  F00E         	goto	u2691
  5370   001D64  EFB6  F00E         	goto	u2690
  5371   001D68                     u2691:
  5372   001D68  EFAB  F00E         	goto	l3157
  5373   001D6C                     u2690:
  5374   001D6C                     l3161:
  5375   001D6C  500B               	movf	___awmod@divisor^0,w,c
  5376   001D6E  5C09               	subwf	___awmod@dividend^0,w,c
  5377   001D70  500C               	movf	(___awmod@divisor+1)^0,w,c
  5378   001D72  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  5379   001D74  A0D8               	btfss	status,0,c
  5380   001D76  EFBF  F00E         	goto	u2701
  5381   001D7A  EFC1  F00E         	goto	u2700
  5382   001D7E                     u2701:
  5383   001D7E  EFC5  F00E         	goto	l3165
  5384   001D82                     u2700:
  5385   001D82  500B               	movf	___awmod@divisor^0,w,c
  5386   001D84  5E09               	subwf	___awmod@dividend^0,f,c
  5387   001D86  500C               	movf	(___awmod@divisor+1)^0,w,c
  5388   001D88  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  5389   001D8A                     l3165:
  5390   001D8A  90D8               	bcf	status,0,c
  5391   001D8C  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  5392   001D8E  320B               	rrcf	___awmod@divisor^0,f,c
  5393   001D90  2E0D               	decfsz	___awmod@counter^0,f,c
  5394   001D92  EFB6  F00E         	goto	l3161
  5395   001D96                     l3169:
  5396   001D96  500E               	movf	___awmod@sign^0,w,c
  5397   001D98  B4D8               	btfsc	status,2,c
  5398   001D9A  EFD1  F00E         	goto	u2711
  5399   001D9E  EFD3  F00E         	goto	u2710
  5400   001DA2                     u2711:
  5401   001DA2  EFD7  F00E         	goto	l3173
  5402   001DA6                     u2710:
  5403   001DA6  6C09               	negf	___awmod@dividend^0,c
  5404   001DA8  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  5405   001DAA  B0D8               	btfsc	status,0,c
  5406   001DAC  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  5407   001DAE                     l3173:
  5408   001DAE  C009  F009         	movff	___awmod@dividend,?___awmod
  5409   001DB2  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  5410   001DB6  0012               	return		;funcret
  5411   001DB8                     __end_of___awmod:
  5412                           	callstack 0
  5413                           
  5414 ;; *************** function _bcd2dec *****************
  5415 ;; Defined at:
  5416 ;;		line 14 in file "ds1307.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  value           2   18[COMRAM] int 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  2   18[COMRAM] int 
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5430 ;;      Params:         2       0       0       0       0       0       0       0       0
  5431 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5432 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5433 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5434 ;;Total ram usage:        4 bytes
  5435 ;; Hardware stack levels used: 1
  5436 ;; Hardware stack levels required when called: 1
  5437 ;; This function calls:
  5438 ;;		___awdiv
  5439 ;;		___wmul
  5440 ;; This function is called by:
  5441 ;;		_outputPrint
  5442 ;;		_smLoop
  5443 ;;		_varInit
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           	psect	text37
  5448   00218A                     __ptext37:
  5449                           	callstack 0
  5450   00218A                     _bcd2dec:
  5451                           	callstack 27
  5452   00218A                     
  5453                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  5454   00218A  0E0F               	movlw	15
  5455   00218C  1413               	andwf	bcd2dec@value^0,w,c
  5456   00218E  6E15               	movwf	??_bcd2dec^0,c
  5457   002190  0E00               	movlw	0
  5458   002192  1414               	andwf	(bcd2dec@value+1)^0,w,c
  5459   002194  6E16               	movwf	(??_bcd2dec+1)^0,c
  5460   002196  0E00               	movlw	0
  5461   002198  6E04               	movwf	(___awdiv@divisor+1)^0,c
  5462   00219A  0E10               	movlw	16
  5463   00219C  6E03               	movwf	___awdiv@divisor^0,c
  5464   00219E  C013  F001         	movff	bcd2dec@value,___awdiv@dividend
  5465   0021A2  C014  F002         	movff	bcd2dec@value+1,___awdiv@dividend+1
  5466   0021A6  EC22  F00E         	call	___awdiv	;wreg free
  5467   0021AA  C001  F009         	movff	?___awdiv,___wmul@multiplier
  5468   0021AE  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  5469   0021B2  0E00               	movlw	0
  5470   0021B4  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  5471   0021B6  0E0A               	movlw	10
  5472   0021B8  6E0B               	movwf	___wmul@multiplicand^0,c
  5473   0021BA  EC42  F012         	call	___wmul	;wreg free
  5474   0021BE  5015               	movf	??_bcd2dec^0,w,c
  5475   0021C0  2409               	addwf	?___wmul^0,w,c
  5476   0021C2  6E13               	movwf	?_bcd2dec^0,c
  5477   0021C4  5016               	movf	(??_bcd2dec+1)^0,w,c
  5478   0021C6  200A               	addwfc	(?___wmul+1)^0,w,c
  5479   0021C8  6E14               	movwf	(?_bcd2dec+1)^0,c
  5480   0021CA  0012               	return		;funcret
  5481   0021CC                     __end_of_bcd2dec:
  5482                           	callstack 0
  5483                           
  5484 ;; *************** function ___wmul *****************
  5485 ;; Defined at:
  5486 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  multiplier      2    8[COMRAM] unsigned int 
  5489 ;;  multiplicand    2   10[COMRAM] unsigned int 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  product         2   12[COMRAM] unsigned int 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  2    8[COMRAM] unsigned int 
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0, prodl, prodh
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5501 ;;      Params:         4       0       0       0       0       0       0       0       0
  5502 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5504 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5505 ;;Total ram usage:        6 bytes
  5506 ;; Hardware stack levels used: 1
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_bcd2dec
  5511 ;;		_lcdInt
  5512 ;;		_pwmSet1
  5513 ;;		_pwmSet2
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text38
  5518   002484                     __ptext38:
  5519                           	callstack 0
  5520   002484                     ___wmul:
  5521                           	callstack 27
  5522   002484  5009               	movf	___wmul@multiplier^0,w,c
  5523   002486  020B               	mulwf	___wmul@multiplicand^0,c
  5524   002488  CFF3 F00D          	movff	prodl,___wmul@product
  5525   00248C  CFF4 F00E          	movff	prodh,___wmul@product+1
  5526   002490  5009               	movf	___wmul@multiplier^0,w,c
  5527   002492  020C               	mulwf	(___wmul@multiplicand+1)^0,c
  5528   002494  50F3               	movf	243,w,c
  5529   002496  260E               	addwf	(___wmul@product+1)^0,f,c
  5530   002498  500A               	movf	(___wmul@multiplier+1)^0,w,c
  5531   00249A  020B               	mulwf	___wmul@multiplicand^0,c
  5532   00249C  50F3               	movf	243,w,c
  5533   00249E  260E               	addwf	(___wmul@product+1)^0,f,c
  5534   0024A0  C00D  F009         	movff	___wmul@product,?___wmul
  5535   0024A4  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  5536   0024A8  0012               	return		;funcret
  5537   0024AA                     __end_of___wmul:
  5538                           	callstack 0
  5539                           
  5540 ;; *************** function ___awdiv *****************
  5541 ;; Defined at:
  5542 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  dividend        2    0[COMRAM] int 
  5545 ;;  divisor         2    2[COMRAM] int 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  quotient        2    6[COMRAM] int 
  5548 ;;  sign            1    5[COMRAM] unsigned char 
  5549 ;;  counter         1    4[COMRAM] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  2    0[COMRAM] int 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5559 ;;      Params:         4       0       0       0       0       0       0       0       0
  5560 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5562 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5563 ;;Total ram usage:        8 bytes
  5564 ;; Hardware stack levels used: 1
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_dec2bcd
  5569 ;;		_bcd2dec
  5570 ;;		_lcdInt
  5571 ;;		_rtcPutSeconds
  5572 ;;		_rtcPutMinutes
  5573 ;;		_rtcPutHours
  5574 ;;		_rtcPutDate
  5575 ;;		_rtcPutMonth
  5576 ;;		_rtcPutYear
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text39
  5581   001C44                     __ptext39:
  5582                           	callstack 0
  5583   001C44                     ___awdiv:
  5584                           	callstack 27
  5585   001C44  0E00               	movlw	0
  5586   001C46  6E06               	movwf	___awdiv@sign^0,c
  5587   001C48  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  5588   001C4A  EF2B  F00E         	goto	u2600
  5589   001C4E  EF29  F00E         	goto	u2601
  5590   001C52                     u2601:
  5591   001C52  EF31  F00E         	goto	l3105
  5592   001C56                     u2600:
  5593   001C56  6C03               	negf	___awdiv@divisor^0,c
  5594   001C58  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  5595   001C5A  B0D8               	btfsc	status,0,c
  5596   001C5C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  5597   001C5E  0E01               	movlw	1
  5598   001C60  6E06               	movwf	___awdiv@sign^0,c
  5599   001C62                     l3105:
  5600   001C62  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  5601   001C64  EF38  F00E         	goto	u2610
  5602   001C68  EF36  F00E         	goto	u2611
  5603   001C6C                     u2611:
  5604   001C6C  EF3E  F00E         	goto	l3111
  5605   001C70                     u2610:
  5606   001C70  6C01               	negf	___awdiv@dividend^0,c
  5607   001C72  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  5608   001C74  B0D8               	btfsc	status,0,c
  5609   001C76  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  5610   001C78  0E01               	movlw	1
  5611   001C7A  1A06               	xorwf	___awdiv@sign^0,f,c
  5612   001C7C                     l3111:
  5613   001C7C  0E00               	movlw	0
  5614   001C7E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  5615   001C80  0E00               	movlw	0
  5616   001C82  6E07               	movwf	___awdiv@quotient^0,c
  5617   001C84  5003               	movf	___awdiv@divisor^0,w,c
  5618   001C86  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  5619   001C88  B4D8               	btfsc	status,2,c
  5620   001C8A  EF49  F00E         	goto	u2621
  5621   001C8E  EF4B  F00E         	goto	u2620
  5622   001C92                     u2621:
  5623   001C92  EF73  F00E         	goto	l3133
  5624   001C96                     u2620:
  5625   001C96  0E01               	movlw	1
  5626   001C98  6E05               	movwf	___awdiv@counter^0,c
  5627   001C9A  EF53  F00E         	goto	l3119
  5628   001C9E                     l3117:
  5629   001C9E  90D8               	bcf	status,0,c
  5630   001CA0  3603               	rlcf	___awdiv@divisor^0,f,c
  5631   001CA2  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  5632   001CA4  2A05               	incf	___awdiv@counter^0,f,c
  5633   001CA6                     l3119:
  5634   001CA6  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  5635   001CA8  EF58  F00E         	goto	u2631
  5636   001CAC  EF5A  F00E         	goto	u2630
  5637   001CB0                     u2631:
  5638   001CB0  EF4F  F00E         	goto	l3117
  5639   001CB4                     u2630:
  5640   001CB4                     l3121:
  5641   001CB4  90D8               	bcf	status,0,c
  5642   001CB6  3607               	rlcf	___awdiv@quotient^0,f,c
  5643   001CB8  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  5644   001CBA  5003               	movf	___awdiv@divisor^0,w,c
  5645   001CBC  5C01               	subwf	___awdiv@dividend^0,w,c
  5646   001CBE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5647   001CC0  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  5648   001CC2  A0D8               	btfss	status,0,c
  5649   001CC4  EF66  F00E         	goto	u2641
  5650   001CC8  EF68  F00E         	goto	u2640
  5651   001CCC                     u2641:
  5652   001CCC  EF6D  F00E         	goto	l3129
  5653   001CD0                     u2640:
  5654   001CD0  5003               	movf	___awdiv@divisor^0,w,c
  5655   001CD2  5E01               	subwf	___awdiv@dividend^0,f,c
  5656   001CD4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  5657   001CD6  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  5658   001CD8  8007               	bsf	___awdiv@quotient^0,0,c
  5659   001CDA                     l3129:
  5660   001CDA  90D8               	bcf	status,0,c
  5661   001CDC  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  5662   001CDE  3203               	rrcf	___awdiv@divisor^0,f,c
  5663   001CE0  2E05               	decfsz	___awdiv@counter^0,f,c
  5664   001CE2  EF5A  F00E         	goto	l3121
  5665   001CE6                     l3133:
  5666   001CE6  5006               	movf	___awdiv@sign^0,w,c
  5667   001CE8  B4D8               	btfsc	status,2,c
  5668   001CEA  EF79  F00E         	goto	u2651
  5669   001CEE  EF7B  F00E         	goto	u2650
  5670   001CF2                     u2651:
  5671   001CF2  EF7F  F00E         	goto	l3137
  5672   001CF6                     u2650:
  5673   001CF6  6C07               	negf	___awdiv@quotient^0,c
  5674   001CF8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  5675   001CFA  B0D8               	btfsc	status,0,c
  5676   001CFC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  5677   001CFE                     l3137:
  5678   001CFE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5679   001D02  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5680   001D06  0012               	return		;funcret
  5681   001D08                     __end_of___awdiv:
  5682                           	callstack 0
  5683                           
  5684 ;; *************** function _setState *****************
  5685 ;; Defined at:
  5686 ;;		line 38 in file "var.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  newState        1    wreg     unsigned char 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  newState        1    0[COMRAM] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0
  5701 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5703 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used: 1
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_smInit
  5710 ;;		_smLoop
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text40
  5715   002568                     __ptext40:
  5716                           	callstack 0
  5717   002568                     _setState:
  5718                           	callstack 29
  5719                           
  5720                           ;incstack = 0
  5721                           ;setState@newState stored from wreg
  5722   002568  6E01               	movwf	setState@newState^0,c
  5723   00256A                     
  5724                           ;var.c: 39:     state = newState;
  5725   00256A  C001  F040         	movff	setState@newState,_state
  5726   00256E  0012               	return		;funcret
  5727   002570                     __end_of_setState:
  5728                           	callstack 0
  5729                           
  5730 ;; *************** function _eventInit *****************
  5731 ;; Defined at:
  5732 ;;		line 18 in file "event.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5746 ;;      Params:         0       0       0       0       0       0       0       0       0
  5747 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5748 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5749 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used: 1
  5752 ;; Hardware stack levels required when called: 1
  5753 ;; This function calls:
  5754 ;;		_kpInit
  5755 ;; This function is called by:
  5756 ;;		_smInit
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text41
  5761   002528                     __ptext41:
  5762                           	callstack 0
  5763   002528                     _eventInit:
  5764                           	callstack 28
  5765   002528                     
  5766                           ;event.c: 19:     kpInit();
  5767   002528  ECA7  F012         	call	_kpInit	;wreg free
  5768   00252C                     
  5769                           ;event.c: 21:     ev_ant = 0;
  5770   00252C  0E00               	movlw	0
  5771   00252E  6E3B               	movwf	(_ev_ant+1)^0,c
  5772   002530  0E00               	movlw	0
  5773   002532  6E3A               	movwf	_ev_ant^0,c
  5774   002534                     
  5775                           ;event.c: 22:     key = 1;
  5776   002534  0E00               	movlw	0
  5777   002536  6E37               	movwf	(_key+1)^0,c
  5778   002538  0E01               	movlw	1
  5779   00253A  6E36               	movwf	_key^0,c
  5780   00253C  0012               	return		;funcret
  5781   00253E                     __end_of_eventInit:
  5782                           	callstack 0
  5783                           
  5784 ;; *************** function _kpInit *****************
  5785 ;; Defined at:
  5786 ;;		line 81 in file "keypad.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;		None
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;		None
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      void 
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5800 ;;      Params:         0       0       0       0       0       0       0       0       0
  5801 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5803 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5804 ;;Total ram usage:        0 bytes
  5805 ;; Hardware stack levels used: 1
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_main
  5810 ;;		_eventInit
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text42
  5815   00254E                     __ptext42:
  5816                           	callstack 0
  5817   00254E                     _kpInit:
  5818                           	callstack 28
  5819   00254E                     
  5820                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  5821   00254E  6893               	setf	147,c	;volatile
  5822   002550                     
  5823                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  5824   002550  9EF1               	bcf	241,7,c	;volatile
  5825   002552                     
  5826                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  5827   002552  0E0E               	movlw	14
  5828   002554  6EC1               	movwf	193,c	;volatile
  5829   002556                     
  5830                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  5831   002556  0E00               	movlw	0
  5832   002558  6E63               	movwf	99,c	;volatile
  5833   00255A  0012               	return		;funcret
  5834   00255C                     __end_of_kpInit:
  5835                           	callstack 0
  5836                           
  5837 ;; *************** function _serialInit *****************
  5838 ;; Defined at:
  5839 ;;		line 48 in file "serial.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2, status,0
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5853 ;;      Params:         0       0       0       0       0       0       0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5855 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5856 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used: 1
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text43
  5867   0024C8                     __ptext43:
  5868                           	callstack 0
  5869   0024C8                     _serialInit:
  5870                           	callstack 30
  5871   0024C8                     
  5872                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  5873   0024C8  0E2C               	movlw	44
  5874   0024CA  6EAC               	movwf	172,c	;volatile
  5875                           
  5876                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  5877   0024CC  0E90               	movlw	144
  5878   0024CE  6EAB               	movwf	171,c	;volatile
  5879                           
  5880                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  5881   0024D0  0E08               	movlw	8
  5882   0024D2  6EB8               	movwf	184,c	;volatile
  5883                           
  5884                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  5885   0024D4  0E00               	movlw	0
  5886   0024D6  6EB0               	movwf	176,c	;volatile
  5887                           
  5888                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  5889   0024D8  0E22               	movlw	34
  5890   0024DA  6EAF               	movwf	175,c	;volatile
  5891   0024DC                     
  5892                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  5893   0024DC  8C94               	bsf	148,6,c	;volatile
  5894   0024DE                     
  5895                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  5896   0024DE  8E94               	bsf	148,7,c	;volatile
  5897   0024E0  0012               	return		;funcret
  5898   0024E2                     __end_of_serialInit:
  5899                           	callstack 0
  5900                           
  5901 ;; *************** function _lcdInit *****************
  5902 ;; Defined at:
  5903 ;;		line 117 in file "lcd.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;		None
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  i               1    3[COMRAM] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0
  5918 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5920 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5921 ;;Total ram usage:        1 bytes
  5922 ;; Hardware stack levels used: 1
  5923 ;; Hardware stack levels required when called: 3
  5924 ;; This function calls:
  5925 ;;		_Delay2ms
  5926 ;;		_lcdCommand
  5927 ;;		_lcdCommand4bits
  5928 ;; This function is called by:
  5929 ;;		_main
  5930 ;;		_outputInit
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text44
  5935   001DB8                     __ptext44:
  5936                           	callstack 0
  5937   001DB8                     _lcdInit:
  5938                           	callstack 27
  5939   001DB8                     
  5940                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  5941   001DB8  9095               	bcf	149,0,c	;volatile
  5942                           
  5943                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  5944   001DBA  9E95               	bcf	149,7,c	;volatile
  5945                           
  5946                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  5947   001DBC  9C95               	bcf	149,6,c	;volatile
  5948                           
  5949                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  5950   001DBE  9A95               	bcf	149,5,c	;volatile
  5951                           
  5952                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  5953   001DC0  9895               	bcf	149,4,c	;volatile
  5954                           
  5955                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  5956   001DC2  9495               	bcf	149,2,c	;volatile
  5957   001DC4                     
  5958                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  5959   001DC4  0E00               	movlw	0
  5960   001DC6  6E04               	movwf	lcdInit@i^0,c
  5961   001DC8                     l3545:
  5962                           
  5963                           ;lcd.c: 133:         Delay2ms();
  5964   001DC8  EC96  F011         	call	_Delay2ms	;wreg free
  5965   001DCC  2A04               	incf	lcdInit@i^0,f,c
  5966   001DCE  0E06               	movlw	6
  5967   001DD0  6404               	cpfsgt	lcdInit@i^0,c
  5968   001DD2  EFED  F00E         	goto	u3081
  5969   001DD6  EFEF  F00E         	goto	u3080
  5970   001DDA                     u3081:
  5971   001DDA  EFE4  F00E         	goto	l3545
  5972   001DDE                     u3080:
  5973   001DDE                     
  5974                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  5975   001DDE  0E00               	movlw	0
  5976   001DE0  6E01               	movwf	lcdCommand4bits@data^0,c
  5977   001DE2  0E30               	movlw	48
  5978   001DE4  EC18  F00F         	call	_lcdCommand4bits
  5979                           
  5980                           ;lcd.c: 138:     Delay2ms();
  5981   001DE8  EC96  F011         	call	_Delay2ms	;wreg free
  5982                           
  5983                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  5984   001DEC  0E00               	movlw	0
  5985   001DEE  6E01               	movwf	lcdCommand4bits@data^0,c
  5986   001DF0  0E30               	movlw	48
  5987   001DF2  EC18  F00F         	call	_lcdCommand4bits
  5988                           
  5989                           ;lcd.c: 142:     Delay2ms();
  5990   001DF6  EC96  F011         	call	_Delay2ms	;wreg free
  5991                           
  5992                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  5993   001DFA  0E00               	movlw	0
  5994   001DFC  6E01               	movwf	lcdCommand4bits@data^0,c
  5995   001DFE  0E30               	movlw	48
  5996   001E00  EC18  F00F         	call	_lcdCommand4bits
  5997                           
  5998                           ;lcd.c: 146:     Delay2ms();
  5999   001E04  EC96  F011         	call	_Delay2ms	;wreg free
  6000                           
  6001                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  6002   001E08  0E00               	movlw	0
  6003   001E0A  6E01               	movwf	lcdCommand4bits@data^0,c
  6004   001E0C  0E20               	movlw	32
  6005   001E0E  EC18  F00F         	call	_lcdCommand4bits
  6006                           
  6007                           ;lcd.c: 150:     Delay2ms();
  6008   001E12  EC96  F011         	call	_Delay2ms	;wreg free
  6009                           
  6010                           ;lcd.c: 153:     lcdCommand(0x28);
  6011   001E16  0E28               	movlw	40
  6012   001E18  EC5B  F010         	call	_lcdCommand
  6013                           
  6014                           ;lcd.c: 154:     lcdCommand(0x06);
  6015   001E1C  0E06               	movlw	6
  6016   001E1E  EC5B  F010         	call	_lcdCommand
  6017                           
  6018                           ;lcd.c: 156:     lcdCommand(0x0C);
  6019   001E22  0E0C               	movlw	12
  6020   001E24  EC5B  F010         	call	_lcdCommand
  6021                           
  6022                           ;lcd.c: 157:     lcdCommand(0x01);
  6023   001E28  0E01               	movlw	1
  6024   001E2A  EC5B  F010         	call	_lcdCommand
  6025   001E2E  0012               	return		;funcret
  6026   001E30                     __end_of_lcdInit:
  6027                           	callstack 0
  6028                           
  6029 ;; *************** function _lcdCommand *****************
  6030 ;; Defined at:
  6031 ;;		line 93 in file "lcd.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  cmd             1    wreg     unsigned char 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  cmd             1    2[COMRAM] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0
  6046 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6048 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6049 ;;Total ram usage:        1 bytes
  6050 ;; Hardware stack levels used: 1
  6051 ;; Hardware stack levels required when called: 2
  6052 ;; This function calls:
  6053 ;;		_Delay2ms
  6054 ;;		_Delay40us
  6055 ;;		_lcdCommand4bits
  6056 ;; This function is called by:
  6057 ;;		_lcdInit
  6058 ;;		_outputPrint
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text45
  6063   0020B6                     __ptext45:
  6064                           	callstack 0
  6065   0020B6                     _lcdCommand:
  6066                           	callstack 26
  6067                           
  6068                           ;incstack = 0
  6069                           ;lcdCommand@cmd stored from wreg
  6070   0020B6  6E03               	movwf	lcdCommand@cmd^0,c
  6071   0020B8                     
  6072                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  6073   0020B8  0E00               	movlw	0
  6074   0020BA  6E01               	movwf	lcdCommand4bits@data^0,c
  6075   0020BC  5003               	movf	lcdCommand@cmd^0,w,c
  6076   0020BE  EC18  F00F         	call	_lcdCommand4bits
  6077                           
  6078                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  6079   0020C2  0E00               	movlw	0
  6080   0020C4  6E01               	movwf	lcdCommand4bits@data^0,c
  6081   0020C6  3803               	swapf	lcdCommand@cmd^0,w,c
  6082   0020C8  0BF0               	andlw	240
  6083   0020CA  EC18  F00F         	call	_lcdCommand4bits
  6084   0020CE                     
  6085                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  6086   0020CE  0E02               	movlw	2
  6087   0020D0  1803               	xorwf	lcdCommand@cmd^0,w,c
  6088   0020D2  B4D8               	btfsc	status,2,c
  6089   0020D4  EF6E  F010         	goto	u2721
  6090   0020D8  EF70  F010         	goto	u2720
  6091   0020DC                     u2721:
  6092   0020DC  EF78  F010         	goto	l3203
  6093   0020E0                     u2720:
  6094   0020E0  0403               	decf	lcdCommand@cmd^0,w,c
  6095   0020E2  A4D8               	btfss	status,2,c
  6096   0020E4  EF76  F010         	goto	u2731
  6097   0020E8  EF78  F010         	goto	u2730
  6098   0020EC                     u2731:
  6099   0020EC  EF7C  F010         	goto	l3205
  6100   0020F0                     u2730:
  6101   0020F0                     l3203:
  6102                           
  6103                           ;lcd.c: 100:         Delay2ms();
  6104   0020F0  EC96  F011         	call	_Delay2ms	;wreg free
  6105                           
  6106                           ;lcd.c: 102:     } else {
  6107   0020F4  EF7E  F010         	goto	l180
  6108   0020F8                     l3205:
  6109                           
  6110                           ;lcd.c: 103:         Delay40us();
  6111   0020F8  EC7D  F012         	call	_Delay40us	;wreg free
  6112   0020FC                     l180:
  6113   0020FC  0012               	return		;funcret
  6114   0020FE                     __end_of_lcdCommand:
  6115                           	callstack 0
  6116                           
  6117 ;; *************** function _lcdCommand4bits *****************
  6118 ;; Defined at:
  6119 ;;		line 52 in file "lcd.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  cmd             1    wreg     unsigned char 
  6122 ;;  data            1    0[COMRAM] unsigned char 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  cmd             1    1[COMRAM] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  1    wreg      void 
  6127 ;; Registers used:
  6128 ;;		wreg, status,2, status,0, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6134 ;;      Params:         1       0       0       0       0       0       0       0       0
  6135 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6137 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6138 ;;Total ram usage:        2 bytes
  6139 ;; Hardware stack levels used: 1
  6140 ;; Hardware stack levels required when called: 1
  6141 ;; This function calls:
  6142 ;;		_pulseEnable
  6143 ;; This function is called by:
  6144 ;;		_lcdCommand
  6145 ;;		_lcdData
  6146 ;;		_lcdInit
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text46
  6151   001E30                     __ptext46:
  6152                           	callstack 0
  6153   001E30                     _lcdCommand4bits:
  6154                           	callstack 25
  6155                           
  6156                           ;incstack = 0
  6157                           ;lcdCommand4bits@cmd stored from wreg
  6158   001E30  6E02               	movwf	lcdCommand4bits@cmd^0,c
  6159   001E32                     
  6160                           ;lcd.c: 54:     if (data) {
  6161   001E32  5001               	movf	lcdCommand4bits@data^0,w,c
  6162   001E34  B4D8               	btfsc	status,2,c
  6163   001E36  EF1F  F00F         	goto	u2511
  6164   001E3A  EF21  F00F         	goto	u2510
  6165   001E3E                     u2511:
  6166   001E3E  EF24  F00F         	goto	l3017
  6167   001E42                     u2510:
  6168   001E42                     
  6169                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  6170   001E42  8083               	bsf	131,0,c	;volatile
  6171                           
  6172                           ;lcd.c: 56:     } else {
  6173   001E44  EF25  F00F         	goto	l3019
  6174   001E48                     l3017:
  6175                           
  6176                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  6177   001E48  9083               	bcf	131,0,c	;volatile
  6178   001E4A                     l3019:
  6179                           
  6180                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  6181   001E4A  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  6182   001E4C  EF2A  F00F         	goto	u2521
  6183   001E50  EF2C  F00F         	goto	u2520
  6184   001E54                     u2521:
  6185   001E54  EF2F  F00F         	goto	l3023
  6186   001E58                     u2520:
  6187   001E58                     
  6188                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  6189   001E58  8483               	bsf	131,2,c	;volatile
  6190                           
  6191                           ;lcd.c: 65:     } else {
  6192   001E5A  EF30  F00F         	goto	l3025
  6193   001E5E                     l3023:
  6194                           
  6195                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  6196   001E5E  9483               	bcf	131,2,c	;volatile
  6197   001E60                     l3025:
  6198                           
  6199                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  6200   001E60  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  6201   001E62  EF35  F00F         	goto	u2531
  6202   001E66  EF37  F00F         	goto	u2530
  6203   001E6A                     u2531:
  6204   001E6A  EF3A  F00F         	goto	l3029
  6205   001E6E                     u2530:
  6206   001E6E                     
  6207                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  6208   001E6E  8883               	bsf	131,4,c	;volatile
  6209                           
  6210                           ;lcd.c: 72:     } else {
  6211   001E70  EF3B  F00F         	goto	l3031
  6212   001E74                     l3029:
  6213                           
  6214                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  6215   001E74  9883               	bcf	131,4,c	;volatile
  6216   001E76                     l3031:
  6217                           
  6218                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  6219   001E76  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  6220   001E78  EF40  F00F         	goto	u2541
  6221   001E7C  EF42  F00F         	goto	u2540
  6222   001E80                     u2541:
  6223   001E80  EF45  F00F         	goto	l3035
  6224   001E84                     u2540:
  6225   001E84                     
  6226                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  6227   001E84  8A83               	bsf	131,5,c	;volatile
  6228                           
  6229                           ;lcd.c: 79:     } else {
  6230   001E86  EF46  F00F         	goto	l3037
  6231   001E8A                     l3035:
  6232                           
  6233                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  6234   001E8A  9A83               	bcf	131,5,c	;volatile
  6235   001E8C                     l3037:
  6236                           
  6237                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  6238   001E8C  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  6239   001E8E  EF4B  F00F         	goto	u2551
  6240   001E92  EF4D  F00F         	goto	u2550
  6241   001E96                     u2551:
  6242   001E96  EF50  F00F         	goto	l3041
  6243   001E9A                     u2550:
  6244   001E9A                     
  6245                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  6246   001E9A  8C83               	bsf	131,6,c	;volatile
  6247                           
  6248                           ;lcd.c: 86:     } else {
  6249   001E9C  EF51  F00F         	goto	l3043
  6250   001EA0                     l3041:
  6251                           
  6252                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  6253   001EA0  9C83               	bcf	131,6,c	;volatile
  6254   001EA2                     l3043:
  6255                           
  6256                           ;lcd.c: 90:     pulseEnable();
  6257   001EA2  ECBC  F012         	call	_pulseEnable	;wreg free
  6258   001EA6  0012               	return		;funcret
  6259   001EA8                     __end_of_lcdCommand4bits:
  6260                           	callstack 0
  6261                           
  6262 ;; *************** function _pulseEnable *****************
  6263 ;; Defined at:
  6264 ;;		line 47 in file "lcd.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used: 1
  6284 ;; This function calls:
  6285 ;;		Nothing
  6286 ;; This function is called by:
  6287 ;;		_lcdCommand4bits
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text47
  6292   002578                     __ptext47:
  6293                           	callstack 0
  6294   002578                     _pulseEnable:
  6295                           	callstack 25
  6296   002578                     
  6297                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  6298   002578  8E83               	bsf	131,7,c	;volatile
  6299                           
  6300                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  6301   00257A  9E83               	bcf	131,7,c	;volatile
  6302   00257C  0012               	return		;funcret
  6303   00257E                     __end_of_pulseEnable:
  6304                           	callstack 0
  6305                           
  6306 ;; *************** function _Delay40us *****************
  6307 ;; Defined at:
  6308 ;;		line 36 in file "lcd.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  j               1    0[COMRAM] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      void 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0
  6323 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6325 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6326 ;;Total ram usage:        1 bytes
  6327 ;; Hardware stack levels used: 1
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_lcdCommand
  6332 ;;		_lcdData
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text48
  6337   0024FA                     __ptext48:
  6338                           	callstack 0
  6339   0024FA                     _Delay40us:
  6340                           	callstack 26
  6341   0024FA                     
  6342                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  6343   0024FA  0E00               	movlw	0
  6344   0024FC  6E01               	movwf	Delay40us@j^0,c
  6345   0024FE                     l3009:
  6346   0024FE  2A01               	incf	Delay40us@j^0,f,c
  6347   002500  0E43               	movlw	67
  6348   002502  6401               	cpfsgt	Delay40us@j^0,c
  6349   002504  EF86  F012         	goto	u2501
  6350   002508  EF88  F012         	goto	u2500
  6351   00250C                     u2501:
  6352   00250C  EF7F  F012         	goto	l3009
  6353   002510                     u2500:
  6354   002510  0012               	return		;funcret
  6355   002512                     __end_of_Delay40us:
  6356                           	callstack 0
  6357                           
  6358 ;; *************** function _Delay2ms *****************
  6359 ;; Defined at:
  6360 ;;		line 41 in file "lcd.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  k               1    1[COMRAM] unsigned char 
  6365 ;;  j               1    0[COMRAM] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      void 
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0
  6376 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6378 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6379 ;;Total ram usage:        2 bytes
  6380 ;; Hardware stack levels used: 1
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_lcdCommand
  6385 ;;		_lcdInit
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text49
  6390   00232C                     __ptext49:
  6391                           	callstack 0
  6392   00232C                     _Delay2ms:
  6393                           	callstack 27
  6394   00232C                     
  6395                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  6396   00232C  0E00               	movlw	0
  6397   00232E  6E01               	movwf	Delay2ms@j^0,c
  6398   002330                     l3075:
  6399                           
  6400                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  6401   002330  0E00               	movlw	0
  6402   002332  6E02               	movwf	Delay2ms@k^0,c
  6403   002334                     l3081:
  6404   002334  2A02               	incf	Delay2ms@k^0,f,c
  6405   002336  0EB1               	movlw	177
  6406   002338  6402               	cpfsgt	Delay2ms@k^0,c
  6407   00233A  EFA1  F011         	goto	u2581
  6408   00233E  EFA3  F011         	goto	u2580
  6409   002342                     u2581:
  6410   002342  EF9A  F011         	goto	l3081
  6411   002346                     u2580:
  6412   002346  2A01               	incf	Delay2ms@j^0,f,c
  6413   002348  0E13               	movlw	19
  6414   00234A  6401               	cpfsgt	Delay2ms@j^0,c
  6415   00234C  EFAA  F011         	goto	u2591
  6416   002350  EFAC  F011         	goto	u2590
  6417   002354                     u2591:
  6418   002354  EF98  F011         	goto	l3075
  6419   002358                     u2590:
  6420   002358  0012               	return		;funcret
  6421   00235A                     __end_of_Delay2ms:
  6422                           	callstack 0
  6423                           
  6424 ;; *************** function _kpDebounce *****************
  6425 ;; Defined at:
  6426 ;;		line 33 in file "keypad.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  portes          5    8[COMRAM] unsigned char [5]
  6431 ;;  bits            5    3[COMRAM] unsigned char [5]
  6432 ;;  j               1   13[COMRAM] unsigned char 
  6433 ;;  i               1    0        unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6443 ;;      Params:         0       0       0       0       0       0       0       0       0
  6444 ;;      Locals:        11       0       0       0       0       0       0       0       0
  6445 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6446 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6447 ;;Total ram usage:       14 bytes
  6448 ;; Hardware stack levels used: 1
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_main
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text50
  6457   001A80                     __ptext50:
  6458                           	callstack 0
  6459   001A80                     _kpDebounce:
  6460                           	callstack 30
  6461   001A80                     
  6462                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  6463   001A80  EE20  F009         	lfsr	2,kpDebounce@portes
  6464   001A84  0E04               	movlw	4
  6465   001A86                     u1331:
  6466   001A86  6ADE               	clrf	postinc2,c
  6467   001A88  06E8               	decf	wreg,f,c
  6468   001A8A  E2FD               	bc	u1331
  6469   001A8C  CF81 F009          	movff	3969,kpDebounce@portes	;volatile
  6470   001A90  CF81 F00A          	movff	3969,kpDebounce@portes+1	;volatile
  6471   001A94  CF81 F00B          	movff	3969,kpDebounce@portes+2	;volatile
  6472   001A98  CF81 F00C          	movff	3969,kpDebounce@portes+3	;volatile
  6473   001A9C  CF84 F00D          	movff	3972,kpDebounce@portes+4	;volatile
  6474   001AA0                     
  6475                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  6476   001AA0  EE20  F053         	lfsr	2,kpDebounce@F15
  6477   001AA4  EE10  F004         	lfsr	1,kpDebounce@bits
  6478   001AA8  0E04               	movlw	4
  6479   001AAA                     u1341:
  6480   001AAA  CFDB FFE3          	movff	plusw2,plusw1
  6481   001AAE  06E8               	decf	wreg,f,c
  6482   001AB0  E2FC               	bc	u1341
  6483   001AB2                     
  6484                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  6485   001AB2  0E00               	movlw	0
  6486   001AB4  6E0E               	movwf	kpDebounce@j^0,c
  6487   001AB6                     l2287:
  6488                           
  6489                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  6490   001AB6  500E               	movf	kpDebounce@j^0,w,c
  6491   001AB8  0F09               	addlw	low kpDebounce@portes
  6492   001ABA  6ED9               	movwf	fsr2l,c
  6493   001ABC  6ADA               	clrf	fsr2h,c
  6494   001ABE  50DF               	movf	indf2,w,c
  6495   001AC0  6E01               	movwf	??_kpDebounce^0,c
  6496   001AC2  500E               	movf	kpDebounce@j^0,w,c
  6497   001AC4  0F04               	addlw	low kpDebounce@bits
  6498   001AC6  6ED9               	movwf	fsr2l,c
  6499   001AC8  6ADA               	clrf	fsr2h,c
  6500   001ACA  50DF               	movf	indf2,w,c
  6501   001ACC  6E02               	movwf	(??_kpDebounce+1)^0,c
  6502   001ACE  0E01               	movlw	1
  6503   001AD0  6E03               	movwf	(??_kpDebounce+2)^0,c
  6504   001AD2  2A02               	incf	(??_kpDebounce+1)^0,f,c
  6505   001AD4  EF6E  F00D         	goto	u1354
  6506   001AD8                     u1355:
  6507   001AD8  90D8               	bcf	status,0,c
  6508   001ADA  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  6509   001ADC                     u1354:
  6510   001ADC  2E02               	decfsz	(??_kpDebounce+1)^0,f,c
  6511   001ADE  EF6C  F00D         	goto	u1355
  6512   001AE2  5003               	movf	(??_kpDebounce+2)^0,w,c
  6513   001AE4  1401               	andwf	??_kpDebounce^0,w,c
  6514   001AE6  0900               	iorlw	0
  6515   001AE8  A4D8               	btfss	status,2,c
  6516   001AEA  EF79  F00D         	goto	u1361
  6517   001AEE  EF7B  F00D         	goto	u1360
  6518   001AF2                     u1361:
  6519   001AF2  EF8B  F00D         	goto	l2291
  6520   001AF6                     u1360:
  6521   001AF6                     
  6522                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  6523   001AF6  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  6524   001AFA  0E01               	movlw	1
  6525   001AFC  6E02               	movwf	(??_kpDebounce+1)^0,c
  6526   001AFE  2A01               	incf	??_kpDebounce^0,f,c
  6527   001B00  EF84  F00D         	goto	u1374
  6528   001B04                     u1375:
  6529   001B04  90D8               	bcf	status,0,c
  6530   001B06  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  6531   001B08                     u1374:
  6532   001B08  2E01               	decfsz	??_kpDebounce^0,f,c
  6533   001B0A  EF82  F00D         	goto	u1375
  6534   001B0E  5002               	movf	(??_kpDebounce+1)^0,w,c
  6535   001B10  124B               	iorwf	kpDebounce@valorNovo^0,f,c
  6536                           
  6537                           ;keypad.c: 65:             } else {
  6538   001B12  EF9A  F00D         	goto	l2293
  6539   001B16                     l2291:
  6540                           
  6541                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  6542   001B16  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  6543   001B1A  0E01               	movlw	1
  6544   001B1C  6E02               	movwf	(??_kpDebounce+1)^0,c
  6545   001B1E  2A01               	incf	??_kpDebounce^0,f,c
  6546   001B20  EF94  F00D         	goto	u1384
  6547   001B24                     u1385:
  6548   001B24  90D8               	bcf	status,0,c
  6549   001B26  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  6550   001B28                     u1384:
  6551   001B28  2E01               	decfsz	??_kpDebounce^0,f,c
  6552   001B2A  EF92  F00D         	goto	u1385
  6553   001B2E  5002               	movf	(??_kpDebounce+1)^0,w,c
  6554   001B30  0AFF               	xorlw	255
  6555   001B32  164B               	andwf	kpDebounce@valorNovo^0,f,c
  6556   001B34                     l2293:
  6557                           
  6558                           ;keypad.c: 68:         }
  6559   001B34  2A0E               	incf	kpDebounce@j^0,f,c
  6560   001B36  0E04               	movlw	4
  6561   001B38  640E               	cpfsgt	kpDebounce@j^0,c
  6562   001B3A  EFA1  F00D         	goto	u1391
  6563   001B3E  EFA3  F00D         	goto	u1390
  6564   001B42                     u1391:
  6565   001B42  EF5B  F00D         	goto	l2287
  6566   001B46                     u1390:
  6567   001B46                     
  6568                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  6569   001B46  504B               	movf	kpDebounce@valorNovo^0,w,c
  6570   001B48  184A               	xorwf	kpDebounce@valorAntigo^0,w,c
  6571   001B4A  A4D8               	btfss	status,2,c
  6572   001B4C  EFAA  F00D         	goto	u1401
  6573   001B50  EFAC  F00D         	goto	u1400
  6574   001B54                     u1401:
  6575   001B54  EFAF  F00D         	goto	l2301
  6576   001B58                     u1400:
  6577   001B58                     
  6578                           ;keypad.c: 70:         tempo--;
  6579   001B58  064C               	decf	kpDebounce@tempo^0,f,c
  6580                           
  6581                           ;keypad.c: 71:     } else {
  6582   001B5A  EFB3  F00D         	goto	l136
  6583   001B5E                     l2301:
  6584                           
  6585                           ;keypad.c: 72:         tempo = 10;
  6586   001B5E  0E0A               	movlw	10
  6587   001B60  6E4C               	movwf	kpDebounce@tempo^0,c
  6588   001B62                     
  6589                           ;keypad.c: 73:         valorAntigo = valorNovo;
  6590   001B62  C04B  F04A         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  6591   001B66                     l136:
  6592                           
  6593                           ;keypad.c: 75:     if (tempo == 0) {
  6594   001B66  504C               	movf	kpDebounce@tempo^0,w,c
  6595   001B68  A4D8               	btfss	status,2,c
  6596   001B6A  EFB9  F00D         	goto	u1411
  6597   001B6E  EFBB  F00D         	goto	u1410
  6598   001B72                     u1411:
  6599   001B72  EFBD  F00D         	goto	l138
  6600   001B76                     u1410:
  6601   001B76                     
  6602                           ;keypad.c: 76:         valor = valorAntigo;
  6603   001B76  C04A  F04D         	movff	kpDebounce@valorAntigo,_valor
  6604   001B7A                     l138:
  6605   001B7A  0012               	return		;funcret
  6606   001B7C                     __end_of_kpDebounce:
  6607                           	callstack 0
  6608                           
  6609 ;; *************** function _dsInit *****************
  6610 ;; Defined at:
  6611 ;;		line 17 in file "ds1307.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;		None
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;		None
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2, status,0, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0
  6626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6627 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6628 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6629 ;;Total ram usage:        0 bytes
  6630 ;; Hardware stack levels used: 1
  6631 ;; Hardware stack levels required when called: 2
  6632 ;; This function calls:
  6633 ;;		_i2cInit
  6634 ;; This function is called by:
  6635 ;;		_main
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text51
  6640   00257E                     __ptext51:
  6641                           	callstack 0
  6642   00257E                     _dsInit:
  6643                           	callstack 28
  6644   00257E                     
  6645                           ;ds1307.c: 18:  i2cInit();
  6646   00257E  EC19  F012         	call	_i2cInit	;wreg free
  6647   002582  0012               	return		;funcret
  6648   002584                     __end_of_dsInit:
  6649                           	callstack 0
  6650                           
  6651 ;; *************** function _i2cInit *****************
  6652 ;; Defined at:
  6653 ;;		line 14 in file "soft_i2c.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6667 ;;      Params:         0       0       0       0       0       0       0       0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6670 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used: 1
  6673 ;; Hardware stack levels required when called: 1
  6674 ;; This function calls:
  6675 ;;		_pinMode
  6676 ;; This function is called by:
  6677 ;;		_dsInit
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text52
  6682   002432                     __ptext52:
  6683                           	callstack 0
  6684   002432                     _i2cInit:
  6685                           	callstack 28
  6686   002432                     
  6687                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  6688   002432  0E00               	movlw	0
  6689   002434  6E02               	movwf	(pinMode@pin+1)^0,c
  6690   002436  0E08               	movlw	8
  6691   002438  6E01               	movwf	pinMode@pin^0,c
  6692   00243A  0E00               	movlw	0
  6693   00243C  6E04               	movwf	(pinMode@type+1)^0,c
  6694   00243E  0E01               	movlw	1
  6695   002440  6E03               	movwf	pinMode@type^0,c
  6696   002442  EC9F  F009         	call	_pinMode	;wreg free
  6697                           
  6698                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  6699   002446  0E00               	movlw	0
  6700   002448  6E02               	movwf	(pinMode@pin+1)^0,c
  6701   00244A  0E09               	movlw	9
  6702   00244C  6E01               	movwf	pinMode@pin^0,c
  6703   00244E  0E00               	movlw	0
  6704   002450  6E04               	movwf	(pinMode@type+1)^0,c
  6705   002452  0E01               	movlw	1
  6706   002454  6E03               	movwf	pinMode@type^0,c
  6707   002456  EC9F  F009         	call	_pinMode	;wreg free
  6708   00245A  0012               	return		;funcret
  6709   00245C                     __end_of_i2cInit:
  6710                           	callstack 0
  6711                           
  6712 ;; *************** function _pinMode *****************
  6713 ;; Defined at:
  6714 ;;		line 54 in file "io.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  pin             2    0[COMRAM] int 
  6717 ;;  type            2    2[COMRAM] int 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;		None
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6729 ;;      Params:         4       0       0       0       0       0       0       0       0
  6730 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6731 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6732 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6733 ;;Total ram usage:        6 bytes
  6734 ;; Hardware stack levels used: 1
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_i2cInit
  6739 ;;		_read_SCL
  6740 ;;		_read_SDA
  6741 ;;		_clear_SCL
  6742 ;;		_clear_SDA
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text53
  6747   00133E                     __ptext53:
  6748                           	callstack 0
  6749   00133E                     _pinMode:
  6750                           	callstack 24
  6751   00133E                     
  6752                           ;io.c: 56:     if(pin <8){
  6753   00133E  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6754   001340  EFAD  F009         	goto	u2140
  6755   001344  5002               	movf	(pinMode@pin+1)^0,w,c
  6756   001346  E107               	bnz	u2141
  6757   001348  0E08               	movlw	8
  6758   00134A  5C01               	subwf	pinMode@pin^0,w,c
  6759   00134C  B0D8               	btfsc	status,0,c
  6760   00134E  EFAB  F009         	goto	u2141
  6761   001352  EFAD  F009         	goto	u2140
  6762   001356                     u2141:
  6763   001356  EFD7  F009         	goto	l2861
  6764   00135A                     u2140:
  6765   00135A                     
  6766                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  6767   00135A  5003               	movf	pinMode@type^0,w,c
  6768   00135C  1004               	iorwf	(pinMode@type+1)^0,w,c
  6769   00135E  B4D8               	btfsc	status,2,c
  6770   001360  EFB4  F009         	goto	u2151
  6771   001364  EFB6  F009         	goto	u2150
  6772   001368                     u2151:
  6773   001368  EFC6  F009         	goto	l2859
  6774   00136C                     u2150:
  6775   00136C  C001  F005         	movff	pinMode@pin,??_pinMode
  6776   001370  0E01               	movlw	1
  6777   001372  6E06               	movwf	(??_pinMode+1)^0,c
  6778   001374  2A05               	incf	??_pinMode^0,f,c
  6779   001376  EFBF  F009         	goto	u2164
  6780   00137A                     u2165:
  6781   00137A  90D8               	bcf	status,0,c
  6782   00137C  3606               	rlcf	(??_pinMode+1)^0,f,c
  6783   00137E                     u2164:
  6784   00137E  2E05               	decfsz	??_pinMode^0,f,c
  6785   001380  EFBD  F009         	goto	u2165
  6786   001384  5006               	movf	(??_pinMode+1)^0,w,c
  6787   001386  1292               	iorwf	146,f,c	;volatile
  6788   001388  EFC5  F00A         	goto	l113
  6789   00138C                     l2859:
  6790   00138C  C001  F005         	movff	pinMode@pin,??_pinMode
  6791   001390  0E01               	movlw	1
  6792   001392  6E06               	movwf	(??_pinMode+1)^0,c
  6793   001394  2A05               	incf	??_pinMode^0,f,c
  6794   001396  EFCF  F009         	goto	u2174
  6795   00139A                     u2175:
  6796   00139A  90D8               	bcf	status,0,c
  6797   00139C  3606               	rlcf	(??_pinMode+1)^0,f,c
  6798   00139E                     u2174:
  6799   00139E  2E05               	decfsz	??_pinMode^0,f,c
  6800   0013A0  EFCD  F009         	goto	u2175
  6801   0013A4  5006               	movf	(??_pinMode+1)^0,w,c
  6802   0013A6  0AFF               	xorlw	255
  6803   0013A8  1692               	andwf	146,f,c	;volatile
  6804   0013AA  EFC5  F00A         	goto	l113
  6805   0013AE                     l2861:
  6806   0013AE  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6807   0013B0  EFE5  F009         	goto	u2180
  6808   0013B4  5002               	movf	(pinMode@pin+1)^0,w,c
  6809   0013B6  E107               	bnz	u2181
  6810   0013B8  0E10               	movlw	16
  6811   0013BA  5C01               	subwf	pinMode@pin^0,w,c
  6812   0013BC  B0D8               	btfsc	status,0,c
  6813   0013BE  EFE3  F009         	goto	u2181
  6814   0013C2  EFE5  F009         	goto	u2180
  6815   0013C6                     u2181:
  6816   0013C6  EF13  F00A         	goto	l2869
  6817   0013CA                     u2180:
  6818   0013CA                     
  6819                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  6820   0013CA  5003               	movf	pinMode@type^0,w,c
  6821   0013CC  1004               	iorwf	(pinMode@type+1)^0,w,c
  6822   0013CE  B4D8               	btfsc	status,2,c
  6823   0013D0  EFEC  F009         	goto	u2191
  6824   0013D4  EFEE  F009         	goto	u2190
  6825   0013D8                     u2191:
  6826   0013D8  EF00  F00A         	goto	l2867
  6827   0013DC                     u2190:
  6828   0013DC  C001  F005         	movff	pinMode@pin,??_pinMode
  6829   0013E0  0EF8               	movlw	-8
  6830   0013E2  2605               	addwf	??_pinMode^0,f,c
  6831   0013E4  0E01               	movlw	1
  6832   0013E6  6E06               	movwf	(??_pinMode+1)^0,c
  6833   0013E8  2A05               	incf	??_pinMode^0,f,c
  6834   0013EA  EFF9  F009         	goto	u2204
  6835   0013EE                     u2205:
  6836   0013EE  90D8               	bcf	status,0,c
  6837   0013F0  3606               	rlcf	(??_pinMode+1)^0,f,c
  6838   0013F2                     u2204:
  6839   0013F2  2E05               	decfsz	??_pinMode^0,f,c
  6840   0013F4  EFF7  F009         	goto	u2205
  6841   0013F8  5006               	movf	(??_pinMode+1)^0,w,c
  6842   0013FA  1293               	iorwf	147,f,c	;volatile
  6843   0013FC  EFC5  F00A         	goto	l113
  6844   001400                     l2867:
  6845   001400  C001  F005         	movff	pinMode@pin,??_pinMode
  6846   001404  0EF8               	movlw	-8
  6847   001406  2605               	addwf	??_pinMode^0,f,c
  6848   001408  0E01               	movlw	1
  6849   00140A  6E06               	movwf	(??_pinMode+1)^0,c
  6850   00140C  2A05               	incf	??_pinMode^0,f,c
  6851   00140E  EF0B  F00A         	goto	u2214
  6852   001412                     u2215:
  6853   001412  90D8               	bcf	status,0,c
  6854   001414  3606               	rlcf	(??_pinMode+1)^0,f,c
  6855   001416                     u2214:
  6856   001416  2E05               	decfsz	??_pinMode^0,f,c
  6857   001418  EF09  F00A         	goto	u2215
  6858   00141C  5006               	movf	(??_pinMode+1)^0,w,c
  6859   00141E  0AFF               	xorlw	255
  6860   001420  1693               	andwf	147,f,c	;volatile
  6861   001422  EFC5  F00A         	goto	l113
  6862   001426                     l2869:
  6863   001426  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6864   001428  EF21  F00A         	goto	u2220
  6865   00142C  5002               	movf	(pinMode@pin+1)^0,w,c
  6866   00142E  E107               	bnz	u2221
  6867   001430  0E18               	movlw	24
  6868   001432  5C01               	subwf	pinMode@pin^0,w,c
  6869   001434  B0D8               	btfsc	status,0,c
  6870   001436  EF1F  F00A         	goto	u2221
  6871   00143A  EF21  F00A         	goto	u2220
  6872   00143E                     u2221:
  6873   00143E  EF4F  F00A         	goto	l2877
  6874   001442                     u2220:
  6875   001442                     
  6876                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  6877   001442  5003               	movf	pinMode@type^0,w,c
  6878   001444  1004               	iorwf	(pinMode@type+1)^0,w,c
  6879   001446  B4D8               	btfsc	status,2,c
  6880   001448  EF28  F00A         	goto	u2231
  6881   00144C  EF2A  F00A         	goto	u2230
  6882   001450                     u2231:
  6883   001450  EF3C  F00A         	goto	l2875
  6884   001454                     u2230:
  6885   001454  C001  F005         	movff	pinMode@pin,??_pinMode
  6886   001458  0EF0               	movlw	-16
  6887   00145A  2605               	addwf	??_pinMode^0,f,c
  6888   00145C  0E01               	movlw	1
  6889   00145E  6E06               	movwf	(??_pinMode+1)^0,c
  6890   001460  2A05               	incf	??_pinMode^0,f,c
  6891   001462  EF35  F00A         	goto	u2244
  6892   001466                     u2245:
  6893   001466  90D8               	bcf	status,0,c
  6894   001468  3606               	rlcf	(??_pinMode+1)^0,f,c
  6895   00146A                     u2244:
  6896   00146A  2E05               	decfsz	??_pinMode^0,f,c
  6897   00146C  EF33  F00A         	goto	u2245
  6898   001470  5006               	movf	(??_pinMode+1)^0,w,c
  6899   001472  1294               	iorwf	148,f,c	;volatile
  6900   001474  EFC5  F00A         	goto	l113
  6901   001478                     l2875:
  6902   001478  C001  F005         	movff	pinMode@pin,??_pinMode
  6903   00147C  0EF0               	movlw	-16
  6904   00147E  2605               	addwf	??_pinMode^0,f,c
  6905   001480  0E01               	movlw	1
  6906   001482  6E06               	movwf	(??_pinMode+1)^0,c
  6907   001484  2A05               	incf	??_pinMode^0,f,c
  6908   001486  EF47  F00A         	goto	u2254
  6909   00148A                     u2255:
  6910   00148A  90D8               	bcf	status,0,c
  6911   00148C  3606               	rlcf	(??_pinMode+1)^0,f,c
  6912   00148E                     u2254:
  6913   00148E  2E05               	decfsz	??_pinMode^0,f,c
  6914   001490  EF45  F00A         	goto	u2255
  6915   001494  5006               	movf	(??_pinMode+1)^0,w,c
  6916   001496  0AFF               	xorlw	255
  6917   001498  1694               	andwf	148,f,c	;volatile
  6918   00149A  EFC5  F00A         	goto	l113
  6919   00149E                     l2877:
  6920   00149E  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6921   0014A0  EF5D  F00A         	goto	u2260
  6922   0014A4  5002               	movf	(pinMode@pin+1)^0,w,c
  6923   0014A6  E107               	bnz	u2261
  6924   0014A8  0E20               	movlw	32
  6925   0014AA  5C01               	subwf	pinMode@pin^0,w,c
  6926   0014AC  B0D8               	btfsc	status,0,c
  6927   0014AE  EF5B  F00A         	goto	u2261
  6928   0014B2  EF5D  F00A         	goto	u2260
  6929   0014B6                     u2261:
  6930   0014B6  EF8B  F00A         	goto	l2885
  6931   0014BA                     u2260:
  6932   0014BA                     
  6933                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  6934   0014BA  5003               	movf	pinMode@type^0,w,c
  6935   0014BC  1004               	iorwf	(pinMode@type+1)^0,w,c
  6936   0014BE  B4D8               	btfsc	status,2,c
  6937   0014C0  EF64  F00A         	goto	u2271
  6938   0014C4  EF66  F00A         	goto	u2270
  6939   0014C8                     u2271:
  6940   0014C8  EF78  F00A         	goto	l2883
  6941   0014CC                     u2270:
  6942   0014CC  C001  F005         	movff	pinMode@pin,??_pinMode
  6943   0014D0  0EE8               	movlw	-24
  6944   0014D2  2605               	addwf	??_pinMode^0,f,c
  6945   0014D4  0E01               	movlw	1
  6946   0014D6  6E06               	movwf	(??_pinMode+1)^0,c
  6947   0014D8  2A05               	incf	??_pinMode^0,f,c
  6948   0014DA  EF71  F00A         	goto	u2284
  6949   0014DE                     u2285:
  6950   0014DE  90D8               	bcf	status,0,c
  6951   0014E0  3606               	rlcf	(??_pinMode+1)^0,f,c
  6952   0014E2                     u2284:
  6953   0014E2  2E05               	decfsz	??_pinMode^0,f,c
  6954   0014E4  EF6F  F00A         	goto	u2285
  6955   0014E8  5006               	movf	(??_pinMode+1)^0,w,c
  6956   0014EA  1295               	iorwf	149,f,c	;volatile
  6957   0014EC  EFC5  F00A         	goto	l113
  6958   0014F0                     l2883:
  6959   0014F0  C001  F005         	movff	pinMode@pin,??_pinMode
  6960   0014F4  0EE8               	movlw	-24
  6961   0014F6  2605               	addwf	??_pinMode^0,f,c
  6962   0014F8  0E01               	movlw	1
  6963   0014FA  6E06               	movwf	(??_pinMode+1)^0,c
  6964   0014FC  2A05               	incf	??_pinMode^0,f,c
  6965   0014FE  EF83  F00A         	goto	u2294
  6966   001502                     u2295:
  6967   001502  90D8               	bcf	status,0,c
  6968   001504  3606               	rlcf	(??_pinMode+1)^0,f,c
  6969   001506                     u2294:
  6970   001506  2E05               	decfsz	??_pinMode^0,f,c
  6971   001508  EF81  F00A         	goto	u2295
  6972   00150C  5006               	movf	(??_pinMode+1)^0,w,c
  6973   00150E  0AFF               	xorlw	255
  6974   001510  1695               	andwf	149,f,c	;volatile
  6975   001512  EFC5  F00A         	goto	l113
  6976   001516                     l2885:
  6977   001516  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6978   001518  EF99  F00A         	goto	u2300
  6979   00151C  5002               	movf	(pinMode@pin+1)^0,w,c
  6980   00151E  E107               	bnz	u2301
  6981   001520  0E28               	movlw	40
  6982   001522  5C01               	subwf	pinMode@pin^0,w,c
  6983   001524  B0D8               	btfsc	status,0,c
  6984   001526  EF97  F00A         	goto	u2301
  6985   00152A  EF99  F00A         	goto	u2300
  6986   00152E                     u2301:
  6987   00152E  EFC5  F00A         	goto	l113
  6988   001532                     u2300:
  6989   001532                     
  6990                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  6991   001532  5003               	movf	pinMode@type^0,w,c
  6992   001534  1004               	iorwf	(pinMode@type+1)^0,w,c
  6993   001536  B4D8               	btfsc	status,2,c
  6994   001538  EFA0  F00A         	goto	u2311
  6995   00153C  EFA2  F00A         	goto	u2310
  6996   001540                     u2311:
  6997   001540  EFB4  F00A         	goto	l2891
  6998   001544                     u2310:
  6999   001544  C001  F005         	movff	pinMode@pin,??_pinMode
  7000   001548  0EE0               	movlw	-32
  7001   00154A  2605               	addwf	??_pinMode^0,f,c
  7002   00154C  0E01               	movlw	1
  7003   00154E  6E06               	movwf	(??_pinMode+1)^0,c
  7004   001550  2A05               	incf	??_pinMode^0,f,c
  7005   001552  EFAD  F00A         	goto	u2324
  7006   001556                     u2325:
  7007   001556  90D8               	bcf	status,0,c
  7008   001558  3606               	rlcf	(??_pinMode+1)^0,f,c
  7009   00155A                     u2324:
  7010   00155A  2E05               	decfsz	??_pinMode^0,f,c
  7011   00155C  EFAB  F00A         	goto	u2325
  7012   001560  5006               	movf	(??_pinMode+1)^0,w,c
  7013   001562  1296               	iorwf	150,f,c	;volatile
  7014   001564  EFC5  F00A         	goto	l113
  7015   001568                     l2891:
  7016   001568  C001  F005         	movff	pinMode@pin,??_pinMode
  7017   00156C  0EE0               	movlw	-32
  7018   00156E  2605               	addwf	??_pinMode^0,f,c
  7019   001570  0E01               	movlw	1
  7020   001572  6E06               	movwf	(??_pinMode+1)^0,c
  7021   001574  2A05               	incf	??_pinMode^0,f,c
  7022   001576  EFBF  F00A         	goto	u2334
  7023   00157A                     u2335:
  7024   00157A  90D8               	bcf	status,0,c
  7025   00157C  3606               	rlcf	(??_pinMode+1)^0,f,c
  7026   00157E                     u2334:
  7027   00157E  2E05               	decfsz	??_pinMode^0,f,c
  7028   001580  EFBD  F00A         	goto	u2335
  7029   001584  5006               	movf	(??_pinMode+1)^0,w,c
  7030   001586  0AFF               	xorlw	255
  7031   001588  1696               	andwf	150,f,c	;volatile
  7032   00158A                     l113:
  7033   00158A  0012               	return		;funcret
  7034   00158C                     __end_of_pinMode:
  7035                           	callstack 0
  7036                           
  7037                           	psect	rparam
  7038   000000                     
  7039                           	psect	config
  7040                           
  7041                           ;Config register CONFIG1L @ 0x300000
  7042                           ;	unspecified, using default values
  7043                           ;	PLL Prescaler Selection bits
  7044                           ;	PLLDIV = 0x0, unprogrammed default
  7045                           ;	System Clock Postscaler Selection bits
  7046                           ;	CPUDIV = 0x0, unprogrammed default
  7047                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  7048                           ;	USBDIV = 0x0, unprogrammed default
  7049   300000                     	org	3145728
  7050   300000  00                 	db	0
  7051                           
  7052                           ;Config register CONFIG1H @ 0x300001
  7053                           ;	Oscillator Selection bits
  7054                           ;	FOSC = HS, HS oscillator (HS)
  7055                           ;	Fail-Safe Clock Monitor Enable bit
  7056                           ;	FCMEN = 0x0, unprogrammed default
  7057                           ;	Internal/External Oscillator Switchover bit
  7058                           ;	IESO = 0x0, unprogrammed default
  7059   300001                     	org	3145729
  7060   300001  0C                 	db	12
  7061                           
  7062                           ;Config register CONFIG2L @ 0x300002
  7063                           ;	unspecified, using default values
  7064                           ;	Power-up Timer Enable bit
  7065                           ;	PWRT = 0x1, unprogrammed default
  7066                           ;	Brown-out Reset Enable bits
  7067                           ;	BOR = 0x3, unprogrammed default
  7068                           ;	Brown-out Reset Voltage bits
  7069                           ;	BORV = 0x3, unprogrammed default
  7070                           ;	USB Voltage Regulator Enable bit
  7071                           ;	VREGEN = 0x0, unprogrammed default
  7072   300002                     	org	3145730
  7073   300002  1F                 	db	31
  7074                           
  7075                           ;Config register CONFIG2H @ 0x300003
  7076                           ;	Watchdog Timer Enable bit
  7077                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7078                           ;	Watchdog Timer Postscale Select bits
  7079                           ;	WDTPS = 0xF, unprogrammed default
  7080   300003                     	org	3145731
  7081   300003  1E                 	db	30
  7082                           
  7083                           ; Padding undefined space
  7084   300004                     	org	3145732
  7085   300004  FF                 	db	255
  7086                           
  7087                           ;Config register CONFIG3H @ 0x300005
  7088                           ;	CCP2 MUX bit
  7089                           ;	CCP2MX = 0x1, unprogrammed default
  7090                           ;	PORTB A/D Enable bit
  7091                           ;	PBADEN = 0x1, unprogrammed default
  7092                           ;	Low-Power Timer 1 Oscillator Enable bit
  7093                           ;	LPT1OSC = 0x0, unprogrammed default
  7094                           ;	MCLR Pin Enable bit
  7095                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7096   300005                     	org	3145733
  7097   300005  83                 	db	131
  7098                           
  7099                           ;Config register CONFIG4L @ 0x300006
  7100                           ;	Stack Full/Underflow Reset Enable bit
  7101                           ;	STVREN = 0x1, unprogrammed default
  7102                           ;	Single-Supply ICSP Enable bit
  7103                           ;	LVP = OFF, Single-Supply ICSP disabled
  7104                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  7105                           ;	ICPRT = 0x0, unprogrammed default
  7106                           ;	Extended Instruction Set Enable bit
  7107                           ;	XINST = 0x0, unprogrammed default
  7108                           ;	Background Debugger Enable bit
  7109                           ;	DEBUG = 0x1, unprogrammed default
  7110   300006                     	org	3145734
  7111   300006  81                 	db	129
  7112                           
  7113                           ; Padding undefined space
  7114   300007                     	org	3145735
  7115   300007  FF                 	db	255
  7116                           tosu	equ	0xFFF
  7117                           tosh	equ	0xFFE
  7118                           tosl	equ	0xFFD
  7119                           stkptr	equ	0xFFC
  7120                           pclatu	equ	0xFFB
  7121                           pclath	equ	0xFFA
  7122                           pcl	equ	0xFF9
  7123                           tblptru	equ	0xFF8
  7124                           tblptrh	equ	0xFF7
  7125                           tblptrl	equ	0xFF6
  7126                           tablat	equ	0xFF5
  7127                           prodh	equ	0xFF4
  7128                           prodl	equ	0xFF3
  7129                           indf0	equ	0xFEF
  7130                           postinc0	equ	0xFEE
  7131                           postdec0	equ	0xFED
  7132                           preinc0	equ	0xFEC
  7133                           plusw0	equ	0xFEB
  7134                           fsr0h	equ	0xFEA
  7135                           fsr0l	equ	0xFE9
  7136                           wreg	equ	0xFE8
  7137                           indf1	equ	0xFE7
  7138                           postinc1	equ	0xFE6
  7139                           postdec1	equ	0xFE5
  7140                           preinc1	equ	0xFE4
  7141                           plusw1	equ	0xFE3
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           bsr	equ	0xFE0
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           preinc2	equ	0xFDC
  7149                           plusw2	equ	0xFDB
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        19
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      89
    BANK0           160      0      12
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eventRead@prot	PTR unsigned char  size(1) Largest target is 5
		 -> prot(COMRAM[5]), 

    lcdString@str	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_11(CODE[12]), STR_12(CODE[12]), 
		 -> STR_13(CODE[4]), STR_14(CODE[12]), STR_15(CODE[4]), STR_16(CODE[12]), 
		 -> STR_17(CODE[17]), STR_18(CODE[17]), STR_19(CODE[12]), STR_2(CODE[16]), 
		 -> STR_3(CODE[16]), STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), 
		 -> STR_7(CODE[16]), STR_8(CODE[16]), STR_9(CODE[16]), 

    msgs	PTR unsigned char [2][6] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), 
		 -> STR_8(CODE[16]), STR_9(CODE[16]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 5
		 -> prot(COMRAM[5]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 5
		 -> prot(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _smLoop->_outputPrint
    _setLanguage->_dsWriteData
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_bcd2dec
    _lcdData->_lcdCommand4bits
    _eventRead->_getProt
    _smInit->_varInit
    _varInit->_setAlarmLevel
    _setAlarmLevel->_dsWriteData
    _dsWriteData->_dec2bcd
    _dsReadData->_i2cReadByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _dec2bcd->_bcd2dec
    ___awmod->___awdiv
    _bcd2dec->_dsReadData
    ___wmul->___awdiv
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  332643
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               5     5      0  213380
                                             36 COMRAM     4     4      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                            _getProt
                           _getState
                        _outputPrint
                          _resetProt
                      _setAlarmLevel
                        _setLanguage
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28545
                                             31 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          4     0      4   67243
                                             32 COMRAM     4     0      4
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            1     0      1    1917
                                              3 COMRAM     1     0      1
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                              10     7      3    8458
                                             22 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                             ___wmul
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        4     2      2     654
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            9     7      2     370
                                              2 COMRAM     9     7      2
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0  115931
                          _eventInit
                           _setState
                            _varInit
 ---------------------------------------------------------------------------------
 (2) _varInit                                              8     8      0  115909
                                             34 COMRAM     8     8      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                      _setAlarmLevel
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        3     0      3   29501
                                             31 COMRAM     3     0      3
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28523
                                             28 COMRAM     3     1      2
                            _bcd2dec (ARG)
                            _dec2bcd (ARG)
                         _dsReadData (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   48459
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (2) _dec2bcd                                              6     4      2    3855
                                             22 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1512
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _bcd2dec                                              4     2      2    5499
                                             18 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2267
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1668
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     180
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
     _varInit
       _bcd2dec
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _dsReadData (ARG)
           _i2cReadByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
                 _digitalWrite
                 _pinMode
               _read_SCL
                 _digitalRead
                 _pinMode
               _read_SDA
                 _digitalRead
                 _pinMode
             _i2c_stop
               _I2C_delay
               _clear_SDA
                 _digitalWrite
                 _pinMode
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
           _i2cWriteByte
             _i2c_read_bit
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_stop
             _i2c_write_bit
       _dec2bcd
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         _bcd2dec (ARG)
         _dsReadData (ARG)
       _dsReadData
       _dsWriteData
         _bcd2dec (ARG)
         _dec2bcd (ARG)
         _dsReadData (ARG)
         _i2cWriteByte (ARG)
       _setAlarmLevel
         _dsWriteData
         _getAlarmLevel (ARG)
   _smLoop
     _bcd2dec
     _dec2bcd
     _dsReadData
     _dsWriteData
     _eventRead
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setProt
     _getAlarmLevel
     _getLanguage
     _getProt
     _getState
     _outputPrint
       _bcd2dec
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         ___wmul
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _resetProt
     _setAlarmLevel
     _setLanguage
       _dsWriteData
     _setState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       C       5        7.5%
BITBIGSFRhh         69      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      59       1       93.7%
BITBIGSFRl          20      0       0      23        0.0%
BITBIGSFRhlh         8      0       0      21        0.0%
BITBIGSFRhll         4      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      65      24        0.0%
DATA                 0      0      65       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Jun 20 10:28:39 2024

     __end_of_setAlarmLevel 20B6                          l22 1F08                          l25 21CA  
                        l34 22FC                          l28 2582                          l37 2142  
                        l83 1A7E                          l84 1A7A                          l79 133C  
                        l88 1A7A                lcdString@str 0004                ___awdiv@sign 0006  
                        _v0 0046                          _v1 0045                          _v2 0044  
                        _v3 0043                          _de 0049                          _ev 0058  
       ___wmul@multiplicand 000B               ??_i2cReadByte 0009       i2cWriteByte@send_stop 0008  
            i2cReadByte@bit 000B                         l113 158A                         l203 1C42  
                       l141 255A                         l150 2510                         l118 258E  
                       l136 1B66                         l160 257C                         l138 1B7A  
                       l180 20FC                         l412 1F68                         l157 2358  
                       l173 1EA6                         l405 22A0                         l341 2526  
                       l183 24C6                         l361 2594                         l601 254C  
                       l370 2430                         l418 206A                         l346 23DC  
                       l338 2514                         l194 226E                         l515 190C  
                       l188 1E2E                         l364 223A                         l349 24E0  
                       l373 2406                         l517 1914                         l358 245A  
                       l390 232A                         l367 2202                         l383 2188  
                       l712 2092                         l720 24F8                         l713 20A4  
                       l714 20B4                         l562 10EE                         l723 2592  
                       l707 23A2                         l643 0D20                         l708 23A8  
                       l709 23B0                         l717 2586                         l733 22CE  
                       l494 253C                         l399 1FC0                         l727 2482  
                       l736 24A8                         l692 177E                         l695 258A  
                       l698 256E                         l980 1DB6                         l967 1D06  
                       _key 0036                ___awmod@sign 000E                         wreg 0FE8  
          i2c_write_bit@bit 0007               ?_i2cWriteByte 0008      i2cWriteByte@send_start 000A  
           i2cReadByte@nack 000A             i2cReadByte@byte 000D                        l2013 2528  
                      l2015 252C                        l2017 2534                        l3011 2500  
                      l3003 24FA                        l2301 1B5E                        l3021 1E58  
                      l3013 1E32                        l3101 1C56                        l2303 1B62  
                      l3031 1E76                        l3023 1E5E                        l3015 1E42  
                      l3111 1C7C                        l3103 1C5E                        l2305 1B76  
                      l3009 24FE                        l3041 1EA0                        l3033 1E84  
                      l3025 1E60                        l3017 1E48                        l3201 20E0  
                      l3121 1CB4                        l3113 1C84                        l3105 1C62  
                      l3043 1EA2                        l3035 1E8A                        l3027 1E6E  
                      l3019 1E4A                        l3203 20F0                        l2331 24DC  
                      l3131 1CE0                        l3123 1CBA                        l3115 1C96  
                      l3107 1C70                        l3211 2250                        l3037 1E8C  
                      l3029 1E74                        l3205 20F8                        l2333 24DE  
                      l3125 1CD0                        l3117 1C9E                        l3133 1CE6  
                      l3109 1C78                        l3141 1D08                        l3061 2054  
                      l3053 2026                        l3045 22D2                        l3301 17D0  
                      l3221 1B98                        l3213 2252                        l2271 1A90  
                      l3039 1E9A                        l3135 1CF6                        l3127 1CD8  
                      l3119 1CA6                        l3151 1D34                        l3143 1D0C  
                      l3063 2064                        l3055 2034                        l3047 201A  
                      l3311 1804                        l3303 17D8                        l3231 1BE6  
                      l3223 1BA4                        l3215 1B7C                        l3207 223C  
                      l2281 1AB2                        l2273 1A94                        l3081 2334  
                      l2329 24C8                        l3137 1CFE                        l3129 1CDA  
                      l3161 1D6C                        l3153 1D3C                        l3145 1D1A  
                      l3065 2068                        l3057 2038                        l3241 2514  
                      l3321 182E                        l3313 1812                        l3305 17E6  
                      l3233 1BEA                        l3217 1B8A                        l3209 2240  
                      l3401 0EB2                        l2291 1B16                        l2275 1A98  
                      l2267 1A80                        l3083 2336                        l3075 2330  
                      l3091 2484                        l3171 1DA6                        l3163 1D82  
                      l3155 1D4E                        l3147 1D22                        l3059 204E  
                      l3251 23C8                        l3243 2522                        l3331 186A  
                      l3323 183E                        l3307 17EE                        l3315 181A  
                      l3235 1C08                        l3227 1BB6                        l3219 1B92  
                      l3411 0EEC                        l3403 0EC4                        l2293 1B34  
                      l2277 1A9C                        l2269 1A8C                        l3085 2346  
                      l3069 232C                        l3093 24A0                        l3173 1DAE  
                      l3165 1D8A                        l3157 1D56                        l3149 1D26  
                      l3501 16C8                        l3253 23D6                        l3245 23B2  
                      l3341 18A2                        l3333 1876                        l3325 1844  
                      l3317 1822                        l3309 17FC                        l3237 1C38  
                      l3229 1BCA                        l3421 0F38                        l3413 0F08  
                      l3405 0ECA                        l2295 1B36                        l2287 1AB6  
                      l2279 1AA0                        l3087 2348                        l1831 254E  
                      l3183 218A                        l3167 1D90                        l3159 1D5E  
                      l3511 175C                        l3503 16EC                        l3255 23DA  
                      l3247 23B6                        l3263 245E                        l3351 1900  
                      l3335 1882                        l3319 1828                        l3271 2386  
                      l3431 0F74                        l3423 0F3E                        l3415 0F0E  
                      l3407 0EE0                        l2297 1B46                        l2289 1AF6  
                      l1833 2550                        l3097 1C44                        l3169 1D96  
                      l3177 1EA8                        l2801 126C                        l3281 207C  
                      l3513 1764                        l3505 16F4                        l3193 258C  
                      l3249 23C4                        l3265 246A                        l3337 188E  
                      l3329 185E                        l3345 18AC                        l3353 190C  
                      l3521 2588                        l3273 2398                        l3089 24AC  
                      l3441 0FAA                        l3433 0F7A                        l3417 0F16  
                      l3409 0EE6                        l3425 0F46                        l3361 0D3C  
                      l3601 09FE                        l2299 1B58                        l1835 2552  
                      l3515 256A                        l3099 1C48                        l3179 1F00  
                      l2811 12FE                        l2803 1286                        l3187 20FE  
                      l3283 2080                        l3507 170E                        l3259 2590  
                      l3267 246C                        l3339 189A                        l3347 18EA  
                      l3291 1788                        l3275 2584                        l3451 0FEE  
                      l3443 0FB0                        l3435 0F80                        l3427 0F58  
                      l3419 0F1C                        l3371 0D8C                        l3363 0D52  
                      l3531 22B6                        l3611 0A36                        l3603 0A04  
                      l3197 20B8                        l1837 2556                        l2813 131E  
                      l2805 12A6                        l2901 2408                        l3189 213A  
                      l3285 2096                        l3509 1738                        l3269 247E  
                      l3349 18F0                        l3293 1794                        l3461 102C  
                      l3453 0FF4                        l3445 0FCC                        l3437 0F9C  
                      l3429 0F5E                        l3381 0DFE                        l3373 0DB4  
                      l3365 0D58                        l3357 0D22                        l3533 22C6  
                      l3525 22A2                        l3517 24E4                        l3621 0A68  
                      l3613 0A3C                        l3605 0A0C                        l3701 235A  
                      l3287 2432                        l3535 257E                        l3199 20CE  
                      l3551 1DDE                        l2807 12C8                        l2831 19A2  
                      l2823 195A                        l2815 1916                        l2903 23DE  
                      l2911 2158                        l3279 206C                        l3295 17AC  
                      l3471 108A                        l3463 1040                        l3455 100A  
                      l3447 0FD2                        l3439 0FA2                        l3391 0E4E  
                      l3383 0E04                        l3375 0DBA                        l3367 0D5E  
                      l3359 0D36                        l3527 22AA                        l3519 24EA  
                      l3631 0ADA                        l3623 0A74                        l3615 0A4E  
                      l3607 0A1E                        l3711 2376                        l3703 2366  
                      l2905 2578                        l3545 1DC8                        l3537 1DB8  
                      l2809 12E4                        l2841 1A06                        l2833 19BE  
                      l2825 1976                        l2817 1932                        l2921 217C  
                      l2913 215C                        l3481 1598                        l3553 253E  
                      l3297 17BA                        l3289 1780                        l3473 10B8  
                      l3457 1010                        l3465 1048                        l3449 0FDA  
                      l3393 0E54                        l3385 0E1A                        l3377 0DE2  
                      l3369 0D86                        l3529 22B4                        l3641 0B4A  
                      l3633 0AEA                        l3625 0A84                        l3617 0A54  
                      l3609 0A24                        l3561 08AC                        l3713 237A  
                      l3705 236A                        l3547 1DCC                        l3539 1DC4  
                      l2931 2306                        l2923 2180                        l2915 2170  
                      l2907 2144                        l3491 162E                        l3483 15A8  
                      l3555 2542                        l3299 17C2                        l3475 10BE  
                      l3467 105C                        l3459 1024                        l3395 0E7C  
                      l3387 0E20                        l3379 0DEA                        l3651 0B80  
                      l3643 0B50                        l3635 0B20                        l3627 0A94  
                      l3619 0A58                        l3571 091E                        l3563 08BC  
                      l3707 236E                        l2861 13AE                        l2853 133E  
                      l3549 1DCE                        l2781 113E                        l2933 231A  
                      l2941 1F6C                        l2925 2184                        l2909 2154  
                      l2917 2174                        l3493 1658                        l3485 15B8  
                      l3557 2548                        l3477 10E6                        l3469 1062  
                      l3397 0E82                        l3389 0E48                        l3661 0C14  
                      l3653 0BB6                        l3645 0B62                        l3637 0B32  
                      l3629 0AA4                        l3581 0954                        l3573 0924  
                      l3565 08DC                        l3709 2372                        l2871 1442  
                      l2863 13CA                        l2855 135A                        l2791 11D8  
                      l2783 1160                        l2775 10F0                        l2847 1A32  
                      l2839 19EA                        l2935 231E                        l2927 22FE  
                      l2951 1FA0                        l2943 1F7C                        l2919 2178  
                      l3495 167C                        l3487 15DC                        l3479 158C  
                      l3399 0EAA                        l3671 0C48                        l3663 0C26  
                      l3655 0BC6                        l3647 0B68                        l3639 0B38  
                      l3591 09BC                        l3583 095C                        l3575 0936  
                      l3567 08EC                        l3559 08A0                        l2881 14CC  
                      l2873 1454                        l2865 13DC                        l2857 136C  
                      l2793 11F4                        l2785 117C                        l2777 110C  
                      l2849 1A4E                        l2961 2270                        l2937 2322  
                      l2929 2302                        l2953 1FB0                        l2945 1F84  
                      l3497 1684                        l3489 160E                        l3673 0C5A  
                      l3665 0C2C                        l3657 0BFC                        l3649 0B70  
                      l3593 09CE                        l3585 096C                        l3577 093C  
                      l3569 090C                        l2891 1568                        l2883 14F0  
                      l2875 1478                        l2867 1400                        l2859 138C  
                      l2795 120E                        l2787 1196                        l2779 111E  
                      l2971 2296                        l2963 2274                        l2939 2326  
                      l2955 1FB4                        l2947 1F88                        l3499 169E  
                      l3691 0CF8                        l3675 0C60                        l3667 0C3E  
                      l3659 0C0E                        l3595 09D4                        l3587 098C  
                      l3579 094E                        l3683 0CAA                        l2885 1516  
                      l2877 149E                        l2869 1426                        l2797 122E  
                      l2789 11B6                        l2893 2204                        l2973 229E  
                      l2965 2278                        l2957 1FB8                        l2949 1F8C  
                      l2981 1F20                        l3693 0CFC                        l3677 0C70  
                      l3597 09E6                        l3589 099C                        l3685 0CE2  
                      l2887 1532                        l2879 14BA                        l2799 1250  
                      l2967 228C                        l2959 1FBC                        l2991 1F3E  
                      l3695 0D08                        l3687 0CF4                        l3599 09EC  
                      l2889 1544                        l2897 21CC                        l2969 2292  
                      l2993 1F40                        l2977 1F0C                        l2995 1F50  
                      l2987 1F24                        l2979 1F1C                        l2997 1F54  
                      l2989 1F3A                        l2999 1F64                        STR_1 0873  
                      STR_2 0843                        STR_3 0873                        STR_4 0843  
                      STR_5 0853                        STR_6 0833                        STR_7 0853  
                      STR_8 0833                        STR_9 0863                        u2000 12E4  
                      u2001 12E0                        u2010 12FE                        u2011 12FA  
                      u2100 1A06                        u2101 1A02                        u1400 1B58  
                      u2024 1310                        u2120 1A4E                        u2040 1932  
                      u3000 105C                        u1401 1B54                        u2025 130C  
                      u2121 1A4A                        u2041 192E                        u3001 1058  
                      u1410 1B76                        u2034 1330                        u2114 1A1C  
                      u3010 15D8                        u1411 1B72                        u1331 1A86  
                      u2035 132C                        u2115 1A18                        u3011 15D2  
                      u2300 1532                        u2220 1442                        u2204 13F2  
                      u2140 135A                        u2060 1976                        u3020 15DA  
                      u3100 08EC                        u2301 152E                        u2221 143E  
                      u2205 13EE                        u2141 1356                        u1341 1AAA  
                      u2061 1972                        u3101 08E8                        _LATA 0F89  
                      u2310 1544                        u2230 1454                        u2214 1416  
                      u2150 136C                        u2134 1A64                        u2054 1944  
                      u3030 160E                        u3110 091E                        u2311 1540  
                      u2231 1450                        u2215 1412                        u2151 1368  
                      u2135 1A60                        u2055 1940                        u3031 160A  
                      u3111 091A                        u1360 1AF6                        u2080 19BE  
                      u2400 231A                        u3040 1658                        u3200 0A36  
                      u3120 0936                        u1361 1AF2                        u2081 19BA  
                      u2401 2316                        u3041 1654                        u3201 0A32  
                      u3121 0932                        u1354 1ADC                        u2074 198C  
                      u2410 1F7C                        u3050 16C8                        u3210 0A4E  
                      u3130 094E                        u1355 1AD8                        u2075 1988  
                      u2411 1F78                        u3051 16C4                        u3211 0A4A  
                      u3131 094A                        u2324 155A                        u2260 14BA  
                      u2244 146A                        u2180 13CA                        u2164 137E  
                      u2500 2510                        u2340 2238                        u2420 1FA0  
                      u3060 1738                        u3300 0BC6                        u3220 0A68  
                      u3140 096C                        u2325 1556                        u2261 14B6  
                      u2245 1466                        u2181 13C6                        u2165 137A  
                      u2501 250C                        u2341 2232                        u2421 1F9C  
                      u3061 1734                        u3301 0BC2                        u3221 0A64  
                      u3141 0968                        u2334 157E                        u2270 14CC  
                      u2254 148E                        u2190 13DC                        u2174 139E  
                      u1390 1B46                        u1374 1B08                        u2510 1E42  
                      u2094 19D4                        u2350 223A                        u2430 1FB0  
                      u3070 22C6                        u3310 0C0E                        u3230 0A84  
                      u3150 099C                        u2335 157A                        u2271 14C8  
                      u2255 148A                        u2191 13D8                        u2175 139A  
                      u1391 1B42                        u1375 1B04                        u2511 1E3E  
                      u2095 19D0                        u2431 1FAC                        u3071 22C2  
                      u3311 0C0A                        u3231 0A80                        u3151 0998  
                      u1384 1B28                        u2520 1E58                        u3080 1DDE  
                      u2600 1C56                        u2360 2200                        u2440 228C  
                      u3320 0C26                        u3240 0AA4                        u3160 09CE  
                      u1385 1B24                        u2521 1E54                        u3081 1DDA  
                      u2601 1C52                        u2361 21FA                        u2441 2288  
                      u3321 0C22                        u3241 0AA0                        u3161 09CA  
                      u2530 1E6E                        u2610 1C70                        u2370 2202  
                      u2450 1F1C                        u3330 0C3E                        u3250 0AEA  
                      u3170 09E6                        u3090 08BC                        u2531 1E6A  
                      u2611 1C6C                        u2451 1F18                        u3331 0C3A  
                      u3251 0AE6                        u3171 09E2                        u3091 08B8  
                      u2284 14E2                        u2540 1E84                        u2620 1C96  
                      u2700 1D82                        u2380 2154                        u2460 1F34  
                      u3340 0C5A                        u3260 0B32                        u3180 09FE  
                      u2285 14DE                        u2541 1E80                        u2621 1C92  
                      u2701 1D7E                        u2381 2150                        u2461 1F2E  
                      u3341 0C56                        u3261 0B2E                        u3181 09FA  
                      u2294 1506                        u2550 1E9A                        u2630 1CB4  
                      u2710 1DA6                        u2390 2170                        u2470 1F36  
                      u3350 0C70                        u3270 0B4A                        u3190 0A1E  
                      u2295 1502                        u2551 1E96                        u2631 1CB0  
                      u2711 1DA2                        u2391 216C                        u3351 0C6C  
                      u3271 0B46                        u3191 0A1A                        u2720 20E0  
                      u2640 1CD0                        u1920 11F4                        u1904 11A8  
                      u1840 110C                        u2560 204E                        u2480 1F50  
                      u2800 23D6                        u3360 0CF4                        u3280 0B62  
                      u2721 20DC                        u2641 1CCC                        u1921 11F0  
                      u1905 11A4                        u1841 1108                        u2561 204A  
                      u2481 1F4C                        u2801 23D2                        u3361 0CF0  
                      u3281 0B5E                        u2730 20F0                        u2650 1CF6  
                      u1930 120E                        u1914 11C8                        u1850 111E  
                      u2570 2064                        u2490 1F64                        u2810 247E  
                      u3290 0B80                        u2731 20EC                        u2651 1CF2  
                      u1931 120A                        u1915 11C4                        u1851 111A  
                      u2571 2060                        u2491 1F60                        u2811 247A  
                      u3291 0B7C                        u2580 2346                        u2660 1D1A  
                      u2900 183E                        u2820 2398                        u2740 226E  
                      u2581 2342                        u2661 1D16                        u2901 183A  
                      u2821 2394                        u2741 226A                        u2590 2358  
                      u2670 1D34                        u2830 207C                        u2910 185A  
                      u2750 1B8A                        u2591 2354                        u2671 1D30  
                      u2831 2078                        u2911 1856                        u2751 1B86  
                      u2680 1D4E                        u1960 126C                        u1944 1220  
                      u1880 117C                        u1864 1130                        u2920 1900  
                      u2840 17AC                        u2760 1BB2                        u2681 1D4A  
                      u1961 1268                        u1945 121C                        u1881 1178  
                      u1865 112C                        u2921 18FC                        u2841 17A8  
                      u2761 1BAE                        u2690 1D6C                        u1970 1286  
                      u1954 1240                        u1890 1196                        u1874 1150  
                      u2850 17BA                        u2770 1C08                        u2930 0D36  
                      u2691 1D68                        u1971 1282                        u1955 123C  
                      u1891 1192                        u1875 114C                        u2851 17B6  
                      u2771 1C04                        u2931 0D32                        u2780 2522  
                      u2860 17D0                        u2940 0DFE                        u2781 251E  
                      u2861 17CC                        u2941 0DFA                        u2790 23C4  
                      u2870 17E6                        u2950 0EC4                        u2791 23C0  
                      u2871 17E2                        u2951 0EC0                        u1984 1298  
                      u2880 17FC                        u2960 0F58                        u1985 1294  
                      u2881 17F8                        u2961 0F54                        u1994 12B8  
                      u2890 1812                        u2970 0FEE                        u1995 12B4  
                      u2891 180E                        u2971 0FEA                        u2980 1024  
                      u2981 1020                        u2990 1040                        u2991 103C  
               _outputPrint 0D22                        _main 235A                        _msgs 0060  
                      _time 0030                        _prot 004E                        fsr2h 0FDA  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
             ?_i2c_read_bit 0001                        prodh 0FF4                        prodl 0FF3  
                      start 0000                ___param_bank 0000             __end_of_i2cInit 245C  
            _alarmLevelHigh 003E             __end_of_bcd2dec 21CC                       ?_main 0001  
           __end_of_dec2bcd 1F0A             __end_of___awdiv 1D08            ?_lcdCommand4bits 0001  
                     STR_10 0883                       STR_11 0893                       STR_12 0893  
                     STR_13 089B                       STR_14 0893                       STR_15 089B  
                     STR_16 0893                       STR_17 0822                       STR_18 0811  
                     STR_19 0893             __end_of___awmod 1DB8             ___awdiv@divisor 0003  
           ___awdiv@counter 0005                       _PORTA 0F80                       _PORTB 0F81  
                     _PORTC 0F82                       _PORTD 0F83                       _PORTE 0F84  
                     _TRISA 0F92                       _TRISB 0F93                       _TRISC 0F94  
                     _TRISD 0F95                       _TRISE 0F96             __end_of_lcdData 24C8  
           __end_of_lcdInit 1E30              ??_i2cWriteByte 000A             __end_of_getProt 2594  
       __end_of_i2cReadByte 206C          outputPrint@numTela 0021                       _index 003C  
            setProt@newChar 0001             __end_of_pinMode 158C                       _valor 004D  
                     _state 0040             __end_of_varInit 1780                dec2bcd@value 0017  
           __end_of_setProt 2484                       tablat 0FF5           __end_of_I2C_delay 2596  
             _i2c_write_bit 1F6A                       plusw1 0FE3                       plusw2 0FDB  
                     status 0FD8              ??_i2c_read_bit 0007            __end_of_Delay2ms 235A  
      __end_of_digitalWrite 133E             __initialization 1FC2                __end_of_main 2386  
           i2cWriteByte@bit 000B            __end_of_i2c_stop 232C                ?_setLanguage 0001  
                    ??_main 002B               __activetblptr 0002                 eventRead@ev 0007  
          ___awdiv@dividend 0001              ?_i2c_write_bit 0001              getAlarmLevel@l 0003  
                 ??_i2cInit 0007       __end_of_getAlarmLevel 23B2          dsWriteData@address 001D  
          __end_of_getState 258C                   ??_bcd2dec 0015                      _dTimer 0034  
                 ??_dec2bcd 0019                      ___wmul 2484                   ??___awdiv 0005  
                 ??___awmod 000D                      _dsInit 257E                      _lcdInt 1B7C  
                    _kpInit 254E                      _kpRead 258C            __end_of_read_SDA 2204  
          __end_of_read_SCL 223C                      _ev_ant 003A                      _smInit 253E  
                    clear_0 2008                      _smLoop 08A0            ___awdiv@quotient 0007  
           ___awmod@divisor 000B                   ??_lcdData 0003                      isa$std 0001  
               _i2cReadByte 2018                   ??_lcdInit 0004             ___awmod@counter 000D  
                 ??_getProt 0003            __end_of_setState 2570                __pdataCOMRAM 0053  
                 ??_pinMode 0005                __mediumconst 0000                   ??_varInit 0023  
                 ??_setProt 0001                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8           __end_of_Delay40us 2512                  __accesstop 0060  
   __end_of__initialization 200E               ___rparam_used 0001                ?_pulseEnable 0001  
               pinMode@type 0003        __end_of_i2cWriteByte 1F6A              __pcstackCOMRAM 0001  
              __pidataBANK0 255C            i2cWriteByte@byte 0009           __end_of_i2c_start 218A  
      __end_of_i2c_read_bit 22A2                   ?_Delay2ms 0001             ??_i2c_write_bit 0007  
              ?_outputPrint 0021                   ?_i2c_stop 0001                  _dsReadData 20FE  
          dsReadData@result 0011                  _lcdCommand 20B6                     ?___wmul 0009  
                   ?_dsInit 0001                     ?_lcdInt 0017                     ?_kpInit 0001  
                   ?_kpRead 0001                eventRead@key 000A                     ?_smInit 0001  
                   ?_smLoop 0001                  _kpDebounce 1A80                  ??_Delay2ms 0001  
      i2cReadByte@send_stop 0008             getAlarmLevel@lh 0001                _digitalWrite 10F0  
                 ?_getState 0001           __end_of_clear_SDA 2408           __end_of_clear_SCL 2432  
                 ?_read_SDA 0001                   ?_read_SCL 0001                  ??_i2c_stop 0007  
                   _i2cInit 2432                   _I2C_delay 2594                     __Hparam 0000  
                 ?_setState 0001                     __Lparam 0000           __end_of_lcdString 2270  
           kpDebounce@tempo 004C                     _bcd2dec 218A                     _dec2bcd 1EA8  
                _estado_ant 0041                     ___awdiv 1C44                     ___awmod 1D08  
              __psmallconst 0800                     __pcinit 1FC2              serialRead@resp 0001  
                   _lcdData 24AA                     __ramtop 0800                     _lcdInit 1DB8  
                   __ptext0 235A                     __ptext1 08A0                     __ptext2 24E2  
                   __ptext3 22A2                     __ptext4 0D22                     __ptext5 223C  
                   __ptext6 1B7C                     __ptext7 24AA                     __ptext8 2584  
                   __ptext9 2386                     _getProt 2590           __end_of_eventInit 253E  
         __end_of_eventRead 1916                     _display 0047                     _key_ant 0038  
                   _pinMode 133E            ___awmod@dividend 0009                 serialSend@c 0001  
                   _varInit 158C                     _setProt 245C                     lcdInt@i 001F  
                   lcdInt@j 001B                  ??_getState 0001                   Delay2ms@j 0001  
                 Delay2ms@k 0002                     _started 0048         kpDebounce@valorNovo 004B  
      end_of_initialization 200E                  ??_read_SDA 0007                  ??_read_SCL 0007  
         __end_of_resetProt 22D0               __Lmediumconst 0000                 ?_dsReadData 000E  
            digitalRead@pin 0001                  ?_I2C_delay 0001                  ??_setState 0001  
                _serialInit 24C8                  _serialRead 23B2                  _serialSend 2512  
                   postdec1 0FE5                 ?_lcdCommand 0001                     postinc0 0FEE  
                   postinc2 0FDE               _setAlarmLevel 206C               ??_digitalRead 0003  
             ??_getLanguage 0001                 ?_kpDebounce 0001                ?_i2cReadByte 0008  
           i2c_read_bit@bit 0007              _valor@ssd$F316 0801                  _prot_ready 0042  
              _i2cWriteByte 1F0A               ??_dsWriteData 001F                   _Delay40us 24FA  
              _i2c_read_bit 2270              ?_setAlarmLevel 0020               _alarmLevelLow 003D  
         outputPrint@idioma 0023              __end_of___wmul 24AA              __end_of_dsInit 2584  
             __pidataCOMRAM 2570              __end_of_lcdInt 1C44              __end_of_kpInit 255C  
            __end_of_kpRead 2590      __end_of_valor@ssd$F316 0811              __end_of_smInit 254E  
            __end_of_smLoop 0D22         start_initialization 1FC2         __end_of_digitalRead 1A80  
       __end_of_getLanguage 2588                   _i2c_start 2144                  ?_Delay40us 0001  
              smLoop@evento 0028           ??_lcdCommand4bits 0002                 ??_I2C_delay 0001  
       __end_of_dsWriteData 22FE                 ?_serialInit 0001                 ?_serialRead 0001  
               ?_serialSend 0001                    ??___wmul 000D                    ??_dsInit 0007  
                  ??_lcdInt 001A                    ??_kpInit 0001                    ??_kpRead 0001  
               __pdataBANK0 0060                    ??_smInit 002B                    ??_smLoop 0025  
         dsReadData@address 000E                   _dTimerMax 0032                 __pbssCOMRAM 002B  
                pinMode@pin 0001                  ?_i2c_start 0001            setState@newState 0001  
     __end_of_i2c_write_bit 1FC2                    ?_i2cInit 0001               _getAlarmLevel 2386  
           ??_setAlarmLevel 0023                   _clear_SDA 23DE                   _clear_SCL 2408  
                  ?_bcd2dec 0013                    ?_dec2bcd 0017                    ?___awdiv 0001  
                  ?___awmod 0009                   _lcdString 223C                 _digitalRead 1916  
               _getLanguage 2584                    ?_lcdData 0001               ??_setLanguage 0020  
                  ?_lcdInit 0001                    ?_getProt 0001               lcdCommand@cmd 0003  
             eventRead@data 0009                 __smallconst 0800               eventRead@prot 0006  
                  ?_pinMode 0001                    ?_varInit 0001                    ?_setProt 0001  
            kpDebounce@bits 0004                   _eventInit 2528                   _eventRead 1780  
                resetProt@i 0001                 _dsWriteData 22D0  setAlarmLevel@newAlarmLevel 0020  
               ??_Delay40us 0001              ___wmul@product 000D                ??_dsReadData 0010  
            ?_getAlarmLevel 0001               lcdInt@divisor 001D                  ?_clear_SDA 0001  
                ?_clear_SCL 0001                   _resetProt 22A2                   lcdInt@val 0017  
              ??_lcdCommand 0003                  ?_lcdString 0004                ??_kpDebounce 0001  
         ___wmul@multiplier 0009       kpDebounce@valorAntigo 004A                    _Delay2ms 232C  
        __end_of_dsReadData 2144                  ?_eventInit 0001                  ?_eventRead 0003  
               ??_i2c_start 0007         __end_of_setLanguage 24FA                   copy_data0 1FD6  
                 copy_data1 1FF6          __end_of_lcdCommand 20FE                lcdData@valor 0003  
                  _i2c_stop 22FE          __end_of_kpDebounce 1B7C                    __Hrparam 0000  
                ?_resetProt 0001               ??_pulseEnable 0001                    __Lrparam 0000  
          dsWriteData@value 001F            kpDebounce@portes 0009             _lcdCommand4bits 1E30  
                  __ptext10 2588                    __ptext11 1780                    __ptext20 22D0  
                  __ptext12 245C                    __ptext21 20FE                    __ptext13 2512  
                  __ptext30 2204                    __ptext22 1F0A                    __ptext14 23B2  
                  __ptext31 1916                    __ptext23 2144                    __ptext15 258C  
                  __ptext40 2568                    __ptext32 2408                    __ptext24 2018  
                  __ptext16 2590                    __ptext41 2528                    __ptext33 10F0  
                  __ptext25 1F6A                    __ptext17 253E                    __ptext50 1A80  
                  __ptext42 254E                    __ptext34 2594                    __ptext26 22FE  
                  __ptext18 158C                    __ptext51 257E                    __ptext43 24C8  
                  __ptext35 1EA8                    __ptext27 23DE                    __ptext19 206C  
                  __ptext52 2432                    __ptext44 1DB8                    __ptext36 1D08  
                  __ptext28 2270                    __ptext53 133E                    __ptext45 20B6  
                  __ptext37 218A                    __ptext29 21CC                    __ptext46 1E30  
                  __ptext38 2484                    __ptext47 2578                    __ptext39 1C44  
                  __ptext48 24FA                    __ptext49 232C                    _getState 2588  
               _smLoop$1419 0026               kpDebounce@F13 002B               kpDebounce@F15 0053  
             ??_outputPrint 0025                    _language 003F             ??_getAlarmLevel 0003  
                  _read_SDA 21CC                    _read_SCL 2204                lcdInt@digNum 0019  
               ??_clear_SDA 0007                 ??_clear_SCL 0007                ??_serialInit 0001  
              ??_serialRead 0001                ??_serialSend 0001                    _setState 2568  
                Delay40us@j 0001             setAlarmLevel@lh 0022                    lcdInit@i 0004  
                  isa$xinst 0000                 ??_lcdString 0005         __end_of_pulseEnable 257E  
               _setLanguage 24E2      setLanguage@newLanguage 0020                 _varInit$510 0025  
               _varInit$511 0027                 _varInit$512 0029                 ??_eventInit 0001  
               ??_eventRead 0005               ?_digitalWrite 0001          __end_of_serialInit 24E2  
        __end_of_serialRead 23DE          __end_of_serialSend 2528           digitalWrite@value 0003  
               ??_resetProt 0001         __end_of_outputPrint 10F0                bcd2dec@value 0013  
              ?_digitalRead 0001                ?_getLanguage 0001     __end_of_lcdCommand4bits 1EA8  
               kpDebounce@j 000E              ??_digitalWrite 0005             digitalWrite@pin 0001  
              ?_dsWriteData 001D         lcdCommand4bits@data 0001          lcdCommand4bits@cmd 0002  
               _pulseEnable 2578  
