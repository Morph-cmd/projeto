

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Jul 08 18:07:40 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81   000000                     
    82                           ; Generated 17/10/2023 GMT
    83                           ; 
    84                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution. Publication is not required when
    98                           ;        this file is used in an embedded application.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4550 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116   000000                     
   117                           	psect	idataBANK0
   118   00379E                     __pidataBANK0:
   119                           	callstack 0
   120                           
   121                           ;initializer for _msgs
   122   00379E  73                 	db	low STR_1
   123   00379F  43                 	db	low STR_2
   124   0037A0  73                 	db	low STR_1
   125   0037A1  43                 	db	low STR_2
   126   0037A2  53                 	db	low STR_5
   127   0037A3  33                 	db	low STR_6
   128   0037A4  53                 	db	low STR_5
   129   0037A5  33                 	db	low STR_6
   130   0037A6  63                 	db	low STR_9
   131   0037A7  93                 	db	low STR_10
   132   0037A8  00                 	db	0
   133   0037A9  00                 	db	0
   134   0037AA  00                 	db	0
   135   0037AB  00                 	db	0
   136   0037AC  00                 	db	0
   137   0037AD  00                 	db	0
   138   0037AE  00                 	db	0
   139   0037AF  00                 	db	0
   140   0037B0  00                 	db	0
   141   0037B1  00                 	db	0
   142                           
   143                           ;initializer for kpDebounce@F15
   144   0037B2  02                 	db	2
   145   0037B3  03                 	db	3
   146   0037B4  05                 	db	5
   147   0037B5  04                 	db	4
   148   0037B6  01                 	db	1
   149                           
   150                           ;initializer for _ev
   151   0037B7  0062               	dw	98
   152                           
   153                           	psect	smallconst
   154   000800                     __psmallconst:
   155                           	callstack 0
   156   000800  00                 	db	0
   157   000801                     _valor@ssd$F319:
   158                           	callstack 0
   159   000801  3F                 	db	63
   160   000802  06                 	db	6
   161   000803  5B                 	db	91
   162   000804  4F                 	db	79
   163   000805  66                 	db	102
   164   000806  6D                 	db	109
   165   000807  7D                 	db	125
   166   000808  07                 	db	7
   167   000809  7F                 	db	127
   168   00080A  6F                 	db	111
   169   00080B  77                 	db	119
   170   00080C  7C                 	db	124
   171   00080D  39                 	db	57
   172   00080E  5E                 	db	94
   173   00080F  79                 	db	121
   174   000810  71                 	db	113
   175   000811                     __end_of_valor@ssd$F319:
   176                           	callstack 0
   177   000000                     _PORTA	set	3968
   178   000000                     _LATA	set	3977
   179   000000                     _TRISA	set	3986
   180   000000                     _PORTE	set	3972
   181   000000                     _PORTD	set	3971
   182   000000                     _PORTC	set	3970
   183   000000                     _PORTB	set	3969
   184   000000                     _TRISE	set	3990
   185   000000                     _TRISD	set	3989
   186   000000                     _TRISC	set	3988
   187   000000                     _TRISB	set	3987
   188   000811                     STR_20:
   189   000811  45                 	db	69	;'E'
   190   000812  6E                 	db	110	;'n'
   191   000813  67                 	db	103	;'g'
   192   000814  6C                 	db	108	;'l'
   193   000815  69                 	db	105	;'i'
   194   000816  73                 	db	115	;'s'
   195   000817  68                 	db	104	;'h'
   196   000818  20                 	db	32
   197   000819  20                 	db	32
   198   00081A  20                 	db	32
   199   00081B  20                 	db	32
   200   00081C  20                 	db	32
   201   00081D  20                 	db	32
   202   00081E  20                 	db	32
   203   00081F  20                 	db	32
   204   000820  20                 	db	32
   205   000821  00                 	db	0
   206   000822                     STR_19:
   207   000822  50                 	db	80	;'P'
   208   000823  6F                 	db	111	;'o'
   209   000824  72                 	db	114	;'r'
   210   000825  74                 	db	116	;'t'
   211   000826  75                 	db	117	;'u'
   212   000827  67                 	db	103	;'g'
   213   000828  75                 	db	117	;'u'
   214   000829  65                 	db	101	;'e'
   215   00082A  73                 	db	115	;'s'
   216   00082B  20                 	db	32
   217   00082C  20                 	db	32
   218   00082D  20                 	db	32
   219   00082E  20                 	db	32
   220   00082F  20                 	db	32
   221   000830  20                 	db	32
   222   000831  20                 	db	32
   223   000832  00                 	db	0
   224   000833                     STR_6:
   225   000833  43                 	db	67	;'C'
   226   000834  68                 	db	104	;'h'
   227   000835  61                 	db	97	;'a'
   228   000836  6E                 	db	110	;'n'
   229   000837  67                 	db	103	;'g'
   230   000838  65                 	db	101	;'e'
   231   000839  20                 	db	32
   232   00083A  74                 	db	116	;'t'
   233   00083B  69                 	db	105	;'i'
   234   00083C  6D                 	db	109	;'m'
   235   00083D  65                 	db	101	;'e'
   236   00083E  20                 	db	32
   237   00083F  20                 	db	32
   238   000840  20                 	db	32
   239   000841  20                 	db	32
   240   000842  00                 	db	0
   241   000843                     STR_2:
   242   000843  43                 	db	67	;'C'
   243   000844  68                 	db	104	;'h'
   244   000845  61                 	db	97	;'a'
   245   000846  6E                 	db	110	;'n'
   246   000847  67                 	db	103	;'g'
   247   000848  65                 	db	101	;'e'
   248   000849  20                 	db	32
   249   00084A  61                 	db	97	;'a'
   250   00084B  6C                 	db	108	;'l'
   251   00084C  61                 	db	97	;'a'
   252   00084D  72                 	db	114	;'r'
   253   00084E  6D                 	db	109	;'m'
   254   00084F  20                 	db	32
   255   000850  20                 	db	32
   256   000851  20                 	db	32
   257   000852  00                 	db	0
   258   000853                     STR_5:
   259   000853  41                 	db	65	;'A'
   260   000854  6C                 	db	108	;'l'
   261   000855  74                 	db	116	;'t'
   262   000856  65                 	db	101	;'e'
   263   000857  72                 	db	114	;'r'
   264   000858  61                 	db	97	;'a'
   265   000859  72                 	db	114	;'r'
   266   00085A  20                 	db	32
   267   00085B  74                 	db	116	;'t'
   268   00085C  65                 	db	101	;'e'
   269   00085D  6D                 	db	109	;'m'
   270   00085E  70                 	db	112	;'p'
   271   00085F  6F                 	db	111	;'o'
   272   000860  20                 	db	32
   273   000861  20                 	db	32
   274   000862  00                 	db	0
   275   000863                     STR_9:
   276   000863  41                 	db	65	;'A'
   277   000864  6C                 	db	108	;'l'
   278   000865  74                 	db	116	;'t'
   279   000866  65                 	db	101	;'e'
   280   000867  72                 	db	114	;'r'
   281   000868  61                 	db	97	;'a'
   282   000869  72                 	db	114	;'r'
   283   00086A  20                 	db	32
   284   00086B  69                 	db	105	;'i'
   285   00086C  64                 	db	100	;'d'
   286   00086D  69                 	db	105	;'i'
   287   00086E  6F                 	db	111	;'o'
   288   00086F  6D                 	db	109	;'m'
   289   000870  61                 	db	97	;'a'
   290   000871  20                 	db	32
   291   000872  00                 	db	0
   292   000873                     STR_1:
   293   000873  41                 	db	65	;'A'
   294   000874  6C                 	db	108	;'l'
   295   000875  74                 	db	116	;'t'
   296   000876  65                 	db	101	;'e'
   297   000877  72                 	db	114	;'r'
   298   000878  61                 	db	97	;'a'
   299   000879  72                 	db	114	;'r'
   300   00087A  20                 	db	32
   301   00087B  61                 	db	97	;'a'
   302   00087C  6C                 	db	108	;'l'
   303   00087D  61                 	db	97	;'a'
   304   00087E  72                 	db	114	;'r'
   305   00087F  6D                 	db	109	;'m'
   306   000880  65                 	db	101	;'e'
   307   000881  20                 	db	32
   308   000882  00                 	db	0
   309   000883                     STR_22:
   310   000883  54                 	db	84	;'T'
   311   000884  45                 	db	69	;'E'
   312   000885  4D                 	db	77	;'M'
   313   000886  50                 	db	80	;'P'
   314   000887  45                 	db	69	;'E'
   315   000888  52                 	db	82	;'R'
   316   000889  41                 	db	65	;'A'
   317   00088A  54                 	db	84	;'T'
   318   00088B  55                 	db	85	;'U'
   319   00088C  52                 	db	82	;'R'
   320   00088D  41                 	db	65	;'A'
   321   00088E  21                 	db	33
   322   00088F  21                 	db	33
   323   000890  21                 	db	33
   324   000891  21                 	db	33
   325   000892  00                 	db	0
   326   000893                     STR_10:
   327   000893  43                 	db	67	;'C'
   328   000894  68                 	db	104	;'h'
   329   000895  61                 	db	97	;'a'
   330   000896  6E                 	db	110	;'n'
   331   000897  67                 	db	103	;'g'
   332   000898  65                 	db	101	;'e'
   333   000899  20                 	db	32
   334   00089A  6C                 	db	108	;'l'
   335   00089B  61                 	db	97	;'a'
   336   00089C  6E                 	db	110	;'n'
   337   00089D  67                 	db	103	;'g'
   338   00089E  75                 	db	117	;'u'
   339   00089F  61                 	db	97	;'a'
   340   0008A0  67                 	db	103	;'g'
   341   0008A1  65                 	db	101	;'e'
   342   0008A2  00                 	db	0
   343   0008A3                     STR_11:
   344   0008A3  20                 	db	32
   345   0008A4  20                 	db	32
   346   0008A5  20                 	db	32
   347   0008A6  20                 	db	32
   348   0008A7  20                 	db	32
   349   0008A8  20                 	db	32
   350   0008A9  20                 	db	32
   351   0008AA  20                 	db	32
   352   0008AB  20                 	db	32
   353   0008AC  20                 	db	32
   354   0008AD  20                 	db	32
   355   0008AE  00                 	db	0
   356   0008AF  00                 	db	0	; dummy byte at the end
   357   000000                     
   358                           ; #config settings
   359                           
   360                           	psect	cinit
   361   0033BE                     __pcinit:
   362                           	callstack 0
   363   0033BE                     start_initialization:
   364                           	callstack 0
   365   0033BE                     __initialization:
   366                           	callstack 0
   367                           
   368                           ; Initialize objects allocated to BANK0 (27 bytes)
   369                           ; load TBLPTR registers with __pidataBANK0
   370   0033BE  0E9E               	movlw	low __pidataBANK0
   371   0033C0  6EF6               	movwf	tblptrl,c
   372   0033C2  0E37               	movlw	high __pidataBANK0
   373   0033C4  6EF7               	movwf	tblptrh,c
   374   0033C6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   375   0033C8  6EF8               	movwf	tblptru,c
   376   0033CA  EE00  F0C8         	lfsr	0,__pdataBANK0
   377   0033CE  EE10 F01B          	lfsr	1,27
   378   0033D2                     copy_data0:
   379   0033D2  0009               	tblrd		*+
   380   0033D4  CFF5 FFEE          	movff	tablat,postinc0
   381   0033D8  50E5               	movf	postdec1,w,c
   382   0033DA  50E1               	movf	fsr1l,w,c
   383   0033DC  E1FA               	bnz	copy_data0
   384                           
   385                           ; Clear objects allocated to BANK0 (104 bytes)
   386   0033DE  EE00  F060         	lfsr	0,__pbssBANK0
   387   0033E2  0E68               	movlw	104
   388   0033E4                     clear_0:
   389   0033E4  6AEE               	clrf	postinc0,c
   390   0033E6  06E8               	decf	wreg,f,c
   391   0033E8  E1FD               	bnz	clear_0
   392                           
   393                           ; Clear objects allocated to COMRAM (16 bytes)
   394   0033EA  EE00  F050         	lfsr	0,__pbssCOMRAM
   395   0033EE  0E10               	movlw	16
   396   0033F0                     clear_1:
   397   0033F0  6AEE               	clrf	postinc0,c
   398   0033F2  06E8               	decf	wreg,f,c
   399   0033F4  E1FD               	bnz	clear_1
   400   0033F6                     end_of_initialization:
   401                           	callstack 0
   402   0033F6                     __end_of__initialization:
   403                           	callstack 0
   404   0033F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   405   0033F8  6EF8               	movwf	tblptru,c
   406   0033FA  0100               	movlb	0
   407   0033FC  EFA7  F01A         	goto	_main	;jump to C main() function
   408                           
   409                           	psect	bssCOMRAM
   410   000050                     __pbssCOMRAM:
   411                           	callstack 0
   412   000050                     _i:
   413                           	callstack 0
   414   000050                     	ds	1
   415   000051                     _index:
   416                           	callstack 0
   417   000051                     	ds	1
   418   000052                     _alarmLevelLow:
   419                           	callstack 0
   420   000052                     	ds	1
   421   000053                     _alarmLevelHigh:
   422                           	callstack 0
   423   000053                     	ds	1
   424   000054                     _language:
   425                           	callstack 0
   426   000054                     	ds	1
   427   000055                     _v3:
   428                           	callstack 0
   429   000055                     	ds	1
   430   000056                     _v2:
   431                           	callstack 0
   432   000056                     	ds	1
   433   000057                     _v1:
   434                           	callstack 0
   435   000057                     	ds	1
   436   000058                     _v0:
   437                           	callstack 0
   438   000058                     	ds	1
   439   000059                     _display:
   440                           	callstack 0
   441   000059                     	ds	1
   442   00005A                     _started:
   443                           	callstack 0
   444   00005A                     	ds	1
   445   00005B                     _de:
   446                           	callstack 0
   447   00005B                     	ds	1
   448   00005C                     kpDebounce@valorAntigo:
   449                           	callstack 0
   450   00005C                     	ds	1
   451   00005D                     kpDebounce@valorNovo:
   452                           	callstack 0
   453   00005D                     	ds	1
   454   00005E                     kpDebounce@tempo:
   455                           	callstack 0
   456   00005E                     	ds	1
   457   00005F                     _valor:
   458                           	callstack 0
   459   00005F                     	ds	1
   460                           
   461                           	psect	bssBANK0
   462   000060                     __pbssBANK0:
   463                           	callstack 0
   464   000060                     _t:
   465                           	callstack 0
   466   000060                     	ds	66
   467   0000A2                     	ds	5
   468   0000A7                     _m:
   469                           	callstack 0
   470   0000A7                     	ds	4
   471   0000AB                     _maxTemp:
   472                           	callstack 0
   473   0000AB                     	ds	2
   474   0000AD                     _date:
   475                           	callstack 0
   476   0000AD                     	ds	2
   477   0000AF                     _temp:
   478                           	callstack 0
   479   0000AF                     	ds	2
   480   0000B1                     _time:
   481                           	callstack 0
   482   0000B1                     	ds	2
   483   0000B3                     	ds	2
   484   0000B5                     	ds	2
   485   0000B7                     _key:
   486                           	callstack 0
   487   0000B7                     	ds	2
   488   0000B9                     _key_ant:
   489                           	callstack 0
   490   0000B9                     	ds	2
   491   0000BB                     _ev_ant:
   492                           	callstack 0
   493   0000BB                     	ds	2
   494   0000BD                     _voltMin:
   495                           	callstack 0
   496   0000BD                     	ds	1
   497   0000BE                     _volt:
   498                           	callstack 0
   499   0000BE                     	ds	1
   500   0000BF                     _state:
   501                           	callstack 0
   502   0000BF                     	ds	1
   503   0000C0                     _estado_ant:
   504                           	callstack 0
   505   0000C0                     	ds	1
   506   0000C1                     _prot_ready:
   507                           	callstack 0
   508   0000C1                     	ds	1
   509   0000C2                     _prot:
   510                           	callstack 0
   511   0000C2                     	ds	6
   512                           
   513                           	psect	dataBANK0
   514   0000C8                     __pdataBANK0:
   515                           	callstack 0
   516   0000C8                     _msgs:
   517                           	callstack 0
   518   0000C8                     	ds	20
   519   0000DC                     kpDebounce@F15:
   520                           	callstack 0
   521   0000DC                     	ds	5
   522   0000E1                     	ds	2
   523                           
   524                           	psect	cstackCOMRAM
   525   000001                     __pcstackCOMRAM:
   526                           	callstack 0
   527   000001                     ??_kpDebounce:
   528   000001                     ?_getAlarmLevel:
   529                           	callstack 0
   530   000001                     ?_getTemp:
   531                           	callstack 0
   532   000001                     ?_getDate:
   533                           	callstack 0
   534   000001                     ?_adcRead:
   535                           	callstack 0
   536   000001                     ?_digitalRead:
   537                           	callstack 0
   538   000001                     ?___awdiv:
   539                           	callstack 0
   540   000001                     ?___llmod:
   541                           	callstack 0
   542   000001                     Delay40us@j:
   543                           	callstack 0
   544   000001                     Delay2ms@j:
   545                           	callstack 0
   546   000001                     lcdCommand4bits@data:
   547                           	callstack 0
   548   000001                     serialSend@c:
   549                           	callstack 0
   550   000001                     serialRead@resp:
   551                           	callstack 0
   552   000001                     setProt@newChar:
   553                           	callstack 0
   554   000001                     resetProt@i:
   555                           	callstack 0
   556   000001                     digitalWrite@pin:
   557                           	callstack 0
   558   000001                     digitalRead@pin:
   559                           	callstack 0
   560   000001                     pinMode@pin:
   561                           	callstack 0
   562   000001                     getAlarmLevel@lh:
   563                           	callstack 0
   564   000001                     ___awdiv@dividend:
   565                           	callstack 0
   566   000001                     ___llmod@dividend:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x0
   570   000001                     	ds	1
   571   000002                     Delay2ms@k:
   572                           	callstack 0
   573   000002                     lcdCommand4bits@cmd:
   574                           	callstack 0
   575                           
   576                           ; 1 bytes @ 0x1
   577   000002                     	ds	1
   578   000003                     ??_digitalRead:
   579   000003                     lcdCommand@cmd:
   580                           	callstack 0
   581   000003                     lcdData@valor:
   582                           	callstack 0
   583   000003                     adcRead@ADvalor:
   584                           	callstack 0
   585   000003                     digitalWrite@value:
   586                           	callstack 0
   587   000003                     pinMode@type:
   588                           	callstack 0
   589   000003                     getAlarmLevel@l:
   590                           	callstack 0
   591   000003                     ___awdiv@divisor:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x2
   595   000003                     	ds	1
   596   000004                     lcdInit@i:
   597                           	callstack 0
   598   000004                     lcdString@str:
   599                           	callstack 0
   600   000004                     setState@newState:
   601                           	callstack 0
   602   000004                     kpDebounce@bits:
   603                           	callstack 0
   604                           
   605                           ; 5 bytes @ 0x3
   606   000004                     	ds	1
   607   000005                     ??_digitalWrite:
   608   000005                     ??_pinMode:
   609   000005                     ?___xxtofl:
   610                           	callstack 0
   611   000005                     ___awdiv@counter:
   612                           	callstack 0
   613   000005                     ___llmod@divisor:
   614                           	callstack 0
   615   000005                     ___xxtofl@val:
   616                           	callstack 0
   617                           
   618                           ; 4 bytes @ 0x4
   619   000005                     	ds	1
   620   000006                     ___awdiv@sign:
   621                           	callstack 0
   622                           
   623                           ; 1 bytes @ 0x5
   624   000006                     	ds	1
   625   000007                     i2c_write_bit@bit:
   626                           	callstack 0
   627   000007                     i2c_read_bit@bit:
   628                           	callstack 0
   629   000007                     ___awdiv@quotient:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x6
   633   000007                     	ds	1
   634   000008                     i2cWriteByte@send_stop:
   635                           	callstack 0
   636   000008                     i2cReadByte@send_stop:
   637                           	callstack 0
   638                           
   639                           ; 1 bytes @ 0x7
   640   000008                     	ds	1
   641   000009                     ??_i2cReadByte:
   642   000009                     ??___xxtofl:
   643   000009                     ?___wmul:
   644                           	callstack 0
   645   000009                     ?___awmod:
   646                           	callstack 0
   647   000009                     i2cWriteByte@byte:
   648                           	callstack 0
   649   000009                     ___llmod@counter:
   650                           	callstack 0
   651   000009                     ___wmul@multiplier:
   652                           	callstack 0
   653   000009                     ___awmod@dividend:
   654                           	callstack 0
   655   000009                     kpDebounce@portes:
   656                           	callstack 0
   657                           
   658                           ; 5 bytes @ 0x8
   659   000009                     	ds	1
   660   00000A                     i2cWriteByte@send_start:
   661                           	callstack 0
   662   00000A                     i2cReadByte@nack:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x9
   666   00000A                     	ds	1
   667   00000B                     i2cWriteByte@bit:
   668                           	callstack 0
   669   00000B                     i2cReadByte@bit:
   670                           	callstack 0
   671   00000B                     ___wmul@multiplicand:
   672                           	callstack 0
   673   00000B                     ___awmod@divisor:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0xA
   677   00000B                     	ds	2
   678   00000D                     i2cReadByte@byte:
   679                           	callstack 0
   680   00000D                     ___awmod@counter:
   681                           	callstack 0
   682   00000D                     ___xxtofl@sign:
   683                           	callstack 0
   684   00000D                     ___wmul@product:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0xC
   688   00000D                     	ds	1
   689   00000E                     ?_dsReadData:
   690                           	callstack 0
   691   00000E                     kpDebounce@j:
   692                           	callstack 0
   693   00000E                     ___awmod@sign:
   694                           	callstack 0
   695   00000E                     ___xxtofl@exp:
   696                           	callstack 0
   697   00000E                     dsReadData@address:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0xD
   701   00000E                     	ds	1
   702   00000F                     ?_dec2bcd:
   703                           	callstack 0
   704   00000F                     dec2bcd@value:
   705                           	callstack 0
   706   00000F                     ___xxtofl@arg:
   707                           	callstack 0
   708                           
   709                           ; 4 bytes @ 0xE
   710   00000F                     	ds	1
   711   000010                     ??_dsReadData:
   712                           
   713                           ; 1 bytes @ 0xF
   714   000010                     	ds	1
   715   000011                     ??_dec2bcd:
   716   000011                     dsReadData@result:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x10
   720   000011                     	ds	2
   721   000013                     ?_bcd2dec:
   722                           	callstack 0
   723   000013                     ?___flmul:
   724                           	callstack 0
   725   000013                     bcd2dec@value:
   726                           	callstack 0
   727   000013                     ___flmul@b:
   728                           	callstack 0
   729                           
   730                           ; 4 bytes @ 0x12
   731   000013                     	ds	2
   732   000015                     ??_bcd2dec:
   733   000015                     dsWriteData@address:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x14
   737   000015                     	ds	2
   738   000017                     ?_getTime:
   739                           	callstack 0
   740   000017                     dsWriteData@value:
   741                           	callstack 0
   742   000017                     ___flmul@a:
   743                           	callstack 0
   744                           
   745                           ; 4 bytes @ 0x16
   746   000017                     	ds	1
   747   000018                     setLanguage@newLanguage:
   748                           	callstack 0
   749   000018                     setAlarmLevel@newAlarmLevel:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x17
   753   000018                     	ds	1
   754   000019                     ??_eventRead:
   755   000019                     getTime@index:
   756                           	callstack 0
   757                           
   758                           ; 1 bytes @ 0x18
   759   000019                     	ds	1
   760   00001A                     eventRead@prot:
   761                           	callstack 0
   762   00001A                     setAlarmLevel@lh:
   763                           	callstack 0
   764   00001A                     lcdInt@val:
   765                           	callstack 0
   766   00001A                     setTime@newTime:
   767                           	callstack 0
   768                           
   769                           ; 2 bytes @ 0x19
   770   00001A                     	ds	1
   771   00001B                     ??_varInit:
   772   00001B                     ??___flmul:
   773   00001B                     eventRead@ev:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x1A
   777   00001B                     	ds	1
   778   00001C                     lcdInt@digNum:
   779                           	callstack 0
   780   00001C                     setTime@index:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x1B
   784   00001C                     	ds	1
   785   00001D                     ??_lcdInt:
   786   00001D                     eventRead@data:
   787                           	callstack 0
   788   00001D                     _varInit$595:
   789                           	callstack 0
   790   00001D                     setDate@date:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x1C
   794   00001D                     	ds	1
   795   00001E                     lcdInt@j:
   796                           	callstack 0
   797   00001E                     eventRead@key:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x1D
   801   00001E                     	ds	1
   802   00001F                     ??_setDate:
   803   00001F                     ___flmul@sign:
   804                           	callstack 0
   805   00001F                     _varInit$596:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x1E
   809   00001F                     	ds	1
   810   000020                     lcdInt@divisor:
   811                           	callstack 0
   812   000020                     ___flmul@grs:
   813                           	callstack 0
   814                           
   815                           ; 4 bytes @ 0x1F
   816   000020                     	ds	1
   817   000021                     _varInit$597:
   818                           	callstack 0
   819                           
   820                           ; 2 bytes @ 0x20
   821   000021                     	ds	1
   822   000022                     lcdInt@i:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x21
   826   000022                     	ds	1
   827   000023                     
   828                           ; 1 bytes @ 0x22
   829   000023                     	ds	1
   830   000024                     ___flmul@aexp:
   831                           	callstack 0
   832   000024                     outputPrint@numTela:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x23
   836   000024                     	ds	1
   837   000025                     ___flmul@bexp:
   838                           	callstack 0
   839                           
   840                           ; 1 bytes @ 0x24
   841   000025                     	ds	1
   842   000026                     outputPrint@idioma:
   843                           	callstack 0
   844   000026                     ___flmul@prod:
   845                           	callstack 0
   846                           
   847                           ; 4 bytes @ 0x25
   848   000026                     	ds	2
   849   000028                     outputPrint@d:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x27
   853   000028                     	ds	2
   854   00002A                     outputPrint@d_461:
   855                           	callstack 0
   856   00002A                     ___flmul@temp:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0x29
   860   00002A                     	ds	2
   861   00002C                     ?___fltol:
   862                           	callstack 0
   863   00002C                     ___fltol@f1:
   864                           	callstack 0
   865                           
   866                           ; 4 bytes @ 0x2B
   867   00002C                     	ds	4
   868   000030                     ??___fltol:
   869                           
   870                           ; 1 bytes @ 0x2F
   871   000030                     	ds	4
   872   000034                     ___fltol@sign1:
   873                           	callstack 0
   874                           
   875                           ; 1 bytes @ 0x33
   876   000034                     	ds	1
   877   000035                     ___fltol@exp1:
   878                           	callstack 0
   879                           
   880                           ; 1 bytes @ 0x34
   881   000035                     	ds	1
   882   000036                     ??_readTemp:
   883                           
   884                           ; 1 bytes @ 0x35
   885   000036                     	ds	2
   886   000038                     readTemp@tempT:
   887                           	callstack 0
   888                           
   889                           ; 2 bytes @ 0x37
   890   000038                     	ds	2
   891   00003A                     readTemp@j:
   892                           	callstack 0
   893                           
   894                           ; 1 bytes @ 0x39
   895   00003A                     	ds	1
   896   00003B                     ??_smLoop:
   897                           
   898                           ; 1 bytes @ 0x3A
   899   00003B                     	ds	3
   900   00003E                     _smLoop$1509:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0x3D
   904   00003E                     	ds	2
   905   000040                     smLoop@l:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x3F
   909   000040                     	ds	2
   910   000042                     smLoop@h:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x41
   914   000042                     	ds	2
   915   000044                     smLoop@temp:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x43
   919   000044                     	ds	2
   920   000046                     smLoop@h_556:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x45
   924   000046                     	ds	2
   925   000048                     smLoop@m:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0x47
   929   000048                     	ds	2
   930   00004A                     smLoop@date:
   931                           	callstack 0
   932                           
   933                           ; 2 bytes @ 0x49
   934   00004A                     	ds	2
   935   00004C                     smLoop@date_552:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x4B
   939   00004C                     	ds	2
   940   00004E                     smLoop@prot:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x4D
   944   00004E                     	ds	1
   945   00004F                     smLoop@evento:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x4E
   949   00004F                     	ds	1
   950   000050                     
   951                           ; 1 bytes @ 0x4F
   952 ;;
   953 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   954 ;;
   955 ;; *************** function _main *****************
   956 ;; Defined at:
   957 ;;		line 24 in file "main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  c               2    0        unsigned int 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   971 ;;      Params:         0       0       0       0       0       0       0       0       0
   972 ;;      Locals:         0       0       0       0       0       0       0       0       0
   973 ;;      Temps:          0       0       0       0       0       0       0       0       0
   974 ;;      Totals:         0       0       0       0       0       0       0       0       0
   975 ;;Total ram usage:        0 bytes
   976 ;; Hardware stack levels required when called: 8
   977 ;; This function calls:
   978 ;;		_adcInit
   979 ;;		_dsInit
   980 ;;		_kpDebounce
   981 ;;		_kpInit
   982 ;;		_lcdInit
   983 ;;		_serialInit
   984 ;;		_smInit
   985 ;;		_smLoop
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text0
   992   00354E                     __ptext0:
   993                           	callstack 0
   994   00354E                     _main:
   995                           	callstack 23
   996   00354E                     
   997                           ;main.c: 28:     kpInit();
   998   00354E  EC28  F01C         	call	_kpInit	;wreg free
   999                           
  1000                           ;main.c: 30:     dsInit();
  1001   003552  EC3F  F01C         	call	_dsInit	;wreg free
  1002   003556                     
  1003                           ;main.c: 31:     smInit();
  1004   003556  ECAF  F01B         	call	_smInit	;wreg free
  1005   00355A                     
  1006                           ;main.c: 32:     serialInit();
  1007   00355A  ECDD  F01B         	call	_serialInit	;wreg free
  1008   00355E                     
  1009                           ;main.c: 33:     TRISA = 0x00;
  1010   00355E  0E00               	movlw	0
  1011   003560  6E92               	movwf	146,c	;volatile
  1012   003562                     
  1013                           ;main.c: 34:     LATA = 0x00;
  1014   003562  0E00               	movlw	0
  1015   003564  6E89               	movwf	137,c	;volatile
  1016   003566                     
  1017                           ;main.c: 35:     adcInit();
  1018   003566  EC19  F01C         	call	_adcInit	;wreg free
  1019   00356A                     
  1020                           ;main.c: 36:     lcdInit();
  1021   00356A  EC21  F018         	call	_lcdInit	;wreg free
  1022   00356E                     l4994:
  1023                           
  1024                           ;main.c: 42:         kpDebounce();
  1025   00356E  ECF9  F014         	call	_kpDebounce	;wreg free
  1026   003572                     
  1027                           ;main.c: 43:         smLoop();
  1028   003572  EC58  F004         	call	_smLoop	;wreg free
  1029   003576  EFB7  F01A         	goto	l4994
  1030   00357A  EF00  F000         	goto	start
  1031   00357E                     __end_of_main:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _smLoop *****************
  1035 ;; Defined at:
  1036 ;;		line 20 in file "stateMachine.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  h               2   65[COMRAM] int 
  1041 ;;  l               2   63[COMRAM] int 
  1042 ;;  m               2   71[COMRAM] int 
  1043 ;;  h               2   69[COMRAM] int 
  1044 ;;  date            2   75[COMRAM] PTR unsigned char 
  1045 ;;		 -> NULL(0), 
  1046 ;;  date            2   73[COMRAM] PTR unsigned char 
  1047 ;;		 -> NULL(0), 
  1048 ;;  prot            1   77[COMRAM] PTR unsigned char 
  1049 ;;		 -> prot(6), 
  1050 ;;  temp            2   67[COMRAM] int 
  1051 ;;  evento          1   78[COMRAM] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         0       0       0       0       0       0       0       0       0
  1062 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1064 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:       21 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; Hardware stack levels required when called: 7
  1068 ;; This function calls:
  1069 ;;		___llmod
  1070 ;;		___wmul
  1071 ;;		_eventRead
  1072 ;;		_getAlarmLevel
  1073 ;;		_getDate
  1074 ;;		_getLanguage
  1075 ;;		_getProt
  1076 ;;		_getState
  1077 ;;		_getTemp
  1078 ;;		_getTime
  1079 ;;		_outputPrint
  1080 ;;		_readTemp
  1081 ;;		_resetProt
  1082 ;;		_setAlarmLevel
  1083 ;;		_setDate
  1084 ;;		_setLanguage
  1085 ;;		_setState
  1086 ;;		_setTime
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text1
  1093   0008B0                     __ptext1:
  1094                           	callstack 0
  1095   0008B0                     _smLoop:
  1096                           	callstack 23
  1097   0008B0                     
  1098                           ;stateMachine.c: 21:     unsigned char evento;;stateMachine.c: 22:     readTemp();
  1099   0008B0  ECEF  F015         	call	_readTemp	;wreg free
  1100   0008B4                     
  1101                           ;stateMachine.c: 26:     evento = eventRead();
  1102   0008B4  EC83  F011         	call	_eventRead	;wreg free
  1103   0008B8  6E4F               	movwf	smLoop@evento^0,c
  1104   0008BA                     
  1105                           ;stateMachine.c: 27:     if (evento == EV_NOEVENT) {
  1106   0008BA  0E06               	movlw	6
  1107   0008BC  184F               	xorwf	smLoop@evento^0,w,c
  1108   0008BE  A4D8               	btfss	status,2,c
  1109   0008C0  EF64  F004         	goto	u4301
  1110   0008C4  EF66  F004         	goto	u4300
  1111   0008C8                     u4301:
  1112   0008C8  EF6F  F004         	goto	l4720
  1113   0008CC                     u4300:
  1114   0008CC                     
  1115                           ;stateMachine.c: 28:         t++;
  1116   0008CC  0E01               	movlw	1
  1117   0008CE  0100               	movlb	0	; () banked
  1118   0008D0  2760               	addwf	_t& (0+255),f,b
  1119   0008D2  0E00               	movlw	0
  1120   0008D4  2361               	addwfc	(_t+1)& (0+255),f,b
  1121   0008D6  2362               	addwfc	(_t+2)& (0+255),f,b
  1122   0008D8  2363               	addwfc	(_t+3)& (0+255),f,b
  1123                           
  1124                           ;stateMachine.c: 29:     } else {
  1125   0008DA  EF78  F004         	goto	l4722
  1126   0008DE                     l4720:
  1127                           
  1128                           ;stateMachine.c: 30:         t = 0;
  1129   0008DE  0E00               	movlw	0
  1130   0008E0  0100               	movlb	0	; () banked
  1131   0008E2  6F60               	movwf	_t& (0+255),b
  1132   0008E4  0E00               	movlw	0
  1133   0008E6  6F61               	movwf	(_t+1)& (0+255),b
  1134   0008E8  0E00               	movlw	0
  1135   0008EA  6F62               	movwf	(_t+2)& (0+255),b
  1136   0008EC  0E00               	movlw	0
  1137   0008EE  6F63               	movwf	(_t+3)& (0+255),b
  1138   0008F0                     l4722:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;stateMachine.c: 32:     if (t == 3000) {
  1142   0008F0  0EB8               	movlw	184
  1143   0008F2  1960               	xorwf	_t& (0+255),w,b
  1144   0008F4  E109               	bnz	u4311
  1145   0008F6  0E0B               	movlw	11
  1146   0008F8  1961               	xorwf	(_t+1)& (0+255),w,b
  1147   0008FA  1162               	iorwf	(_t+2)& (0+255),w,b
  1148   0008FC  1163               	iorwf	(_t+3)& (0+255),w,b
  1149   0008FE  A4D8               	btfss	status,2,c
  1150   000900  EF84  F004         	goto	u4311
  1151   000904  EF86  F004         	goto	u4310
  1152   000908                     u4311:
  1153   000908  EF35  F007         	goto	l4916
  1154   00090C                     u4310:
  1155   00090C                     
  1156                           ; BSR set to: 0
  1157                           ;stateMachine.c: 33:         setState(STATE_MAIN);
  1158   00090C  0E08               	movlw	8
  1159   00090E  EC21  F01C         	call	_setState
  1160   000912  EF35  F007         	goto	l4916
  1161   000916                     l4726:
  1162                           
  1163                           ;stateMachine.c: 39:             if (evento == EV_B_0) {
  1164   000916  504F               	movf	smLoop@evento^0,w,c
  1165   000918  A4D8               	btfss	status,2,c
  1166   00091A  EF91  F004         	goto	u4321
  1167   00091E  EF93  F004         	goto	u4320
  1168   000922                     u4321:
  1169   000922  EFA3  F004         	goto	l4730
  1170   000926                     u4320:
  1171   000926                     
  1172                           ;stateMachine.c: 40:                 setAlarmLevel(getAlarmLevel(0) - 1, 0);
  1173   000926  0E00               	movlw	0
  1174   000928  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1175   00092A  0E00               	movlw	0
  1176   00092C  6E01               	movwf	getAlarmLevel@lh^0,c
  1177   00092E  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  1178   000932  0EFF               	movlw	255
  1179   000934  2401               	addwf	?_getAlarmLevel^0,w,c
  1180   000936  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1181   000938  0EFF               	movlw	255
  1182   00093A  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1183   00093C  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1184   00093E  0E00               	movlw	0
  1185   000940  6E1A               	movwf	setAlarmLevel@lh^0,c
  1186   000942  EC50  F019         	call	_setAlarmLevel	;wreg free
  1187   000946                     l4730:
  1188                           
  1189                           ;stateMachine.c: 43:             if (evento == EV_B_1) {
  1190   000946  044F               	decf	smLoop@evento^0,w,c
  1191   000948  A4D8               	btfss	status,2,c
  1192   00094A  EFA9  F004         	goto	u4331
  1193   00094E  EFAB  F004         	goto	u4330
  1194   000952                     u4331:
  1195   000952  EFBB  F004         	goto	l4734
  1196   000956                     u4330:
  1197   000956                     
  1198                           ;stateMachine.c: 44:                 setAlarmLevel(getAlarmLevel(0) + 1, 0);
  1199   000956  0E00               	movlw	0
  1200   000958  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1201   00095A  0E00               	movlw	0
  1202   00095C  6E01               	movwf	getAlarmLevel@lh^0,c
  1203   00095E  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  1204   000962  0E01               	movlw	1
  1205   000964  2401               	addwf	?_getAlarmLevel^0,w,c
  1206   000966  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1207   000968  0E00               	movlw	0
  1208   00096A  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1209   00096C  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1210   00096E  0E00               	movlw	0
  1211   000970  6E1A               	movwf	setAlarmLevel@lh^0,c
  1212   000972  EC50  F019         	call	_setAlarmLevel	;wreg free
  1213   000976                     l4734:
  1214                           
  1215                           ;stateMachine.c: 47:             if (evento == EV_B_2) {
  1216   000976  0E02               	movlw	2
  1217   000978  184F               	xorwf	smLoop@evento^0,w,c
  1218   00097A  A4D8               	btfss	status,2,c
  1219   00097C  EFC2  F004         	goto	u4341
  1220   000980  EFC4  F004         	goto	u4340
  1221   000984                     u4341:
  1222   000984  EFC7  F004         	goto	l4738
  1223   000988                     u4340:
  1224   000988                     
  1225                           ;stateMachine.c: 48:                 setState(STATE_TEMPOM);
  1226   000988  0E03               	movlw	3
  1227   00098A  EC21  F01C         	call	_setState
  1228   00098E                     l4738:
  1229                           
  1230                           ;stateMachine.c: 51:             if (evento == EV_B_3) {
  1231   00098E  0E03               	movlw	3
  1232   000990  184F               	xorwf	smLoop@evento^0,w,c
  1233   000992  A4D8               	btfss	status,2,c
  1234   000994  EFCE  F004         	goto	u4351
  1235   000998  EFD0  F004         	goto	u4350
  1236   00099C                     u4351:
  1237   00099C  EFD3  F004         	goto	l4742
  1238   0009A0                     u4350:
  1239   0009A0                     
  1240                           ;stateMachine.c: 52:                 setState(STATE_ALARMEH);
  1241   0009A0  0E01               	movlw	1
  1242   0009A2  EC21  F01C         	call	_setState
  1243   0009A6                     l4742:
  1244                           
  1245                           ;stateMachine.c: 55:             if (evento == EV_B_4) {
  1246   0009A6  0E04               	movlw	4
  1247   0009A8  184F               	xorwf	smLoop@evento^0,w,c
  1248   0009AA  A4D8               	btfss	status,2,c
  1249   0009AC  EFDA  F004         	goto	u4361
  1250   0009B0  EFDC  F004         	goto	u4360
  1251   0009B4                     u4361:
  1252   0009B4  EF5D  F007         	goto	l4918
  1253   0009B8                     u4360:
  1254   0009B8                     
  1255                           ;stateMachine.c: 56:                 setState(STATE_MAIN);
  1256   0009B8  0E08               	movlw	8
  1257   0009BA  EC21  F01C         	call	_setState
  1258   0009BE                     
  1259                           ;stateMachine.c: 57:                 estado_ant = STATE_ALARMEL;
  1260   0009BE  0E00               	movlw	0
  1261   0009C0  0100               	movlb	0	; () banked
  1262   0009C2  6FC0               	movwf	_estado_ant& (0+255),b
  1263   0009C4  EF5D  F007         	goto	l4918
  1264   0009C8                     l4748:
  1265                           
  1266                           ;stateMachine.c: 62:             if (evento == EV_B_0) {
  1267   0009C8  504F               	movf	smLoop@evento^0,w,c
  1268   0009CA  A4D8               	btfss	status,2,c
  1269   0009CC  EFEA  F004         	goto	u4371
  1270   0009D0  EFEC  F004         	goto	u4370
  1271   0009D4                     u4371:
  1272   0009D4  EFFC  F004         	goto	l4752
  1273   0009D8                     u4370:
  1274   0009D8                     
  1275                           ;stateMachine.c: 63:                 setAlarmLevel(getAlarmLevel(1) - 1, 1);
  1276   0009D8  0E00               	movlw	0
  1277   0009DA  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1278   0009DC  0E01               	movlw	1
  1279   0009DE  6E01               	movwf	getAlarmLevel@lh^0,c
  1280   0009E0  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  1281   0009E4  0EFF               	movlw	255
  1282   0009E6  2401               	addwf	?_getAlarmLevel^0,w,c
  1283   0009E8  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1284   0009EA  0EFF               	movlw	255
  1285   0009EC  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1286   0009EE  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1287   0009F0  0E01               	movlw	1
  1288   0009F2  6E1A               	movwf	setAlarmLevel@lh^0,c
  1289   0009F4  EC50  F019         	call	_setAlarmLevel	;wreg free
  1290   0009F8                     l4752:
  1291                           
  1292                           ;stateMachine.c: 66:             if (evento == EV_B_1) {
  1293   0009F8  044F               	decf	smLoop@evento^0,w,c
  1294   0009FA  A4D8               	btfss	status,2,c
  1295   0009FC  EF02  F005         	goto	u4381
  1296   000A00  EF04  F005         	goto	u4380
  1297   000A04                     u4381:
  1298   000A04  EF14  F005         	goto	l4756
  1299   000A08                     u4380:
  1300   000A08                     
  1301                           ;stateMachine.c: 67:                 setAlarmLevel(getAlarmLevel(1) + 1, 1);
  1302   000A08  0E00               	movlw	0
  1303   000A0A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1304   000A0C  0E01               	movlw	1
  1305   000A0E  6E01               	movwf	getAlarmLevel@lh^0,c
  1306   000A10  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  1307   000A14  0E01               	movlw	1
  1308   000A16  2401               	addwf	?_getAlarmLevel^0,w,c
  1309   000A18  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1310   000A1A  0E00               	movlw	0
  1311   000A1C  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1312   000A1E  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1313   000A20  0E01               	movlw	1
  1314   000A22  6E1A               	movwf	setAlarmLevel@lh^0,c
  1315   000A24  EC50  F019         	call	_setAlarmLevel	;wreg free
  1316   000A28                     l4756:
  1317                           
  1318                           ;stateMachine.c: 70:             if (evento == EV_B_2) {
  1319   000A28  0E02               	movlw	2
  1320   000A2A  184F               	xorwf	smLoop@evento^0,w,c
  1321   000A2C  A4D8               	btfss	status,2,c
  1322   000A2E  EF1B  F005         	goto	u4391
  1323   000A32  EF1D  F005         	goto	u4390
  1324   000A36                     u4391:
  1325   000A36  EF20  F005         	goto	l4760
  1326   000A3A                     u4390:
  1327   000A3A                     
  1328                           ;stateMachine.c: 71:                 setState(STATE_ALARMEL);
  1329   000A3A  0E00               	movlw	0
  1330   000A3C  EC21  F01C         	call	_setState
  1331   000A40                     l4760:
  1332                           
  1333                           ;stateMachine.c: 74:             if (evento == EV_B_3) {
  1334   000A40  0E03               	movlw	3
  1335   000A42  184F               	xorwf	smLoop@evento^0,w,c
  1336   000A44  A4D8               	btfss	status,2,c
  1337   000A46  EF27  F005         	goto	u4401
  1338   000A4A  EF29  F005         	goto	u4400
  1339   000A4E                     u4401:
  1340   000A4E  EF2C  F005         	goto	l4764
  1341   000A52                     u4400:
  1342   000A52                     
  1343                           ;stateMachine.c: 75:                 setState(STATE_IDIOMA);
  1344   000A52  0E07               	movlw	7
  1345   000A54  EC21  F01C         	call	_setState
  1346   000A58                     l4764:
  1347                           
  1348                           ;stateMachine.c: 78:             if (evento == EV_B_4) {
  1349   000A58  0E04               	movlw	4
  1350   000A5A  184F               	xorwf	smLoop@evento^0,w,c
  1351   000A5C  A4D8               	btfss	status,2,c
  1352   000A5E  EF33  F005         	goto	u4411
  1353   000A62  EF35  F005         	goto	u4410
  1354   000A66                     u4411:
  1355   000A66  EF5D  F007         	goto	l4918
  1356   000A6A                     u4410:
  1357   000A6A                     
  1358                           ;stateMachine.c: 79:                 setState(STATE_MAIN);
  1359   000A6A  0E08               	movlw	8
  1360   000A6C  EC21  F01C         	call	_setState
  1361   000A70                     
  1362                           ;stateMachine.c: 80:                 estado_ant = STATE_ALARMEH;
  1363   000A70  0E01               	movlw	1
  1364   000A72  0100               	movlb	0	; () banked
  1365   000A74  6FC0               	movwf	_estado_ant& (0+255),b
  1366   000A76  EF5D  F007         	goto	l4918
  1367   000A7A                     l4770:
  1368                           
  1369                           ;stateMachine.c: 88:             if (evento == EV_B_2) {
  1370   000A7A  0E02               	movlw	2
  1371   000A7C  184F               	xorwf	smLoop@evento^0,w,c
  1372   000A7E  A4D8               	btfss	status,2,c
  1373   000A80  EF44  F005         	goto	u4421
  1374   000A84  EF46  F005         	goto	u4420
  1375   000A88                     u4421:
  1376   000A88  EF49  F005         	goto	l4774
  1377   000A8C                     u4420:
  1378   000A8C                     
  1379                           ;stateMachine.c: 89:                 setState(STATE_ALARMEH);
  1380   000A8C  0E01               	movlw	1
  1381   000A8E  EC21  F01C         	call	_setState
  1382   000A92                     l4774:
  1383                           
  1384                           ;stateMachine.c: 92:             if (evento == EV_B_3) {
  1385   000A92  0E03               	movlw	3
  1386   000A94  184F               	xorwf	smLoop@evento^0,w,c
  1387   000A96  A4D8               	btfss	status,2,c
  1388   000A98  EF50  F005         	goto	u4431
  1389   000A9C  EF52  F005         	goto	u4430
  1390   000AA0                     u4431:
  1391   000AA0  EF55  F005         	goto	l4778
  1392   000AA4                     u4430:
  1393   000AA4                     
  1394                           ;stateMachine.c: 93:                 setState(STATE_TEMPO);
  1395   000AA4  0E02               	movlw	2
  1396   000AA6  EC21  F01C         	call	_setState
  1397   000AAA                     l4778:
  1398                           
  1399                           ;stateMachine.c: 96:             if (evento == EV_B_4) {
  1400   000AAA  0E04               	movlw	4
  1401   000AAC  184F               	xorwf	smLoop@evento^0,w,c
  1402   000AAE  A4D8               	btfss	status,2,c
  1403   000AB0  EF5C  F005         	goto	u4441
  1404   000AB4  EF5E  F005         	goto	u4440
  1405   000AB8                     u4441:
  1406   000AB8  EF64  F005         	goto	l4784
  1407   000ABC                     u4440:
  1408   000ABC                     
  1409                           ;stateMachine.c: 97:                 setState(STATE_MAIN);
  1410   000ABC  0E08               	movlw	8
  1411   000ABE  EC21  F01C         	call	_setState
  1412   000AC2                     
  1413                           ;stateMachine.c: 98:                 estado_ant = STATE_IDIOMA;
  1414   000AC2  0E07               	movlw	7
  1415   000AC4  0100               	movlb	0	; () banked
  1416   000AC6  6FC0               	movwf	_estado_ant& (0+255),b
  1417   000AC8                     l4784:
  1418                           
  1419                           ;stateMachine.c: 101:             if (evento == EV_B_0) {
  1420   000AC8  504F               	movf	smLoop@evento^0,w,c
  1421   000ACA  A4D8               	btfss	status,2,c
  1422   000ACC  EF6A  F005         	goto	u4451
  1423   000AD0  EF6C  F005         	goto	u4450
  1424   000AD4                     u4451:
  1425   000AD4  EF72  F005         	goto	l4788
  1426   000AD8                     u4450:
  1427   000AD8                     
  1428                           ;stateMachine.c: 103:                 setLanguage(getLanguage() + 1);
  1429   000AD8  EC46  F01C         	call	_getLanguage	;wreg free
  1430   000ADC  6E3B               	movwf	??_smLoop^0,c
  1431   000ADE  283B               	incf	??_smLoop^0,w,c
  1432   000AE0  ECEA  F01B         	call	_setLanguage
  1433   000AE4                     l4788:
  1434                           
  1435                           ;stateMachine.c: 107:             if (evento == EV_B_1) {
  1436   000AE4  044F               	decf	smLoop@evento^0,w,c
  1437   000AE6  A4D8               	btfss	status,2,c
  1438   000AE8  EF78  F005         	goto	u4461
  1439   000AEC  EF7A  F005         	goto	u4460
  1440   000AF0                     u4461:
  1441   000AF0  EF5D  F007         	goto	l4918
  1442   000AF4                     u4460:
  1443   000AF4                     
  1444                           ;stateMachine.c: 108:                 setLanguage(getLanguage() - 1);
  1445   000AF4  EC46  F01C         	call	_getLanguage	;wreg free
  1446   000AF8  6E3B               	movwf	??_smLoop^0,c
  1447   000AFA  043B               	decf	??_smLoop^0,w,c
  1448   000AFC  ECEA  F01B         	call	_setLanguage
  1449   000B00  EF5D  F007         	goto	l4918
  1450   000B04                     l4792:
  1451                           
  1452                           ;stateMachine.c: 116:             if (evento == EV_B_0) {
  1453   000B04  504F               	movf	smLoop@evento^0,w,c
  1454   000B06  A4D8               	btfss	status,2,c
  1455   000B08  EF88  F005         	goto	u4471
  1456   000B0C  EF8A  F005         	goto	u4470
  1457   000B10                     u4471:
  1458   000B10  EF97  F005         	goto	l4796
  1459   000B14                     u4470:
  1460   000B14                     
  1461                           ;stateMachine.c: 118:                 setTime(getTime(HOU) - 1, HOU);
  1462   000B14  0E02               	movlw	2
  1463   000B16  ECEE  F013         	call	_getTime
  1464   000B1A  0EFF               	movlw	255
  1465   000B1C  2417               	addwf	?_getTime^0,w,c
  1466   000B1E  6E1A               	movwf	setTime@newTime^0,c
  1467   000B20  0EFF               	movlw	255
  1468   000B22  2018               	addwfc	(?_getTime+1)^0,w,c
  1469   000B24  6E1B               	movwf	(setTime@newTime+1)^0,c
  1470   000B26  0E02               	movlw	2
  1471   000B28  6E1C               	movwf	setTime@index^0,c
  1472   000B2A  EC77  F015         	call	_setTime	;wreg free
  1473   000B2E                     l4796:
  1474                           
  1475                           ;stateMachine.c: 120:             if (evento == EV_B_1) {
  1476   000B2E  044F               	decf	smLoop@evento^0,w,c
  1477   000B30  A4D8               	btfss	status,2,c
  1478   000B32  EF9D  F005         	goto	u4481
  1479   000B36  EF9F  F005         	goto	u4480
  1480   000B3A                     u4481:
  1481   000B3A  EFAC  F005         	goto	l4800
  1482   000B3E                     u4480:
  1483   000B3E                     
  1484                           ;stateMachine.c: 121:                 setTime(getTime(HOU) + 1, HOU);
  1485   000B3E  0E02               	movlw	2
  1486   000B40  ECEE  F013         	call	_getTime
  1487   000B44  0E01               	movlw	1
  1488   000B46  2417               	addwf	?_getTime^0,w,c
  1489   000B48  6E1A               	movwf	setTime@newTime^0,c
  1490   000B4A  0E00               	movlw	0
  1491   000B4C  2018               	addwfc	(?_getTime+1)^0,w,c
  1492   000B4E  6E1B               	movwf	(setTime@newTime+1)^0,c
  1493   000B50  0E02               	movlw	2
  1494   000B52  6E1C               	movwf	setTime@index^0,c
  1495   000B54  EC77  F015         	call	_setTime	;wreg free
  1496   000B58                     l4800:
  1497                           
  1498                           ;stateMachine.c: 123:             if (evento == EV_B_2) {
  1499   000B58  0E02               	movlw	2
  1500   000B5A  184F               	xorwf	smLoop@evento^0,w,c
  1501   000B5C  A4D8               	btfss	status,2,c
  1502   000B5E  EFB3  F005         	goto	u4491
  1503   000B62  EFB5  F005         	goto	u4490
  1504   000B66                     u4491:
  1505   000B66  EFB8  F005         	goto	l4804
  1506   000B6A                     u4490:
  1507   000B6A                     
  1508                           ;stateMachine.c: 124:                 setState(STATE_IDIOMA);
  1509   000B6A  0E07               	movlw	7
  1510   000B6C  EC21  F01C         	call	_setState
  1511   000B70                     l4804:
  1512                           
  1513                           ;stateMachine.c: 127:             if (evento == EV_B_3) {
  1514   000B70  0E03               	movlw	3
  1515   000B72  184F               	xorwf	smLoop@evento^0,w,c
  1516   000B74  A4D8               	btfss	status,2,c
  1517   000B76  EFBF  F005         	goto	u4501
  1518   000B7A  EFC1  F005         	goto	u4500
  1519   000B7E                     u4501:
  1520   000B7E  EFC4  F005         	goto	l4808
  1521   000B82                     u4500:
  1522   000B82                     
  1523                           ;stateMachine.c: 128:                 setState(STATE_TEMPOM);
  1524   000B82  0E03               	movlw	3
  1525   000B84  EC21  F01C         	call	_setState
  1526   000B88                     l4808:
  1527                           
  1528                           ;stateMachine.c: 131:             if (evento == EV_B_4) {
  1529   000B88  0E04               	movlw	4
  1530   000B8A  184F               	xorwf	smLoop@evento^0,w,c
  1531   000B8C  A4D8               	btfss	status,2,c
  1532   000B8E  EFCB  F005         	goto	u4511
  1533   000B92  EFCD  F005         	goto	u4510
  1534   000B96                     u4511:
  1535   000B96  EF5D  F007         	goto	l4918
  1536   000B9A                     u4510:
  1537   000B9A                     
  1538                           ;stateMachine.c: 132:                 setState(STATE_MAIN);
  1539   000B9A  0E08               	movlw	8
  1540   000B9C  EC21  F01C         	call	_setState
  1541   000BA0                     l4812:
  1542                           
  1543                           ;stateMachine.c: 133:                 estado_ant = STATE_TEMPO;
  1544   000BA0  0E02               	movlw	2
  1545   000BA2  0100               	movlb	0	; () banked
  1546   000BA4  6FC0               	movwf	_estado_ant& (0+255),b
  1547   000BA6  EF5D  F007         	goto	l4918
  1548   000BAA                     l4814:
  1549                           
  1550                           ;stateMachine.c: 141:             if (evento == EV_B_0) {
  1551   000BAA  504F               	movf	smLoop@evento^0,w,c
  1552   000BAC  A4D8               	btfss	status,2,c
  1553   000BAE  EFDB  F005         	goto	u4521
  1554   000BB2  EFDD  F005         	goto	u4520
  1555   000BB6                     u4521:
  1556   000BB6  EFEA  F005         	goto	l4818
  1557   000BBA                     u4520:
  1558   000BBA                     
  1559                           ;stateMachine.c: 143:                 setTime(getTime(MIN) - 1, MIN);
  1560   000BBA  0E01               	movlw	1
  1561   000BBC  ECEE  F013         	call	_getTime
  1562   000BC0  0EFF               	movlw	255
  1563   000BC2  2417               	addwf	?_getTime^0,w,c
  1564   000BC4  6E1A               	movwf	setTime@newTime^0,c
  1565   000BC6  0EFF               	movlw	255
  1566   000BC8  2018               	addwfc	(?_getTime+1)^0,w,c
  1567   000BCA  6E1B               	movwf	(setTime@newTime+1)^0,c
  1568   000BCC  0E01               	movlw	1
  1569   000BCE  6E1C               	movwf	setTime@index^0,c
  1570   000BD0  EC77  F015         	call	_setTime	;wreg free
  1571   000BD4                     l4818:
  1572                           
  1573                           ;stateMachine.c: 145:             if (evento == EV_B_1) {
  1574   000BD4  044F               	decf	smLoop@evento^0,w,c
  1575   000BD6  A4D8               	btfss	status,2,c
  1576   000BD8  EFF0  F005         	goto	u4531
  1577   000BDC  EFF2  F005         	goto	u4530
  1578   000BE0                     u4531:
  1579   000BE0  EFFF  F005         	goto	l4822
  1580   000BE4                     u4530:
  1581   000BE4                     
  1582                           ;stateMachine.c: 146:                 setTime(getTime(MIN) + 1, MIN);
  1583   000BE4  0E01               	movlw	1
  1584   000BE6  ECEE  F013         	call	_getTime
  1585   000BEA  0E01               	movlw	1
  1586   000BEC  2417               	addwf	?_getTime^0,w,c
  1587   000BEE  6E1A               	movwf	setTime@newTime^0,c
  1588   000BF0  0E00               	movlw	0
  1589   000BF2  2018               	addwfc	(?_getTime+1)^0,w,c
  1590   000BF4  6E1B               	movwf	(setTime@newTime+1)^0,c
  1591   000BF6  0E01               	movlw	1
  1592   000BF8  6E1C               	movwf	setTime@index^0,c
  1593   000BFA  EC77  F015         	call	_setTime	;wreg free
  1594   000BFE                     l4822:
  1595                           
  1596                           ;stateMachine.c: 148:             if (evento == EV_B_2) {
  1597   000BFE  0E02               	movlw	2
  1598   000C00  184F               	xorwf	smLoop@evento^0,w,c
  1599   000C02  A4D8               	btfss	status,2,c
  1600   000C04  EF06  F006         	goto	u4541
  1601   000C08  EF08  F006         	goto	u4540
  1602   000C0C                     u4541:
  1603   000C0C  EF0B  F006         	goto	l4826
  1604   000C10                     u4540:
  1605   000C10                     
  1606                           ;stateMachine.c: 149:                 setState(STATE_TEMPO);
  1607   000C10  0E02               	movlw	2
  1608   000C12  EC21  F01C         	call	_setState
  1609   000C16                     l4826:
  1610                           
  1611                           ;stateMachine.c: 152:             if (evento == EV_B_3) {
  1612   000C16  0E03               	movlw	3
  1613   000C18  184F               	xorwf	smLoop@evento^0,w,c
  1614   000C1A  A4D8               	btfss	status,2,c
  1615   000C1C  EF12  F006         	goto	u4551
  1616   000C20  EF14  F006         	goto	u4550
  1617   000C24                     u4551:
  1618   000C24  EF17  F006         	goto	l4830
  1619   000C28                     u4550:
  1620   000C28                     
  1621                           ;stateMachine.c: 153:                 setState(STATE_TEMPOD);
  1622   000C28  0E04               	movlw	4
  1623   000C2A  EC21  F01C         	call	_setState
  1624   000C2E                     l4830:
  1625                           
  1626                           ;stateMachine.c: 156:             if (evento == EV_B_4) {
  1627   000C2E  0E04               	movlw	4
  1628   000C30  184F               	xorwf	smLoop@evento^0,w,c
  1629   000C32  A4D8               	btfss	status,2,c
  1630   000C34  EF1E  F006         	goto	u4561
  1631   000C38  EF20  F006         	goto	u4560
  1632   000C3C                     u4561:
  1633   000C3C  EF5D  F007         	goto	l4918
  1634   000C40                     u4560:
  1635   000C40                     
  1636                           ;stateMachine.c: 157:                 setState(STATE_MAIN);
  1637   000C40  0E08               	movlw	8
  1638   000C42  EC21  F01C         	call	_setState
  1639   000C46  EFD0  F005         	goto	l4812
  1640   000C4A                     l4836:
  1641                           
  1642                           ;stateMachine.c: 166:             if (evento == EV_B_0) {
  1643   000C4A  504F               	movf	smLoop@evento^0,w,c
  1644   000C4C  A4D8               	btfss	status,2,c
  1645   000C4E  EF2B  F006         	goto	u4571
  1646   000C52  EF2D  F006         	goto	u4570
  1647   000C56                     u4571:
  1648   000C56  EF40  F006         	goto	l4848
  1649   000C5A                     u4570:
  1650   000C5A                     
  1651                           ;stateMachine.c: 168:                 char* date = getDate();
  1652   000C5A  EC34  F01C         	call	_getDate	;wreg free
  1653   000C5E  C001  F04A         	movff	?_getDate,smLoop@date
  1654   000C62  C002  F04B         	movff	?_getDate+1,smLoop@date+1
  1655   000C66                     
  1656                           ;stateMachine.c: 169:                 date[1]--;
  1657   000C66  EE20 F001          	lfsr	2,1
  1658   000C6A  504A               	movf	smLoop@date^0,w,c
  1659   000C6C  26D9               	addwf	fsr2l,f,c
  1660   000C6E  504B               	movf	(smLoop@date+1)^0,w,c
  1661   000C70  22DA               	addwfc	fsr2h,f,c
  1662   000C72  06DF               	decf	indf2,f,c
  1663   000C74                     
  1664                           ;stateMachine.c: 175:                 setDate(date);
  1665   000C74  C04A  F01D         	movff	smLoop@date,setDate@date
  1666   000C78  C04B  F01E         	movff	smLoop@date+1,setDate@date+1
  1667   000C7C  EC26  F017         	call	_setDate	;wreg free
  1668   000C80                     l4848:
  1669                           
  1670                           ;stateMachine.c: 177:             if (evento == EV_B_1) {
  1671   000C80  044F               	decf	smLoop@evento^0,w,c
  1672   000C82  A4D8               	btfss	status,2,c
  1673   000C84  EF46  F006         	goto	u4581
  1674   000C88  EF48  F006         	goto	u4580
  1675   000C8C                     u4581:
  1676   000C8C  EF75  F006         	goto	l4862
  1677   000C90                     u4580:
  1678   000C90                     
  1679                           ;stateMachine.c: 178:                 char* date = getDate();
  1680   000C90  EC34  F01C         	call	_getDate	;wreg free
  1681   000C94  C001  F04C         	movff	?_getDate,smLoop@date_552
  1682   000C98  C002  F04D         	movff	?_getDate+1,smLoop@date_552+1
  1683   000C9C                     
  1684                           ;stateMachine.c: 179:                 date[1]++;
  1685   000C9C  EE20 F001          	lfsr	2,1
  1686   000CA0  504C               	movf	smLoop@date_552^0,w,c
  1687   000CA2  26D9               	addwf	fsr2l,f,c
  1688   000CA4  504D               	movf	(smLoop@date_552+1)^0,w,c
  1689   000CA6  22DA               	addwfc	fsr2h,f,c
  1690   000CA8  2ADF               	incf	indf2,f,c
  1691   000CAA                     
  1692                           ;stateMachine.c: 180:                 if(date[1] > 9)
  1693   000CAA  EE20 F001          	lfsr	2,1
  1694   000CAE  504C               	movf	smLoop@date_552^0,w,c
  1695   000CB0  26D9               	addwf	fsr2l,f,c
  1696   000CB2  504D               	movf	(smLoop@date_552+1)^0,w,c
  1697   000CB4  22DA               	addwfc	fsr2h,f,c
  1698   000CB6  0E09               	movlw	9
  1699   000CB8  64DF               	cpfsgt	indf2,c
  1700   000CBA  EF61  F006         	goto	u4591
  1701   000CBE  EF63  F006         	goto	u4590
  1702   000CC2                     u4591:
  1703   000CC2  EF6F  F006         	goto	l4860
  1704   000CC6                     u4590:
  1705   000CC6                     
  1706                           ;stateMachine.c: 181:                 {;stateMachine.c: 182:                     date[1]
      +                           = 0;
  1707   000CC6  EE20 F001          	lfsr	2,1
  1708   000CCA  504C               	movf	smLoop@date_552^0,w,c
  1709   000CCC  26D9               	addwf	fsr2l,f,c
  1710   000CCE  504D               	movf	(smLoop@date_552+1)^0,w,c
  1711   000CD0  22DA               	addwfc	fsr2h,f,c
  1712   000CD2  6ADF               	clrf	indf2,c
  1713   000CD4                     
  1714                           ;stateMachine.c: 183:                     date[0]++;
  1715   000CD4  C04C  FFD9         	movff	smLoop@date_552,fsr2l
  1716   000CD8  C04D  FFDA         	movff	smLoop@date_552+1,fsr2h
  1717   000CDC  2ADF               	incf	indf2,f,c
  1718   000CDE                     l4860:
  1719                           
  1720                           ;stateMachine.c: 185:                 setDate(date);
  1721   000CDE  C04C  F01D         	movff	smLoop@date_552,setDate@date
  1722   000CE2  C04D  F01E         	movff	smLoop@date_552+1,setDate@date+1
  1723   000CE6  EC26  F017         	call	_setDate	;wreg free
  1724   000CEA                     l4862:
  1725                           
  1726                           ;stateMachine.c: 187:             if (evento == EV_B_2) {
  1727   000CEA  0E02               	movlw	2
  1728   000CEC  184F               	xorwf	smLoop@evento^0,w,c
  1729   000CEE  A4D8               	btfss	status,2,c
  1730   000CF0  EF7C  F006         	goto	u4601
  1731   000CF4  EF7E  F006         	goto	u4600
  1732   000CF8                     u4601:
  1733   000CF8  EF81  F006         	goto	l4866
  1734   000CFC                     u4600:
  1735   000CFC                     
  1736                           ;stateMachine.c: 188:                 setState(STATE_TEMPOM);
  1737   000CFC  0E03               	movlw	3
  1738   000CFE  EC21  F01C         	call	_setState
  1739   000D02                     l4866:
  1740                           
  1741                           ;stateMachine.c: 192:             if (evento == EV_B_3) {
  1742   000D02  0E03               	movlw	3
  1743   000D04  184F               	xorwf	smLoop@evento^0,w,c
  1744   000D06  A4D8               	btfss	status,2,c
  1745   000D08  EF88  F006         	goto	u4611
  1746   000D0C  EF8A  F006         	goto	u4610
  1747   000D10                     u4611:
  1748   000D10  EF8D  F006         	goto	l4870
  1749   000D14                     u4610:
  1750   000D14                     
  1751                           ;stateMachine.c: 193:                 setState(STATE_TEMPOMO);
  1752   000D14  0E05               	movlw	5
  1753   000D16  EC21  F01C         	call	_setState
  1754   000D1A                     l4870:
  1755                           
  1756                           ;stateMachine.c: 196:             if (evento == EV_B_4) {
  1757   000D1A  0E04               	movlw	4
  1758   000D1C  184F               	xorwf	smLoop@evento^0,w,c
  1759   000D1E  A4D8               	btfss	status,2,c
  1760   000D20  EF94  F006         	goto	u4621
  1761   000D24  EF96  F006         	goto	u4620
  1762   000D28                     u4621:
  1763   000D28  EF5D  F007         	goto	l4918
  1764   000D2C                     u4620:
  1765   000D2C                     
  1766                           ;stateMachine.c: 197:                 setState(STATE_MAIN);
  1767   000D2C  0E08               	movlw	8
  1768   000D2E  EC21  F01C         	call	_setState
  1769   000D32  EFD0  F005         	goto	l4812
  1770   000D36                     l4876:
  1771                           
  1772                           ;stateMachine.c: 205:             if (evento == EV_B_0) {
  1773   000D36  504F               	movf	smLoop@evento^0,w,c
  1774   000D38  A4D8               	btfss	status,2,c
  1775   000D3A  EFA1  F006         	goto	u4631
  1776   000D3E  EFA3  F006         	goto	u4630
  1777   000D42                     u4631:
  1778   000D42  EFB0  F006         	goto	l4880
  1779   000D46                     u4630:
  1780   000D46                     
  1781                           ;stateMachine.c: 207:                 setTime(getTime(MON) - 1, MON);
  1782   000D46  0E04               	movlw	4
  1783   000D48  ECEE  F013         	call	_getTime
  1784   000D4C  0EFF               	movlw	255
  1785   000D4E  2417               	addwf	?_getTime^0,w,c
  1786   000D50  6E1A               	movwf	setTime@newTime^0,c
  1787   000D52  0EFF               	movlw	255
  1788   000D54  2018               	addwfc	(?_getTime+1)^0,w,c
  1789   000D56  6E1B               	movwf	(setTime@newTime+1)^0,c
  1790   000D58  0E04               	movlw	4
  1791   000D5A  6E1C               	movwf	setTime@index^0,c
  1792   000D5C  EC77  F015         	call	_setTime	;wreg free
  1793   000D60                     l4880:
  1794                           
  1795                           ;stateMachine.c: 209:             if (evento == EV_B_1) {
  1796   000D60  044F               	decf	smLoop@evento^0,w,c
  1797   000D62  A4D8               	btfss	status,2,c
  1798   000D64  EFB6  F006         	goto	u4641
  1799   000D68  EFB8  F006         	goto	u4640
  1800   000D6C                     u4641:
  1801   000D6C  EFC5  F006         	goto	l4884
  1802   000D70                     u4640:
  1803   000D70                     
  1804                           ;stateMachine.c: 210:                 setTime(getTime(MON) + 1, MON);
  1805   000D70  0E04               	movlw	4
  1806   000D72  ECEE  F013         	call	_getTime
  1807   000D76  0E01               	movlw	1
  1808   000D78  2417               	addwf	?_getTime^0,w,c
  1809   000D7A  6E1A               	movwf	setTime@newTime^0,c
  1810   000D7C  0E00               	movlw	0
  1811   000D7E  2018               	addwfc	(?_getTime+1)^0,w,c
  1812   000D80  6E1B               	movwf	(setTime@newTime+1)^0,c
  1813   000D82  0E04               	movlw	4
  1814   000D84  6E1C               	movwf	setTime@index^0,c
  1815   000D86  EC77  F015         	call	_setTime	;wreg free
  1816   000D8A                     l4884:
  1817                           
  1818                           ;stateMachine.c: 212:             if (evento == EV_B_2) {
  1819   000D8A  0E02               	movlw	2
  1820   000D8C  184F               	xorwf	smLoop@evento^0,w,c
  1821   000D8E  A4D8               	btfss	status,2,c
  1822   000D90  EFCC  F006         	goto	u4651
  1823   000D94  EFCE  F006         	goto	u4650
  1824   000D98                     u4651:
  1825   000D98  EFD1  F006         	goto	l4888
  1826   000D9C                     u4650:
  1827   000D9C                     
  1828                           ;stateMachine.c: 213:                 setState(STATE_TEMPOD);
  1829   000D9C  0E04               	movlw	4
  1830   000D9E  EC21  F01C         	call	_setState
  1831   000DA2                     l4888:
  1832                           
  1833                           ;stateMachine.c: 216:             if (evento == EV_B_3) {
  1834   000DA2  0E03               	movlw	3
  1835   000DA4  184F               	xorwf	smLoop@evento^0,w,c
  1836   000DA6  A4D8               	btfss	status,2,c
  1837   000DA8  EFD8  F006         	goto	u4661
  1838   000DAC  EFDA  F006         	goto	u4660
  1839   000DB0                     u4661:
  1840   000DB0  EFDD  F006         	goto	l4892
  1841   000DB4                     u4660:
  1842   000DB4                     
  1843                           ;stateMachine.c: 217:                 setState(STATE_ALARMEL);
  1844   000DB4  0E00               	movlw	0
  1845   000DB6  EC21  F01C         	call	_setState
  1846   000DBA                     l4892:
  1847                           
  1848                           ;stateMachine.c: 220:             if (evento == EV_B_4) {
  1849   000DBA  0E04               	movlw	4
  1850   000DBC  184F               	xorwf	smLoop@evento^0,w,c
  1851   000DBE  A4D8               	btfss	status,2,c
  1852   000DC0  EFE4  F006         	goto	u4671
  1853   000DC4  EFE6  F006         	goto	u4670
  1854   000DC8                     u4671:
  1855   000DC8  EF5D  F007         	goto	l4918
  1856   000DCC                     u4670:
  1857   000DCC                     
  1858                           ;stateMachine.c: 221:                 setState(STATE_MAIN);
  1859   000DCC  0E08               	movlw	8
  1860   000DCE  EC21  F01C         	call	_setState
  1861   000DD2  EFD0  F005         	goto	l4812
  1862   000DD6                     l4898:
  1863                           
  1864                           ;stateMachine.c: 252:             if (evento == EV_B_4)
  1865   000DD6  0E04               	movlw	4
  1866   000DD8  184F               	xorwf	smLoop@evento^0,w,c
  1867   000DDA  A4D8               	btfss	status,2,c
  1868   000DDC  EFF2  F006         	goto	u4681
  1869   000DE0  EFF4  F006         	goto	u4680
  1870   000DE4                     u4681:
  1871   000DE4  EFF8  F006         	goto	l4902
  1872   000DE8                     u4680:
  1873   000DE8                     
  1874                           ;stateMachine.c: 253:                 setState(estado_ant);
  1875   000DE8  0100               	movlb	0	; () banked
  1876   000DEA  51C0               	movf	_estado_ant& (0+255),w,b
  1877   000DEC  EC21  F01C         	call	_setState
  1878   000DF0                     l4902:
  1879                           
  1880                           ;stateMachine.c: 255:             if (evento == EV_B_0)
  1881   000DF0  504F               	movf	smLoop@evento^0,w,c
  1882   000DF2  A4D8               	btfss	status,2,c
  1883   000DF4  EFFE  F006         	goto	u4691
  1884   000DF8  EF00  F007         	goto	u4690
  1885   000DFC                     u4691:
  1886   000DFC  EF5D  F007         	goto	l4918
  1887   000E00                     u4690:
  1888   000E00                     
  1889                           ;stateMachine.c: 256:                 setTime(getTime(MIN) + 1, MIN);
  1890   000E00  0E01               	movlw	1
  1891   000E02  ECEE  F013         	call	_getTime
  1892   000E06  0E01               	movlw	1
  1893   000E08  2417               	addwf	?_getTime^0,w,c
  1894   000E0A  6E1A               	movwf	setTime@newTime^0,c
  1895   000E0C  0E00               	movlw	0
  1896   000E0E  2018               	addwfc	(?_getTime+1)^0,w,c
  1897   000E10  6E1B               	movwf	(setTime@newTime+1)^0,c
  1898   000E12  0E01               	movlw	1
  1899   000E14  6E1C               	movwf	setTime@index^0,c
  1900   000E16  EC77  F015         	call	_setTime	;wreg free
  1901   000E1A  EF5D  F007         	goto	l4918
  1902   000E1E                     l4908:
  1903                           
  1904                           ;stateMachine.c: 264:             if(t%300 < 150)
  1905   000E1E  C060  F001         	movff	_t,___llmod@dividend
  1906   000E22  C061  F002         	movff	_t+1,___llmod@dividend+1
  1907   000E26  C062  F003         	movff	_t+2,___llmod@dividend+2
  1908   000E2A  C063  F004         	movff	_t+3,___llmod@dividend+3
  1909   000E2E  0E2C               	movlw	44
  1910   000E30  6E05               	movwf	___llmod@divisor^0,c
  1911   000E32  0E01               	movlw	1
  1912   000E34  6E06               	movwf	(___llmod@divisor+1)^0,c
  1913   000E36  0E00               	movlw	0
  1914   000E38  6E07               	movwf	(___llmod@divisor+2)^0,c
  1915   000E3A  0E00               	movlw	0
  1916   000E3C  6E08               	movwf	(___llmod@divisor+3)^0,c
  1917   000E3E  ECDD  F017         	call	___llmod	;wreg free
  1918   000E42  5004               	movf	(?___llmod+3)^0,w,c
  1919   000E44  1003               	iorwf	(?___llmod+2)^0,w,c
  1920   000E46  1002               	iorwf	(?___llmod+1)^0,w,c
  1921   000E48  E107               	bnz	u4701
  1922   000E4A  0E96               	movlw	150
  1923   000E4C  5C01               	subwf	?___llmod^0,w,c
  1924   000E4E  B0D8               	btfsc	status,0,c
  1925   000E50  EF2C  F007         	goto	u4701
  1926   000E54  EF2E  F007         	goto	u4700
  1927   000E58                     u4701:
  1928   000E58  EF31  F007         	goto	l4912
  1929   000E5C                     u4700:
  1930   000E5C                     
  1931                           ;stateMachine.c: 265:                 LATA = 0xff;
  1932   000E5C  6889               	setf	137,c	;volatile
  1933   000E5E  EF5D  F007         	goto	l4918
  1934   000E62                     l4912:
  1935                           
  1936                           ;stateMachine.c: 267:                 LATA = 0x00;
  1937   000E62  0E00               	movlw	0
  1938   000E64  6E89               	movwf	137,c	;volatile
  1939   000E66  EF5D  F007         	goto	l4918
  1940   000E6A                     l4916:
  1941   000E6A  EC39  F01C         	call	_getState	;wreg free
  1942                           
  1943                           ; Switch size 1, requested type "simple"
  1944                           ; Number of cases is 9, Range of values is 0 to 9
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte           28    15 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949   000E6E  0A00               	xorlw	0	; case 0
  1950   000E70  B4D8               	btfsc	status,2,c
  1951   000E72  EF8B  F004         	goto	l4726
  1952   000E76  0A01               	xorlw	1	; case 1
  1953   000E78  B4D8               	btfsc	status,2,c
  1954   000E7A  EFE4  F004         	goto	l4748
  1955   000E7E  0A03               	xorlw	3	; case 2
  1956   000E80  B4D8               	btfsc	status,2,c
  1957   000E82  EF82  F005         	goto	l4792
  1958   000E86  0A01               	xorlw	1	; case 3
  1959   000E88  B4D8               	btfsc	status,2,c
  1960   000E8A  EFD5  F005         	goto	l4814
  1961   000E8E  0A07               	xorlw	7	; case 4
  1962   000E90  B4D8               	btfsc	status,2,c
  1963   000E92  EF25  F006         	goto	l4836
  1964   000E96  0A01               	xorlw	1	; case 5
  1965   000E98  B4D8               	btfsc	status,2,c
  1966   000E9A  EF9B  F006         	goto	l4876
  1967   000E9E  0A02               	xorlw	2	; case 7
  1968   000EA0  B4D8               	btfsc	status,2,c
  1969   000EA2  EF3D  F005         	goto	l4770
  1970   000EA6  0A0F               	xorlw	15	; case 8
  1971   000EA8  B4D8               	btfsc	status,2,c
  1972   000EAA  EFEB  F006         	goto	l4898
  1973   000EAE  0A01               	xorlw	1	; case 9
  1974   000EB0  B4D8               	btfsc	status,2,c
  1975   000EB2  EF0F  F007         	goto	l4908
  1976   000EB6  EF5D  F007         	goto	l4918
  1977   000EBA                     l4918:
  1978                           
  1979                           ;stateMachine.c: 273:     if (evento == EV_PROT_SERIAL) {
  1980   000EBA  0E05               	movlw	5
  1981   000EBC  184F               	xorwf	smLoop@evento^0,w,c
  1982   000EBE  A4D8               	btfss	status,2,c
  1983   000EC0  EF64  F007         	goto	u4711
  1984   000EC4  EF66  F007         	goto	u4710
  1985   000EC8                     u4711:
  1986   000EC8  EFAB  F008         	goto	l4962
  1987   000ECC                     u4710:
  1988   000ECC                     
  1989                           ;stateMachine.c: 274:         unsigned char* prot;;stateMachine.c: 275:         prot = g
      +                          etProt();
  1990   000ECC  EC44  F01C         	call	_getProt	;wreg free
  1991   000ED0  6E4E               	movwf	smLoop@prot^0,c
  1992                           
  1993                           ;stateMachine.c: 277:         switch (prot[1]) {
  1994   000ED2  EF91  F008         	goto	l4958
  1995   000ED6                     l4922:
  1996                           
  1997                           ;stateMachine.c: 281:                     {;stateMachine.c: 282:                        
      +                           int l = (prot[3] - '0') * 100;
  1998   000ED6  504E               	movf	smLoop@prot^0,w,c
  1999   000ED8  6ED9               	movwf	fsr2l,c
  2000   000EDA  6ADA               	clrf	fsr2h,c
  2001   000EDC  0E03               	movlw	3
  2002   000EDE  26D9               	addwf	fsr2l,f,c
  2003   000EE0  50DF               	movf	indf2,w,c
  2004   000EE2  6E3B               	movwf	??_smLoop^0,c
  2005   000EE4  0ED0               	movlw	208
  2006   000EE6  243B               	addwf	??_smLoop^0,w,c
  2007   000EE8  6E09               	movwf	___wmul@multiplier^0,c
  2008   000EEA  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2009   000EEC  0EFF               	movlw	255
  2010   000EEE  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2011   000EF0  0E00               	movlw	0
  2012   000EF2  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2013   000EF4  0E64               	movlw	100
  2014   000EF6  6E0B               	movwf	___wmul@multiplicand^0,c
  2015   000EF8  EC9C  F01B         	call	___wmul	;wreg free
  2016   000EFC  C009  F040         	movff	?___wmul,smLoop@l
  2017   000F00  C00A  F041         	movff	?___wmul+1,smLoop@l+1
  2018                           
  2019                           ;stateMachine.c: 283:                         l += (prot[4] - '0') * 10;
  2020   000F04  504E               	movf	smLoop@prot^0,w,c
  2021   000F06  6ED9               	movwf	fsr2l,c
  2022   000F08  6ADA               	clrf	fsr2h,c
  2023   000F0A  0E04               	movlw	4
  2024   000F0C  26D9               	addwf	fsr2l,f,c
  2025   000F0E  50DF               	movf	indf2,w,c
  2026   000F10  6E3B               	movwf	??_smLoop^0,c
  2027   000F12  0ED0               	movlw	208
  2028   000F14  243B               	addwf	??_smLoop^0,w,c
  2029   000F16  6E09               	movwf	___wmul@multiplier^0,c
  2030   000F18  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2031   000F1A  0EFF               	movlw	255
  2032   000F1C  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2033   000F1E  0E00               	movlw	0
  2034   000F20  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2035   000F22  0E0A               	movlw	10
  2036   000F24  6E0B               	movwf	___wmul@multiplicand^0,c
  2037   000F26  EC9C  F01B         	call	___wmul	;wreg free
  2038   000F2A  5009               	movf	?___wmul^0,w,c
  2039   000F2C  2640               	addwf	smLoop@l^0,f,c
  2040   000F2E  500A               	movf	(?___wmul+1)^0,w,c
  2041   000F30  2241               	addwfc	(smLoop@l+1)^0,f,c
  2042   000F32                     
  2043                           ;stateMachine.c: 284:                         l += (prot[5] - '0') * 1;
  2044   000F32  504E               	movf	smLoop@prot^0,w,c
  2045   000F34  6ED9               	movwf	fsr2l,c
  2046   000F36  6ADA               	clrf	fsr2h,c
  2047   000F38  0E05               	movlw	5
  2048   000F3A  26D9               	addwf	fsr2l,f,c
  2049   000F3C  50DF               	movf	indf2,w,c
  2050   000F3E  6E3B               	movwf	??_smLoop^0,c
  2051   000F40  0ED0               	movlw	208
  2052   000F42  243B               	addwf	??_smLoop^0,w,c
  2053   000F44  6E3C               	movwf	(??_smLoop+1)^0,c
  2054   000F46  6A3D               	clrf	(??_smLoop+2)^0,c
  2055   000F48  0EFF               	movlw	255
  2056   000F4A  223D               	addwfc	(??_smLoop+2)^0,f,c
  2057   000F4C  503C               	movf	(??_smLoop+1)^0,w,c
  2058   000F4E  2640               	addwf	smLoop@l^0,f,c
  2059   000F50  503D               	movf	(??_smLoop+2)^0,w,c
  2060   000F52  2241               	addwfc	(smLoop@l+1)^0,f,c
  2061   000F54                     
  2062                           ;stateMachine.c: 285:                         setAlarmLevel(l, 0);
  2063   000F54  C040  F018         	movff	smLoop@l,setAlarmLevel@newAlarmLevel
  2064   000F58  C041  F019         	movff	smLoop@l+1,setAlarmLevel@newAlarmLevel+1
  2065   000F5C  0E00               	movlw	0
  2066   000F5E  6E1A               	movwf	setAlarmLevel@lh^0,c
  2067   000F60  EC50  F019         	call	_setAlarmLevel	;wreg free
  2068   000F64                     l4928:
  2069                           
  2070                           ;stateMachine.c: 288:                     {;stateMachine.c: 289:                        
      +                           int h = (prot[3] - '0') * 100;
  2071   000F64  504E               	movf	smLoop@prot^0,w,c
  2072   000F66  6ED9               	movwf	fsr2l,c
  2073   000F68  6ADA               	clrf	fsr2h,c
  2074   000F6A  0E03               	movlw	3
  2075   000F6C  26D9               	addwf	fsr2l,f,c
  2076   000F6E  50DF               	movf	indf2,w,c
  2077   000F70  6E3B               	movwf	??_smLoop^0,c
  2078   000F72  0ED0               	movlw	208
  2079   000F74  243B               	addwf	??_smLoop^0,w,c
  2080   000F76  6E09               	movwf	___wmul@multiplier^0,c
  2081   000F78  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2082   000F7A  0EFF               	movlw	255
  2083   000F7C  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2084   000F7E  0E00               	movlw	0
  2085   000F80  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2086   000F82  0E64               	movlw	100
  2087   000F84  6E0B               	movwf	___wmul@multiplicand^0,c
  2088   000F86  EC9C  F01B         	call	___wmul	;wreg free
  2089   000F8A  C009  F042         	movff	?___wmul,smLoop@h
  2090   000F8E  C00A  F043         	movff	?___wmul+1,smLoop@h+1
  2091   000F92                     
  2092                           ;stateMachine.c: 290:                         h += (prot[4] - '0') * 10;
  2093   000F92  504E               	movf	smLoop@prot^0,w,c
  2094   000F94  6ED9               	movwf	fsr2l,c
  2095   000F96  6ADA               	clrf	fsr2h,c
  2096   000F98  0E04               	movlw	4
  2097   000F9A  26D9               	addwf	fsr2l,f,c
  2098   000F9C  50DF               	movf	indf2,w,c
  2099   000F9E  6E3B               	movwf	??_smLoop^0,c
  2100   000FA0  0ED0               	movlw	208
  2101   000FA2  243B               	addwf	??_smLoop^0,w,c
  2102   000FA4  6E09               	movwf	___wmul@multiplier^0,c
  2103   000FA6  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2104   000FA8  0EFF               	movlw	255
  2105   000FAA  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2106   000FAC  0E00               	movlw	0
  2107   000FAE  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2108   000FB0  0E0A               	movlw	10
  2109   000FB2  6E0B               	movwf	___wmul@multiplicand^0,c
  2110   000FB4  EC9C  F01B         	call	___wmul	;wreg free
  2111   000FB8  5009               	movf	?___wmul^0,w,c
  2112   000FBA  2642               	addwf	smLoop@h^0,f,c
  2113   000FBC  500A               	movf	(?___wmul+1)^0,w,c
  2114   000FBE  2243               	addwfc	(smLoop@h+1)^0,f,c
  2115   000FC0                     
  2116                           ;stateMachine.c: 291:                         h += (prot[5] - '0') * 1;
  2117   000FC0  504E               	movf	smLoop@prot^0,w,c
  2118   000FC2  6ED9               	movwf	fsr2l,c
  2119   000FC4  6ADA               	clrf	fsr2h,c
  2120   000FC6  0E05               	movlw	5
  2121   000FC8  26D9               	addwf	fsr2l,f,c
  2122   000FCA  50DF               	movf	indf2,w,c
  2123   000FCC  6E3B               	movwf	??_smLoop^0,c
  2124   000FCE  0ED0               	movlw	208
  2125   000FD0  243B               	addwf	??_smLoop^0,w,c
  2126   000FD2  6E3C               	movwf	(??_smLoop+1)^0,c
  2127   000FD4  6A3D               	clrf	(??_smLoop+2)^0,c
  2128   000FD6  0EFF               	movlw	255
  2129   000FD8  223D               	addwfc	(??_smLoop+2)^0,f,c
  2130   000FDA  503C               	movf	(??_smLoop+1)^0,w,c
  2131   000FDC  2642               	addwf	smLoop@h^0,f,c
  2132   000FDE  503D               	movf	(??_smLoop+2)^0,w,c
  2133   000FE0  2243               	addwfc	(smLoop@h+1)^0,f,c
  2134   000FE2                     
  2135                           ;stateMachine.c: 292:                         setAlarmLevel(h, 1);
  2136   000FE2  C042  F018         	movff	smLoop@h,setAlarmLevel@newAlarmLevel
  2137   000FE6  C043  F019         	movff	smLoop@h+1,setAlarmLevel@newAlarmLevel+1
  2138   000FEA  0E01               	movlw	1
  2139   000FEC  6E1A               	movwf	setAlarmLevel@lh^0,c
  2140   000FEE  EC50  F019         	call	_setAlarmLevel	;wreg free
  2141                           
  2142                           ;stateMachine.c: 293:                     };stateMachine.c: 294:                        
      +                           break;
  2143   000FF2  EF13  F008         	goto	l4940
  2144   000FF6                     l4938:
  2145   000FF6  504E               	movf	smLoop@prot^0,w,c
  2146   000FF8  6ED9               	movwf	fsr2l,c
  2147   000FFA  6ADA               	clrf	fsr2h,c
  2148   000FFC  0E02               	movlw	2
  2149   000FFE  26D9               	addwf	fsr2l,f,c
  2150   001000  50DF               	movf	indf2,w,c
  2151                           
  2152                           ; Switch size 1, requested type "simple"
  2153                           ; Number of cases is 4, Range of values is 72 to 108
  2154                           ; switch strategies available:
  2155                           ; Name         Instructions Cycles
  2156                           ; simple_byte           13     7 (average)
  2157                           ;	Chosen strategy is simple_byte
  2158   001002  0A48               	xorlw	72	; case 72
  2159   001004  B4D8               	btfsc	status,2,c
  2160   001006  EFB2  F007         	goto	l4928
  2161   00100A  0A04               	xorlw	4	; case 76
  2162   00100C  B4D8               	btfsc	status,2,c
  2163   00100E  EF6B  F007         	goto	l4922
  2164   001012  0A24               	xorlw	36	; case 104
  2165   001014  B4D8               	btfsc	status,2,c
  2166   001016  EFB2  F007         	goto	l4928
  2167   00101A  0A04               	xorlw	4	; case 108
  2168   00101C  B4D8               	btfsc	status,2,c
  2169   00101E  EF6B  F007         	goto	l4922
  2170   001022  EF13  F008         	goto	l4940
  2171   001026                     l4940:
  2172                           
  2173                           ;stateMachine.c: 297:             {;stateMachine.c: 298:                 int h = (prot[2
      +                          ] - '0') * 10;
  2174   001026  504E               	movf	smLoop@prot^0,w,c
  2175   001028  6ED9               	movwf	fsr2l,c
  2176   00102A  6ADA               	clrf	fsr2h,c
  2177   00102C  0E02               	movlw	2
  2178   00102E  26D9               	addwf	fsr2l,f,c
  2179   001030  50DF               	movf	indf2,w,c
  2180   001032  6E3B               	movwf	??_smLoop^0,c
  2181   001034  0ED0               	movlw	208
  2182   001036  243B               	addwf	??_smLoop^0,w,c
  2183   001038  6E09               	movwf	___wmul@multiplier^0,c
  2184   00103A  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2185   00103C  0EFF               	movlw	255
  2186   00103E  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2187   001040  0E00               	movlw	0
  2188   001042  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2189   001044  0E0A               	movlw	10
  2190   001046  6E0B               	movwf	___wmul@multiplicand^0,c
  2191   001048  EC9C  F01B         	call	___wmul	;wreg free
  2192   00104C  C009  F046         	movff	?___wmul,smLoop@h_556
  2193   001050  C00A  F047         	movff	?___wmul+1,smLoop@h_556+1
  2194   001054                     
  2195                           ;stateMachine.c: 299:                 h += (prot[3] - '0') * 1;
  2196   001054  504E               	movf	smLoop@prot^0,w,c
  2197   001056  6ED9               	movwf	fsr2l,c
  2198   001058  6ADA               	clrf	fsr2h,c
  2199   00105A  0E03               	movlw	3
  2200   00105C  26D9               	addwf	fsr2l,f,c
  2201   00105E  50DF               	movf	indf2,w,c
  2202   001060  6E3B               	movwf	??_smLoop^0,c
  2203   001062  0ED0               	movlw	208
  2204   001064  243B               	addwf	??_smLoop^0,w,c
  2205   001066  6E3C               	movwf	(??_smLoop+1)^0,c
  2206   001068  6A3D               	clrf	(??_smLoop+2)^0,c
  2207   00106A  0EFF               	movlw	255
  2208   00106C  223D               	addwfc	(??_smLoop+2)^0,f,c
  2209   00106E  503C               	movf	(??_smLoop+1)^0,w,c
  2210   001070  2646               	addwf	smLoop@h_556^0,f,c
  2211   001072  503D               	movf	(??_smLoop+2)^0,w,c
  2212   001074  2247               	addwfc	(smLoop@h_556+1)^0,f,c
  2213   001076                     
  2214                           ;stateMachine.c: 301:                 if (h <= 23)
  2215   001076  BE47               	btfsc	(smLoop@h_556+1)^0,7,c
  2216   001078  EF49  F008         	goto	u4720
  2217   00107C  5047               	movf	(smLoop@h_556+1)^0,w,c
  2218   00107E  E107               	bnz	u4721
  2219   001080  0E18               	movlw	24
  2220   001082  5C46               	subwf	smLoop@h_556^0,w,c
  2221   001084  B0D8               	btfsc	status,0,c
  2222   001086  EF47  F008         	goto	u4721
  2223   00108A  EF49  F008         	goto	u4720
  2224   00108E                     u4721:
  2225   00108E  EF51  F008         	goto	l4948
  2226   001092                     u4720:
  2227   001092                     
  2228                           ;stateMachine.c: 302:                     setTime(h, HOU);
  2229   001092  C046  F01A         	movff	smLoop@h_556,setTime@newTime
  2230   001096  C047  F01B         	movff	smLoop@h_556+1,setTime@newTime+1
  2231   00109A  0E02               	movlw	2
  2232   00109C  6E1C               	movwf	setTime@index^0,c
  2233   00109E  EC77  F015         	call	_setTime	;wreg free
  2234   0010A2                     l4948:
  2235                           
  2236                           ;stateMachine.c: 304:                 int m = (prot[4] - '0') * 10;
  2237   0010A2  504E               	movf	smLoop@prot^0,w,c
  2238   0010A4  6ED9               	movwf	fsr2l,c
  2239   0010A6  6ADA               	clrf	fsr2h,c
  2240   0010A8  0E04               	movlw	4
  2241   0010AA  26D9               	addwf	fsr2l,f,c
  2242   0010AC  50DF               	movf	indf2,w,c
  2243   0010AE  6E3B               	movwf	??_smLoop^0,c
  2244   0010B0  0ED0               	movlw	208
  2245   0010B2  243B               	addwf	??_smLoop^0,w,c
  2246   0010B4  6E09               	movwf	___wmul@multiplier^0,c
  2247   0010B6  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  2248   0010B8  0EFF               	movlw	255
  2249   0010BA  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  2250   0010BC  0E00               	movlw	0
  2251   0010BE  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2252   0010C0  0E0A               	movlw	10
  2253   0010C2  6E0B               	movwf	___wmul@multiplicand^0,c
  2254   0010C4  EC9C  F01B         	call	___wmul	;wreg free
  2255   0010C8  C009  F048         	movff	?___wmul,smLoop@m
  2256   0010CC  C00A  F049         	movff	?___wmul+1,smLoop@m+1
  2257   0010D0                     
  2258                           ;stateMachine.c: 305:                 m += (prot[5] - '0') * 1;
  2259   0010D0  504E               	movf	smLoop@prot^0,w,c
  2260   0010D2  6ED9               	movwf	fsr2l,c
  2261   0010D4  6ADA               	clrf	fsr2h,c
  2262   0010D6  0E05               	movlw	5
  2263   0010D8  26D9               	addwf	fsr2l,f,c
  2264   0010DA  50DF               	movf	indf2,w,c
  2265   0010DC  6E3B               	movwf	??_smLoop^0,c
  2266   0010DE  0ED0               	movlw	208
  2267   0010E0  243B               	addwf	??_smLoop^0,w,c
  2268   0010E2  6E3C               	movwf	(??_smLoop+1)^0,c
  2269   0010E4  6A3D               	clrf	(??_smLoop+2)^0,c
  2270   0010E6  0EFF               	movlw	255
  2271   0010E8  223D               	addwfc	(??_smLoop+2)^0,f,c
  2272   0010EA  503C               	movf	(??_smLoop+1)^0,w,c
  2273   0010EC  2648               	addwf	smLoop@m^0,f,c
  2274   0010EE  503D               	movf	(??_smLoop+2)^0,w,c
  2275   0010F0  2249               	addwfc	(smLoop@m+1)^0,f,c
  2276   0010F2                     
  2277                           ;stateMachine.c: 307:                 if (m <= 59)
  2278   0010F2  BE49               	btfsc	(smLoop@m+1)^0,7,c
  2279   0010F4  EF87  F008         	goto	u4730
  2280   0010F8  5049               	movf	(smLoop@m+1)^0,w,c
  2281   0010FA  E107               	bnz	u4731
  2282   0010FC  0E3C               	movlw	60
  2283   0010FE  5C48               	subwf	smLoop@m^0,w,c
  2284   001100  B0D8               	btfsc	status,0,c
  2285   001102  EF85  F008         	goto	u4731
  2286   001106  EF87  F008         	goto	u4730
  2287   00110A                     u4731:
  2288   00110A  EFA9  F008         	goto	l4960
  2289   00110E                     u4730:
  2290   00110E                     
  2291                           ;stateMachine.c: 308:                     setTime(m, MIN);
  2292   00110E  C048  F01A         	movff	smLoop@m,setTime@newTime
  2293   001112  C049  F01B         	movff	smLoop@m+1,setTime@newTime+1
  2294   001116  0E01               	movlw	1
  2295   001118  6E1C               	movwf	setTime@index^0,c
  2296   00111A  EC77  F015         	call	_setTime	;wreg free
  2297   00111E  EFA9  F008         	goto	l4960
  2298   001122                     l4958:
  2299   001122  504E               	movf	smLoop@prot^0,w,c
  2300   001124  6ED9               	movwf	fsr2l,c
  2301   001126  6ADA               	clrf	fsr2h,c
  2302   001128  0E01               	movlw	1
  2303   00112A  26D9               	addwf	fsr2l,f,c
  2304   00112C  50DF               	movf	indf2,w,c
  2305                           
  2306                           ; Switch size 1, requested type "simple"
  2307                           ; Number of cases is 4, Range of values is 72 to 116
  2308                           ; switch strategies available:
  2309                           ; Name         Instructions Cycles
  2310                           ; simple_byte           13     7 (average)
  2311                           ;	Chosen strategy is simple_byte
  2312   00112E  0A48               	xorlw	72	; case 72
  2313   001130  B4D8               	btfsc	status,2,c
  2314   001132  EF13  F008         	goto	l4940
  2315   001136  0A1C               	xorlw	28	; case 84
  2316   001138  B4D8               	btfsc	status,2,c
  2317   00113A  EFFB  F007         	goto	l4938
  2318   00113E  0A3C               	xorlw	60	; case 104
  2319   001140  B4D8               	btfsc	status,2,c
  2320   001142  EF13  F008         	goto	l4940
  2321   001146  0A1C               	xorlw	28	; case 116
  2322   001148  B4D8               	btfsc	status,2,c
  2323   00114A  EFFB  F007         	goto	l4938
  2324   00114E  EFA9  F008         	goto	l4960
  2325   001152                     l4960:
  2326                           
  2327                           ;stateMachine.c: 314:         resetProt();
  2328   001152  ECBF  F01A         	call	_resetProt	;wreg free
  2329   001156                     l4962:
  2330                           
  2331                           ;stateMachine.c: 318:     int temp = getTemp();
  2332   001156  EC2F  F01C         	call	_getTemp	;wreg free
  2333   00115A  C001  F044         	movff	?_getTemp,smLoop@temp
  2334   00115E  C002  F045         	movff	?_getTemp+1,smLoop@temp+1
  2335   001162                     
  2336                           ;stateMachine.c: 320:     if(getState() != STATE_ALERTA && (temp < getAlarmLevel(0) || t
      +                          emp > getAlarmLevel(1)))
  2337   001162  EC39  F01C         	call	_getState	;wreg free
  2338   001166  0A09               	xorlw	9
  2339   001168  B4D8               	btfsc	status,2,c
  2340   00116A  EFB9  F008         	goto	u4741
  2341   00116E  EFBB  F008         	goto	u4740
  2342   001172                     u4741:
  2343   001172  EFE8  F008         	goto	l704
  2344   001176                     u4740:
  2345   001176  0E00               	movlw	0
  2346   001178  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2347   00117A  0E00               	movlw	0
  2348   00117C  6E01               	movwf	getAlarmLevel@lh^0,c
  2349   00117E  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  2350   001182  5001               	movf	?_getAlarmLevel^0,w,c
  2351   001184  5C44               	subwf	smLoop@temp^0,w,c
  2352   001186  5045               	movf	(smLoop@temp+1)^0,w,c
  2353   001188  0A80               	xorlw	128
  2354   00118A  6E3B               	movwf	??_smLoop^0,c
  2355   00118C  5002               	movf	(?_getAlarmLevel+1)^0,w,c
  2356   00118E  0A80               	xorlw	128
  2357   001190  583B               	subwfb	??_smLoop^0,w,c
  2358   001192  A0D8               	btfss	status,0,c
  2359   001194  EFCE  F008         	goto	u4751
  2360   001198  EFD0  F008         	goto	u4750
  2361   00119C                     u4751:
  2362   00119C  EFE5  F008         	goto	l4970
  2363   0011A0                     u4750:
  2364   0011A0  0E00               	movlw	0
  2365   0011A2  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2366   0011A4  0E01               	movlw	1
  2367   0011A6  6E01               	movwf	getAlarmLevel@lh^0,c
  2368   0011A8  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  2369   0011AC  5044               	movf	smLoop@temp^0,w,c
  2370   0011AE  5C01               	subwf	?_getAlarmLevel^0,w,c
  2371   0011B0  5002               	movf	(?_getAlarmLevel+1)^0,w,c
  2372   0011B2  0A80               	xorlw	128
  2373   0011B4  6E3B               	movwf	??_smLoop^0,c
  2374   0011B6  5045               	movf	(smLoop@temp+1)^0,w,c
  2375   0011B8  0A80               	xorlw	128
  2376   0011BA  583B               	subwfb	??_smLoop^0,w,c
  2377   0011BC  B0D8               	btfsc	status,0,c
  2378   0011BE  EFE3  F008         	goto	u4761
  2379   0011C2  EFE5  F008         	goto	u4760
  2380   0011C6                     u4761:
  2381   0011C6  EFE8  F008         	goto	l704
  2382   0011CA                     u4760:
  2383   0011CA                     l4970:
  2384                           
  2385                           ;stateMachine.c: 321:     {;stateMachine.c: 322:         setState(STATE_ALERTA);
  2386   0011CA  0E09               	movlw	9
  2387   0011CC  EC21  F01C         	call	_setState
  2388   0011D0                     l704:
  2389                           
  2390                           ;stateMachine.c: 326:     outputPrint(getState(), getLanguage());
  2391   0011D0  EC46  F01C         	call	_getLanguage	;wreg free
  2392   0011D4  6E3B               	movwf	??_smLoop^0,c
  2393   0011D6  503B               	movf	??_smLoop^0,w,c
  2394   0011D8  6E3E               	movwf	_smLoop$1509^0,c
  2395   0011DA  6A3F               	clrf	(_smLoop$1509+1)^0,c
  2396   0011DC                     
  2397                           ;stateMachine.c: 326:     outputPrint(getState(), getLanguage());
  2398   0011DC  EC39  F01C         	call	_getState	;wreg free
  2399   0011E0  6E3B               	movwf	??_smLoop^0,c
  2400   0011E2  503B               	movf	??_smLoop^0,w,c
  2401   0011E4  6E24               	movwf	outputPrint@numTela^0,c
  2402   0011E6  6A25               	clrf	(outputPrint@numTela+1)^0,c
  2403   0011E8  C03E  F026         	movff	_smLoop$1509,outputPrint@idioma
  2404   0011EC  C03F  F027         	movff	_smLoop$1509+1,outputPrint@idioma+1
  2405   0011F0  ECFB  F008         	call	_outputPrint	;wreg free
  2406   0011F4  0012               	return		;funcret
  2407   0011F6                     __end_of_smLoop:
  2408                           	callstack 0
  2409                           
  2410 ;; *************** function _setDate *****************
  2411 ;; Defined at:
  2412 ;;		line 173 in file "var.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  date            2   28[COMRAM] PTR unsigned char 
  2415 ;;		 -> NULL(0), 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;		None
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2427 ;;      Params:         2       0       0       0       0       0       0       0       0
  2428 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2429 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2430 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2431 ;;Total ram usage:        6 bytes
  2432 ;; Hardware stack levels used: 1
  2433 ;; Hardware stack levels required when called: 6
  2434 ;; This function calls:
  2435 ;;		_setTime
  2436 ;; This function is called by:
  2437 ;;		_smLoop
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text2
  2442   002E4C                     __ptext2:
  2443                           	callstack 0
  2444   002E4C                     _setDate:
  2445                           	callstack 23
  2446   002E4C                     
  2447                           ;var.c: 173: void setDate(char* date);var.c: 174: {;var.c: 218:     setTime(date[0] * 10
      +                           + date[1], 0x04);
  2448   002E4C  EE20 F001          	lfsr	2,1
  2449   002E50  501D               	movf	setDate@date^0,w,c
  2450   002E52  26D9               	addwf	fsr2l,f,c
  2451   002E54  501E               	movf	(setDate@date+1)^0,w,c
  2452   002E56  22DA               	addwfc	fsr2h,f,c
  2453   002E58  50DF               	movf	indf2,w,c
  2454   002E5A  6E1F               	movwf	??_setDate^0,c
  2455   002E5C  C01D  FFD9         	movff	setDate@date,fsr2l
  2456   002E60  C01E  FFDA         	movff	setDate@date+1,fsr2h
  2457   002E64  50DF               	movf	indf2,w,c
  2458   002E66  6E20               	movwf	(??_setDate+1)^0,c
  2459   002E68  5020               	movf	(??_setDate+1)^0,w,c
  2460   002E6A  0D0A               	mullw	10
  2461   002E6C  CFF3 F021          	movff	prodl,??_setDate+2
  2462   002E70  CFF4 F022          	movff	prodh,??_setDate+3
  2463   002E74  501F               	movf	??_setDate^0,w,c
  2464   002E76  2421               	addwf	(??_setDate+2)^0,w,c
  2465   002E78  6E1A               	movwf	setTime@newTime^0,c
  2466   002E7A  0E00               	movlw	0
  2467   002E7C  2022               	addwfc	(??_setDate+3)^0,w,c
  2468   002E7E  6E1B               	movwf	(setTime@newTime+1)^0,c
  2469   002E80  0E04               	movlw	4
  2470   002E82  6E1C               	movwf	setTime@index^0,c
  2471   002E84  EC77  F015         	call	_setTime	;wreg free
  2472                           
  2473                           ;var.c: 219:     setTime(date[2] * 10 + date[3], MON);
  2474   002E88  EE20 F003          	lfsr	2,3
  2475   002E8C  501D               	movf	setDate@date^0,w,c
  2476   002E8E  26D9               	addwf	fsr2l,f,c
  2477   002E90  501E               	movf	(setDate@date+1)^0,w,c
  2478   002E92  22DA               	addwfc	fsr2h,f,c
  2479   002E94  50DF               	movf	indf2,w,c
  2480   002E96  6E1F               	movwf	??_setDate^0,c
  2481   002E98  EE20 F002          	lfsr	2,2
  2482   002E9C  501D               	movf	setDate@date^0,w,c
  2483   002E9E  26D9               	addwf	fsr2l,f,c
  2484   002EA0  501E               	movf	(setDate@date+1)^0,w,c
  2485   002EA2  22DA               	addwfc	fsr2h,f,c
  2486   002EA4  50DF               	movf	indf2,w,c
  2487   002EA6  6E20               	movwf	(??_setDate+1)^0,c
  2488   002EA8  5020               	movf	(??_setDate+1)^0,w,c
  2489   002EAA  0D0A               	mullw	10
  2490   002EAC  CFF3 F021          	movff	prodl,??_setDate+2
  2491   002EB0  CFF4 F022          	movff	prodh,??_setDate+3
  2492   002EB4  501F               	movf	??_setDate^0,w,c
  2493   002EB6  2421               	addwf	(??_setDate+2)^0,w,c
  2494   002EB8  6E1A               	movwf	setTime@newTime^0,c
  2495   002EBA  0E00               	movlw	0
  2496   002EBC  2022               	addwfc	(??_setDate+3)^0,w,c
  2497   002EBE  6E1B               	movwf	(setTime@newTime+1)^0,c
  2498   002EC0  0E04               	movlw	4
  2499   002EC2  6E1C               	movwf	setTime@index^0,c
  2500   002EC4  EC77  F015         	call	_setTime	;wreg free
  2501                           
  2502                           ;var.c: 220:     setTime(date[4] * 10 + date[5], YEA);
  2503   002EC8  EE20 F005          	lfsr	2,5
  2504   002ECC  501D               	movf	setDate@date^0,w,c
  2505   002ECE  26D9               	addwf	fsr2l,f,c
  2506   002ED0  501E               	movf	(setDate@date+1)^0,w,c
  2507   002ED2  22DA               	addwfc	fsr2h,f,c
  2508   002ED4  50DF               	movf	indf2,w,c
  2509   002ED6  6E1F               	movwf	??_setDate^0,c
  2510   002ED8  EE20 F004          	lfsr	2,4
  2511   002EDC  501D               	movf	setDate@date^0,w,c
  2512   002EDE  26D9               	addwf	fsr2l,f,c
  2513   002EE0  501E               	movf	(setDate@date+1)^0,w,c
  2514   002EE2  22DA               	addwfc	fsr2h,f,c
  2515   002EE4  50DF               	movf	indf2,w,c
  2516   002EE6  6E20               	movwf	(??_setDate+1)^0,c
  2517   002EE8  5020               	movf	(??_setDate+1)^0,w,c
  2518   002EEA  0D0A               	mullw	10
  2519   002EEC  CFF3 F021          	movff	prodl,??_setDate+2
  2520   002EF0  CFF4 F022          	movff	prodh,??_setDate+3
  2521   002EF4  501F               	movf	??_setDate^0,w,c
  2522   002EF6  2421               	addwf	(??_setDate+2)^0,w,c
  2523   002EF8  6E1A               	movwf	setTime@newTime^0,c
  2524   002EFA  0E00               	movlw	0
  2525   002EFC  2022               	addwfc	(??_setDate+3)^0,w,c
  2526   002EFE  6E1B               	movwf	(setTime@newTime+1)^0,c
  2527   002F00  0E05               	movlw	5
  2528   002F02  6E1C               	movwf	setTime@index^0,c
  2529   002F04  EC77  F015         	call	_setTime	;wreg free
  2530   002F08  0012               	return		;funcret
  2531   002F0A                     __end_of_setDate:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _setTime *****************
  2535 ;; Defined at:
  2536 ;;		line 77 in file "var.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  newTime         2   25[COMRAM] int 
  2539 ;;  index           1   27[COMRAM] unsigned char 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;		None
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2551 ;;      Params:         3       0       0       0       0       0       0       0       0
  2552 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2554 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2555 ;;Total ram usage:        3 bytes
  2556 ;; Hardware stack levels used: 1
  2557 ;; Hardware stack levels required when called: 5
  2558 ;; This function calls:
  2559 ;;		_dec2bcd
  2560 ;;		_dsWriteData
  2561 ;; This function is called by:
  2562 ;;		_smLoop
  2563 ;;		_setDate
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text3
  2568   002AEE                     __ptext3:
  2569                           	callstack 0
  2570   002AEE                     _setTime:
  2571                           	callstack 24
  2572   002AEE                     
  2573                           ;var.c: 78:     switch(index)
  2574   002AEE  EFD3  F015         	goto	l4038
  2575   002AF2                     l4012:
  2576                           
  2577                           ;	Return value of _setTime is never used
  2578   002AF2  0E00               	movlw	0
  2579   002AF4  6E16               	movwf	(dsWriteData@address+1)^0,c
  2580   002AF6  0E00               	movlw	0
  2581   002AF8  6E15               	movwf	dsWriteData@address^0,c
  2582   002AFA  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2583   002AFE  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2584   002B02  EC99  F018         	call	_dec2bcd	;wreg free
  2585   002B06  500F               	movf	?_dec2bcd^0,w,c
  2586   002B08  ECD7  F01A         	call	_dsWriteData
  2587   002B0C  EFEE  F015         	goto	l796
  2588   002B10                     l4016:
  2589                           
  2590                           ;	Return value of _setTime is never used
  2591   002B10  0E00               	movlw	0
  2592   002B12  6E16               	movwf	(dsWriteData@address+1)^0,c
  2593   002B14  0E01               	movlw	1
  2594   002B16  6E15               	movwf	dsWriteData@address^0,c
  2595   002B18  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2596   002B1C  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2597   002B20  EC99  F018         	call	_dec2bcd	;wreg free
  2598   002B24  500F               	movf	?_dec2bcd^0,w,c
  2599   002B26  ECD7  F01A         	call	_dsWriteData
  2600   002B2A  EFEE  F015         	goto	l796
  2601   002B2E                     l4020:
  2602                           
  2603                           ;	Return value of _setTime is never used
  2604   002B2E  0E00               	movlw	0
  2605   002B30  6E16               	movwf	(dsWriteData@address+1)^0,c
  2606   002B32  0E02               	movlw	2
  2607   002B34  6E15               	movwf	dsWriteData@address^0,c
  2608   002B36  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2609   002B3A  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2610   002B3E  EC99  F018         	call	_dec2bcd	;wreg free
  2611   002B42  500F               	movf	?_dec2bcd^0,w,c
  2612   002B44  ECD7  F01A         	call	_dsWriteData
  2613   002B48  EFEE  F015         	goto	l796
  2614   002B4C                     l4024:
  2615                           
  2616                           ;	Return value of _setTime is never used
  2617   002B4C  0E00               	movlw	0
  2618   002B4E  6E16               	movwf	(dsWriteData@address+1)^0,c
  2619   002B50  0E04               	movlw	4
  2620   002B52  6E15               	movwf	dsWriteData@address^0,c
  2621   002B54  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2622   002B58  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2623   002B5C  EC99  F018         	call	_dec2bcd	;wreg free
  2624   002B60  500F               	movf	?_dec2bcd^0,w,c
  2625   002B62  ECD7  F01A         	call	_dsWriteData
  2626   002B66  EFEE  F015         	goto	l796
  2627   002B6A                     l4028:
  2628                           
  2629                           ;	Return value of _setTime is never used
  2630   002B6A  0E00               	movlw	0
  2631   002B6C  6E16               	movwf	(dsWriteData@address+1)^0,c
  2632   002B6E  0E05               	movlw	5
  2633   002B70  6E15               	movwf	dsWriteData@address^0,c
  2634   002B72  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2635   002B76  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2636   002B7A  EC99  F018         	call	_dec2bcd	;wreg free
  2637   002B7E  500F               	movf	?_dec2bcd^0,w,c
  2638   002B80  ECD7  F01A         	call	_dsWriteData
  2639   002B84  EFEE  F015         	goto	l796
  2640   002B88                     l4032:
  2641                           
  2642                           ;	Return value of _setTime is never used
  2643   002B88  0E00               	movlw	0
  2644   002B8A  6E16               	movwf	(dsWriteData@address+1)^0,c
  2645   002B8C  0E06               	movlw	6
  2646   002B8E  6E15               	movwf	dsWriteData@address^0,c
  2647   002B90  C01A  F00F         	movff	setTime@newTime,dec2bcd@value
  2648   002B94  C01B  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2649   002B98  EC99  F018         	call	_dec2bcd	;wreg free
  2650   002B9C  500F               	movf	?_dec2bcd^0,w,c
  2651   002B9E  ECD7  F01A         	call	_dsWriteData
  2652   002BA2  EFEE  F015         	goto	l796
  2653   002BA6                     l4038:
  2654   002BA6  501C               	movf	setTime@index^0,w,c
  2655                           
  2656                           ; Switch size 1, requested type "simple"
  2657                           ; Number of cases is 6, Range of values is 0 to 5
  2658                           ; switch strategies available:
  2659                           ; Name         Instructions Cycles
  2660                           ; simple_byte           19    10 (average)
  2661                           ;	Chosen strategy is simple_byte
  2662   002BA8  0A00               	xorlw	0	; case 0
  2663   002BAA  B4D8               	btfsc	status,2,c
  2664   002BAC  EF79  F015         	goto	l4012
  2665   002BB0  0A01               	xorlw	1	; case 1
  2666   002BB2  B4D8               	btfsc	status,2,c
  2667   002BB4  EF88  F015         	goto	l4016
  2668   002BB8  0A03               	xorlw	3	; case 2
  2669   002BBA  B4D8               	btfsc	status,2,c
  2670   002BBC  EF97  F015         	goto	l4020
  2671   002BC0  0A01               	xorlw	1	; case 3
  2672   002BC2  B4D8               	btfsc	status,2,c
  2673   002BC4  EFA6  F015         	goto	l4024
  2674   002BC8  0A07               	xorlw	7	; case 4
  2675   002BCA  B4D8               	btfsc	status,2,c
  2676   002BCC  EFB5  F015         	goto	l4028
  2677   002BD0  0A01               	xorlw	1	; case 5
  2678   002BD2  B4D8               	btfsc	status,2,c
  2679   002BD4  EFC4  F015         	goto	l4032
  2680   002BD8  EFEE  F015         	goto	l796
  2681   002BDC                     l796:
  2682   002BDC  0012               	return		;funcret
  2683   002BDE                     __end_of_setTime:
  2684                           	callstack 0
  2685                           
  2686 ;; *************** function _resetProt *****************
  2687 ;; Defined at:
  2688 ;;		line 140 in file "var.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  i               1    0[COMRAM] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      void 
  2695 ;; Registers used:
  2696 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2702 ;;      Params:         0       0       0       0       0       0       0       0       0
  2703 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2705 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2706 ;;Total ram usage:        1 bytes
  2707 ;; Hardware stack levels used: 1
  2708 ;; This function calls:
  2709 ;;		Nothing
  2710 ;; This function is called by:
  2711 ;;		_smLoop
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text4
  2716   00357E                     __ptext4:
  2717                           	callstack 0
  2718   00357E                     _resetProt:
  2719                           	callstack 29
  2720   00357E                     
  2721                           ;var.c: 142:     char i = 0;
  2722   00357E  0E00               	movlw	0
  2723   003580  6E01               	movwf	resetProt@i^0,c
  2724                           
  2725                           ;var.c: 143:     while (i < 6)
  2726   003582  EFC9  F01A         	goto	l4626
  2727   003586                     l4622:
  2728                           
  2729                           ;var.c: 144:     {;var.c: 145:         prot[i] = 0;
  2730   003586  5001               	movf	resetProt@i^0,w,c
  2731   003588  0FC2               	addlw	low _prot
  2732   00358A  6ED9               	movwf	fsr2l,c
  2733   00358C  6ADA               	clrf	fsr2h,c
  2734   00358E  6ADF               	clrf	indf2,c
  2735   003590                     
  2736                           ;var.c: 146:         i++;
  2737   003590  2A01               	incf	resetProt@i^0,f,c
  2738   003592                     l4626:
  2739                           
  2740                           ;var.c: 143:     while (i < 6)
  2741   003592  0E05               	movlw	5
  2742   003594  6401               	cpfsgt	resetProt@i^0,c
  2743   003596  EFCF  F01A         	goto	u4161
  2744   00359A  EFD1  F01A         	goto	u4160
  2745   00359E                     u4161:
  2746   00359E  EFC3  F01A         	goto	l4622
  2747   0035A2                     u4160:
  2748   0035A2                     
  2749                           ;var.c: 148:     prot_ready = 0;
  2750   0035A2  0E00               	movlw	0
  2751   0035A4  0100               	movlb	0	; () banked
  2752   0035A6  6FC1               	movwf	_prot_ready& (0+255),b
  2753                           
  2754                           ;var.c: 149:     index = 0;
  2755   0035A8  0E00               	movlw	0
  2756   0035AA  6E51               	movwf	_index^0,c
  2757   0035AC                     
  2758                           ; BSR set to: 0
  2759   0035AC  0012               	return		;funcret
  2760   0035AE                     __end_of_resetProt:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _readTemp *****************
  2764 ;; Defined at:
  2765 ;;		line 156 in file "var.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;  j               1   57[COMRAM] unsigned char 
  2770 ;;  tempT           2   55[COMRAM] int 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2780 ;;      Params:         0       0       0       0       0       0       0       0       0
  2781 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2782 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2783 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2784 ;;Total ram usage:        5 bytes
  2785 ;; Hardware stack levels used: 1
  2786 ;; Hardware stack levels required when called: 1
  2787 ;; This function calls:
  2788 ;;		___awdiv
  2789 ;;		___flmul
  2790 ;;		___fltol
  2791 ;;		___xxtofl
  2792 ;;		_adcRead
  2793 ;; This function is called by:
  2794 ;;		_smLoop
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text5
  2799   002BDE                     __ptext5:
  2800                           	callstack 0
  2801   002BDE                     _readTemp:
  2802                           	callstack 28
  2803   002BDE                     
  2804                           ;var.c: 158:     t[i++] = (adcRead() - 230) * ((float)100/77);
  2805   002BDE  0ED8               	movlw	216
  2806   002BE0  6E17               	movwf	___flmul@a^0,c
  2807   002BE2  0E3B               	movlw	59
  2808   002BE4  6E18               	movwf	(___flmul@a+1)^0,c
  2809   002BE6  0EA6               	movlw	166
  2810   002BE8  6E19               	movwf	(___flmul@a+2)^0,c
  2811   002BEA  0E3F               	movlw	63
  2812   002BEC  6E1A               	movwf	(___flmul@a+3)^0,c
  2813   002BEE  EC59  F01A         	call	_adcRead	;wreg free
  2814   002BF2  0E1A               	movlw	26
  2815   002BF4  2401               	addwf	?_adcRead^0,w,c
  2816   002BF6  6E36               	movwf	??_readTemp^0,c
  2817   002BF8  0EFF               	movlw	255
  2818   002BFA  2002               	addwfc	(?_adcRead+1)^0,w,c
  2819   002BFC  6E37               	movwf	(??_readTemp+1)^0,c
  2820   002BFE  C036  F005         	movff	??_readTemp,___xxtofl@val
  2821   002C02  C037  F006         	movff	??_readTemp+1,___xxtofl@val+1
  2822   002C06  0E00               	movlw	0
  2823   002C08  BE06               	btfsc	(___xxtofl@val+1)^0,7,c
  2824   002C0A  0EFF               	movlw	-1
  2825   002C0C  6E07               	movwf	(___xxtofl@val+2)^0,c
  2826   002C0E  6E08               	movwf	(___xxtofl@val+3)^0,c
  2827   002C10  0E01               	movlw	1
  2828   002C12  EC5F  F012         	call	___xxtofl
  2829   002C16  C005  F013         	movff	?___xxtofl,___flmul@b
  2830   002C1A  C006  F014         	movff	?___xxtofl+1,___flmul@b+1
  2831   002C1E  C007  F015         	movff	?___xxtofl+2,___flmul@b+2
  2832   002C22  C008  F016         	movff	?___xxtofl+3,___flmul@b+3
  2833   002C26  EC03  F00C         	call	___flmul	;wreg free
  2834   002C2A  C013  F02C         	movff	?___flmul,___fltol@f1
  2835   002C2E  C014  F02D         	movff	?___flmul+1,___fltol@f1+1
  2836   002C32  C015  F02E         	movff	?___flmul+2,___fltol@f1+2
  2837   002C36  C016  F02F         	movff	?___flmul+3,___fltol@f1+3
  2838   002C3A  EC76  F014         	call	___fltol	;wreg free
  2839   002C3E  5050               	movf	_i^0,w,c
  2840   002C40  0D02               	mullw	2
  2841   002C42  50F3               	movf	243,w,c
  2842   002C44  0F60               	addlw	low _t
  2843   002C46  6ED9               	movwf	fsr2l,c
  2844   002C48  6ADA               	clrf	fsr2h,c
  2845   002C4A  C02C  FFDE         	movff	?___fltol,postinc2
  2846   002C4E  C02D  FFDD         	movff	?___fltol+1,postdec2
  2847   002C52  2A50               	incf	_i^0,f,c
  2848   002C54                     
  2849                           ;var.c: 160:     int tempT = 0;
  2850   002C54  0E00               	movlw	0
  2851   002C56  6E39               	movwf	(readTemp@tempT+1)^0,c
  2852   002C58  0E00               	movlw	0
  2853   002C5A  6E38               	movwf	readTemp@tempT^0,c
  2854   002C5C                     
  2855                           ;var.c: 161:     for(char j = 0; j < 33; j++)
  2856   002C5C  0E00               	movlw	0
  2857   002C5E  6E3A               	movwf	readTemp@j^0,c
  2858   002C60                     l4596:
  2859                           
  2860                           ;var.c: 162:     {;var.c: 163:         tempT += t[j];
  2861   002C60  503A               	movf	readTemp@j^0,w,c
  2862   002C62  0D02               	mullw	2
  2863   002C64  50F3               	movf	243,w,c
  2864   002C66  0F60               	addlw	low _t
  2865   002C68  6ED9               	movwf	fsr2l,c
  2866   002C6A  6ADA               	clrf	fsr2h,c
  2867   002C6C  50DE               	movf	postinc2,w,c
  2868   002C6E  2638               	addwf	readTemp@tempT^0,f,c
  2869   002C70  50DD               	movf	postdec2,w,c
  2870   002C72  2239               	addwfc	(readTemp@tempT+1)^0,f,c
  2871   002C74                     
  2872                           ;var.c: 164:     }
  2873   002C74  2A3A               	incf	readTemp@j^0,f,c
  2874   002C76  0E20               	movlw	32
  2875   002C78  643A               	cpfsgt	readTemp@j^0,c
  2876   002C7A  EF41  F016         	goto	u4141
  2877   002C7E  EF43  F016         	goto	u4140
  2878   002C82                     u4141:
  2879   002C82  EF30  F016         	goto	l4596
  2880   002C86                     u4140:
  2881   002C86                     
  2882                           ;var.c: 165:     tempT /= 33;
  2883   002C86  C038  F001         	movff	readTemp@tempT,___awdiv@dividend
  2884   002C8A  C039  F002         	movff	readTemp@tempT+1,___awdiv@dividend+1
  2885   002C8E  0E00               	movlw	0
  2886   002C90  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2887   002C92  0E21               	movlw	33
  2888   002C94  6E03               	movwf	___awdiv@divisor^0,c
  2889   002C96  ECC4  F016         	call	___awdiv	;wreg free
  2890   002C9A  C001  F038         	movff	?___awdiv,readTemp@tempT
  2891   002C9E  C002  F039         	movff	?___awdiv+1,readTemp@tempT+1
  2892   002CA2                     
  2893                           ;var.c: 167:     if(i >= 33){
  2894   002CA2  0E20               	movlw	32
  2895   002CA4  6450               	cpfsgt	_i^0,c
  2896   002CA6  EF57  F016         	goto	u4151
  2897   002CAA  EF59  F016         	goto	u4150
  2898   002CAE                     u4151:
  2899   002CAE  EF5F  F016         	goto	l840
  2900   002CB2                     u4150:
  2901   002CB2                     
  2902                           ;var.c: 168:         i = 0;
  2903   002CB2  0E00               	movlw	0
  2904   002CB4  6E50               	movwf	_i^0,c
  2905   002CB6                     
  2906                           ;var.c: 169:         temp = tempT;
  2907   002CB6  C038  F0AF         	movff	readTemp@tempT,_temp
  2908   002CBA  C039  F0B0         	movff	readTemp@tempT+1,_temp+1
  2909   002CBE                     l840:
  2910   002CBE  0012               	return		;funcret
  2911   002CC0                     __end_of_readTemp:
  2912                           	callstack 0
  2913                           
  2914 ;; *************** function _adcRead *****************
  2915 ;; Defined at:
  2916 ;;		line 36 in file "adc.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  ADvalor         2    2[COMRAM] unsigned int 
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  2    0[COMRAM] int 
  2923 ;; Registers used:
  2924 ;;		wreg, status,2, status,0
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2930 ;;      Params:         2       0       0       0       0       0       0       0       0
  2931 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2933 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2934 ;;Total ram usage:        4 bytes
  2935 ;; Hardware stack levels used: 1
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_readTemp
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text6
  2944   0034B2                     __ptext6:
  2945                           	callstack 0
  2946   0034B2                     _adcRead:
  2947                           	callstack 28
  2948   0034B2                     
  2949                           ;adc.c: 38:  unsigned int ADvalor;;adc.c: 39:     (*(volatile __near unsigned char*)0xFC
      +                          1) = 0b00001001;
  2950   0034B2  0E09               	movlw	9
  2951   0034B4  6EC1               	movwf	193,c	;volatile
  2952   0034B6                     
  2953                           ;adc.c: 40:  (*(volatile __near unsigned char*)0xFC2) |= 0b00000010;
  2954   0034B6  82C2               	bsf	194,1,c	;volatile
  2955   0034B8                     l6:
  2956   0034B8  B2C2               	btfsc	194,1,c	;volatile
  2957   0034BA  EF61  F01A         	goto	u3371
  2958   0034BE  EF63  F01A         	goto	u3370
  2959   0034C2                     u3371:
  2960   0034C2  EF5C  F01A         	goto	l6
  2961   0034C6                     u3370:
  2962   0034C6                     
  2963                           ;adc.c: 44:  ADvalor = (*(volatile __near unsigned char*)0xFC4) ;
  2964   0034C6  CFC4 F003          	movff	4036,adcRead@ADvalor	;volatile
  2965   0034CA  6A04               	clrf	(adcRead@ADvalor+1)^0,c
  2966   0034CC                     
  2967                           ;adc.c: 45:  ADvalor <<= 8;
  2968   0034CC  5003               	movf	adcRead@ADvalor^0,w,c
  2969   0034CE  6E04               	movwf	(adcRead@ADvalor+1)^0,c
  2970   0034D0  6A03               	clrf	adcRead@ADvalor^0,c
  2971   0034D2                     
  2972                           ;adc.c: 46:  ADvalor += (*(volatile __near unsigned char*)0xFC3);
  2973   0034D2  50C3               	movf	195,w,c	;volatile
  2974   0034D4  2603               	addwf	adcRead@ADvalor^0,f,c
  2975   0034D6  0E00               	movlw	0
  2976   0034D8  2204               	addwfc	(adcRead@ADvalor+1)^0,f,c
  2977   0034DA                     
  2978                           ;adc.c: 47:     (*(volatile __near unsigned char*)0xFC1) = 0b00001111;
  2979   0034DA  0E0F               	movlw	15
  2980   0034DC  6EC1               	movwf	193,c	;volatile
  2981   0034DE                     
  2982                           ;adc.c: 48:  return ADvalor;
  2983   0034DE  C003  F001         	movff	adcRead@ADvalor,?_adcRead
  2984   0034E2  C004  F002         	movff	adcRead@ADvalor+1,?_adcRead+1
  2985   0034E6  0012               	return		;funcret
  2986   0034E8                     __end_of_adcRead:
  2987                           	callstack 0
  2988                           
  2989 ;; *************** function ___xxtofl *****************
  2990 ;; Defined at:
  2991 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\xxtofl.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  sign            1    wreg     unsigned char 
  2994 ;;  val             4    4[COMRAM] long 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  sign            1   12[COMRAM] unsigned char 
  2997 ;;  arg             4   14[COMRAM] unsigned long 
  2998 ;;  exp             1   13[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  4    4[COMRAM] unsigned char 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3008 ;;      Params:         4       0       0       0       0       0       0       0       0
  3009 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3010 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3011 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3012 ;;Total ram usage:       14 bytes
  3013 ;; Hardware stack levels used: 1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_readTemp
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text7
  3022   0024BE                     __ptext7:
  3023                           	callstack 0
  3024   0024BE                     ___xxtofl:
  3025                           	callstack 28
  3026                           
  3027                           ;incstack = 0
  3028                           ;___xxtofl@sign stored from wreg
  3029   0024BE  6E0D               	movwf	___xxtofl@sign^0,c
  3030   0024C0  500D               	movf	___xxtofl@sign^0,w,c
  3031   0024C2  B4D8               	btfsc	status,2,c
  3032   0024C4  EF66  F012         	goto	u3761
  3033   0024C8  EF68  F012         	goto	u3760
  3034   0024CC                     u3761:
  3035   0024CC  EF8A  F012         	goto	l1504
  3036   0024D0                     u3760:
  3037   0024D0  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  3038   0024D2  EF6F  F012         	goto	u3770
  3039   0024D6  EF6D  F012         	goto	u3771
  3040   0024DA                     u3771:
  3041   0024DA  EF8A  F012         	goto	l1504
  3042   0024DE                     u3770:
  3043   0024DE  C005  F009         	movff	___xxtofl@val,??___xxtofl
  3044   0024E2  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  3045   0024E6  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  3046   0024EA  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  3047   0024EE  1E09               	comf	??___xxtofl^0,f,c
  3048   0024F0  1E0A               	comf	(??___xxtofl+1)^0,f,c
  3049   0024F2  1E0B               	comf	(??___xxtofl+2)^0,f,c
  3050   0024F4  1E0C               	comf	(??___xxtofl+3)^0,f,c
  3051   0024F6  2A09               	incf	??___xxtofl^0,f,c
  3052   0024F8  0E00               	movlw	0
  3053   0024FA  220A               	addwfc	(??___xxtofl+1)^0,f,c
  3054   0024FC  220B               	addwfc	(??___xxtofl+2)^0,f,c
  3055   0024FE  220C               	addwfc	(??___xxtofl+3)^0,f,c
  3056   002500  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  3057   002504  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  3058   002508  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  3059   00250C  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  3060   002510  EF92  F012         	goto	l4220
  3061   002514                     l1504:
  3062   002514  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  3063   002518  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3064   00251C  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3065   002520  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3066   002524                     l4220:
  3067   002524  5005               	movf	___xxtofl@val^0,w,c
  3068   002526  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  3069   002528  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  3070   00252A  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  3071   00252C  A4D8               	btfss	status,2,c
  3072   00252E  EF9B  F012         	goto	u3781
  3073   002532  EF9D  F012         	goto	u3780
  3074   002536                     u3781:
  3075   002536  EFA7  F012         	goto	l4226
  3076   00253A                     u3780:
  3077   00253A  0E00               	movlw	0
  3078   00253C  6E05               	movwf	?___xxtofl^0,c
  3079   00253E  0E00               	movlw	0
  3080   002540  6E06               	movwf	(?___xxtofl+1)^0,c
  3081   002542  0E00               	movlw	0
  3082   002544  6E07               	movwf	(?___xxtofl+2)^0,c
  3083   002546  0E00               	movlw	0
  3084   002548  6E08               	movwf	(?___xxtofl+3)^0,c
  3085   00254A  EF38  F013         	goto	l1507
  3086   00254E                     l4226:
  3087   00254E  0E96               	movlw	150
  3088   002550  6E0E               	movwf	___xxtofl@exp^0,c
  3089   002552  EFB1  F012         	goto	l4230
  3090   002556                     l4228:
  3091   002556  2A0E               	incf	___xxtofl@exp^0,f,c
  3092   002558  90D8               	bcf	status,0,c
  3093   00255A  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  3094   00255C  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  3095   00255E  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  3096   002560  320F               	rrcf	___xxtofl@arg^0,f,c
  3097   002562                     l4230:
  3098   002562  0E00               	movlw	0
  3099   002564  140F               	andwf	___xxtofl@arg^0,w,c
  3100   002566  6E09               	movwf	??___xxtofl^0,c
  3101   002568  0E00               	movlw	0
  3102   00256A  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  3103   00256C  6E0A               	movwf	(??___xxtofl+1)^0,c
  3104   00256E  0E00               	movlw	0
  3105   002570  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  3106   002572  6E0B               	movwf	(??___xxtofl+2)^0,c
  3107   002574  0EFE               	movlw	254
  3108   002576  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  3109   002578  6E0C               	movwf	(??___xxtofl+3)^0,c
  3110   00257A  5009               	movf	??___xxtofl^0,w,c
  3111   00257C  100A               	iorwf	(??___xxtofl+1)^0,w,c
  3112   00257E  100B               	iorwf	(??___xxtofl+2)^0,w,c
  3113   002580  100C               	iorwf	(??___xxtofl+3)^0,w,c
  3114   002582  A4D8               	btfss	status,2,c
  3115   002584  EFC6  F012         	goto	u3791
  3116   002588  EFC8  F012         	goto	u3790
  3117   00258C                     u3791:
  3118   00258C  EFAB  F012         	goto	l4228
  3119   002590                     u3790:
  3120   002590  EFD6  F012         	goto	l1511
  3121   002594                     l4232:
  3122   002594  2A0E               	incf	___xxtofl@exp^0,f,c
  3123   002596  0E01               	movlw	1
  3124   002598  260F               	addwf	___xxtofl@arg^0,f,c
  3125   00259A  0E00               	movlw	0
  3126   00259C  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  3127   00259E  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  3128   0025A0  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  3129   0025A2  90D8               	bcf	status,0,c
  3130   0025A4  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  3131   0025A6  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  3132   0025A8  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  3133   0025AA  320F               	rrcf	___xxtofl@arg^0,f,c
  3134   0025AC                     l1511:
  3135   0025AC  0E00               	movlw	0
  3136   0025AE  140F               	andwf	___xxtofl@arg^0,w,c
  3137   0025B0  6E09               	movwf	??___xxtofl^0,c
  3138   0025B2  0E00               	movlw	0
  3139   0025B4  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  3140   0025B6  6E0A               	movwf	(??___xxtofl+1)^0,c
  3141   0025B8  0E00               	movlw	0
  3142   0025BA  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  3143   0025BC  6E0B               	movwf	(??___xxtofl+2)^0,c
  3144   0025BE  0EFF               	movlw	255
  3145   0025C0  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  3146   0025C2  6E0C               	movwf	(??___xxtofl+3)^0,c
  3147   0025C4  5009               	movf	??___xxtofl^0,w,c
  3148   0025C6  100A               	iorwf	(??___xxtofl+1)^0,w,c
  3149   0025C8  100B               	iorwf	(??___xxtofl+2)^0,w,c
  3150   0025CA  100C               	iorwf	(??___xxtofl+3)^0,w,c
  3151   0025CC  A4D8               	btfss	status,2,c
  3152   0025CE  EFEB  F012         	goto	u3801
  3153   0025D2  EFED  F012         	goto	u3800
  3154   0025D6                     u3801:
  3155   0025D6  EFCA  F012         	goto	l4232
  3156   0025DA                     u3800:
  3157   0025DA  EFF5  F012         	goto	l4240
  3158   0025DE                     l4238:
  3159   0025DE  060E               	decf	___xxtofl@exp^0,f,c
  3160   0025E0  90D8               	bcf	status,0,c
  3161   0025E2  360F               	rlcf	___xxtofl@arg^0,f,c
  3162   0025E4  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  3163   0025E6  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  3164   0025E8  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  3165   0025EA                     l4240:
  3166   0025EA  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  3167   0025EC  EFFA  F012         	goto	u3811
  3168   0025F0  EFFC  F012         	goto	u3810
  3169   0025F4                     u3811:
  3170   0025F4  EF04  F013         	goto	l1518
  3171   0025F8                     u3810:
  3172   0025F8  0E02               	movlw	2
  3173   0025FA  600E               	cpfslt	___xxtofl@exp^0,c
  3174   0025FC  EF02  F013         	goto	u3821
  3175   002600  EF04  F013         	goto	u3820
  3176   002604                     u3821:
  3177   002604  EFEF  F012         	goto	l4238
  3178   002608                     u3820:
  3179   002608                     l1518:
  3180   002608  B00E               	btfsc	___xxtofl@exp^0,0,c
  3181   00260A  EF09  F013         	goto	u3831
  3182   00260E  EF0B  F013         	goto	u3830
  3183   002612                     u3831:
  3184   002612  EF0C  F013         	goto	l4246
  3185   002616                     u3830:
  3186   002616  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  3187   002618                     l4246:
  3188   002618  90D8               	bcf	status,0,c
  3189   00261A  320E               	rrcf	___xxtofl@exp^0,f,c
  3190   00261C  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  3191   002620  6A0A               	clrf	(??___xxtofl+1)^0,c
  3192   002622  6A0B               	clrf	(??___xxtofl+2)^0,c
  3193   002624  6A0C               	clrf	(??___xxtofl+3)^0,c
  3194   002626  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  3195   00262A  6A0B               	clrf	(??___xxtofl+2)^0,c
  3196   00262C  6A0A               	clrf	(??___xxtofl+1)^0,c
  3197   00262E  6A09               	clrf	??___xxtofl^0,c
  3198   002630  5009               	movf	??___xxtofl^0,w,c
  3199   002632  120F               	iorwf	___xxtofl@arg^0,f,c
  3200   002634  500A               	movf	(??___xxtofl+1)^0,w,c
  3201   002636  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  3202   002638  500B               	movf	(??___xxtofl+2)^0,w,c
  3203   00263A  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  3204   00263C  500C               	movf	(??___xxtofl+3)^0,w,c
  3205   00263E  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  3206   002640  500D               	movf	___xxtofl@sign^0,w,c
  3207   002642  B4D8               	btfsc	status,2,c
  3208   002644  EF26  F013         	goto	u3841
  3209   002648  EF28  F013         	goto	u3840
  3210   00264C                     u3841:
  3211   00264C  EF30  F013         	goto	l4256
  3212   002650                     u3840:
  3213   002650  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  3214   002652  EF2F  F013         	goto	u3850
  3215   002656  EF2D  F013         	goto	u3851
  3216   00265A                     u3851:
  3217   00265A  EF30  F013         	goto	l4256
  3218   00265E                     u3850:
  3219   00265E  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  3220   002660                     l4256:
  3221   002660  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  3222   002664  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  3223   002668  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  3224   00266C  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  3225   002670                     l1507:
  3226   002670  0012               	return		;funcret
  3227   002672                     __end_of___xxtofl:
  3228                           	callstack 0
  3229                           
  3230 ;; *************** function ___fltol *****************
  3231 ;; Defined at:
  3232 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\fltol.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  f1              4   43[COMRAM] unsigned char 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  exp1            1   52[COMRAM] unsigned char 
  3237 ;;  sign1           1   51[COMRAM] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  4   43[COMRAM] long 
  3240 ;; Registers used:
  3241 ;;		wreg, status,2, status,0
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3247 ;;      Params:         4       0       0       0       0       0       0       0       0
  3248 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3249 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3250 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3251 ;;Total ram usage:       10 bytes
  3252 ;; Hardware stack levels used: 1
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_readTemp
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text8
  3261   0028EC                     __ptext8:
  3262                           	callstack 0
  3263   0028EC                     ___fltol:
  3264                           	callstack 28
  3265   0028EC  342E               	rlcf	(___fltol@f1+2)^0,w,c
  3266   0028EE  342F               	rlcf	(___fltol@f1+3)^0,w,c
  3267   0028F0  6E35               	movwf	___fltol@exp1^0,c
  3268   0028F2  5035               	movf	___fltol@exp1^0,w,c
  3269   0028F4  A4D8               	btfss	status,2,c
  3270   0028F6  EF7F  F014         	goto	u3691
  3271   0028FA  EF81  F014         	goto	u3690
  3272   0028FE                     u3691:
  3273   0028FE  EF8B  F014         	goto	l4176
  3274   002902                     u3690:
  3275   002902                     l4172:
  3276   002902  0E00               	movlw	0
  3277   002904  6E2C               	movwf	?___fltol^0,c
  3278   002906  0E00               	movlw	0
  3279   002908  6E2D               	movwf	(?___fltol+1)^0,c
  3280   00290A  0E00               	movlw	0
  3281   00290C  6E2E               	movwf	(?___fltol+2)^0,c
  3282   00290E  0E00               	movlw	0
  3283   002910  6E2F               	movwf	(?___fltol+3)^0,c
  3284   002912  EFF8  F014         	goto	l1146
  3285   002916                     l4176:
  3286   002916  C02C  F030         	movff	___fltol@f1,??___fltol
  3287   00291A  C02D  F031         	movff	___fltol@f1+1,??___fltol+1
  3288   00291E  C02E  F032         	movff	___fltol@f1+2,??___fltol+2
  3289   002922  C02F  F033         	movff	___fltol@f1+3,??___fltol+3
  3290   002926  0E20               	movlw	32
  3291   002928  EF9B  F014         	goto	u3700
  3292   00292C                     u3705:
  3293   00292C  90D8               	bcf	status,0,c
  3294   00292E  3233               	rrcf	(??___fltol+3)^0,f,c
  3295   002930  3232               	rrcf	(??___fltol+2)^0,f,c
  3296   002932  3231               	rrcf	(??___fltol+1)^0,f,c
  3297   002934  3230               	rrcf	??___fltol^0,f,c
  3298   002936                     u3700:
  3299   002936  2EE8               	decfsz	wreg,f,c
  3300   002938  EF96  F014         	goto	u3705
  3301   00293C  5030               	movf	??___fltol^0,w,c
  3302   00293E  6E34               	movwf	___fltol@sign1^0,c
  3303   002940  8E2E               	bsf	(___fltol@f1+2)^0,7,c
  3304   002942  0EFF               	movlw	255
  3305   002944  162C               	andwf	___fltol@f1^0,f,c
  3306   002946  0EFF               	movlw	255
  3307   002948  162D               	andwf	(___fltol@f1+1)^0,f,c
  3308   00294A  0EFF               	movlw	255
  3309   00294C  162E               	andwf	(___fltol@f1+2)^0,f,c
  3310   00294E  0E00               	movlw	0
  3311   002950  162F               	andwf	(___fltol@f1+3)^0,f,c
  3312   002952  0E96               	movlw	150
  3313   002954  5E35               	subwf	___fltol@exp1^0,f,c
  3314   002956  BE35               	btfsc	___fltol@exp1^0,7,c
  3315   002958  EFB2  F014         	goto	u3710
  3316   00295C  EFB0  F014         	goto	u3711
  3317   002960                     u3711:
  3318   002960  EFC8  F014         	goto	l4196
  3319   002964                     u3710:
  3320   002964  5035               	movf	___fltol@exp1^0,w,c
  3321   002966  0A80               	xorlw	128
  3322   002968  0F97               	addlw	151
  3323   00296A  B0D8               	btfsc	status,0,c
  3324   00296C  EFBA  F014         	goto	u3721
  3325   002970  EFBC  F014         	goto	u3720
  3326   002974                     u3721:
  3327   002974  EFBE  F014         	goto	l4192
  3328   002978                     u3720:
  3329   002978  EF81  F014         	goto	l4172
  3330   00297C                     l4192:
  3331   00297C  90D8               	bcf	status,0,c
  3332   00297E  322F               	rrcf	(___fltol@f1+3)^0,f,c
  3333   002980  322E               	rrcf	(___fltol@f1+2)^0,f,c
  3334   002982  322D               	rrcf	(___fltol@f1+1)^0,f,c
  3335   002984  322C               	rrcf	___fltol@f1^0,f,c
  3336   002986  3E35               	incfsz	___fltol@exp1^0,f,c
  3337   002988  EFBE  F014         	goto	l4192
  3338   00298C  EFE0  F014         	goto	l4206
  3339   002990                     l4196:
  3340   002990  0E1F               	movlw	31
  3341   002992  6435               	cpfsgt	___fltol@exp1^0,c
  3342   002994  EFCE  F014         	goto	u3731
  3343   002998  EFD0  F014         	goto	u3730
  3344   00299C                     u3731:
  3345   00299C  EFD8  F014         	goto	l4204
  3346   0029A0                     u3730:
  3347   0029A0  EF81  F014         	goto	l4172
  3348   0029A4                     l4202:
  3349   0029A4  90D8               	bcf	status,0,c
  3350   0029A6  362C               	rlcf	___fltol@f1^0,f,c
  3351   0029A8  362D               	rlcf	(___fltol@f1+1)^0,f,c
  3352   0029AA  362E               	rlcf	(___fltol@f1+2)^0,f,c
  3353   0029AC  362F               	rlcf	(___fltol@f1+3)^0,f,c
  3354   0029AE  0635               	decf	___fltol@exp1^0,f,c
  3355   0029B0                     l4204:
  3356   0029B0  5035               	movf	___fltol@exp1^0,w,c
  3357   0029B2  A4D8               	btfss	status,2,c
  3358   0029B4  EFDE  F014         	goto	u3741
  3359   0029B8  EFE0  F014         	goto	u3740
  3360   0029BC                     u3741:
  3361   0029BC  EFD2  F014         	goto	l4202
  3362   0029C0                     u3740:
  3363   0029C0                     l4206:
  3364   0029C0  5034               	movf	___fltol@sign1^0,w,c
  3365   0029C2  B4D8               	btfsc	status,2,c
  3366   0029C4  EFE6  F014         	goto	u3751
  3367   0029C8  EFE8  F014         	goto	u3750
  3368   0029CC                     u3751:
  3369   0029CC  EFF0  F014         	goto	l4210
  3370   0029D0                     u3750:
  3371   0029D0  1E2F               	comf	(___fltol@f1+3)^0,f,c
  3372   0029D2  1E2E               	comf	(___fltol@f1+2)^0,f,c
  3373   0029D4  1E2D               	comf	(___fltol@f1+1)^0,f,c
  3374   0029D6  6C2C               	negf	___fltol@f1^0,c
  3375   0029D8  0E00               	movlw	0
  3376   0029DA  222D               	addwfc	(___fltol@f1+1)^0,f,c
  3377   0029DC  222E               	addwfc	(___fltol@f1+2)^0,f,c
  3378   0029DE  222F               	addwfc	(___fltol@f1+3)^0,f,c
  3379   0029E0                     l4210:
  3380   0029E0  C02C  F02C         	movff	___fltol@f1,?___fltol
  3381   0029E4  C02D  F02D         	movff	___fltol@f1+1,?___fltol+1
  3382   0029E8  C02E  F02E         	movff	___fltol@f1+2,?___fltol+2
  3383   0029EC  C02F  F02F         	movff	___fltol@f1+3,?___fltol+3
  3384   0029F0                     l1146:
  3385   0029F0  0012               	return		;funcret
  3386   0029F2                     __end_of___fltol:
  3387                           	callstack 0
  3388                           
  3389 ;; *************** function ___flmul *****************
  3390 ;; Defined at:
  3391 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcmul.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  b               4   18[COMRAM] long 
  3394 ;;  a               4   22[COMRAM] long 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  prod            4   37[COMRAM] struct .
  3397 ;;  grs             4   31[COMRAM] unsigned long 
  3398 ;;  temp            2   41[COMRAM] struct .
  3399 ;;  bexp            1   36[COMRAM] unsigned char 
  3400 ;;  aexp            1   35[COMRAM] unsigned char 
  3401 ;;  sign            1   30[COMRAM] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  4   18[COMRAM] unsigned char 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, prodl, prodh
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3411 ;;      Params:         8       0       0       0       0       0       0       0       0
  3412 ;;      Locals:        13       0       0       0       0       0       0       0       0
  3413 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3414 ;;      Totals:        25       0       0       0       0       0       0       0       0
  3415 ;;Total ram usage:       25 bytes
  3416 ;; Hardware stack levels used: 1
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_readTemp
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text9
  3425   001806                     __ptext9:
  3426                           	callstack 0
  3427   001806                     ___flmul:
  3428                           	callstack 28
  3429   001806  5016               	movf	(___flmul@b+3)^0,w,c
  3430   001808  0B80               	andlw	128
  3431   00180A  6E1F               	movwf	___flmul@sign^0,c
  3432   00180C  5016               	movf	(___flmul@b+3)^0,w,c
  3433   00180E  2416               	addwf	(___flmul@b+3)^0,w,c
  3434   001810  6E25               	movwf	___flmul@bexp^0,c
  3435   001812  AE15               	btfss	(___flmul@b+2)^0,7,c
  3436   001814  EF0E  F00C         	goto	u3501
  3437   001818  EF10  F00C         	goto	u3500
  3438   00181C                     u3501:
  3439   00181C  EF11  F00C         	goto	l4046
  3440   001820                     u3500:
  3441   001820  8025               	bsf	___flmul@bexp^0,0,c
  3442   001822                     l4046:
  3443   001822  5025               	movf	___flmul@bexp^0,w,c
  3444   001824  B4D8               	btfsc	status,2,c
  3445   001826  EF17  F00C         	goto	u3511
  3446   00182A  EF19  F00C         	goto	u3510
  3447   00182E                     u3511:
  3448   00182E  EF2C  F00C         	goto	l4054
  3449   001832                     u3510:
  3450   001832  2825               	incf	___flmul@bexp^0,w,c
  3451   001834  A4D8               	btfss	status,2,c
  3452   001836  EF1F  F00C         	goto	u3521
  3453   00183A  EF21  F00C         	goto	u3520
  3454   00183E                     u3521:
  3455   00183E  EF29  F00C         	goto	l4052
  3456   001842                     u3520:
  3457   001842  0E00               	movlw	0
  3458   001844  6E13               	movwf	___flmul@b^0,c
  3459   001846  0E00               	movlw	0
  3460   001848  6E14               	movwf	(___flmul@b+1)^0,c
  3461   00184A  0E00               	movlw	0
  3462   00184C  6E15               	movwf	(___flmul@b+2)^0,c
  3463   00184E  0E00               	movlw	0
  3464   001850  6E16               	movwf	(___flmul@b+3)^0,c
  3465   001852                     l4052:
  3466   001852  8E15               	bsf	(___flmul@b+2)^0,7,c
  3467   001854  EF34  F00C         	goto	l4056
  3468   001858                     l4054:
  3469   001858  0E00               	movlw	0
  3470   00185A  6E13               	movwf	___flmul@b^0,c
  3471   00185C  0E00               	movlw	0
  3472   00185E  6E14               	movwf	(___flmul@b+1)^0,c
  3473   001860  0E00               	movlw	0
  3474   001862  6E15               	movwf	(___flmul@b+2)^0,c
  3475   001864  0E00               	movlw	0
  3476   001866  6E16               	movwf	(___flmul@b+3)^0,c
  3477   001868                     l4056:
  3478   001868  501A               	movf	(___flmul@a+3)^0,w,c
  3479   00186A  0B80               	andlw	128
  3480   00186C  1A1F               	xorwf	___flmul@sign^0,f,c
  3481   00186E  501A               	movf	(___flmul@a+3)^0,w,c
  3482   001870  241A               	addwf	(___flmul@a+3)^0,w,c
  3483   001872  6E24               	movwf	___flmul@aexp^0,c
  3484   001874  AE19               	btfss	(___flmul@a+2)^0,7,c
  3485   001876  EF3F  F00C         	goto	u3531
  3486   00187A  EF41  F00C         	goto	u3530
  3487   00187E                     u3531:
  3488   00187E  EF42  F00C         	goto	l4064
  3489   001882                     u3530:
  3490   001882  8024               	bsf	___flmul@aexp^0,0,c
  3491   001884                     l4064:
  3492   001884  5024               	movf	___flmul@aexp^0,w,c
  3493   001886  B4D8               	btfsc	status,2,c
  3494   001888  EF48  F00C         	goto	u3541
  3495   00188C  EF4A  F00C         	goto	u3540
  3496   001890                     u3541:
  3497   001890  EF5D  F00C         	goto	l4072
  3498   001894                     u3540:
  3499   001894  2824               	incf	___flmul@aexp^0,w,c
  3500   001896  A4D8               	btfss	status,2,c
  3501   001898  EF50  F00C         	goto	u3551
  3502   00189C  EF52  F00C         	goto	u3550
  3503   0018A0                     u3551:
  3504   0018A0  EF5A  F00C         	goto	l4070
  3505   0018A4                     u3550:
  3506   0018A4  0E00               	movlw	0
  3507   0018A6  6E17               	movwf	___flmul@a^0,c
  3508   0018A8  0E00               	movlw	0
  3509   0018AA  6E18               	movwf	(___flmul@a+1)^0,c
  3510   0018AC  0E00               	movlw	0
  3511   0018AE  6E19               	movwf	(___flmul@a+2)^0,c
  3512   0018B0  0E00               	movlw	0
  3513   0018B2  6E1A               	movwf	(___flmul@a+3)^0,c
  3514   0018B4                     l4070:
  3515   0018B4  8E19               	bsf	(___flmul@a+2)^0,7,c
  3516   0018B6  EF65  F00C         	goto	l1463
  3517   0018BA                     l4072:
  3518   0018BA  0E00               	movlw	0
  3519   0018BC  6E17               	movwf	___flmul@a^0,c
  3520   0018BE  0E00               	movlw	0
  3521   0018C0  6E18               	movwf	(___flmul@a+1)^0,c
  3522   0018C2  0E00               	movlw	0
  3523   0018C4  6E19               	movwf	(___flmul@a+2)^0,c
  3524   0018C6  0E00               	movlw	0
  3525   0018C8  6E1A               	movwf	(___flmul@a+3)^0,c
  3526   0018CA                     l1463:
  3527   0018CA  5024               	movf	___flmul@aexp^0,w,c
  3528   0018CC  B4D8               	btfsc	status,2,c
  3529   0018CE  EF6B  F00C         	goto	u3561
  3530   0018D2  EF6D  F00C         	goto	u3560
  3531   0018D6                     u3561:
  3532   0018D6  EF75  F00C         	goto	l4076
  3533   0018DA                     u3560:
  3534   0018DA  5025               	movf	___flmul@bexp^0,w,c
  3535   0018DC  A4D8               	btfss	status,2,c
  3536   0018DE  EF73  F00C         	goto	u3571
  3537   0018E2  EF75  F00C         	goto	u3570
  3538   0018E6                     u3571:
  3539   0018E6  EF7F  F00C         	goto	l4080
  3540   0018EA                     u3570:
  3541   0018EA                     l4076:
  3542   0018EA  0E00               	movlw	0
  3543   0018EC  6E13               	movwf	?___flmul^0,c
  3544   0018EE  0E00               	movlw	0
  3545   0018F0  6E14               	movwf	(?___flmul+1)^0,c
  3546   0018F2  0E00               	movlw	0
  3547   0018F4  6E15               	movwf	(?___flmul+2)^0,c
  3548   0018F6  0E00               	movlw	0
  3549   0018F8  6E16               	movwf	(?___flmul+3)^0,c
  3550   0018FA  EF17  F00E         	goto	l1467
  3551   0018FE                     l4080:
  3552   0018FE  5019               	movf	(___flmul@a+2)^0,w,c
  3553   001900  0213               	mulwf	___flmul@b^0,c
  3554   001902  CFF3 F02A          	movff	prodl,___flmul@temp
  3555   001906  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3556   00190A  502A               	movf	___flmul@temp^0,w,c
  3557   00190C  6E20               	movwf	___flmul@grs^0,c
  3558   00190E  6A21               	clrf	(___flmul@grs+1)^0,c
  3559   001910  6A22               	clrf	(___flmul@grs+2)^0,c
  3560   001912  6A23               	clrf	(___flmul@grs+3)^0,c
  3561   001914  502B               	movf	(___flmul@temp+1)^0,w,c
  3562   001916  6E26               	movwf	___flmul@prod^0,c
  3563   001918  6A27               	clrf	(___flmul@prod+1)^0,c
  3564   00191A  6A28               	clrf	(___flmul@prod+2)^0,c
  3565   00191C  6A29               	clrf	(___flmul@prod+3)^0,c
  3566   00191E  5018               	movf	(___flmul@a+1)^0,w,c
  3567   001920  0214               	mulwf	(___flmul@b+1)^0,c
  3568   001922  CFF3 F02A          	movff	prodl,___flmul@temp
  3569   001926  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3570   00192A  502A               	movf	___flmul@temp^0,w,c
  3571   00192C  2620               	addwf	___flmul@grs^0,f,c
  3572   00192E  0E00               	movlw	0
  3573   001930  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3574   001932  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3575   001934  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3576   001936  502B               	movf	(___flmul@temp+1)^0,w,c
  3577   001938  2626               	addwf	___flmul@prod^0,f,c
  3578   00193A  0E00               	movlw	0
  3579   00193C  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3580   00193E  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3581   001940  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3582   001942  5017               	movf	___flmul@a^0,w,c
  3583   001944  0215               	mulwf	(___flmul@b+2)^0,c
  3584   001946  CFF3 F02A          	movff	prodl,___flmul@temp
  3585   00194A  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3586   00194E  502A               	movf	___flmul@temp^0,w,c
  3587   001950  2620               	addwf	___flmul@grs^0,f,c
  3588   001952  0E00               	movlw	0
  3589   001954  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3590   001956  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3591   001958  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3592   00195A  502B               	movf	(___flmul@temp+1)^0,w,c
  3593   00195C  2626               	addwf	___flmul@prod^0,f,c
  3594   00195E  0E00               	movlw	0
  3595   001960  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3596   001962  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3597   001964  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3598   001966  C022  F023         	movff	___flmul@grs+2,___flmul@grs+3
  3599   00196A  C021  F022         	movff	___flmul@grs+1,___flmul@grs+2
  3600   00196E  C020  F021         	movff	___flmul@grs,___flmul@grs+1
  3601   001972  6A20               	clrf	___flmul@grs^0,c
  3602   001974  5017               	movf	___flmul@a^0,w,c
  3603   001976  0214               	mulwf	(___flmul@b+1)^0,c
  3604   001978  CFF3 F02A          	movff	prodl,___flmul@temp
  3605   00197C  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3606   001980  502A               	movf	___flmul@temp^0,w,c
  3607   001982  2620               	addwf	___flmul@grs^0,f,c
  3608   001984  502B               	movf	(___flmul@temp+1)^0,w,c
  3609   001986  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3610   001988  0E00               	movlw	0
  3611   00198A  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3612   00198C  0E00               	movlw	0
  3613   00198E  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3614   001990  5018               	movf	(___flmul@a+1)^0,w,c
  3615   001992  0213               	mulwf	___flmul@b^0,c
  3616   001994  CFF3 F02A          	movff	prodl,___flmul@temp
  3617   001998  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3618   00199C  502A               	movf	___flmul@temp^0,w,c
  3619   00199E  2620               	addwf	___flmul@grs^0,f,c
  3620   0019A0  502B               	movf	(___flmul@temp+1)^0,w,c
  3621   0019A2  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3622   0019A4  0E00               	movlw	0
  3623   0019A6  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3624   0019A8  0E00               	movlw	0
  3625   0019AA  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3626   0019AC  C022  F023         	movff	___flmul@grs+2,___flmul@grs+3
  3627   0019B0  C021  F022         	movff	___flmul@grs+1,___flmul@grs+2
  3628   0019B4  C020  F021         	movff	___flmul@grs,___flmul@grs+1
  3629   0019B8  6A20               	clrf	___flmul@grs^0,c
  3630   0019BA  5017               	movf	___flmul@a^0,w,c
  3631   0019BC  0213               	mulwf	___flmul@b^0,c
  3632   0019BE  CFF3 F02A          	movff	prodl,___flmul@temp
  3633   0019C2  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3634   0019C6  502A               	movf	___flmul@temp^0,w,c
  3635   0019C8  2620               	addwf	___flmul@grs^0,f,c
  3636   0019CA  502B               	movf	(___flmul@temp+1)^0,w,c
  3637   0019CC  2221               	addwfc	(___flmul@grs+1)^0,f,c
  3638   0019CE  0E00               	movlw	0
  3639   0019D0  2222               	addwfc	(___flmul@grs+2)^0,f,c
  3640   0019D2  0E00               	movlw	0
  3641   0019D4  2223               	addwfc	(___flmul@grs+3)^0,f,c
  3642   0019D6  5019               	movf	(___flmul@a+2)^0,w,c
  3643   0019D8  0214               	mulwf	(___flmul@b+1)^0,c
  3644   0019DA  CFF3 F02A          	movff	prodl,___flmul@temp
  3645   0019DE  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3646   0019E2  502A               	movf	___flmul@temp^0,w,c
  3647   0019E4  2626               	addwf	___flmul@prod^0,f,c
  3648   0019E6  502B               	movf	(___flmul@temp+1)^0,w,c
  3649   0019E8  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3650   0019EA  0E00               	movlw	0
  3651   0019EC  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3652   0019EE  0E00               	movlw	0
  3653   0019F0  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3654   0019F2  5018               	movf	(___flmul@a+1)^0,w,c
  3655   0019F4  0215               	mulwf	(___flmul@b+2)^0,c
  3656   0019F6  CFF3 F02A          	movff	prodl,___flmul@temp
  3657   0019FA  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3658   0019FE  502A               	movf	___flmul@temp^0,w,c
  3659   001A00  2626               	addwf	___flmul@prod^0,f,c
  3660   001A02  502B               	movf	(___flmul@temp+1)^0,w,c
  3661   001A04  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3662   001A06  0E00               	movlw	0
  3663   001A08  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3664   001A0A  0E00               	movlw	0
  3665   001A0C  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3666   001A0E  5019               	movf	(___flmul@a+2)^0,w,c
  3667   001A10  0215               	mulwf	(___flmul@b+2)^0,c
  3668   001A12  CFF3 F02A          	movff	prodl,___flmul@temp
  3669   001A16  CFF4 F02B          	movff	prodh,___flmul@temp+1
  3670   001A1A  502A               	movf	___flmul@temp^0,w,c
  3671   001A1C  6E1B               	movwf	??___flmul^0,c
  3672   001A1E  502B               	movf	(___flmul@temp+1)^0,w,c
  3673   001A20  6E1C               	movwf	(??___flmul+1)^0,c
  3674   001A22  6A1D               	clrf	(??___flmul+2)^0,c
  3675   001A24  6A1E               	clrf	(??___flmul+3)^0,c
  3676   001A26  C01D  F01E         	movff	??___flmul+2,??___flmul+3
  3677   001A2A  C01C  F01D         	movff	??___flmul+1,??___flmul+2
  3678   001A2E  C01B  F01C         	movff	??___flmul,??___flmul+1
  3679   001A32  6A1B               	clrf	??___flmul^0,c
  3680   001A34  501B               	movf	??___flmul^0,w,c
  3681   001A36  2626               	addwf	___flmul@prod^0,f,c
  3682   001A38  501C               	movf	(??___flmul+1)^0,w,c
  3683   001A3A  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3684   001A3C  501D               	movf	(??___flmul+2)^0,w,c
  3685   001A3E  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3686   001A40  501E               	movf	(??___flmul+3)^0,w,c
  3687   001A42  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3688   001A44  C020  F01B         	movff	___flmul@grs,??___flmul
  3689   001A48  C021  F01C         	movff	___flmul@grs+1,??___flmul+1
  3690   001A4C  C022  F01D         	movff	___flmul@grs+2,??___flmul+2
  3691   001A50  C023  F01E         	movff	___flmul@grs+3,??___flmul+3
  3692   001A54  0E19               	movlw	25
  3693   001A56  EF32  F00D         	goto	u3580
  3694   001A5A                     u3585:
  3695   001A5A  90D8               	bcf	status,0,c
  3696   001A5C  321E               	rrcf	(??___flmul+3)^0,f,c
  3697   001A5E  321D               	rrcf	(??___flmul+2)^0,f,c
  3698   001A60  321C               	rrcf	(??___flmul+1)^0,f,c
  3699   001A62  321B               	rrcf	??___flmul^0,f,c
  3700   001A64                     u3580:
  3701   001A64  2EE8               	decfsz	wreg,f,c
  3702   001A66  EF2D  F00D         	goto	u3585
  3703   001A6A  501B               	movf	??___flmul^0,w,c
  3704   001A6C  2626               	addwf	___flmul@prod^0,f,c
  3705   001A6E  501C               	movf	(??___flmul+1)^0,w,c
  3706   001A70  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3707   001A72  501D               	movf	(??___flmul+2)^0,w,c
  3708   001A74  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3709   001A76  501E               	movf	(??___flmul+3)^0,w,c
  3710   001A78  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3711   001A7A  C022  F023         	movff	___flmul@grs+2,___flmul@grs+3
  3712   001A7E  C021  F022         	movff	___flmul@grs+1,___flmul@grs+2
  3713   001A82  C020  F021         	movff	___flmul@grs,___flmul@grs+1
  3714   001A86  6A20               	clrf	___flmul@grs^0,c
  3715   001A88  5024               	movf	___flmul@aexp^0,w,c
  3716   001A8A  C025  F01B         	movff	___flmul@bexp,??___flmul
  3717   001A8E  6A1C               	clrf	(??___flmul+1)^0,c
  3718   001A90  261B               	addwf	??___flmul^0,f,c
  3719   001A92  0E00               	movlw	0
  3720   001A94  221C               	addwfc	(??___flmul+1)^0,f,c
  3721   001A96  0E82               	movlw	130
  3722   001A98  241B               	addwf	??___flmul^0,w,c
  3723   001A9A  6E2A               	movwf	___flmul@temp^0,c
  3724   001A9C  0EFF               	movlw	255
  3725   001A9E  201C               	addwfc	(??___flmul+1)^0,w,c
  3726   001AA0  6E2B               	movwf	(___flmul@temp+1)^0,c
  3727   001AA2  EF68  F00D         	goto	l4128
  3728   001AA6                     l4122:
  3729   001AA6  90D8               	bcf	status,0,c
  3730   001AA8  3626               	rlcf	___flmul@prod^0,f,c
  3731   001AAA  3627               	rlcf	(___flmul@prod+1)^0,f,c
  3732   001AAC  3628               	rlcf	(___flmul@prod+2)^0,f,c
  3733   001AAE  3629               	rlcf	(___flmul@prod+3)^0,f,c
  3734   001AB0  AE23               	btfss	(___flmul@grs+3)^0,7,c
  3735   001AB2  EF5D  F00D         	goto	u3591
  3736   001AB6  EF5F  F00D         	goto	u3590
  3737   001ABA                     u3591:
  3738   001ABA  EF60  F00D         	goto	l1470
  3739   001ABE                     u3590:
  3740   001ABE  8026               	bsf	___flmul@prod^0,0,c
  3741   001AC0                     l1470:
  3742   001AC0  90D8               	bcf	status,0,c
  3743   001AC2  3620               	rlcf	___flmul@grs^0,f,c
  3744   001AC4  3621               	rlcf	(___flmul@grs+1)^0,f,c
  3745   001AC6  3622               	rlcf	(___flmul@grs+2)^0,f,c
  3746   001AC8  3623               	rlcf	(___flmul@grs+3)^0,f,c
  3747   001ACA  062A               	decf	___flmul@temp^0,f,c
  3748   001ACC  A0D8               	btfss	status,0,c
  3749   001ACE  062B               	decf	(___flmul@temp+1)^0,f,c
  3750   001AD0                     l4128:
  3751   001AD0  AE28               	btfss	(___flmul@prod+2)^0,7,c
  3752   001AD2  EF6D  F00D         	goto	u3601
  3753   001AD6  EF6F  F00D         	goto	u3600
  3754   001ADA                     u3601:
  3755   001ADA  EF53  F00D         	goto	l4122
  3756   001ADE                     u3600:
  3757   001ADE  0E00               	movlw	0
  3758   001AE0  6E24               	movwf	___flmul@aexp^0,c
  3759   001AE2  AE23               	btfss	(___flmul@grs+3)^0,7,c
  3760   001AE4  EF76  F00D         	goto	u3611
  3761   001AE8  EF78  F00D         	goto	u3610
  3762   001AEC                     u3611:
  3763   001AEC  EF9C  F00D         	goto	l1472
  3764   001AF0                     u3610:
  3765   001AF0  0EFF               	movlw	255
  3766   001AF2  1420               	andwf	___flmul@grs^0,w,c
  3767   001AF4  6E1B               	movwf	??___flmul^0,c
  3768   001AF6  0EFF               	movlw	255
  3769   001AF8  1421               	andwf	(___flmul@grs+1)^0,w,c
  3770   001AFA  6E1C               	movwf	(??___flmul+1)^0,c
  3771   001AFC  0EFF               	movlw	255
  3772   001AFE  1422               	andwf	(___flmul@grs+2)^0,w,c
  3773   001B00  6E1D               	movwf	(??___flmul+2)^0,c
  3774   001B02  0E7F               	movlw	127
  3775   001B04  1423               	andwf	(___flmul@grs+3)^0,w,c
  3776   001B06  6E1E               	movwf	(??___flmul+3)^0,c
  3777   001B08  501B               	movf	??___flmul^0,w,c
  3778   001B0A  101C               	iorwf	(??___flmul+1)^0,w,c
  3779   001B0C  101D               	iorwf	(??___flmul+2)^0,w,c
  3780   001B0E  101E               	iorwf	(??___flmul+3)^0,w,c
  3781   001B10  B4D8               	btfsc	status,2,c
  3782   001B12  EF8D  F00D         	goto	u3621
  3783   001B16  EF8F  F00D         	goto	u3620
  3784   001B1A                     u3621:
  3785   001B1A  EF93  F00D         	goto	l1473
  3786   001B1E                     u3620:
  3787   001B1E                     l4136:
  3788   001B1E  0E01               	movlw	1
  3789   001B20  6E24               	movwf	___flmul@aexp^0,c
  3790   001B22  EF9C  F00D         	goto	l1472
  3791   001B26                     l1473:
  3792   001B26  A026               	btfss	___flmul@prod^0,0,c
  3793   001B28  EF98  F00D         	goto	u3631
  3794   001B2C  EF9A  F00D         	goto	u3630
  3795   001B30                     u3631:
  3796   001B30  EF9C  F00D         	goto	l1472
  3797   001B34                     u3630:
  3798   001B34  EF8F  F00D         	goto	l4136
  3799   001B38                     l1472:
  3800   001B38  5024               	movf	___flmul@aexp^0,w,c
  3801   001B3A  B4D8               	btfsc	status,2,c
  3802   001B3C  EFA2  F00D         	goto	u3641
  3803   001B40  EFA4  F00D         	goto	u3640
  3804   001B44                     u3641:
  3805   001B44  EFC8  F00D         	goto	l4148
  3806   001B48                     u3640:
  3807   001B48  0E01               	movlw	1
  3808   001B4A  2626               	addwf	___flmul@prod^0,f,c
  3809   001B4C  0E00               	movlw	0
  3810   001B4E  2227               	addwfc	(___flmul@prod+1)^0,f,c
  3811   001B50  2228               	addwfc	(___flmul@prod+2)^0,f,c
  3812   001B52  2229               	addwfc	(___flmul@prod+3)^0,f,c
  3813   001B54  A029               	btfss	(___flmul@prod+3)^0,0,c
  3814   001B56  EFAF  F00D         	goto	u3651
  3815   001B5A  EFB1  F00D         	goto	u3650
  3816   001B5E                     u3651:
  3817   001B5E  EFC8  F00D         	goto	l4148
  3818   001B62                     u3650:
  3819   001B62  C026  F01B         	movff	___flmul@prod,??___flmul
  3820   001B66  C027  F01C         	movff	___flmul@prod+1,??___flmul+1
  3821   001B6A  C028  F01D         	movff	___flmul@prod+2,??___flmul+2
  3822   001B6E  C029  F01E         	movff	___flmul@prod+3,??___flmul+3
  3823   001B72  341E               	rlcf	(??___flmul+3)^0,w,c
  3824   001B74  321E               	rrcf	(??___flmul+3)^0,f,c
  3825   001B76  321D               	rrcf	(??___flmul+2)^0,f,c
  3826   001B78  321C               	rrcf	(??___flmul+1)^0,f,c
  3827   001B7A  321B               	rrcf	??___flmul^0,f,c
  3828   001B7C  C01B  F026         	movff	??___flmul,___flmul@prod
  3829   001B80  C01C  F027         	movff	??___flmul+1,___flmul@prod+1
  3830   001B84  C01D  F028         	movff	??___flmul+2,___flmul@prod+2
  3831   001B88  C01E  F029         	movff	??___flmul+3,___flmul@prod+3
  3832   001B8C  4A2A               	infsnz	___flmul@temp^0,f,c
  3833   001B8E  2A2B               	incf	(___flmul@temp+1)^0,f,c
  3834   001B90                     l4148:
  3835   001B90  BE2B               	btfsc	(___flmul@temp+1)^0,7,c
  3836   001B92  EFD3  F00D         	goto	u3661
  3837   001B96  502B               	movf	(___flmul@temp+1)^0,w,c
  3838   001B98  E108               	bnz	u3660
  3839   001B9A  282A               	incf	___flmul@temp^0,w,c
  3840   001B9C  A0D8               	btfss	status,0,c
  3841   001B9E  EFD3  F00D         	goto	u3661
  3842   001BA2  EFD5  F00D         	goto	u3660
  3843   001BA6                     u3661:
  3844   001BA6  EFDF  F00D         	goto	l4152
  3845   001BAA                     u3660:
  3846   001BAA  0E00               	movlw	0
  3847   001BAC  6E26               	movwf	___flmul@prod^0,c
  3848   001BAE  0E00               	movlw	0
  3849   001BB0  6E27               	movwf	(___flmul@prod+1)^0,c
  3850   001BB2  0E80               	movlw	128
  3851   001BB4  6E28               	movwf	(___flmul@prod+2)^0,c
  3852   001BB6  0E7F               	movlw	127
  3853   001BB8  6E29               	movwf	(___flmul@prod+3)^0,c
  3854   001BBA  EF0D  F00E         	goto	l4164
  3855   001BBE                     l4152:
  3856   001BBE  BE2B               	btfsc	(___flmul@temp+1)^0,7,c
  3857   001BC0  EFEC  F00D         	goto	u3670
  3858   001BC4  502B               	movf	(___flmul@temp+1)^0,w,c
  3859   001BC6  E106               	bnz	u3671
  3860   001BC8  042A               	decf	___flmul@temp^0,w,c
  3861   001BCA  B0D8               	btfsc	status,0,c
  3862   001BCC  EFEA  F00D         	goto	u3671
  3863   001BD0  EFEC  F00D         	goto	u3670
  3864   001BD4                     u3671:
  3865   001BD4  EFF8  F00D         	goto	l1480
  3866   001BD8                     u3670:
  3867   001BD8  0E00               	movlw	0
  3868   001BDA  6E26               	movwf	___flmul@prod^0,c
  3869   001BDC  0E00               	movlw	0
  3870   001BDE  6E27               	movwf	(___flmul@prod+1)^0,c
  3871   001BE0  0E00               	movlw	0
  3872   001BE2  6E28               	movwf	(___flmul@prod+2)^0,c
  3873   001BE4  0E00               	movlw	0
  3874   001BE6  6E29               	movwf	(___flmul@prod+3)^0,c
  3875   001BE8  0E00               	movlw	0
  3876   001BEA  6E1F               	movwf	___flmul@sign^0,c
  3877   001BEC  EF0D  F00E         	goto	l4164
  3878   001BF0                     l1480:
  3879   001BF0  C02A  F025         	movff	___flmul@temp,___flmul@bexp
  3880   001BF4  0EFF               	movlw	255
  3881   001BF6  1626               	andwf	___flmul@prod^0,f,c
  3882   001BF8  0EFF               	movlw	255
  3883   001BFA  1627               	andwf	(___flmul@prod+1)^0,f,c
  3884   001BFC  0E7F               	movlw	127
  3885   001BFE  1628               	andwf	(___flmul@prod+2)^0,f,c
  3886   001C00  0E00               	movlw	0
  3887   001C02  1629               	andwf	(___flmul@prod+3)^0,f,c
  3888   001C04  A025               	btfss	___flmul@bexp^0,0,c
  3889   001C06  EF07  F00E         	goto	u3681
  3890   001C0A  EF09  F00E         	goto	u3680
  3891   001C0E                     u3681:
  3892   001C0E  EF0A  F00E         	goto	l4162
  3893   001C12                     u3680:
  3894   001C12  8E28               	bsf	(___flmul@prod+2)^0,7,c
  3895   001C14                     l4162:
  3896   001C14  90D8               	bcf	status,0,c
  3897   001C16  3025               	rrcf	___flmul@bexp^0,w,c
  3898   001C18  6E29               	movwf	(___flmul@prod+3)^0,c
  3899   001C1A                     l4164:
  3900   001C1A  501F               	movf	___flmul@sign^0,w,c
  3901   001C1C  1229               	iorwf	(___flmul@prod+3)^0,f,c
  3902   001C1E  C026  F013         	movff	___flmul@prod,?___flmul
  3903   001C22  C027  F014         	movff	___flmul@prod+1,?___flmul+1
  3904   001C26  C028  F015         	movff	___flmul@prod+2,?___flmul+2
  3905   001C2A  C029  F016         	movff	___flmul@prod+3,?___flmul+3
  3906   001C2E                     l1467:
  3907   001C2E  0012               	return		;funcret
  3908   001C30                     __end_of___flmul:
  3909                           	callstack 0
  3910                           
  3911 ;; *************** function _outputPrint *****************
  3912 ;; Defined at:
  3913 ;;		line 28 in file "output.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  numTela         2   35[COMRAM] int 
  3916 ;;  idioma          2   37[COMRAM] int 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;  d               2   41[COMRAM] int 
  3919 ;;  d               2   39[COMRAM] int 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3929 ;;      Params:         4       0       0       0       0       0       0       0       0
  3930 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3932 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3933 ;;Total ram usage:        8 bytes
  3934 ;; Hardware stack levels used: 1
  3935 ;; Hardware stack levels required when called: 6
  3936 ;; This function calls:
  3937 ;;		_bcd2dec
  3938 ;;		_dsReadData
  3939 ;;		_getAlarmLevel
  3940 ;;		_getLanguage
  3941 ;;		_getTemp
  3942 ;;		_getTime
  3943 ;;		_lcdCommand
  3944 ;;		_lcdData
  3945 ;;		_lcdInt
  3946 ;;		_lcdString
  3947 ;; This function is called by:
  3948 ;;		_smLoop
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text10
  3953   0011F6                     __ptext10:
  3954                           	callstack 0
  3955   0011F6                     _outputPrint:
  3956                           	callstack 23
  3957   0011F6                     
  3958                           ;output.c: 30:     if (numTela == STATE_TEMPO) {
  3959   0011F6  0E02               	movlw	2
  3960   0011F8  1824               	xorwf	outputPrint@numTela^0,w,c
  3961   0011FA  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  3962   0011FC  A4D8               	btfss	status,2,c
  3963   0011FE  EF03  F009         	goto	u3951
  3964   001202  EF05  F009         	goto	u3950
  3965   001206                     u3951:
  3966   001206  EF44  F009         	goto	l4360
  3967   00120A                     u3950:
  3968   00120A                     
  3969                           ;output.c: 31:         lcdCommand(0x80);
  3970   00120A  0E80               	movlw	128
  3971   00120C  EC75  F019         	call	_lcdCommand
  3972   001210                     
  3973                           ;output.c: 32:         lcdString(msgs[numTela][idioma]);
  3974   001210  5024               	movf	outputPrint@numTela^0,w,c
  3975   001212  0D02               	mullw	2
  3976   001214  50F3               	movf	243,w,c
  3977   001216  0FC8               	addlw	low _msgs
  3978   001218  2426               	addwf	outputPrint@idioma^0,w,c
  3979   00121A  6ED9               	movwf	fsr2l,c
  3980   00121C  6ADA               	clrf	fsr2h,c
  3981   00121E  50DF               	movf	indf2,w,c
  3982   001220  6E04               	movwf	lcdString@str^0,c
  3983   001222  EC74  F01A         	call	_lcdString	;wreg free
  3984   001226                     
  3985                           ;output.c: 33:         lcdCommand(0xC0);
  3986   001226  0EC0               	movlw	192
  3987   001228  EC75  F019         	call	_lcdCommand
  3988   00122C                     
  3989                           ;output.c: 35:         lcdData('>');
  3990   00122C  0E3E               	movlw	62
  3991   00122E  ECC0  F01B         	call	_lcdData
  3992   001232                     
  3993                           ;output.c: 36:         lcdInt(getTime(HOU), 2);
  3994   001232  0E02               	movlw	2
  3995   001234  ECEE  F013         	call	_getTime
  3996   001238  C017  F01A         	movff	?_getTime,lcdInt@val
  3997   00123C  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  3998   001240  0E02               	movlw	2
  3999   001242  6E1C               	movwf	lcdInt@digNum^0,c
  4000   001244  EC60  F016         	call	_lcdInt	;wreg free
  4001   001248                     
  4002                           ;output.c: 37:         lcdData(':');
  4003   001248  0E3A               	movlw	58
  4004   00124A  ECC0  F01B         	call	_lcdData
  4005   00124E                     
  4006                           ;output.c: 38:         lcdInt(getTime(0x01), 2);
  4007   00124E  0E01               	movlw	1
  4008   001250  ECEE  F013         	call	_getTime
  4009   001254  C017  F01A         	movff	?_getTime,lcdInt@val
  4010   001258  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4011   00125C  0E02               	movlw	2
  4012   00125E  6E1C               	movwf	lcdInt@digNum^0,c
  4013   001260  EC60  F016         	call	_lcdInt	;wreg free
  4014   001264                     
  4015                           ;output.c: 39:         lcdData(':');
  4016   001264  0E3A               	movlw	58
  4017   001266  ECC0  F01B         	call	_lcdData
  4018   00126A                     
  4019                           ;output.c: 40:         lcdInt(getTime(0x00), 2);
  4020   00126A  0E00               	movlw	0
  4021   00126C  ECEE  F013         	call	_getTime
  4022   001270  C017  F01A         	movff	?_getTime,lcdInt@val
  4023   001274  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4024   001278  0E02               	movlw	2
  4025   00127A  6E1C               	movwf	lcdInt@digNum^0,c
  4026   00127C  EC60  F016         	call	_lcdInt	;wreg free
  4027   001280                     
  4028                           ;output.c: 41:         lcdString("           ");
  4029   001280  0EA3               	movlw	low STR_11
  4030   001282  6E04               	movwf	lcdString@str^0,c
  4031   001284  EC74  F01A         	call	_lcdString	;wreg free
  4032   001288                     l4360:
  4033                           
  4034                           ;output.c: 43:     if (numTela == STATE_TEMPOM) {
  4035   001288  0E03               	movlw	3
  4036   00128A  1824               	xorwf	outputPrint@numTela^0,w,c
  4037   00128C  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4038   00128E  A4D8               	btfss	status,2,c
  4039   001290  EF4C  F009         	goto	u3961
  4040   001294  EF4E  F009         	goto	u3960
  4041   001298                     u3961:
  4042   001298  EF8D  F009         	goto	l4382
  4043   00129C                     u3960:
  4044   00129C                     
  4045                           ;output.c: 44:         lcdCommand(0x80);
  4046   00129C  0E80               	movlw	128
  4047   00129E  EC75  F019         	call	_lcdCommand
  4048   0012A2                     
  4049                           ;output.c: 45:         lcdString(msgs[numTela][idioma]);
  4050   0012A2  5024               	movf	outputPrint@numTela^0,w,c
  4051   0012A4  0D02               	mullw	2
  4052   0012A6  50F3               	movf	243,w,c
  4053   0012A8  0FC8               	addlw	low _msgs
  4054   0012AA  2426               	addwf	outputPrint@idioma^0,w,c
  4055   0012AC  6ED9               	movwf	fsr2l,c
  4056   0012AE  6ADA               	clrf	fsr2h,c
  4057   0012B0  50DF               	movf	indf2,w,c
  4058   0012B2  6E04               	movwf	lcdString@str^0,c
  4059   0012B4  EC74  F01A         	call	_lcdString	;wreg free
  4060   0012B8                     
  4061                           ;output.c: 46:         lcdCommand(0xC0);
  4062   0012B8  0EC0               	movlw	192
  4063   0012BA  EC75  F019         	call	_lcdCommand
  4064   0012BE                     
  4065                           ;output.c: 48:         lcdInt(getTime(HOU), 2);
  4066   0012BE  0E02               	movlw	2
  4067   0012C0  ECEE  F013         	call	_getTime
  4068   0012C4  C017  F01A         	movff	?_getTime,lcdInt@val
  4069   0012C8  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4070   0012CC  0E02               	movlw	2
  4071   0012CE  6E1C               	movwf	lcdInt@digNum^0,c
  4072   0012D0  EC60  F016         	call	_lcdInt	;wreg free
  4073   0012D4                     
  4074                           ;output.c: 49:         lcdData(':');
  4075   0012D4  0E3A               	movlw	58
  4076   0012D6  ECC0  F01B         	call	_lcdData
  4077   0012DA                     
  4078                           ;output.c: 50:         lcdData('>');
  4079   0012DA  0E3E               	movlw	62
  4080   0012DC  ECC0  F01B         	call	_lcdData
  4081   0012E0                     
  4082                           ;output.c: 51:         lcdInt(getTime(0x01), 2);
  4083   0012E0  0E01               	movlw	1
  4084   0012E2  ECEE  F013         	call	_getTime
  4085   0012E6  C017  F01A         	movff	?_getTime,lcdInt@val
  4086   0012EA  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4087   0012EE  0E02               	movlw	2
  4088   0012F0  6E1C               	movwf	lcdInt@digNum^0,c
  4089   0012F2  EC60  F016         	call	_lcdInt	;wreg free
  4090   0012F6                     
  4091                           ;output.c: 52:         lcdData(':');
  4092   0012F6  0E3A               	movlw	58
  4093   0012F8  ECC0  F01B         	call	_lcdData
  4094   0012FC                     
  4095                           ;output.c: 53:         lcdInt(getTime(0x00), 2);
  4096   0012FC  0E00               	movlw	0
  4097   0012FE  ECEE  F013         	call	_getTime
  4098   001302  C017  F01A         	movff	?_getTime,lcdInt@val
  4099   001306  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4100   00130A  0E02               	movlw	2
  4101   00130C  6E1C               	movwf	lcdInt@digNum^0,c
  4102   00130E  EC60  F016         	call	_lcdInt	;wreg free
  4103   001312                     
  4104                           ;output.c: 54:         lcdString("           ");
  4105   001312  0EA3               	movlw	low STR_11
  4106   001314  6E04               	movwf	lcdString@str^0,c
  4107   001316  EC74  F01A         	call	_lcdString	;wreg free
  4108   00131A                     l4382:
  4109                           
  4110                           ;output.c: 57:     if (numTela == STATE_TEMPOD) {
  4111   00131A  0E04               	movlw	4
  4112   00131C  1824               	xorwf	outputPrint@numTela^0,w,c
  4113   00131E  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4114   001320  A4D8               	btfss	status,2,c
  4115   001322  EF95  F009         	goto	u3971
  4116   001326  EF97  F009         	goto	u3970
  4117   00132A                     u3971:
  4118   00132A  EF04  F00A         	goto	l4408
  4119   00132E                     u3970:
  4120   00132E                     
  4121                           ;output.c: 58:         lcdCommand(0x80);
  4122   00132E  0E80               	movlw	128
  4123   001330  EC75  F019         	call	_lcdCommand
  4124   001334                     
  4125                           ;output.c: 59:         lcdString(msgs[3][idioma]);
  4126   001334  5026               	movf	outputPrint@idioma^0,w,c
  4127   001336  0FCE               	addlw	low (_msgs+6)
  4128   001338  6ED9               	movwf	fsr2l,c
  4129   00133A  6ADA               	clrf	fsr2h,c
  4130   00133C  50DF               	movf	indf2,w,c
  4131   00133E  6E04               	movwf	lcdString@str^0,c
  4132   001340  EC74  F01A         	call	_lcdString	;wreg free
  4133   001344                     
  4134                           ;output.c: 60:         lcdCommand(0xC0);
  4135   001344  0EC0               	movlw	192
  4136   001346  EC75  F019         	call	_lcdCommand
  4137   00134A                     
  4138                           ;output.c: 62:         lcdData('>');
  4139   00134A  0E3E               	movlw	62
  4140   00134C  ECC0  F01B         	call	_lcdData
  4141   001350                     
  4142                           ;output.c: 63:         int d = (bcd2dec(dsReadData(0x04)& 0xff));
  4143   001350  0E00               	movlw	0
  4144   001352  6E0F               	movwf	(dsReadData@address+1)^0,c
  4145   001354  0E04               	movlw	4
  4146   001356  6E0E               	movwf	dsReadData@address^0,c
  4147   001358  EC99  F019         	call	_dsReadData	;wreg free
  4148   00135C  500E               	movf	?_dsReadData^0,w,c
  4149   00135E  6E13               	movwf	bcd2dec@value^0,c
  4150   001360  6A14               	clrf	(bcd2dec@value+1)^0,c
  4151   001362  EC00  F01A         	call	_bcd2dec	;wreg free
  4152   001366  C013  F028         	movff	?_bcd2dec,outputPrint@d
  4153   00136A  C014  F029         	movff	?_bcd2dec+1,outputPrint@d+1
  4154   00136E                     
  4155                           ;output.c: 64:         if (d == 0)
  4156   00136E  5028               	movf	outputPrint@d^0,w,c
  4157   001370  1029               	iorwf	(outputPrint@d+1)^0,w,c
  4158   001372  A4D8               	btfss	status,2,c
  4159   001374  EFBE  F009         	goto	u3981
  4160   001378  EFC0  F009         	goto	u3980
  4161   00137C                     u3981:
  4162   00137C  EFCC  F009         	goto	l4398
  4163   001380                     u3980:
  4164   001380                     
  4165                           ;output.c: 65:             lcdInt(d + 1, 2);
  4166   001380  0E01               	movlw	1
  4167   001382  2428               	addwf	outputPrint@d^0,w,c
  4168   001384  6E1A               	movwf	lcdInt@val^0,c
  4169   001386  0E00               	movlw	0
  4170   001388  2029               	addwfc	(outputPrint@d+1)^0,w,c
  4171   00138A  6E1B               	movwf	(lcdInt@val+1)^0,c
  4172   00138C  0E02               	movlw	2
  4173   00138E  6E1C               	movwf	lcdInt@digNum^0,c
  4174   001390  EC60  F016         	call	_lcdInt	;wreg free
  4175   001394  EFD4  F009         	goto	l4400
  4176   001398                     l4398:
  4177                           
  4178                           ;output.c: 67:             lcdInt(d, 2);
  4179   001398  C028  F01A         	movff	outputPrint@d,lcdInt@val
  4180   00139C  C029  F01B         	movff	outputPrint@d+1,lcdInt@val+1
  4181   0013A0  0E02               	movlw	2
  4182   0013A2  6E1C               	movwf	lcdInt@digNum^0,c
  4183   0013A4  EC60  F016         	call	_lcdInt	;wreg free
  4184   0013A8                     l4400:
  4185                           
  4186                           ;output.c: 68:         lcdData('/');
  4187   0013A8  0E2F               	movlw	47
  4188   0013AA  ECC0  F01B         	call	_lcdData
  4189   0013AE                     
  4190                           ;output.c: 70:         lcdInt((bcd2dec(dsReadData(0x05)& 0xff)), 2);
  4191   0013AE  0E00               	movlw	0
  4192   0013B0  6E0F               	movwf	(dsReadData@address+1)^0,c
  4193   0013B2  0E05               	movlw	5
  4194   0013B4  6E0E               	movwf	dsReadData@address^0,c
  4195   0013B6  EC99  F019         	call	_dsReadData	;wreg free
  4196   0013BA  500E               	movf	?_dsReadData^0,w,c
  4197   0013BC  6E13               	movwf	bcd2dec@value^0,c
  4198   0013BE  6A14               	clrf	(bcd2dec@value+1)^0,c
  4199   0013C0  EC00  F01A         	call	_bcd2dec	;wreg free
  4200   0013C4  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4201   0013C8  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4202   0013CC  0E02               	movlw	2
  4203   0013CE  6E1C               	movwf	lcdInt@digNum^0,c
  4204   0013D0  EC60  F016         	call	_lcdInt	;wreg free
  4205                           
  4206                           ;output.c: 71:         lcdData('/');
  4207   0013D4  0E2F               	movlw	47
  4208   0013D6  ECC0  F01B         	call	_lcdData
  4209   0013DA                     
  4210                           ;output.c: 72:         lcdInt((bcd2dec(dsReadData(0x06)& 0xff)), 2);
  4211   0013DA  0E00               	movlw	0
  4212   0013DC  6E0F               	movwf	(dsReadData@address+1)^0,c
  4213   0013DE  0E06               	movlw	6
  4214   0013E0  6E0E               	movwf	dsReadData@address^0,c
  4215   0013E2  EC99  F019         	call	_dsReadData	;wreg free
  4216   0013E6  500E               	movf	?_dsReadData^0,w,c
  4217   0013E8  6E13               	movwf	bcd2dec@value^0,c
  4218   0013EA  6A14               	clrf	(bcd2dec@value+1)^0,c
  4219   0013EC  EC00  F01A         	call	_bcd2dec	;wreg free
  4220   0013F0  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4221   0013F4  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4222   0013F8  0E02               	movlw	2
  4223   0013FA  6E1C               	movwf	lcdInt@digNum^0,c
  4224   0013FC  EC60  F016         	call	_lcdInt	;wreg free
  4225   001400                     
  4226                           ;output.c: 73:         lcdString("           ");
  4227   001400  0EA3               	movlw	low STR_11
  4228   001402  6E04               	movwf	lcdString@str^0,c
  4229   001404  EC74  F01A         	call	_lcdString	;wreg free
  4230   001408                     l4408:
  4231                           
  4232                           ;output.c: 76:     if (numTela == STATE_TEMPOMO) {
  4233   001408  0E05               	movlw	5
  4234   00140A  1824               	xorwf	outputPrint@numTela^0,w,c
  4235   00140C  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4236   00140E  A4D8               	btfss	status,2,c
  4237   001410  EF0C  F00A         	goto	u3991
  4238   001414  EF0E  F00A         	goto	u3990
  4239   001418                     u3991:
  4240   001418  EF62  F00A         	goto	l4430
  4241   00141C                     u3990:
  4242   00141C                     
  4243                           ;output.c: 77:         lcdCommand(0x80);
  4244   00141C  0E80               	movlw	128
  4245   00141E  EC75  F019         	call	_lcdCommand
  4246   001422                     
  4247                           ;output.c: 78:         lcdString(msgs[3][idioma]);
  4248   001422  5026               	movf	outputPrint@idioma^0,w,c
  4249   001424  0FCE               	addlw	low (_msgs+6)
  4250   001426  6ED9               	movwf	fsr2l,c
  4251   001428  6ADA               	clrf	fsr2h,c
  4252   00142A  50DF               	movf	indf2,w,c
  4253   00142C  6E04               	movwf	lcdString@str^0,c
  4254   00142E  EC74  F01A         	call	_lcdString	;wreg free
  4255   001432                     
  4256                           ;output.c: 79:         lcdCommand(0xC0);
  4257   001432  0EC0               	movlw	192
  4258   001434  EC75  F019         	call	_lcdCommand
  4259   001438                     
  4260                           ;output.c: 81:         lcdInt((bcd2dec(dsReadData(0x04)& 0xff)), 2);
  4261   001438  0E00               	movlw	0
  4262   00143A  6E0F               	movwf	(dsReadData@address+1)^0,c
  4263   00143C  0E04               	movlw	4
  4264   00143E  6E0E               	movwf	dsReadData@address^0,c
  4265   001440  EC99  F019         	call	_dsReadData	;wreg free
  4266   001444  500E               	movf	?_dsReadData^0,w,c
  4267   001446  6E13               	movwf	bcd2dec@value^0,c
  4268   001448  6A14               	clrf	(bcd2dec@value+1)^0,c
  4269   00144A  EC00  F01A         	call	_bcd2dec	;wreg free
  4270   00144E  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4271   001452  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4272   001456  0E02               	movlw	2
  4273   001458  6E1C               	movwf	lcdInt@digNum^0,c
  4274   00145A  EC60  F016         	call	_lcdInt	;wreg free
  4275   00145E                     
  4276                           ;output.c: 82:         lcdData('/');
  4277   00145E  0E2F               	movlw	47
  4278   001460  ECC0  F01B         	call	_lcdData
  4279   001464                     
  4280                           ;output.c: 84:         lcdData('>');
  4281   001464  0E3E               	movlw	62
  4282   001466  ECC0  F01B         	call	_lcdData
  4283   00146A                     
  4284                           ;output.c: 85:         lcdInt((bcd2dec(dsReadData(0x05)& 0xff)), 2);
  4285   00146A  0E00               	movlw	0
  4286   00146C  6E0F               	movwf	(dsReadData@address+1)^0,c
  4287   00146E  0E05               	movlw	5
  4288   001470  6E0E               	movwf	dsReadData@address^0,c
  4289   001472  EC99  F019         	call	_dsReadData	;wreg free
  4290   001476  500E               	movf	?_dsReadData^0,w,c
  4291   001478  6E13               	movwf	bcd2dec@value^0,c
  4292   00147A  6A14               	clrf	(bcd2dec@value+1)^0,c
  4293   00147C  EC00  F01A         	call	_bcd2dec	;wreg free
  4294   001480  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4295   001484  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4296   001488  0E02               	movlw	2
  4297   00148A  6E1C               	movwf	lcdInt@digNum^0,c
  4298   00148C  EC60  F016         	call	_lcdInt	;wreg free
  4299   001490                     
  4300                           ;output.c: 86:         lcdData('/');
  4301   001490  0E2F               	movlw	47
  4302   001492  ECC0  F01B         	call	_lcdData
  4303   001496                     
  4304                           ;output.c: 87:         lcdInt((bcd2dec(dsReadData(0x06)& 0xff)), 2);
  4305   001496  0E00               	movlw	0
  4306   001498  6E0F               	movwf	(dsReadData@address+1)^0,c
  4307   00149A  0E06               	movlw	6
  4308   00149C  6E0E               	movwf	dsReadData@address^0,c
  4309   00149E  EC99  F019         	call	_dsReadData	;wreg free
  4310   0014A2  500E               	movf	?_dsReadData^0,w,c
  4311   0014A4  6E13               	movwf	bcd2dec@value^0,c
  4312   0014A6  6A14               	clrf	(bcd2dec@value+1)^0,c
  4313   0014A8  EC00  F01A         	call	_bcd2dec	;wreg free
  4314   0014AC  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4315   0014B0  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4316   0014B4  0E02               	movlw	2
  4317   0014B6  6E1C               	movwf	lcdInt@digNum^0,c
  4318   0014B8  EC60  F016         	call	_lcdInt	;wreg free
  4319   0014BC                     
  4320                           ;output.c: 88:         lcdString("           ");
  4321   0014BC  0EA3               	movlw	low STR_11
  4322   0014BE  6E04               	movwf	lcdString@str^0,c
  4323   0014C0  EC74  F01A         	call	_lcdString	;wreg free
  4324   0014C4                     l4430:
  4325                           
  4326                           ;output.c: 91:     if (numTela == STATE_ALARMEL) {
  4327   0014C4  5024               	movf	outputPrint@numTela^0,w,c
  4328   0014C6  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4329   0014C8  A4D8               	btfss	status,2,c
  4330   0014CA  EF69  F00A         	goto	u4001
  4331   0014CE  EF6B  F00A         	goto	u4000
  4332   0014D2                     u4001:
  4333   0014D2  EFAC  F00A         	goto	l4454
  4334   0014D6                     u4000:
  4335   0014D6                     
  4336                           ;output.c: 92:         lcdCommand(0x80);
  4337   0014D6  0E80               	movlw	128
  4338   0014D8  EC75  F019         	call	_lcdCommand
  4339   0014DC                     
  4340                           ;output.c: 93:         lcdString(msgs[numTela][idioma]);
  4341   0014DC  5024               	movf	outputPrint@numTela^0,w,c
  4342   0014DE  0D02               	mullw	2
  4343   0014E0  50F3               	movf	243,w,c
  4344   0014E2  0FC8               	addlw	low _msgs
  4345   0014E4  2426               	addwf	outputPrint@idioma^0,w,c
  4346   0014E6  6ED9               	movwf	fsr2l,c
  4347   0014E8  6ADA               	clrf	fsr2h,c
  4348   0014EA  50DF               	movf	indf2,w,c
  4349   0014EC  6E04               	movwf	lcdString@str^0,c
  4350   0014EE  EC74  F01A         	call	_lcdString	;wreg free
  4351   0014F2                     
  4352                           ;output.c: 94:         lcdCommand(0xC0);
  4353   0014F2  0EC0               	movlw	192
  4354   0014F4  EC75  F019         	call	_lcdCommand
  4355   0014F8                     
  4356                           ;output.c: 95:         lcdData('>');
  4357   0014F8  0E3E               	movlw	62
  4358   0014FA  ECC0  F01B         	call	_lcdData
  4359   0014FE                     
  4360                           ;output.c: 96:         lcdInt(getAlarmLevel(0), 3);
  4361   0014FE  0E00               	movlw	0
  4362   001500  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4363   001502  0E00               	movlw	0
  4364   001504  6E01               	movwf	getAlarmLevel@lh^0,c
  4365   001506  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  4366   00150A  C001  F01A         	movff	?_getAlarmLevel,lcdInt@val
  4367   00150E  C002  F01B         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4368   001512  0E03               	movlw	3
  4369   001514  6E1C               	movwf	lcdInt@digNum^0,c
  4370   001516  EC60  F016         	call	_lcdInt	;wreg free
  4371   00151A                     
  4372                           ;output.c: 97:         lcdData('L');
  4373   00151A  0E4C               	movlw	76
  4374   00151C  ECC0  F01B         	call	_lcdData
  4375   001520                     
  4376                           ;output.c: 98:         lcdString("   ");
  4377   001520  0EAB               	movlw	low (STR_11+8)
  4378   001522  6E04               	movwf	lcdString@str^0,c
  4379   001524  EC74  F01A         	call	_lcdString	;wreg free
  4380   001528                     
  4381                           ;output.c: 99:         lcdData(' ');
  4382   001528  0E20               	movlw	32
  4383   00152A  ECC0  F01B         	call	_lcdData
  4384   00152E                     
  4385                           ;output.c: 100:         lcdInt(getAlarmLevel(1), 3);
  4386   00152E  0E00               	movlw	0
  4387   001530  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4388   001532  0E01               	movlw	1
  4389   001534  6E01               	movwf	getAlarmLevel@lh^0,c
  4390   001536  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  4391   00153A  C001  F01A         	movff	?_getAlarmLevel,lcdInt@val
  4392   00153E  C002  F01B         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4393   001542  0E03               	movlw	3
  4394   001544  6E1C               	movwf	lcdInt@digNum^0,c
  4395   001546  EC60  F016         	call	_lcdInt	;wreg free
  4396   00154A                     
  4397                           ;output.c: 101:         lcdData('H');
  4398   00154A  0E48               	movlw	72
  4399   00154C  ECC0  F01B         	call	_lcdData
  4400   001550                     
  4401                           ;output.c: 103:         lcdString("           ");
  4402   001550  0EA3               	movlw	low STR_11
  4403   001552  6E04               	movwf	lcdString@str^0,c
  4404   001554  EC74  F01A         	call	_lcdString	;wreg free
  4405   001558                     l4454:
  4406                           
  4407                           ;output.c: 105:     if (numTela == STATE_ALARMEH) {
  4408   001558  0424               	decf	outputPrint@numTela^0,w,c
  4409   00155A  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4410   00155C  A4D8               	btfss	status,2,c
  4411   00155E  EFB3  F00A         	goto	u4011
  4412   001562  EFB5  F00A         	goto	u4010
  4413   001566                     u4011:
  4414   001566  EFF6  F00A         	goto	l4478
  4415   00156A                     u4010:
  4416   00156A                     
  4417                           ;output.c: 106:         lcdCommand(0x80);
  4418   00156A  0E80               	movlw	128
  4419   00156C  EC75  F019         	call	_lcdCommand
  4420   001570                     
  4421                           ;output.c: 107:         lcdString(msgs[numTela][idioma]);
  4422   001570  5024               	movf	outputPrint@numTela^0,w,c
  4423   001572  0D02               	mullw	2
  4424   001574  50F3               	movf	243,w,c
  4425   001576  0FC8               	addlw	low _msgs
  4426   001578  2426               	addwf	outputPrint@idioma^0,w,c
  4427   00157A  6ED9               	movwf	fsr2l,c
  4428   00157C  6ADA               	clrf	fsr2h,c
  4429   00157E  50DF               	movf	indf2,w,c
  4430   001580  6E04               	movwf	lcdString@str^0,c
  4431   001582  EC74  F01A         	call	_lcdString	;wreg free
  4432   001586                     
  4433                           ;output.c: 108:         lcdCommand(0xC0);
  4434   001586  0EC0               	movlw	192
  4435   001588  EC75  F019         	call	_lcdCommand
  4436   00158C                     
  4437                           ;output.c: 109:         lcdData(' ');
  4438   00158C  0E20               	movlw	32
  4439   00158E  ECC0  F01B         	call	_lcdData
  4440   001592                     
  4441                           ;output.c: 110:         lcdInt(getAlarmLevel(0), 3);
  4442   001592  0E00               	movlw	0
  4443   001594  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4444   001596  0E00               	movlw	0
  4445   001598  6E01               	movwf	getAlarmLevel@lh^0,c
  4446   00159A  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  4447   00159E  C001  F01A         	movff	?_getAlarmLevel,lcdInt@val
  4448   0015A2  C002  F01B         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4449   0015A6  0E03               	movlw	3
  4450   0015A8  6E1C               	movwf	lcdInt@digNum^0,c
  4451   0015AA  EC60  F016         	call	_lcdInt	;wreg free
  4452   0015AE                     
  4453                           ;output.c: 111:         lcdData('L');
  4454   0015AE  0E4C               	movlw	76
  4455   0015B0  ECC0  F01B         	call	_lcdData
  4456   0015B4                     
  4457                           ;output.c: 112:         lcdString("   ");
  4458   0015B4  0EAB               	movlw	low (STR_11+8)
  4459   0015B6  6E04               	movwf	lcdString@str^0,c
  4460   0015B8  EC74  F01A         	call	_lcdString	;wreg free
  4461   0015BC                     
  4462                           ;output.c: 113:         lcdData('>');
  4463   0015BC  0E3E               	movlw	62
  4464   0015BE  ECC0  F01B         	call	_lcdData
  4465   0015C2                     
  4466                           ;output.c: 114:         lcdInt(getAlarmLevel(1), 3);
  4467   0015C2  0E00               	movlw	0
  4468   0015C4  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4469   0015C6  0E01               	movlw	1
  4470   0015C8  6E01               	movwf	getAlarmLevel@lh^0,c
  4471   0015CA  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  4472   0015CE  C001  F01A         	movff	?_getAlarmLevel,lcdInt@val
  4473   0015D2  C002  F01B         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4474   0015D6  0E03               	movlw	3
  4475   0015D8  6E1C               	movwf	lcdInt@digNum^0,c
  4476   0015DA  EC60  F016         	call	_lcdInt	;wreg free
  4477   0015DE                     
  4478                           ;output.c: 115:         lcdData('H');
  4479   0015DE  0E48               	movlw	72
  4480   0015E0  ECC0  F01B         	call	_lcdData
  4481   0015E4                     
  4482                           ;output.c: 116:         lcdString("           ");
  4483   0015E4  0EA3               	movlw	low STR_11
  4484   0015E6  6E04               	movwf	lcdString@str^0,c
  4485   0015E8  EC74  F01A         	call	_lcdString	;wreg free
  4486   0015EC                     l4478:
  4487                           
  4488                           ;output.c: 118:     if (numTela == STATE_IDIOMA) {
  4489   0015EC  0E07               	movlw	7
  4490   0015EE  1824               	xorwf	outputPrint@numTela^0,w,c
  4491   0015F0  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4492   0015F2  A4D8               	btfss	status,2,c
  4493   0015F4  EFFE  F00A         	goto	u4021
  4494   0015F8  EF00  F00B         	goto	u4020
  4495   0015FC                     u4021:
  4496   0015FC  EF2A  F00B         	goto	l4494
  4497   001600                     u4020:
  4498   001600                     
  4499                           ;output.c: 119:         lcdCommand(0x80);
  4500   001600  0E80               	movlw	128
  4501   001602  EC75  F019         	call	_lcdCommand
  4502   001606                     
  4503                           ;output.c: 120:         lcdString(msgs[4][idioma]);
  4504   001606  5026               	movf	outputPrint@idioma^0,w,c
  4505   001608  0FD0               	addlw	low (_msgs+8)
  4506   00160A  6ED9               	movwf	fsr2l,c
  4507   00160C  6ADA               	clrf	fsr2h,c
  4508   00160E  50DF               	movf	indf2,w,c
  4509   001610  6E04               	movwf	lcdString@str^0,c
  4510   001612  EC74  F01A         	call	_lcdString	;wreg free
  4511   001616                     
  4512                           ;output.c: 121:         lcdCommand(0xC0);
  4513   001616  0EC0               	movlw	192
  4514   001618  EC75  F019         	call	_lcdCommand
  4515   00161C                     
  4516                           ;output.c: 122:         if (getLanguage() == 0) {
  4517   00161C  EC46  F01C         	call	_getLanguage	;wreg free
  4518   001620  0900               	iorlw	0
  4519   001622  A4D8               	btfss	status,2,c
  4520   001624  EF16  F00B         	goto	u4031
  4521   001628  EF18  F00B         	goto	u4030
  4522   00162C                     u4031:
  4523   00162C  EF1C  F00B         	goto	l4490
  4524   001630                     u4030:
  4525   001630                     
  4526                           ;output.c: 123:             lcdString("Portugues       ");
  4527   001630  0E22               	movlw	low STR_19
  4528   001632  6E04               	movwf	lcdString@str^0,c
  4529   001634  EC74  F01A         	call	_lcdString	;wreg free
  4530   001638                     l4490:
  4531                           
  4532                           ;output.c: 125:         if (getLanguage() == 1) {
  4533   001638  EC46  F01C         	call	_getLanguage	;wreg free
  4534   00163C  06E8               	decf	wreg,f,c
  4535   00163E  A4D8               	btfss	status,2,c
  4536   001640  EF24  F00B         	goto	u4041
  4537   001644  EF26  F00B         	goto	u4040
  4538   001648                     u4041:
  4539   001648  EF2A  F00B         	goto	l4494
  4540   00164C                     u4040:
  4541   00164C                     
  4542                           ;output.c: 126:             lcdString("English         ");
  4543   00164C  0E11               	movlw	low STR_20
  4544   00164E  6E04               	movwf	lcdString@str^0,c
  4545   001650  EC74  F01A         	call	_lcdString	;wreg free
  4546   001654                     l4494:
  4547                           
  4548                           ;output.c: 131:     if (numTela == STATE_MAIN) {
  4549   001654  0E08               	movlw	8
  4550   001656  1824               	xorwf	outputPrint@numTela^0,w,c
  4551   001658  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4552   00165A  A4D8               	btfss	status,2,c
  4553   00165C  EF32  F00B         	goto	u4051
  4554   001660  EF34  F00B         	goto	u4050
  4555   001664                     u4051:
  4556   001664  EFEA  F00B         	goto	l4532
  4557   001668                     u4050:
  4558   001668                     
  4559                           ;output.c: 132:         lcdCommand(0x80);
  4560   001668  0E80               	movlw	128
  4561   00166A  EC75  F019         	call	_lcdCommand
  4562   00166E                     
  4563                           ;output.c: 133:         lcdInt(getTime(HOU), 2);
  4564   00166E  0E02               	movlw	2
  4565   001670  ECEE  F013         	call	_getTime
  4566   001674  C017  F01A         	movff	?_getTime,lcdInt@val
  4567   001678  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4568   00167C  0E02               	movlw	2
  4569   00167E  6E1C               	movwf	lcdInt@digNum^0,c
  4570   001680  EC60  F016         	call	_lcdInt	;wreg free
  4571   001684                     
  4572                           ;output.c: 134:         lcdData(':');
  4573   001684  0E3A               	movlw	58
  4574   001686  ECC0  F01B         	call	_lcdData
  4575                           
  4576                           ;output.c: 135:         lcdInt(getTime(0x01), 2);
  4577   00168A  0E01               	movlw	1
  4578   00168C  ECEE  F013         	call	_getTime
  4579   001690  C017  F01A         	movff	?_getTime,lcdInt@val
  4580   001694  C018  F01B         	movff	?_getTime+1,lcdInt@val+1
  4581   001698  0E02               	movlw	2
  4582   00169A  6E1C               	movwf	lcdInt@digNum^0,c
  4583   00169C  EC60  F016         	call	_lcdInt	;wreg free
  4584   0016A0                     
  4585                           ;output.c: 138:         lcdString("   ");
  4586   0016A0  0EAB               	movlw	low (STR_11+8)
  4587   0016A2  6E04               	movwf	lcdString@str^0,c
  4588   0016A4  EC74  F01A         	call	_lcdString	;wreg free
  4589   0016A8                     
  4590                           ;output.c: 139:         int d = (bcd2dec(dsReadData(0x04)& 0xff));
  4591   0016A8  0E00               	movlw	0
  4592   0016AA  6E0F               	movwf	(dsReadData@address+1)^0,c
  4593   0016AC  0E04               	movlw	4
  4594   0016AE  6E0E               	movwf	dsReadData@address^0,c
  4595   0016B0  EC99  F019         	call	_dsReadData	;wreg free
  4596   0016B4  500E               	movf	?_dsReadData^0,w,c
  4597   0016B6  6E13               	movwf	bcd2dec@value^0,c
  4598   0016B8  6A14               	clrf	(bcd2dec@value+1)^0,c
  4599   0016BA  EC00  F01A         	call	_bcd2dec	;wreg free
  4600   0016BE  C013  F02A         	movff	?_bcd2dec,outputPrint@d_461
  4601   0016C2  C014  F02B         	movff	?_bcd2dec+1,outputPrint@d_461+1
  4602   0016C6                     
  4603                           ;output.c: 140:         if (d == 0)
  4604   0016C6  502A               	movf	outputPrint@d_461^0,w,c
  4605   0016C8  102B               	iorwf	(outputPrint@d_461+1)^0,w,c
  4606   0016CA  A4D8               	btfss	status,2,c
  4607   0016CC  EF6A  F00B         	goto	u4061
  4608   0016D0  EF6C  F00B         	goto	u4060
  4609   0016D4                     u4061:
  4610   0016D4  EF78  F00B         	goto	l4510
  4611   0016D8                     u4060:
  4612   0016D8                     
  4613                           ;output.c: 141:             lcdInt(d + 1, 2);
  4614   0016D8  0E01               	movlw	1
  4615   0016DA  242A               	addwf	outputPrint@d_461^0,w,c
  4616   0016DC  6E1A               	movwf	lcdInt@val^0,c
  4617   0016DE  0E00               	movlw	0
  4618   0016E0  202B               	addwfc	(outputPrint@d_461+1)^0,w,c
  4619   0016E2  6E1B               	movwf	(lcdInt@val+1)^0,c
  4620   0016E4  0E02               	movlw	2
  4621   0016E6  6E1C               	movwf	lcdInt@digNum^0,c
  4622   0016E8  EC60  F016         	call	_lcdInt	;wreg free
  4623   0016EC  EF80  F00B         	goto	l4512
  4624   0016F0                     l4510:
  4625                           
  4626                           ;output.c: 143:             lcdInt(d, 2);
  4627   0016F0  C02A  F01A         	movff	outputPrint@d_461,lcdInt@val
  4628   0016F4  C02B  F01B         	movff	outputPrint@d_461+1,lcdInt@val+1
  4629   0016F8  0E02               	movlw	2
  4630   0016FA  6E1C               	movwf	lcdInt@digNum^0,c
  4631   0016FC  EC60  F016         	call	_lcdInt	;wreg free
  4632   001700                     l4512:
  4633                           
  4634                           ;output.c: 144:         lcdData('/');
  4635   001700  0E2F               	movlw	47
  4636   001702  ECC0  F01B         	call	_lcdData
  4637   001706                     
  4638                           ;output.c: 145:         lcdInt((bcd2dec(dsReadData(0x05)& 0xff)), 2);
  4639   001706  0E00               	movlw	0
  4640   001708  6E0F               	movwf	(dsReadData@address+1)^0,c
  4641   00170A  0E05               	movlw	5
  4642   00170C  6E0E               	movwf	dsReadData@address^0,c
  4643   00170E  EC99  F019         	call	_dsReadData	;wreg free
  4644   001712  500E               	movf	?_dsReadData^0,w,c
  4645   001714  6E13               	movwf	bcd2dec@value^0,c
  4646   001716  6A14               	clrf	(bcd2dec@value+1)^0,c
  4647   001718  EC00  F01A         	call	_bcd2dec	;wreg free
  4648   00171C  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4649   001720  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4650   001724  0E02               	movlw	2
  4651   001726  6E1C               	movwf	lcdInt@digNum^0,c
  4652   001728  EC60  F016         	call	_lcdInt	;wreg free
  4653                           
  4654                           ;output.c: 146:         lcdData('/');
  4655   00172C  0E2F               	movlw	47
  4656   00172E  ECC0  F01B         	call	_lcdData
  4657   001732                     
  4658                           ;output.c: 147:         lcdInt((bcd2dec(dsReadData(0x06)& 0xff)), 2);
  4659   001732  0E00               	movlw	0
  4660   001734  6E0F               	movwf	(dsReadData@address+1)^0,c
  4661   001736  0E06               	movlw	6
  4662   001738  6E0E               	movwf	dsReadData@address^0,c
  4663   00173A  EC99  F019         	call	_dsReadData	;wreg free
  4664   00173E  500E               	movf	?_dsReadData^0,w,c
  4665   001740  6E13               	movwf	bcd2dec@value^0,c
  4666   001742  6A14               	clrf	(bcd2dec@value+1)^0,c
  4667   001744  EC00  F01A         	call	_bcd2dec	;wreg free
  4668   001748  C013  F01A         	movff	?_bcd2dec,lcdInt@val
  4669   00174C  C014  F01B         	movff	?_bcd2dec+1,lcdInt@val+1
  4670   001750  0E02               	movlw	2
  4671   001752  6E1C               	movwf	lcdInt@digNum^0,c
  4672   001754  EC60  F016         	call	_lcdInt	;wreg free
  4673   001758                     
  4674                           ;output.c: 149:         lcdCommand(0xC0);
  4675   001758  0EC0               	movlw	192
  4676   00175A  EC75  F019         	call	_lcdCommand
  4677   00175E                     
  4678                           ;output.c: 150:         lcdData('L');
  4679   00175E  0E4C               	movlw	76
  4680   001760  ECC0  F01B         	call	_lcdData
  4681   001764                     
  4682                           ;output.c: 151:         lcdInt(getAlarmLevel(0), 3);
  4683   001764  0E00               	movlw	0
  4684   001766  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4685   001768  0E00               	movlw	0
  4686   00176A  6E01               	movwf	getAlarmLevel@lh^0,c
  4687   00176C  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  4688   001770  C001  F01A         	movff	?_getAlarmLevel,lcdInt@val
  4689   001774  C002  F01B         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4690   001778  0E03               	movlw	3
  4691   00177A  6E1C               	movwf	lcdInt@digNum^0,c
  4692   00177C  EC60  F016         	call	_lcdInt	;wreg free
  4693                           
  4694                           ;output.c: 152:         lcdData(' ');
  4695   001780  0E20               	movlw	32
  4696   001782  ECC0  F01B         	call	_lcdData
  4697                           
  4698                           ;output.c: 153:         lcdData(' ');
  4699   001786  0E20               	movlw	32
  4700   001788  ECC0  F01B         	call	_lcdData
  4701                           
  4702                           ;output.c: 155:         lcdData('H');
  4703   00178C  0E48               	movlw	72
  4704   00178E  ECC0  F01B         	call	_lcdData
  4705   001792                     
  4706                           ;output.c: 156:         lcdInt(getAlarmLevel(1), 3);
  4707   001792  0E00               	movlw	0
  4708   001794  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  4709   001796  0E01               	movlw	1
  4710   001798  6E01               	movwf	getAlarmLevel@lh^0,c
  4711   00179A  EC1C  F01B         	call	_getAlarmLevel	;wreg free
  4712   00179E  C001  F01A         	movff	?_getAlarmLevel,lcdInt@val
  4713   0017A2  C002  F01B         	movff	?_getAlarmLevel+1,lcdInt@val+1
  4714   0017A6  0E03               	movlw	3
  4715   0017A8  6E1C               	movwf	lcdInt@digNum^0,c
  4716   0017AA  EC60  F016         	call	_lcdInt	;wreg free
  4717   0017AE                     
  4718                           ;output.c: 157:         lcdData(' ');
  4719   0017AE  0E20               	movlw	32
  4720   0017B0  ECC0  F01B         	call	_lcdData
  4721   0017B4                     
  4722                           ;output.c: 158:         lcdData(' ');
  4723   0017B4  0E20               	movlw	32
  4724   0017B6  ECC0  F01B         	call	_lcdData
  4725   0017BA                     
  4726                           ;output.c: 160:         lcdData('T');
  4727   0017BA  0E54               	movlw	84
  4728   0017BC  ECC0  F01B         	call	_lcdData
  4729                           
  4730                           ;output.c: 161:         lcdInt(getTemp(), 3);
  4731   0017C0  EC2F  F01C         	call	_getTemp	;wreg free
  4732   0017C4  C001  F01A         	movff	?_getTemp,lcdInt@val
  4733   0017C8  C002  F01B         	movff	?_getTemp+1,lcdInt@val+1
  4734   0017CC  0E03               	movlw	3
  4735   0017CE  6E1C               	movwf	lcdInt@digNum^0,c
  4736   0017D0  EC60  F016         	call	_lcdInt	;wreg free
  4737   0017D4                     l4532:
  4738                           
  4739                           ;output.c: 164:     if (numTela == STATE_ALERTA) {
  4740   0017D4  0E09               	movlw	9
  4741   0017D6  1824               	xorwf	outputPrint@numTela^0,w,c
  4742   0017D8  1025               	iorwf	(outputPrint@numTela+1)^0,w,c
  4743   0017DA  A4D8               	btfss	status,2,c
  4744   0017DC  EFF2  F00B         	goto	u4071
  4745   0017E0  EFF4  F00B         	goto	u4070
  4746   0017E4                     u4071:
  4747   0017E4  EF02  F00C         	goto	l583
  4748   0017E8                     u4070:
  4749   0017E8                     
  4750                           ;output.c: 165:         lcdCommand(0x80);
  4751   0017E8  0E80               	movlw	128
  4752   0017EA  EC75  F019         	call	_lcdCommand
  4753   0017EE                     
  4754                           ;output.c: 166:         lcdString("TEMPERATURA!!!!");
  4755   0017EE  0E83               	movlw	low STR_22
  4756   0017F0  6E04               	movwf	lcdString@str^0,c
  4757   0017F2  EC74  F01A         	call	_lcdString	;wreg free
  4758   0017F6                     
  4759                           ;output.c: 167:         lcdCommand(0xC0);
  4760   0017F6  0EC0               	movlw	192
  4761   0017F8  EC75  F019         	call	_lcdCommand
  4762                           
  4763                           ;output.c: 168:         lcdString("TEMPERATURA!!!!");
  4764   0017FC  0E83               	movlw	low STR_22
  4765   0017FE  6E04               	movwf	lcdString@str^0,c
  4766   001800  EC74  F01A         	call	_lcdString	;wreg free
  4767   001804                     l583:
  4768   001804  0012               	return		;funcret
  4769   001806                     __end_of_outputPrint:
  4770                           	callstack 0
  4771                           
  4772 ;; *************** function _lcdString *****************
  4773 ;; Defined at:
  4774 ;;		line 168 in file "lcd.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  str             1    3[COMRAM] PTR const unsigned char 
  4777 ;;		 -> STR_23(16), STR_22(16), STR_21(4), STR_20(17), 
  4778 ;;		 -> STR_19(17), STR_18(12), STR_17(4), STR_16(12), 
  4779 ;;		 -> STR_15(4), STR_14(12), STR_13(12), STR_12(12), 
  4780 ;;		 -> STR_11(12), STR_10(16), STR_9(16), STR_8(16), 
  4781 ;;		 -> STR_7(16), STR_6(16), STR_5(16), STR_4(16), 
  4782 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4794 ;;      Params:         1       0       0       0       0       0       0       0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4797 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4798 ;;Total ram usage:        1 bytes
  4799 ;; Hardware stack levels used: 1
  4800 ;; Hardware stack levels required when called: 3
  4801 ;; This function calls:
  4802 ;;		_lcdData
  4803 ;; This function is called by:
  4804 ;;		_outputPrint
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text11
  4809   0034E8                     __ptext11:
  4810                           	callstack 0
  4811   0034E8                     _lcdString:
  4812                           	callstack 25
  4813   0034E8                     
  4814                           ;lcd.c: 169:     while (*str) {
  4815   0034E8  EF7F  F01A         	goto	l3900
  4816   0034EC                     l3896:
  4817                           
  4818                           ;lcd.c: 170:         lcdData(*str++);
  4819   0034EC  C004  FFF6         	movff	lcdString@str,tblptrl
  4820   0034F0                     	if	1	;There is more than 1 active tblptr byte
  4821   0034F0  0E08               	movlw	high __smallconst
  4822   0034F2  6EF7               	movwf	tblptrh,c
  4823   0034F4                     	endif
  4824   0034F4                     	if	0	;tblptru may be non-zero
  4825   0034F4                     	endif
  4826   0034F4                     	if	0	;tblptru may be non-zero
  4827   0034F4                     	endif
  4828   0034F4  0008               	tblrd		*
  4829   0034F6  50F5               	movf	tablat,w,c
  4830   0034F8  ECC0  F01B         	call	_lcdData
  4831   0034FC  2A04               	incf	lcdString@str^0,f,c
  4832   0034FE                     l3900:
  4833                           
  4834                           ;lcd.c: 169:     while (*str) {
  4835   0034FE  C004  FFF6         	movff	lcdString@str,tblptrl
  4836   003502                     	if	1	;There is more than 1 active tblptr byte
  4837   003502  0E08               	movlw	high __smallconst
  4838   003504  6EF7               	movwf	tblptrh,c
  4839   003506                     	endif
  4840   003506                     	if	0	;tblptru may be non-zero
  4841   003506                     	endif
  4842   003506                     	if	0	;tblptru may be non-zero
  4843   003506                     	endif
  4844   003506  0008               	tblrd		*
  4845   003508  50F5               	movf	tablat,w,c
  4846   00350A  0900               	iorlw	0
  4847   00350C  A4D8               	btfss	status,2,c
  4848   00350E  EF8B  F01A         	goto	u3401
  4849   003512  EF8D  F01A         	goto	u3400
  4850   003516                     u3401:
  4851   003516  EF76  F01A         	goto	l3896
  4852   00351A                     u3400:
  4853   00351A  0012               	return		;funcret
  4854   00351C                     __end_of_lcdString:
  4855                           	callstack 0
  4856                           
  4857 ;; *************** function _lcdInt *****************
  4858 ;; Defined at:
  4859 ;;		line 174 in file "lcd.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  val             2   25[COMRAM] int 
  4862 ;;  digNum          1   27[COMRAM] unsigned char 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  j               2   29[COMRAM] int 
  4865 ;;  divisor         2   31[COMRAM] int 
  4866 ;;  i               2   33[COMRAM] int 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4876 ;;      Params:         3       0       0       0       0       0       0       0       0
  4877 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4878 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4879 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4880 ;;Total ram usage:       10 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 3
  4883 ;; This function calls:
  4884 ;;		___awdiv
  4885 ;;		___awmod
  4886 ;;		___wmul
  4887 ;;		_lcdData
  4888 ;; This function is called by:
  4889 ;;		_outputPrint
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text12
  4894   002CC0                     __ptext12:
  4895                           	callstack 0
  4896   002CC0                     _lcdInt:
  4897                           	callstack 25
  4898   002CC0                     
  4899                           ;lcd.c: 175:     if (val < 0) {
  4900   002CC0  BE1B               	btfsc	(lcdInt@val+1)^0,7,c
  4901   002CC2  EF67  F016         	goto	u3410
  4902   002CC6  EF65  F016         	goto	u3411
  4903   002CCA                     u3411:
  4904   002CCA  EF6E  F016         	goto	l3908
  4905   002CCE                     u3410:
  4906   002CCE                     
  4907                           ;lcd.c: 176:         val = val * (-1);
  4908   002CCE  6C1A               	negf	lcdInt@val^0,c
  4909   002CD0  1E1B               	comf	(lcdInt@val+1)^0,f,c
  4910   002CD2  B0D8               	btfsc	status,0,c
  4911   002CD4  2A1B               	incf	(lcdInt@val+1)^0,f,c
  4912   002CD6                     
  4913                           ;lcd.c: 177:         lcdData('-');
  4914   002CD6  0E2D               	movlw	45
  4915   002CD8  ECC0  F01B         	call	_lcdData
  4916   002CDC                     l3908:
  4917                           
  4918                           ;lcd.c: 188:     for (int i = digNum - 1; i >= 0; i--) {
  4919   002CDC  0EFF               	movlw	255
  4920   002CDE  241C               	addwf	lcdInt@digNum^0,w,c
  4921   002CE0  6E22               	movwf	lcdInt@i^0,c
  4922   002CE2  6A23               	clrf	(lcdInt@i+1)^0,c
  4923   002CE4  0EFF               	movlw	255
  4924   002CE6  2223               	addwfc	(lcdInt@i+1)^0,f,c
  4925   002CE8                     l3910:
  4926   002CE8  BE23               	btfsc	(lcdInt@i+1)^0,7,c
  4927   002CEA  EF7B  F016         	goto	u3420
  4928   002CEE  EF79  F016         	goto	u3421
  4929   002CF2                     u3421:
  4930   002CF2  EF7D  F016         	goto	l3914
  4931   002CF6                     u3420:
  4932   002CF6  EFC3  F016         	goto	l203
  4933   002CFA                     l3914:
  4934                           
  4935                           ;lcd.c: 189:         int divisor = 1;
  4936   002CFA  0E00               	movlw	0
  4937   002CFC  6E21               	movwf	(lcdInt@divisor+1)^0,c
  4938   002CFE  0E01               	movlw	1
  4939   002D00  6E20               	movwf	lcdInt@divisor^0,c
  4940                           
  4941                           ;lcd.c: 190:         for (int j = 0; j < i; j++) {
  4942   002D02  0E00               	movlw	0
  4943   002D04  6E1F               	movwf	(lcdInt@j+1)^0,c
  4944   002D06  0E00               	movlw	0
  4945   002D08  6E1E               	movwf	lcdInt@j^0,c
  4946   002D0A  EF97  F016         	goto	l3920
  4947   002D0E                     l3916:
  4948                           
  4949                           ;lcd.c: 191:             divisor *= 10;
  4950   002D0E  C020  F009         	movff	lcdInt@divisor,___wmul@multiplier
  4951   002D12  C021  F00A         	movff	lcdInt@divisor+1,___wmul@multiplier+1
  4952   002D16  0E00               	movlw	0
  4953   002D18  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  4954   002D1A  0E0A               	movlw	10
  4955   002D1C  6E0B               	movwf	___wmul@multiplicand^0,c
  4956   002D1E  EC9C  F01B         	call	___wmul	;wreg free
  4957   002D22  C009  F020         	movff	?___wmul,lcdInt@divisor
  4958   002D26  C00A  F021         	movff	?___wmul+1,lcdInt@divisor+1
  4959   002D2A                     
  4960                           ;lcd.c: 192:         }
  4961   002D2A  4A1E               	infsnz	lcdInt@j^0,f,c
  4962   002D2C  2A1F               	incf	(lcdInt@j+1)^0,f,c
  4963   002D2E                     l3920:
  4964   002D2E  5022               	movf	lcdInt@i^0,w,c
  4965   002D30  5C1E               	subwf	lcdInt@j^0,w,c
  4966   002D32  501F               	movf	(lcdInt@j+1)^0,w,c
  4967   002D34  0A80               	xorlw	128
  4968   002D36  6E1D               	movwf	??_lcdInt^0,c
  4969   002D38  5023               	movf	(lcdInt@i+1)^0,w,c
  4970   002D3A  0A80               	xorlw	128
  4971   002D3C  581D               	subwfb	??_lcdInt^0,w,c
  4972   002D3E  A0D8               	btfss	status,0,c
  4973   002D40  EFA4  F016         	goto	u3431
  4974   002D44  EFA6  F016         	goto	u3430
  4975   002D48                     u3431:
  4976   002D48  EF87  F016         	goto	l3916
  4977   002D4C                     u3430:
  4978   002D4C                     
  4979                           ;lcd.c: 193:         lcdData((val / divisor) % 10 + 48);
  4980   002D4C  C020  F003         	movff	lcdInt@divisor,___awdiv@divisor
  4981   002D50  C021  F004         	movff	lcdInt@divisor+1,___awdiv@divisor+1
  4982   002D54  C01A  F001         	movff	lcdInt@val,___awdiv@dividend
  4983   002D58  C01B  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  4984   002D5C  ECC4  F016         	call	___awdiv	;wreg free
  4985   002D60  C001  F009         	movff	?___awdiv,___awmod@dividend
  4986   002D64  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  4987   002D68  0E00               	movlw	0
  4988   002D6A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4989   002D6C  0E0A               	movlw	10
  4990   002D6E  6E0B               	movwf	___awmod@divisor^0,c
  4991   002D70  EC85  F017         	call	___awmod	;wreg free
  4992   002D74  5009               	movf	?___awmod^0,w,c
  4993   002D76  0F30               	addlw	48
  4994   002D78  ECC0  F01B         	call	_lcdData
  4995   002D7C                     
  4996                           ;lcd.c: 194:     }
  4997   002D7C  0622               	decf	lcdInt@i^0,f,c
  4998   002D7E  A0D8               	btfss	status,0,c
  4999   002D80  0623               	decf	(lcdInt@i+1)^0,f,c
  5000   002D82  EF74  F016         	goto	l3910
  5001   002D86                     l203:
  5002   002D86  0012               	return		;funcret
  5003   002D88                     __end_of_lcdInt:
  5004                           	callstack 0
  5005                           
  5006 ;; *************** function _lcdData *****************
  5007 ;; Defined at:
  5008 ;;		line 108 in file "lcd.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  valor           1    wreg     unsigned char 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  valor           1    2[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5022 ;;      Params:         0       0       0       0       0       0       0       0       0
  5023 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5025 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5026 ;;Total ram usage:        1 bytes
  5027 ;; Hardware stack levels used: 1
  5028 ;; Hardware stack levels required when called: 2
  5029 ;; This function calls:
  5030 ;;		_Delay40us
  5031 ;;		_lcdCommand4bits
  5032 ;; This function is called by:
  5033 ;;		_lcdString
  5034 ;;		_lcdInt
  5035 ;;		_outputPrint
  5036 ;;		_printf
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text13
  5041   003780                     __ptext13:
  5042                           	callstack 0
  5043   003780                     _lcdData:
  5044                           	callstack 25
  5045                           
  5046                           ;incstack = 0
  5047                           ;lcdData@valor stored from wreg
  5048   003780  6E03               	movwf	lcdData@valor^0,c
  5049   003782                     
  5050                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  5051   003782  0E01               	movlw	1
  5052   003784  6E01               	movwf	lcdCommand4bits@data^0,c
  5053   003786  5003               	movf	lcdData@valor^0,w,c
  5054   003788  EC5D  F018         	call	_lcdCommand4bits
  5055                           
  5056                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  5057   00378C  0E01               	movlw	1
  5058   00378E  6E01               	movwf	lcdCommand4bits@data^0,c
  5059   003790  3803               	swapf	lcdData@valor^0,w,c
  5060   003792  0BF0               	andlw	240
  5061   003794  EC5D  F018         	call	_lcdCommand4bits
  5062                           
  5063                           ;lcd.c: 113:     Delay40us();
  5064   003798  EC02  F01C         	call	_Delay40us	;wreg free
  5065   00379C  0012               	return		;funcret
  5066   00379E                     __end_of_lcdData:
  5067                           	callstack 0
  5068                           
  5069 ;; *************** function _getTime *****************
  5070 ;; Defined at:
  5071 ;;		line 65 in file "var.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  index           1    wreg     unsigned char 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  index           1   24[COMRAM] unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  2   22[COMRAM] int 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5085 ;;      Params:         2       0       0       0       0       0       0       0       0
  5086 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5088 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5089 ;;Total ram usage:        3 bytes
  5090 ;; Hardware stack levels used: 1
  5091 ;; Hardware stack levels required when called: 5
  5092 ;; This function calls:
  5093 ;;		_bcd2dec
  5094 ;;		_dsReadData
  5095 ;; This function is called by:
  5096 ;;		_outputPrint
  5097 ;;		_smLoop
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text14
  5102   0027DC                     __ptext14:
  5103                           	callstack 0
  5104   0027DC                     _getTime:
  5105                           	callstack 23
  5106                           
  5107                           ;incstack = 0
  5108                           ;getTime@index stored from wreg
  5109   0027DC  6E19               	movwf	getTime@index^0,c
  5110   0027DE                     
  5111                           ;var.c: 66:     switch(index)
  5112   0027DE  EF5A  F014         	goto	l3994
  5113   0027E2                     l3968:
  5114   0027E2  0E00               	movlw	0
  5115   0027E4  6E0F               	movwf	(dsReadData@address+1)^0,c
  5116   0027E6  0E00               	movlw	0
  5117   0027E8  6E0E               	movwf	dsReadData@address^0,c
  5118   0027EA  EC99  F019         	call	_dsReadData	;wreg free
  5119   0027EE  0E7F               	movlw	127
  5120   0027F0  140E               	andwf	?_dsReadData^0,w,c
  5121   0027F2  6E13               	movwf	bcd2dec@value^0,c
  5122   0027F4  6A14               	clrf	(bcd2dec@value+1)^0,c
  5123   0027F6  EC00  F01A         	call	_bcd2dec	;wreg free
  5124   0027FA  C013  F017         	movff	?_bcd2dec,?_getTime
  5125   0027FE  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5126   002802  EF75  F014         	goto	l785
  5127   002806                     l3972:
  5128   002806  0E00               	movlw	0
  5129   002808  6E0F               	movwf	(dsReadData@address+1)^0,c
  5130   00280A  0E01               	movlw	1
  5131   00280C  6E0E               	movwf	dsReadData@address^0,c
  5132   00280E  EC99  F019         	call	_dsReadData	;wreg free
  5133   002812  0E7F               	movlw	127
  5134   002814  140E               	andwf	?_dsReadData^0,w,c
  5135   002816  6E13               	movwf	bcd2dec@value^0,c
  5136   002818  6A14               	clrf	(bcd2dec@value+1)^0,c
  5137   00281A  EC00  F01A         	call	_bcd2dec	;wreg free
  5138   00281E  C013  F017         	movff	?_bcd2dec,?_getTime
  5139   002822  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5140   002826  EF75  F014         	goto	l785
  5141   00282A                     l3976:
  5142   00282A  0E00               	movlw	0
  5143   00282C  6E0F               	movwf	(dsReadData@address+1)^0,c
  5144   00282E  0E02               	movlw	2
  5145   002830  6E0E               	movwf	dsReadData@address^0,c
  5146   002832  EC99  F019         	call	_dsReadData	;wreg free
  5147   002836  0E7F               	movlw	127
  5148   002838  140E               	andwf	?_dsReadData^0,w,c
  5149   00283A  6E13               	movwf	bcd2dec@value^0,c
  5150   00283C  6A14               	clrf	(bcd2dec@value+1)^0,c
  5151   00283E  EC00  F01A         	call	_bcd2dec	;wreg free
  5152   002842  C013  F017         	movff	?_bcd2dec,?_getTime
  5153   002846  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5154   00284A  EF75  F014         	goto	l785
  5155   00284E                     l3980:
  5156   00284E  0E00               	movlw	0
  5157   002850  6E0F               	movwf	(dsReadData@address+1)^0,c
  5158   002852  0E04               	movlw	4
  5159   002854  6E0E               	movwf	dsReadData@address^0,c
  5160   002856  EC99  F019         	call	_dsReadData	;wreg free
  5161   00285A  500E               	movf	?_dsReadData^0,w,c
  5162   00285C  6E13               	movwf	bcd2dec@value^0,c
  5163   00285E  6A14               	clrf	(bcd2dec@value+1)^0,c
  5164   002860  EC00  F01A         	call	_bcd2dec	;wreg free
  5165   002864  C013  F017         	movff	?_bcd2dec,?_getTime
  5166   002868  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5167   00286C  EF75  F014         	goto	l785
  5168   002870                     l3984:
  5169   002870  0E00               	movlw	0
  5170   002872  6E0F               	movwf	(dsReadData@address+1)^0,c
  5171   002874  0E05               	movlw	5
  5172   002876  6E0E               	movwf	dsReadData@address^0,c
  5173   002878  EC99  F019         	call	_dsReadData	;wreg free
  5174   00287C  500E               	movf	?_dsReadData^0,w,c
  5175   00287E  6E13               	movwf	bcd2dec@value^0,c
  5176   002880  6A14               	clrf	(bcd2dec@value+1)^0,c
  5177   002882  EC00  F01A         	call	_bcd2dec	;wreg free
  5178   002886  C013  F017         	movff	?_bcd2dec,?_getTime
  5179   00288A  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5180   00288E  EF75  F014         	goto	l785
  5181   002892                     l3988:
  5182   002892  0E00               	movlw	0
  5183   002894  6E0F               	movwf	(dsReadData@address+1)^0,c
  5184   002896  0E06               	movlw	6
  5185   002898  6E0E               	movwf	dsReadData@address^0,c
  5186   00289A  EC99  F019         	call	_dsReadData	;wreg free
  5187   00289E  500E               	movf	?_dsReadData^0,w,c
  5188   0028A0  6E13               	movwf	bcd2dec@value^0,c
  5189   0028A2  6A14               	clrf	(bcd2dec@value+1)^0,c
  5190   0028A4  EC00  F01A         	call	_bcd2dec	;wreg free
  5191   0028A8  C013  F017         	movff	?_bcd2dec,?_getTime
  5192   0028AC  C014  F018         	movff	?_bcd2dec+1,?_getTime+1
  5193   0028B0  EF75  F014         	goto	l785
  5194   0028B4                     l3994:
  5195   0028B4  5019               	movf	getTime@index^0,w,c
  5196                           
  5197                           ; Switch size 1, requested type "simple"
  5198                           ; Number of cases is 6, Range of values is 0 to 5
  5199                           ; switch strategies available:
  5200                           ; Name         Instructions Cycles
  5201                           ; simple_byte           19    10 (average)
  5202                           ;	Chosen strategy is simple_byte
  5203   0028B6  0A00               	xorlw	0	; case 0
  5204   0028B8  B4D8               	btfsc	status,2,c
  5205   0028BA  EFF1  F013         	goto	l3968
  5206   0028BE  0A01               	xorlw	1	; case 1
  5207   0028C0  B4D8               	btfsc	status,2,c
  5208   0028C2  EF03  F014         	goto	l3972
  5209   0028C6  0A03               	xorlw	3	; case 2
  5210   0028C8  B4D8               	btfsc	status,2,c
  5211   0028CA  EF15  F014         	goto	l3976
  5212   0028CE  0A01               	xorlw	1	; case 3
  5213   0028D0  B4D8               	btfsc	status,2,c
  5214   0028D2  EF27  F014         	goto	l3980
  5215   0028D6  0A07               	xorlw	7	; case 4
  5216   0028D8  B4D8               	btfsc	status,2,c
  5217   0028DA  EF38  F014         	goto	l3984
  5218   0028DE  0A01               	xorlw	1	; case 5
  5219   0028E0  B4D8               	btfsc	status,2,c
  5220   0028E2  EF49  F014         	goto	l3988
  5221   0028E6  EF75  F014         	goto	l785
  5222   0028EA                     l785:
  5223   0028EA  0012               	return		;funcret
  5224   0028EC                     __end_of_getTime:
  5225                           	callstack 0
  5226                           
  5227 ;; *************** function _getTemp *****************
  5228 ;; Defined at:
  5229 ;;		line 152 in file "var.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  2    0[COMRAM] int 
  5236 ;; Registers used:
  5237 ;;		None
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5243 ;;      Params:         2       0       0       0       0       0       0       0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5246 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5247 ;;Total ram usage:        2 bytes
  5248 ;; Hardware stack levels used: 1
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_outputPrint
  5253 ;;		_smLoop
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text15
  5258   00385E                     __ptext15:
  5259                           	callstack 0
  5260   00385E                     _getTemp:
  5261                           	callstack 28
  5262   00385E                     
  5263                           ;var.c: 154:     return temp;
  5264   00385E  C0AF  F001         	movff	_temp,?_getTemp
  5265   003862  C0B0  F002         	movff	_temp+1,?_getTemp+1
  5266   003866  0012               	return		;funcret
  5267   003868                     __end_of_getTemp:
  5268                           	callstack 0
  5269                           
  5270 ;; *************** function _getAlarmLevel *****************
  5271 ;; Defined at:
  5272 ;;		line 89 in file "var.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  lh              2    0[COMRAM] int 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  l               2    2[COMRAM] int 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  2    0[COMRAM] int 
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5286 ;;      Params:         2       0       0       0       0       0       0       0       0
  5287 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5289 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5290 ;;Total ram usage:        4 bytes
  5291 ;; Hardware stack levels used: 1
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_outputPrint
  5296 ;;		_smLoop
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           	psect	text16
  5301   003638                     __ptext16:
  5302                           	callstack 0
  5303   003638                     _getAlarmLevel:
  5304                           	callstack 28
  5305   003638                     
  5306                           ;var.c: 90:     int l;;var.c: 91:     if(lh == 0){
  5307   003638  5001               	movf	getAlarmLevel@lh^0,w,c
  5308   00363A  1002               	iorwf	(getAlarmLevel@lh+1)^0,w,c
  5309   00363C  A4D8               	btfss	status,2,c
  5310   00363E  EF23  F01B         	goto	u3481
  5311   003642  EF25  F01B         	goto	u3480
  5312   003646                     u3481:
  5313   003646  EF2A  F01B         	goto	l805
  5314   00364A                     u3480:
  5315   00364A                     
  5316                           ;var.c: 92:         l = alarmLevelLow;
  5317   00364A  C052  F003         	movff	_alarmLevelLow,getAlarmLevel@l
  5318   00364E  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  5319                           
  5320                           ;var.c: 93:     }
  5321   003650  EF2D  F01B         	goto	l806
  5322   003654                     l805:
  5323                           
  5324                           ;var.c: 95:     {;var.c: 96:         l = alarmLevelHigh;
  5325   003654  C053  F003         	movff	_alarmLevelHigh,getAlarmLevel@l
  5326   003658  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  5327   00365A                     l806:
  5328                           
  5329                           ;var.c: 98:     return l;
  5330   00365A  C003  F001         	movff	getAlarmLevel@l,?_getAlarmLevel
  5331   00365E  C004  F002         	movff	getAlarmLevel@l+1,?_getAlarmLevel+1
  5332   003662  0012               	return		;funcret
  5333   003664                     __end_of_getAlarmLevel:
  5334                           	callstack 0
  5335                           
  5336 ;; *************** function _getState *****************
  5337 ;; Defined at:
  5338 ;;		line 56 in file "var.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;		None
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      unsigned char 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5352 ;;      Params:         0       0       0       0       0       0       0       0       0
  5353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5355 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5356 ;;Total ram usage:        0 bytes
  5357 ;; Hardware stack levels used: 1
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_smLoop
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text17
  5366   003872                     __ptext17:
  5367                           	callstack 0
  5368   003872                     _getState:
  5369                           	callstack 29
  5370   003872                     
  5371                           ;var.c: 57:     return state;
  5372   003872  0100               	movlb	0	; () banked
  5373   003874  51BF               	movf	_state& (0+255),w,b
  5374   003876                     
  5375                           ; BSR set to: 0
  5376   003876  0012               	return		;funcret
  5377   003878                     __end_of_getState:
  5378                           	callstack 0
  5379                           
  5380 ;; *************** function _getDate *****************
  5381 ;; Defined at:
  5382 ;;		line 223 in file "var.c"
  5383 ;; Parameters:    Size  Location     Type
  5384 ;;		None
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;		None
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  2    0[COMRAM] PTR unsigned char 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5396 ;;      Params:         2       0       0       0       0       0       0       0       0
  5397 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5398 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5399 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5400 ;;Total ram usage:        2 bytes
  5401 ;; Hardware stack levels used: 1
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_smLoop
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           	psect	text18
  5410   003868                     __ptext18:
  5411                           	callstack 0
  5412   003868                     _getDate:
  5413                           	callstack 29
  5414   003868                     
  5415                           ;var.c: 225:     return date;
  5416   003868  0E00               	movlw	0
  5417   00386A  6E01               	movwf	?_getDate^0,c
  5418   00386C  0E00               	movlw	0
  5419   00386E  6E02               	movwf	(?_getDate+1)^0,c
  5420   003870  0012               	return		;funcret
  5421   003872                     __end_of_getDate:
  5422                           	callstack 0
  5423                           
  5424 ;; *************** function _eventRead *****************
  5425 ;; Defined at:
  5426 ;;		line 25 in file "event.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  key             2   29[COMRAM] int 
  5431 ;;  ev              2   26[COMRAM] int 
  5432 ;;  data            1   28[COMRAM] unsigned char 
  5433 ;;  prot            1   25[COMRAM] PTR unsigned char 
  5434 ;;		 -> prot(6), 
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      unsigned char 
  5437 ;; Registers used:
  5438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0
  5445 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5446 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5447 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5448 ;;Total ram usage:        7 bytes
  5449 ;; Hardware stack levels used: 1
  5450 ;; Hardware stack levels required when called: 6
  5451 ;; This function calls:
  5452 ;;		_getLanguage
  5453 ;;		_getProt
  5454 ;;		_kpRead
  5455 ;;		_serialRead
  5456 ;;		_serialSend
  5457 ;;		_setLanguage
  5458 ;;		_setProt
  5459 ;; This function is called by:
  5460 ;;		_smLoop
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text19
  5465   002306                     __ptext19:
  5466                           	callstack 0
  5467   002306                     _eventRead:
  5468                           	callstack 23
  5469   002306                     
  5470                           ;event.c: 26:     int key;;event.c: 27:     int ev = EV_NOEVENT;
  5471   002306  0E00               	movlw	0
  5472   002308  6E1C               	movwf	(eventRead@ev+1)^0,c
  5473   00230A  0E06               	movlw	6
  5474   00230C  6E1B               	movwf	eventRead@ev^0,c
  5475   00230E                     
  5476                           ;event.c: 28:     key = kpRead();
  5477   00230E  EC42  F01C         	call	_kpRead	;wreg free
  5478   002312  6E19               	movwf	??_eventRead^0,c
  5479   002314  5019               	movf	??_eventRead^0,w,c
  5480   002316  6E1E               	movwf	eventRead@key^0,c
  5481   002318  6A1F               	clrf	(eventRead@key+1)^0,c
  5482   00231A                     
  5483                           ;event.c: 29:     if (key != key_ant) {
  5484   00231A  0100               	movlb	0	; () banked
  5485   00231C  51B9               	movf	_key_ant& (0+255),w,b
  5486   00231E  181E               	xorwf	eventRead@key^0,w,c
  5487   002320  E109               	bnz	u3860
  5488   002322  51BA               	movf	(_key_ant+1)& (0+255),w,b
  5489   002324  181F               	xorwf	(eventRead@key+1)^0,w,c
  5490   002326  B4D8               	btfsc	status,2,c
  5491   002328  EF98  F011         	goto	u3861
  5492   00232C  EF9A  F011         	goto	u3860
  5493   002330                     u3861:
  5494   002330  EFD1  F011         	goto	l4294
  5495   002334                     u3860:
  5496   002334                     
  5497                           ; BSR set to: 0
  5498                           ;event.c: 30:         if (((key) & (1<<0))) {
  5499   002334  A01E               	btfss	eventRead@key^0,0,c
  5500   002336  EF9F  F011         	goto	u3871
  5501   00233A  EFA1  F011         	goto	u3870
  5502   00233E                     u3871:
  5503   00233E  EFA5  F011         	goto	l4278
  5504   002342                     u3870:
  5505   002342                     
  5506                           ; BSR set to: 0
  5507                           ;event.c: 31:             ev = EV_B_0;
  5508   002342  0E00               	movlw	0
  5509   002344  6E1C               	movwf	(eventRead@ev+1)^0,c
  5510   002346  0E00               	movlw	0
  5511   002348  6E1B               	movwf	eventRead@ev^0,c
  5512   00234A                     l4278:
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;event.c: 34:         if (((key) & (1<<1))) {
  5516   00234A  A21E               	btfss	eventRead@key^0,1,c
  5517   00234C  EFAA  F011         	goto	u3881
  5518   002350  EFAC  F011         	goto	u3880
  5519   002354                     u3881:
  5520   002354  EFB0  F011         	goto	l4282
  5521   002358                     u3880:
  5522   002358                     
  5523                           ; BSR set to: 0
  5524                           ;event.c: 35:             ev = EV_B_1;
  5525   002358  0E00               	movlw	0
  5526   00235A  6E1C               	movwf	(eventRead@ev+1)^0,c
  5527   00235C  0E01               	movlw	1
  5528   00235E  6E1B               	movwf	eventRead@ev^0,c
  5529   002360                     l4282:
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;event.c: 38:         if (((key) & (1<<2))) {
  5533   002360  A41E               	btfss	eventRead@key^0,2,c
  5534   002362  EFB5  F011         	goto	u3891
  5535   002366  EFB7  F011         	goto	u3890
  5536   00236A                     u3891:
  5537   00236A  EFBB  F011         	goto	l4286
  5538   00236E                     u3890:
  5539   00236E                     
  5540                           ; BSR set to: 0
  5541                           ;event.c: 39:             ev = EV_B_2;
  5542   00236E  0E00               	movlw	0
  5543   002370  6E1C               	movwf	(eventRead@ev+1)^0,c
  5544   002372  0E02               	movlw	2
  5545   002374  6E1B               	movwf	eventRead@ev^0,c
  5546   002376                     l4286:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;event.c: 42:         if (((key) & (1<<3))) {
  5550   002376  A61E               	btfss	eventRead@key^0,3,c
  5551   002378  EFC0  F011         	goto	u3901
  5552   00237C  EFC2  F011         	goto	u3900
  5553   002380                     u3901:
  5554   002380  EFC6  F011         	goto	l4290
  5555   002384                     u3900:
  5556   002384                     
  5557                           ; BSR set to: 0
  5558                           ;event.c: 43:             ev = EV_B_3;
  5559   002384  0E00               	movlw	0
  5560   002386  6E1C               	movwf	(eventRead@ev+1)^0,c
  5561   002388  0E03               	movlw	3
  5562   00238A  6E1B               	movwf	eventRead@ev^0,c
  5563   00238C                     l4290:
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;event.c: 46:         if (((key) & (1<<4))) {
  5567   00238C  A81E               	btfss	eventRead@key^0,4,c
  5568   00238E  EFCB  F011         	goto	u3911
  5569   002392  EFCD  F011         	goto	u3910
  5570   002396                     u3911:
  5571   002396  EFD1  F011         	goto	l4294
  5572   00239A                     u3910:
  5573   00239A                     
  5574                           ; BSR set to: 0
  5575                           ;event.c: 47:             ev = EV_B_4;
  5576   00239A  0E00               	movlw	0
  5577   00239C  6E1C               	movwf	(eventRead@ev+1)^0,c
  5578   00239E  0E04               	movlw	4
  5579   0023A0  6E1B               	movwf	eventRead@ev^0,c
  5580   0023A2                     l4294:
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;event.c: 51:     key_ant = key;
  5584   0023A2  C01E  F0B9         	movff	eventRead@key,_key_ant
  5585   0023A6  C01F  F0BA         	movff	eventRead@key+1,_key_ant+1
  5586   0023AA                     
  5587                           ; BSR set to: 0
  5588                           ;event.c: 54:     unsigned char data = serialRead();
  5589   0023AA  EC32  F01B         	call	_serialRead	;wreg free
  5590   0023AE  6E1D               	movwf	eventRead@data^0,c
  5591   0023B0                     
  5592                           ;event.c: 55:     serialSend(data);
  5593   0023B0  501D               	movf	eventRead@data^0,w,c
  5594   0023B2  EC0E  F01C         	call	_serialSend
  5595   0023B6                     
  5596                           ;event.c: 56:     unsigned char* prot;;event.c: 57:     if (data != 0) {
  5597   0023B6  501D               	movf	eventRead@data^0,w,c
  5598   0023B8  B4D8               	btfsc	status,2,c
  5599   0023BA  EFE1  F011         	goto	u3921
  5600   0023BE  EFE3  F011         	goto	u3920
  5601   0023C2                     u3921:
  5602   0023C2  EF5D  F012         	goto	l509
  5603   0023C6                     u3920:
  5604   0023C6                     
  5605                           ;event.c: 58:         prot = getProt();
  5606   0023C6  EC44  F01C         	call	_getProt	;wreg free
  5607   0023CA  6E1A               	movwf	eventRead@prot^0,c
  5608   0023CC                     
  5609                           ;event.c: 59:         if (prot[0] == 0) {
  5610   0023CC  501A               	movf	eventRead@prot^0,w,c
  5611   0023CE  6ED9               	movwf	fsr2l,c
  5612   0023D0  6ADA               	clrf	fsr2h,c
  5613   0023D2  50DF               	movf	indf2,w,c
  5614   0023D4  A4D8               	btfss	status,2,c
  5615   0023D6  EFEF  F011         	goto	u3931
  5616   0023DA  EFF1  F011         	goto	u3930
  5617   0023DE                     u3931:
  5618   0023DE  EF4D  F012         	goto	l4330
  5619   0023E2                     u3930:
  5620   0023E2  EF26  F012         	goto	l4328
  5621   0023E6                     l4308:
  5622                           
  5623                           ;event.c: 62:                     ev = EV_B_0;
  5624   0023E6  0E00               	movlw	0
  5625   0023E8  6E1C               	movwf	(eventRead@ev+1)^0,c
  5626   0023EA  0E00               	movlw	0
  5627   0023EC  6E1B               	movwf	eventRead@ev^0,c
  5628                           
  5629                           ;event.c: 63:                     break;
  5630   0023EE  EF5D  F012         	goto	l509
  5631   0023F2                     l4310:
  5632                           
  5633                           ;event.c: 65:                     ev = EV_B_1;
  5634   0023F2  0E00               	movlw	0
  5635   0023F4  6E1C               	movwf	(eventRead@ev+1)^0,c
  5636   0023F6  0E01               	movlw	1
  5637   0023F8  6E1B               	movwf	eventRead@ev^0,c
  5638                           
  5639                           ;event.c: 66:                     break;
  5640   0023FA  EF5D  F012         	goto	l509
  5641   0023FE                     l4312:
  5642                           
  5643                           ;event.c: 68:                     ev = EV_B_2;
  5644   0023FE  0E00               	movlw	0
  5645   002400  6E1C               	movwf	(eventRead@ev+1)^0,c
  5646   002402  0E02               	movlw	2
  5647   002404  6E1B               	movwf	eventRead@ev^0,c
  5648                           
  5649                           ;event.c: 69:                     break;
  5650   002406  EF5D  F012         	goto	l509
  5651   00240A                     l4314:
  5652                           
  5653                           ;event.c: 71:                     ev = EV_B_3;
  5654   00240A  0E00               	movlw	0
  5655   00240C  6E1C               	movwf	(eventRead@ev+1)^0,c
  5656   00240E  0E03               	movlw	3
  5657   002410  6E1B               	movwf	eventRead@ev^0,c
  5658                           
  5659                           ;event.c: 72:                     break;
  5660   002412  EF5D  F012         	goto	l509
  5661   002416                     l4316:
  5662                           
  5663                           ;event.c: 74:                     ev = EV_B_4;
  5664   002416  0E00               	movlw	0
  5665   002418  6E1C               	movwf	(eventRead@ev+1)^0,c
  5666   00241A  0E04               	movlw	4
  5667   00241C  6E1B               	movwf	eventRead@ev^0,c
  5668                           
  5669                           ;event.c: 75:                     break;
  5670   00241E  EF5D  F012         	goto	l509
  5671   002422                     l4318:
  5672                           
  5673                           ;event.c: 77:                     ev = EV_NOEVENT;
  5674   002422  0E00               	movlw	0
  5675   002424  6E1C               	movwf	(eventRead@ev+1)^0,c
  5676   002426  0E06               	movlw	6
  5677   002428  6E1B               	movwf	eventRead@ev^0,c
  5678   00242A                     
  5679                           ;event.c: 78:                     setProt('p');
  5680   00242A  0E70               	movlw	112
  5681   00242C  EC48  F01B         	call	_setProt
  5682                           
  5683                           ;event.c: 79:                     break;
  5684   002430  EF5D  F012         	goto	l509
  5685   002434                     l4322:
  5686                           
  5687                           ;event.c: 81:                     ev = EV_NOEVENT;
  5688   002434  0E00               	movlw	0
  5689   002436  6E1C               	movwf	(eventRead@ev+1)^0,c
  5690   002438  0E06               	movlw	6
  5691   00243A  6E1B               	movwf	eventRead@ev^0,c
  5692   00243C                     
  5693                           ;event.c: 82:                     setLanguage(getLanguage() + 1);
  5694   00243C  EC46  F01C         	call	_getLanguage	;wreg free
  5695   002440  6E19               	movwf	??_eventRead^0,c
  5696   002442  2819               	incf	??_eventRead^0,w,c
  5697   002444  ECEA  F01B         	call	_setLanguage
  5698                           
  5699                           ;event.c: 83:                     break;
  5700   002448  EF5D  F012         	goto	l509
  5701   00244C                     l4328:
  5702   00244C  501D               	movf	eventRead@data^0,w,c
  5703                           
  5704                           ; Switch size 1, requested type "simple"
  5705                           ; Number of cases is 9, Range of values is 50 to 112
  5706                           ; switch strategies available:
  5707                           ; Name         Instructions Cycles
  5708                           ; simple_byte           28    15 (average)
  5709                           ;	Chosen strategy is simple_byte
  5710   00244E  0A32               	xorlw	50	; case 50
  5711   002450  B4D8               	btfsc	status,2,c
  5712   002452  EFF3  F011         	goto	l4308
  5713   002456  0A06               	xorlw	6	; case 52
  5714   002458  B4D8               	btfsc	status,2,c
  5715   00245A  EFFF  F011         	goto	l4312
  5716   00245E  0A01               	xorlw	1	; case 53
  5717   002460  B4D8               	btfsc	status,2,c
  5718   002462  EF0B  F012         	goto	l4316
  5719   002466  0A03               	xorlw	3	; case 54
  5720   002468  B4D8               	btfsc	status,2,c
  5721   00246A  EF05  F012         	goto	l4314
  5722   00246E  0A0E               	xorlw	14	; case 56
  5723   002470  B4D8               	btfsc	status,2,c
  5724   002472  EFF9  F011         	goto	l4310
  5725   002476  0A74               	xorlw	116	; case 76
  5726   002478  B4D8               	btfsc	status,2,c
  5727   00247A  EF1A  F012         	goto	l4322
  5728   00247E  0A1C               	xorlw	28	; case 80
  5729   002480  B4D8               	btfsc	status,2,c
  5730   002482  EF11  F012         	goto	l4318
  5731   002486  0A3C               	xorlw	60	; case 108
  5732   002488  B4D8               	btfsc	status,2,c
  5733   00248A  EF1A  F012         	goto	l4322
  5734   00248E  0A1C               	xorlw	28	; case 112
  5735   002490  B4D8               	btfsc	status,2,c
  5736   002492  EF11  F012         	goto	l4318
  5737   002496  EF5D  F012         	goto	l509
  5738   00249A                     l4330:
  5739                           
  5740                           ;event.c: 88:             setProt(data);
  5741   00249A  501D               	movf	eventRead@data^0,w,c
  5742   00249C  EC48  F01B         	call	_setProt
  5743   0024A0                     
  5744                           ;event.c: 90:             if (prot_ready) {
  5745   0024A0  0100               	movlb	0	; () banked
  5746   0024A2  51C1               	movf	_prot_ready& (0+255),w,b
  5747   0024A4  B4D8               	btfsc	status,2,c
  5748   0024A6  EF57  F012         	goto	u3941
  5749   0024AA  EF59  F012         	goto	u3940
  5750   0024AE                     u3941:
  5751   0024AE  EF5D  F012         	goto	l509
  5752   0024B2                     u3940:
  5753   0024B2                     
  5754                           ; BSR set to: 0
  5755                           ;event.c: 91:                 ev = EV_PROT_SERIAL;
  5756   0024B2  0E00               	movlw	0
  5757   0024B4  6E1C               	movwf	(eventRead@ev+1)^0,c
  5758   0024B6  0E05               	movlw	5
  5759   0024B8  6E1B               	movwf	eventRead@ev^0,c
  5760   0024BA                     l509:
  5761                           
  5762                           ;event.c: 97:     return ev;
  5763   0024BA  501B               	movf	eventRead@ev^0,w,c
  5764   0024BC  0012               	return		;funcret
  5765   0024BE                     __end_of_eventRead:
  5766                           	callstack 0
  5767                           
  5768 ;; *************** function _setProt *****************
  5769 ;; Defined at:
  5770 ;;		line 133 in file "var.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  newChar         1    wreg     unsigned char 
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  newChar         1    0[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      void 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0
  5785 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5787 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5788 ;;Total ram usage:        1 bytes
  5789 ;; Hardware stack levels used: 1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_eventRead
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text20
  5798   003690                     __ptext20:
  5799                           	callstack 0
  5800   003690                     _setProt:
  5801                           	callstack 28
  5802                           
  5803                           ;incstack = 0
  5804                           ;setProt@newChar stored from wreg
  5805   003690  6E01               	movwf	setProt@newChar^0,c
  5806   003692                     
  5807                           ;var.c: 135:     prot[index++] = newChar;
  5808   003692  5051               	movf	_index^0,w,c
  5809   003694  0FC2               	addlw	low _prot
  5810   003696  6ED9               	movwf	fsr2l,c
  5811   003698  6ADA               	clrf	fsr2h,c
  5812   00369A  C001  FFDF         	movff	setProt@newChar,indf2
  5813   00369E  2A51               	incf	_index^0,f,c
  5814   0036A0                     
  5815                           ;var.c: 137:     if(index == 6) prot_ready = 1;
  5816   0036A0  0E06               	movlw	6
  5817   0036A2  1851               	xorwf	_index^0,w,c
  5818   0036A4  A4D8               	btfss	status,2,c
  5819   0036A6  EF57  F01B         	goto	u3471
  5820   0036AA  EF59  F01B         	goto	u3470
  5821   0036AE                     u3471:
  5822   0036AE  EF5C  F01B         	goto	l825
  5823   0036B2                     u3470:
  5824   0036B2  0E01               	movlw	1
  5825   0036B4  0100               	movlb	0	; () banked
  5826   0036B6  6FC1               	movwf	_prot_ready& (0+255),b
  5827   0036B8                     l825:
  5828   0036B8  0012               	return		;funcret
  5829   0036BA                     __end_of_setProt:
  5830                           	callstack 0
  5831                           
  5832 ;; *************** function _setLanguage *****************
  5833 ;; Defined at:
  5834 ;;		line 121 in file "var.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  newLanguage     1    wreg     unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  newLanguage     1   23[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5848 ;;      Params:         0       0       0       0       0       0       0       0       0
  5849 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5851 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5852 ;;Total ram usage:        1 bytes
  5853 ;; Hardware stack levels used: 1
  5854 ;; Hardware stack levels required when called: 5
  5855 ;; This function calls:
  5856 ;;		_dsWriteData
  5857 ;; This function is called by:
  5858 ;;		_eventRead
  5859 ;;		_smLoop
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text21
  5864   0037D4                     __ptext21:
  5865                           	callstack 0
  5866   0037D4                     _setLanguage:
  5867                           	callstack 24
  5868                           
  5869                           ;incstack = 0
  5870                           ;setLanguage@newLanguage stored from wreg
  5871   0037D4  6E18               	movwf	setLanguage@newLanguage^0,c
  5872   0037D6                     
  5873                           ;var.c: 124:     language = newLanguage % 2;
  5874   0037D6  5018               	movf	setLanguage@newLanguage^0,w,c
  5875   0037D8  0B01               	andlw	1
  5876   0037DA  6E54               	movwf	_language^0,c
  5877   0037DC                     
  5878                           ;var.c: 125:     dsWriteData(language, 0x23);
  5879   0037DC  0E00               	movlw	0
  5880   0037DE  6E16               	movwf	(dsWriteData@address+1)^0,c
  5881   0037E0  0E23               	movlw	35
  5882   0037E2  6E15               	movwf	dsWriteData@address^0,c
  5883   0037E4  5054               	movf	_language^0,w,c
  5884   0037E6  ECD7  F01A         	call	_dsWriteData
  5885   0037EA  0012               	return		;funcret
  5886   0037EC                     __end_of_setLanguage:
  5887                           	callstack 0
  5888                           
  5889 ;; *************** function _serialSend *****************
  5890 ;; Defined at:
  5891 ;;		line 25 in file "serial.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  c               1    wreg     unsigned char 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  c               1    0[COMRAM] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      void 
  5898 ;; Registers used:
  5899 ;;		wreg
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5905 ;;      Params:         0       0       0       0       0       0       0       0       0
  5906 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5908 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5909 ;;Total ram usage:        1 bytes
  5910 ;; Hardware stack levels used: 1
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_eventRead
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text22
  5919   00381C                     __ptext22:
  5920                           	callstack 0
  5921   00381C                     _serialSend:
  5922                           	callstack 28
  5923                           
  5924                           ;incstack = 0
  5925                           ;serialSend@c stored from wreg
  5926   00381C  6E01               	movwf	serialSend@c^0,c
  5927   00381E                     l340:
  5928   00381E  A89E               	btfss	158,4,c	;volatile
  5929   003820  EF14  F01C         	goto	u3441
  5930   003824  EF16  F01C         	goto	u3440
  5931   003828                     u3441:
  5932   003828  EF0F  F01C         	goto	l340
  5933   00382C                     u3440:
  5934   00382C                     
  5935                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  5936   00382C  C001  FFAD         	movff	serialSend@c,4013	;volatile
  5937   003830  0012               	return		;funcret
  5938   003832                     __end_of_serialSend:
  5939                           	callstack 0
  5940                           
  5941 ;; *************** function _serialRead *****************
  5942 ;; Defined at:
  5943 ;;		line 30 in file "serial.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;		None
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  resp            1    0[COMRAM] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      unsigned char 
  5950 ;; Registers used:
  5951 ;;		wreg, status,2, status,0
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5957 ;;      Params:         0       0       0       0       0       0       0       0       0
  5958 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5960 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5961 ;;Total ram usage:        1 bytes
  5962 ;; Hardware stack levels used: 1
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_eventRead
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text23
  5971   003664                     __ptext23:
  5972                           	callstack 0
  5973   003664                     _serialRead:
  5974                           	callstack 28
  5975   003664                     
  5976                           ;serial.c: 31:     char resp = 0;
  5977   003664  0E00               	movlw	0
  5978   003666  6E01               	movwf	serialRead@resp^0,c
  5979   003668                     
  5980                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  5981   003668  A2AB               	btfss	171,1,c	;volatile
  5982   00366A  EF39  F01B         	goto	u3451
  5983   00366E  EF3B  F01B         	goto	u3450
  5984   003672                     u3451:
  5985   003672  EF3D  F01B         	goto	l3938
  5986   003676                     u3450:
  5987   003676                     
  5988                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  5989   003676  98AB               	bcf	171,4,c	;volatile
  5990                           
  5991                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  5992   003678  88AB               	bsf	171,4,c	;volatile
  5993   00367A                     l3938:
  5994                           
  5995                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  5996   00367A  AA9E               	btfss	158,5,c	;volatile
  5997   00367C  EF42  F01B         	goto	u3461
  5998   003680  EF44  F01B         	goto	u3460
  5999   003684                     u3461:
  6000   003684  EF46  F01B         	goto	l3942
  6001   003688                     u3460:
  6002   003688                     
  6003                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  6004   003688  CFAE F001          	movff	4014,serialRead@resp	;volatile
  6005   00368C                     l3942:
  6006                           
  6007                           ;serial.c: 43:     return resp;
  6008   00368C  5001               	movf	serialRead@resp^0,w,c
  6009   00368E  0012               	return		;funcret
  6010   003690                     __end_of_serialRead:
  6011                           	callstack 0
  6012                           
  6013 ;; *************** function _kpRead *****************
  6014 ;; Defined at:
  6015 ;;		line 29 in file "keypad.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;		None
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;		None
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  1    wreg      unsigned char 
  6022 ;; Registers used:
  6023 ;;		wreg, status,2
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0
  6030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6032 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6033 ;;Total ram usage:        0 bytes
  6034 ;; Hardware stack levels used: 1
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_eventRead
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text24
  6043   003884                     __ptext24:
  6044                           	callstack 0
  6045   003884                     _kpRead:
  6046                           	callstack 28
  6047   003884                     
  6048                           ;keypad.c: 30:     return valor;
  6049   003884  505F               	movf	_valor^0,w,c
  6050   003886  0012               	return		;funcret
  6051   003888                     __end_of_kpRead:
  6052                           	callstack 0
  6053                           
  6054 ;; *************** function _getProt *****************
  6055 ;; Defined at:
  6056 ;;		line 128 in file "var.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      PTR unsigned char 
  6063 ;; Registers used:
  6064 ;;		wreg
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6070 ;;      Params:         2       0       0       0       0       0       0       0       0
  6071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6073 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6074 ;;Total ram usage:        2 bytes
  6075 ;; Hardware stack levels used: 1
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_eventRead
  6080 ;;		_smLoop
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           	psect	text25
  6085   003888                     __ptext25:
  6086                           	callstack 0
  6087   003888                     _getProt:
  6088                           	callstack 29
  6089   003888                     
  6090                           ;var.c: 130:     return prot;
  6091   003888  0EC2               	movlw	_prot& (0+255)
  6092   00388A  0012               	return		;funcret
  6093   00388C                     __end_of_getProt:
  6094                           	callstack 0
  6095                           
  6096 ;; *************** function _getLanguage *****************
  6097 ;; Defined at:
  6098 ;;		line 117 in file "var.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;		None
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  1    wreg      unsigned char 
  6105 ;; Registers used:
  6106 ;;		wreg, status,2
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6112 ;;      Params:         0       0       0       0       0       0       0       0       0
  6113 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6115 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6116 ;;Total ram usage:        0 bytes
  6117 ;; Hardware stack levels used: 1
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_eventRead
  6122 ;;		_outputPrint
  6123 ;;		_smLoop
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text26
  6128   00388C                     __ptext26:
  6129                           	callstack 0
  6130   00388C                     _getLanguage:
  6131                           	callstack 28
  6132   00388C                     
  6133                           ;var.c: 118:     return language;
  6134   00388C  5054               	movf	_language^0,w,c
  6135   00388E  0012               	return		;funcret
  6136   003890                     __end_of_getLanguage:
  6137                           	callstack 0
  6138                           
  6139 ;; *************** function ___llmod *****************
  6140 ;; Defined at:
  6141 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\llmod.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  dividend        4    0[COMRAM] unsigned long 
  6144 ;;  divisor         4    4[COMRAM] unsigned long 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  counter         1    8[COMRAM] unsigned char 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  4    0[COMRAM] unsigned long 
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6156 ;;      Params:         8       0       0       0       0       0       0       0       0
  6157 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6159 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6160 ;;Total ram usage:        9 bytes
  6161 ;; Hardware stack levels used: 1
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_smLoop
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text27
  6170   002FBA                     __ptext27:
  6171                           	callstack 0
  6172   002FBA                     ___llmod:
  6173                           	callstack 29
  6174   002FBA  5005               	movf	___llmod@divisor^0,w,c
  6175   002FBC  1006               	iorwf	(___llmod@divisor+1)^0,w,c
  6176   002FBE  1007               	iorwf	(___llmod@divisor+2)^0,w,c
  6177   002FC0  1008               	iorwf	(___llmod@divisor+3)^0,w,c
  6178   002FC2  B4D8               	btfsc	status,2,c
  6179   002FC4  EFE6  F017         	goto	u4171
  6180   002FC8  EFE8  F017         	goto	u4170
  6181   002FCC                     u4171:
  6182   002FCC  EF18  F018         	goto	l1269
  6183   002FD0                     u4170:
  6184   002FD0  0E01               	movlw	1
  6185   002FD2  6E09               	movwf	___llmod@counter^0,c
  6186   002FD4  EFF2  F017         	goto	l4636
  6187   002FD8                     l4634:
  6188   002FD8  90D8               	bcf	status,0,c
  6189   002FDA  3605               	rlcf	___llmod@divisor^0,f,c
  6190   002FDC  3606               	rlcf	(___llmod@divisor+1)^0,f,c
  6191   002FDE  3607               	rlcf	(___llmod@divisor+2)^0,f,c
  6192   002FE0  3608               	rlcf	(___llmod@divisor+3)^0,f,c
  6193   002FE2  2A09               	incf	___llmod@counter^0,f,c
  6194   002FE4                     l4636:
  6195   002FE4  AE08               	btfss	(___llmod@divisor+3)^0,7,c
  6196   002FE6  EFF7  F017         	goto	u4181
  6197   002FEA  EFF9  F017         	goto	u4180
  6198   002FEE                     u4181:
  6199   002FEE  EFEC  F017         	goto	l4634
  6200   002FF2                     u4180:
  6201   002FF2                     l4638:
  6202   002FF2  5005               	movf	___llmod@divisor^0,w,c
  6203   002FF4  5C01               	subwf	___llmod@dividend^0,w,c
  6204   002FF6  5006               	movf	(___llmod@divisor+1)^0,w,c
  6205   002FF8  5802               	subwfb	(___llmod@dividend+1)^0,w,c
  6206   002FFA  5007               	movf	(___llmod@divisor+2)^0,w,c
  6207   002FFC  5803               	subwfb	(___llmod@dividend+2)^0,w,c
  6208   002FFE  5008               	movf	(___llmod@divisor+3)^0,w,c
  6209   003000  5804               	subwfb	(___llmod@dividend+3)^0,w,c
  6210   003002  A0D8               	btfss	status,0,c
  6211   003004  EF06  F018         	goto	u4191
  6212   003008  EF08  F018         	goto	u4190
  6213   00300C                     u4191:
  6214   00300C  EF10  F018         	goto	l4642
  6215   003010                     u4190:
  6216   003010  5005               	movf	___llmod@divisor^0,w,c
  6217   003012  5E01               	subwf	___llmod@dividend^0,f,c
  6218   003014  5006               	movf	(___llmod@divisor+1)^0,w,c
  6219   003016  5A02               	subwfb	(___llmod@dividend+1)^0,f,c
  6220   003018  5007               	movf	(___llmod@divisor+2)^0,w,c
  6221   00301A  5A03               	subwfb	(___llmod@dividend+2)^0,f,c
  6222   00301C  5008               	movf	(___llmod@divisor+3)^0,w,c
  6223   00301E  5A04               	subwfb	(___llmod@dividend+3)^0,f,c
  6224   003020                     l4642:
  6225   003020  90D8               	bcf	status,0,c
  6226   003022  3208               	rrcf	(___llmod@divisor+3)^0,f,c
  6227   003024  3207               	rrcf	(___llmod@divisor+2)^0,f,c
  6228   003026  3206               	rrcf	(___llmod@divisor+1)^0,f,c
  6229   003028  3205               	rrcf	___llmod@divisor^0,f,c
  6230   00302A  2E09               	decfsz	___llmod@counter^0,f,c
  6231   00302C  EFF9  F017         	goto	l4638
  6232   003030                     l1269:
  6233   003030  C001  F001         	movff	___llmod@dividend,?___llmod
  6234   003034  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  6235   003038  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  6236   00303C  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  6237   003040  0012               	return		;funcret
  6238   003042                     __end_of___llmod:
  6239                           	callstack 0
  6240                           
  6241 ;; *************** function _smInit *****************
  6242 ;; Defined at:
  6243 ;;		line 13 in file "stateMachine.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;		None
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      void 
  6250 ;; Registers used:
  6251 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6257 ;;      Params:         0       0       0       0       0       0       0       0       0
  6258 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6260 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6261 ;;Total ram usage:        0 bytes
  6262 ;; Hardware stack levels used: 1
  6263 ;; Hardware stack levels required when called: 7
  6264 ;; This function calls:
  6265 ;;		_eventInit
  6266 ;;		_setState
  6267 ;;		_varInit
  6268 ;; This function is called by:
  6269 ;;		_main
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text28
  6274   00375E                     __ptext28:
  6275                           	callstack 0
  6276   00375E                     _smInit:
  6277                           	callstack 23
  6278   00375E                     
  6279                           ;stateMachine.c: 14:     varInit();
  6280   00375E  EC66  F010         	call	_varInit	;wreg free
  6281   003762                     
  6282                           ;stateMachine.c: 15:     setState(STATE_MAIN);
  6283   003762  0E08               	movlw	8
  6284   003764  EC21  F01C         	call	_setState
  6285   003768                     
  6286                           ;stateMachine.c: 16:     eventInit();
  6287   003768  ECF6  F01B         	call	_eventInit	;wreg free
  6288   00376C                     
  6289                           ;stateMachine.c: 17:     t = 0;
  6290   00376C  0E00               	movlw	0
  6291   00376E  0100               	movlb	0	; () banked
  6292   003770  6F60               	movwf	_t& (0+255),b
  6293   003772  0E00               	movlw	0
  6294   003774  6F61               	movwf	(_t+1)& (0+255),b
  6295   003776  0E00               	movlw	0
  6296   003778  6F62               	movwf	(_t+2)& (0+255),b
  6297   00377A  0E00               	movlw	0
  6298   00377C  6F63               	movwf	(_t+3)& (0+255),b
  6299   00377E                     
  6300                           ; BSR set to: 0
  6301   00377E  0012               	return		;funcret
  6302   003780                     __end_of_smInit:
  6303                           	callstack 0
  6304                           
  6305 ;; *************** function _varInit *****************
  6306 ;; Defined at:
  6307 ;;		line 22 in file "var.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;		None
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6321 ;;      Params:         0       0       0       0       0       0       0       0       0
  6322 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6323 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6324 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6325 ;;Total ram usage:        8 bytes
  6326 ;; Hardware stack levels used: 1
  6327 ;; Hardware stack levels required when called: 6
  6328 ;; This function calls:
  6329 ;;		_bcd2dec
  6330 ;;		_dec2bcd
  6331 ;;		_dsReadData
  6332 ;;		_dsWriteData
  6333 ;;		_setAlarmLevel
  6334 ;; This function is called by:
  6335 ;;		_smInit
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           	psect	text29
  6340   0020CC                     __ptext29:
  6341                           	callstack 0
  6342   0020CC                     _varInit:
  6343                           	callstack 23
  6344   0020CC                     
  6345                           ;var.c: 23:     maxTemp = 100;
  6346   0020CC  0E00               	movlw	0
  6347   0020CE  0100               	movlb	0	; () banked
  6348   0020D0  6FAC               	movwf	(_maxTemp+1)& (0+255),b
  6349   0020D2  0E64               	movlw	100
  6350   0020D4  6FAB               	movwf	_maxTemp& (0+255),b
  6351                           
  6352                           ;var.c: 24:     volt = 50;
  6353   0020D6  0E32               	movlw	50
  6354   0020D8  6FBE               	movwf	_volt& (0+255),b
  6355                           
  6356                           ;var.c: 25:     voltMin = 33;
  6357   0020DA  0E21               	movlw	33
  6358   0020DC  6FBD               	movwf	_voltMin& (0+255),b
  6359                           
  6360                           ;var.c: 26:     state = 0;
  6361   0020DE  0E00               	movlw	0
  6362   0020E0  6FBF               	movwf	_state& (0+255),b
  6363                           
  6364                           ;var.c: 27:     time = 1000;
  6365   0020E2  0E03               	movlw	3
  6366   0020E4  6FB2               	movwf	(_time+1)& (0+255),b
  6367   0020E6  0EE8               	movlw	232
  6368   0020E8  6FB1               	movwf	_time& (0+255),b
  6369   0020EA                     
  6370                           ; BSR set to: 0
  6371                           ;var.c: 29:     alarmLevelHigh = dsReadData(0x20);
  6372   0020EA  0E00               	movlw	0
  6373   0020EC  6E0F               	movwf	(dsReadData@address+1)^0,c
  6374   0020EE  0E20               	movlw	32
  6375   0020F0  6E0E               	movwf	dsReadData@address^0,c
  6376   0020F2  EC99  F019         	call	_dsReadData	;wreg free
  6377   0020F6  500E               	movf	?_dsReadData^0,w,c
  6378   0020F8  6E53               	movwf	_alarmLevelHigh^0,c
  6379   0020FA                     
  6380                           ;var.c: 30:     alarmLevelLow = dsReadData(0x21);
  6381   0020FA  0E00               	movlw	0
  6382   0020FC  6E0F               	movwf	(dsReadData@address+1)^0,c
  6383   0020FE  0E21               	movlw	33
  6384   002100  6E0E               	movwf	dsReadData@address^0,c
  6385   002102  EC99  F019         	call	_dsReadData	;wreg free
  6386   002106  500E               	movf	?_dsReadData^0,w,c
  6387   002108  6E52               	movwf	_alarmLevelLow^0,c
  6388   00210A                     
  6389                           ;var.c: 31:     language = dsReadData(0x23) != 1 ? 0 : 1;
  6390   00210A  0E00               	movlw	0
  6391   00210C  6E0F               	movwf	(dsReadData@address+1)^0,c
  6392   00210E  0E23               	movlw	35
  6393   002110  6E0E               	movwf	dsReadData@address^0,c
  6394   002112  EC99  F019         	call	_dsReadData	;wreg free
  6395   002116  040E               	decf	?_dsReadData^0,w,c
  6396   002118  100F               	iorwf	(?_dsReadData+1)^0,w,c
  6397   00211A  B4D8               	btfsc	status,2,c
  6398   00211C  EF92  F010         	goto	u4081
  6399   002120  EF95  F010         	goto	u4080
  6400   002124                     u4081:
  6401   002124  0E01               	movlw	1
  6402   002126  EF96  F010         	goto	u4090
  6403   00212A                     u4080:
  6404   00212A  0E00               	movlw	0
  6405   00212C                     u4090:
  6406   00212C  6E54               	movwf	_language^0,c
  6407   00212E                     
  6408                           ;var.c: 32:     if(alarmLevelHigh + alarmLevelLow != dsReadData(0x22)){
  6409   00212E  0E00               	movlw	0
  6410   002130  6E0F               	movwf	(dsReadData@address+1)^0,c
  6411   002132  0E22               	movlw	34
  6412   002134  6E0E               	movwf	dsReadData@address^0,c
  6413   002136  EC99  F019         	call	_dsReadData	;wreg free
  6414   00213A  5052               	movf	_alarmLevelLow^0,w,c
  6415   00213C  C053  F01B         	movff	_alarmLevelHigh,??_varInit
  6416   002140  6A1C               	clrf	(??_varInit+1)^0,c
  6417   002142  261B               	addwf	??_varInit^0,f,c
  6418   002144  0E00               	movlw	0
  6419   002146  221C               	addwfc	(??_varInit+1)^0,f,c
  6420   002148  500E               	movf	?_dsReadData^0,w,c
  6421   00214A  181B               	xorwf	??_varInit^0,w,c
  6422   00214C  E109               	bnz	u4100
  6423   00214E  500F               	movf	(?_dsReadData+1)^0,w,c
  6424   002150  181C               	xorwf	(??_varInit+1)^0,w,c
  6425   002152  B4D8               	btfsc	status,2,c
  6426   002154  EFAE  F010         	goto	u4101
  6427   002158  EFB0  F010         	goto	u4100
  6428   00215C                     u4101:
  6429   00215C  EFC0  F010         	goto	l4552
  6430   002160                     u4100:
  6431   002160                     
  6432                           ;var.c: 33:         setAlarmLevel(0, 0);
  6433   002160  0E00               	movlw	0
  6434   002162  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  6435   002164  0E00               	movlw	0
  6436   002166  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  6437   002168  0E00               	movlw	0
  6438   00216A  6E1A               	movwf	setAlarmLevel@lh^0,c
  6439   00216C  EC50  F019         	call	_setAlarmLevel	;wreg free
  6440                           
  6441                           ;var.c: 34:         setAlarmLevel(120, 1);
  6442   002170  0E00               	movlw	0
  6443   002172  6E19               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  6444   002174  0E78               	movlw	120
  6445   002176  6E18               	movwf	setAlarmLevel@newAlarmLevel^0,c
  6446   002178  0E01               	movlw	1
  6447   00217A  6E1A               	movwf	setAlarmLevel@lh^0,c
  6448   00217C  EC50  F019         	call	_setAlarmLevel	;wreg free
  6449   002180                     l4552:
  6450                           
  6451                           ;var.c: 37:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x00)& 0x7f)) == 0 ? 0 : (bcd2d
      +                          ec(dsReadData(0x00)& 0x7f))),0x00));
  6452   002180  0E00               	movlw	0
  6453   002182  6E0F               	movwf	(dsReadData@address+1)^0,c
  6454   002184  0E00               	movlw	0
  6455   002186  6E0E               	movwf	dsReadData@address^0,c
  6456   002188  EC99  F019         	call	_dsReadData	;wreg free
  6457   00218C  0E7F               	movlw	127
  6458   00218E  140E               	andwf	?_dsReadData^0,w,c
  6459   002190  6E13               	movwf	bcd2dec@value^0,c
  6460   002192  6A14               	clrf	(bcd2dec@value+1)^0,c
  6461   002194  EC00  F01A         	call	_bcd2dec	;wreg free
  6462   002198  5013               	movf	?_bcd2dec^0,w,c
  6463   00219A  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  6464   00219C  B4D8               	btfsc	status,2,c
  6465   00219E  EFD3  F010         	goto	u4111
  6466   0021A2  EFD5  F010         	goto	u4110
  6467   0021A6                     u4111:
  6468   0021A6  EFE7  F010         	goto	l4556
  6469   0021AA                     u4110:
  6470   0021AA  0E00               	movlw	0
  6471   0021AC  6E0F               	movwf	(dsReadData@address+1)^0,c
  6472   0021AE  0E00               	movlw	0
  6473   0021B0  6E0E               	movwf	dsReadData@address^0,c
  6474   0021B2  EC99  F019         	call	_dsReadData	;wreg free
  6475   0021B6  0E7F               	movlw	127
  6476   0021B8  140E               	andwf	?_dsReadData^0,w,c
  6477   0021BA  6E13               	movwf	bcd2dec@value^0,c
  6478   0021BC  6A14               	clrf	(bcd2dec@value+1)^0,c
  6479   0021BE  EC00  F01A         	call	_bcd2dec	;wreg free
  6480   0021C2  C013  F01D         	movff	?_bcd2dec,_varInit$595
  6481   0021C6  C014  F01E         	movff	?_bcd2dec+1,_varInit$595+1
  6482   0021CA  EFEB  F010         	goto	l4558
  6483   0021CE                     l4556:
  6484   0021CE  0E00               	movlw	0
  6485   0021D0  6E1E               	movwf	(_varInit$595+1)^0,c
  6486   0021D2  0E00               	movlw	0
  6487   0021D4  6E1D               	movwf	_varInit$595^0,c
  6488   0021D6                     l4558:
  6489   0021D6  0E00               	movlw	0
  6490   0021D8  6E16               	movwf	(dsWriteData@address+1)^0,c
  6491   0021DA  0E00               	movlw	0
  6492   0021DC  6E15               	movwf	dsWriteData@address^0,c
  6493   0021DE  C01D  F00F         	movff	_varInit$595,dec2bcd@value
  6494   0021E2  C01E  F010         	movff	_varInit$595+1,dec2bcd@value+1
  6495   0021E6  EC99  F018         	call	_dec2bcd	;wreg free
  6496   0021EA  500F               	movf	?_dec2bcd^0,w,c
  6497   0021EC  ECD7  F01A         	call	_dsWriteData
  6498   0021F0                     
  6499                           ;var.c: 38:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x7f)) == 0 ? 45 : (bcd2
      +                          dec(dsReadData(0x01)& 0x7f))),0x01));
  6500   0021F0  0E00               	movlw	0
  6501   0021F2  6E0F               	movwf	(dsReadData@address+1)^0,c
  6502   0021F4  0E01               	movlw	1
  6503   0021F6  6E0E               	movwf	dsReadData@address^0,c
  6504   0021F8  EC99  F019         	call	_dsReadData	;wreg free
  6505   0021FC  0E7F               	movlw	127
  6506   0021FE  140E               	andwf	?_dsReadData^0,w,c
  6507   002200  6E13               	movwf	bcd2dec@value^0,c
  6508   002202  6A14               	clrf	(bcd2dec@value+1)^0,c
  6509   002204  EC00  F01A         	call	_bcd2dec	;wreg free
  6510   002208  5013               	movf	?_bcd2dec^0,w,c
  6511   00220A  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  6512   00220C  B4D8               	btfsc	status,2,c
  6513   00220E  EF0B  F011         	goto	u4121
  6514   002212  EF0D  F011         	goto	u4120
  6515   002216                     u4121:
  6516   002216  EF1F  F011         	goto	l4564
  6517   00221A                     u4120:
  6518   00221A  0E00               	movlw	0
  6519   00221C  6E0F               	movwf	(dsReadData@address+1)^0,c
  6520   00221E  0E01               	movlw	1
  6521   002220  6E0E               	movwf	dsReadData@address^0,c
  6522   002222  EC99  F019         	call	_dsReadData	;wreg free
  6523   002226  0E7F               	movlw	127
  6524   002228  140E               	andwf	?_dsReadData^0,w,c
  6525   00222A  6E13               	movwf	bcd2dec@value^0,c
  6526   00222C  6A14               	clrf	(bcd2dec@value+1)^0,c
  6527   00222E  EC00  F01A         	call	_bcd2dec	;wreg free
  6528   002232  C013  F01F         	movff	?_bcd2dec,_varInit$596
  6529   002236  C014  F020         	movff	?_bcd2dec+1,_varInit$596+1
  6530   00223A  EF23  F011         	goto	l4566
  6531   00223E                     l4564:
  6532   00223E  0E00               	movlw	0
  6533   002240  6E20               	movwf	(_varInit$596+1)^0,c
  6534   002242  0E2D               	movlw	45
  6535   002244  6E1F               	movwf	_varInit$596^0,c
  6536   002246                     l4566:
  6537   002246  0E00               	movlw	0
  6538   002248  6E16               	movwf	(dsWriteData@address+1)^0,c
  6539   00224A  0E01               	movlw	1
  6540   00224C  6E15               	movwf	dsWriteData@address^0,c
  6541   00224E  C01F  F00F         	movff	_varInit$596,dec2bcd@value
  6542   002252  C020  F010         	movff	_varInit$596+1,dec2bcd@value+1
  6543   002256  EC99  F018         	call	_dec2bcd	;wreg free
  6544   00225A  500F               	movf	?_dec2bcd^0,w,c
  6545   00225C  ECD7  F01A         	call	_dsWriteData
  6546   002260                     
  6547                           ;var.c: 39:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x7f)) == 0 ? 15 : (bcd2
      +                          dec(dsReadData(0x02)& 0x7f))),0x02));
  6548   002260  0E00               	movlw	0
  6549   002262  6E0F               	movwf	(dsReadData@address+1)^0,c
  6550   002264  0E02               	movlw	2
  6551   002266  6E0E               	movwf	dsReadData@address^0,c
  6552   002268  EC99  F019         	call	_dsReadData	;wreg free
  6553   00226C  0E7F               	movlw	127
  6554   00226E  140E               	andwf	?_dsReadData^0,w,c
  6555   002270  6E13               	movwf	bcd2dec@value^0,c
  6556   002272  6A14               	clrf	(bcd2dec@value+1)^0,c
  6557   002274  EC00  F01A         	call	_bcd2dec	;wreg free
  6558   002278  5013               	movf	?_bcd2dec^0,w,c
  6559   00227A  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  6560   00227C  B4D8               	btfsc	status,2,c
  6561   00227E  EF43  F011         	goto	u4131
  6562   002282  EF45  F011         	goto	u4130
  6563   002286                     u4131:
  6564   002286  EF57  F011         	goto	l4572
  6565   00228A                     u4130:
  6566   00228A  0E00               	movlw	0
  6567   00228C  6E0F               	movwf	(dsReadData@address+1)^0,c
  6568   00228E  0E02               	movlw	2
  6569   002290  6E0E               	movwf	dsReadData@address^0,c
  6570   002292  EC99  F019         	call	_dsReadData	;wreg free
  6571   002296  0E7F               	movlw	127
  6572   002298  140E               	andwf	?_dsReadData^0,w,c
  6573   00229A  6E13               	movwf	bcd2dec@value^0,c
  6574   00229C  6A14               	clrf	(bcd2dec@value+1)^0,c
  6575   00229E  EC00  F01A         	call	_bcd2dec	;wreg free
  6576   0022A2  C013  F021         	movff	?_bcd2dec,_varInit$597
  6577   0022A6  C014  F022         	movff	?_bcd2dec+1,_varInit$597+1
  6578   0022AA  EF5B  F011         	goto	l4574
  6579   0022AE                     l4572:
  6580   0022AE  0E00               	movlw	0
  6581   0022B0  6E22               	movwf	(_varInit$597+1)^0,c
  6582   0022B2  0E0F               	movlw	15
  6583   0022B4  6E21               	movwf	_varInit$597^0,c
  6584   0022B6                     l4574:
  6585   0022B6  0E00               	movlw	0
  6586   0022B8  6E16               	movwf	(dsWriteData@address+1)^0,c
  6587   0022BA  0E02               	movlw	2
  6588   0022BC  6E15               	movwf	dsWriteData@address^0,c
  6589   0022BE  C021  F00F         	movff	_varInit$597,dec2bcd@value
  6590   0022C2  C022  F010         	movff	_varInit$597+1,dec2bcd@value+1
  6591   0022C6  EC99  F018         	call	_dec2bcd	;wreg free
  6592   0022CA  500F               	movf	?_dec2bcd^0,w,c
  6593   0022CC  ECD7  F01A         	call	_dsWriteData
  6594   0022D0                     
  6595                           ;var.c: 42:     (dsWriteData(dec2bcd(18),0x04));
  6596   0022D0  0E00               	movlw	0
  6597   0022D2  6E16               	movwf	(dsWriteData@address+1)^0,c
  6598   0022D4  0E04               	movlw	4
  6599   0022D6  6E15               	movwf	dsWriteData@address^0,c
  6600   0022D8  0E00               	movlw	0
  6601   0022DA  6E10               	movwf	(dec2bcd@value+1)^0,c
  6602   0022DC  0E12               	movlw	18
  6603   0022DE  6E0F               	movwf	dec2bcd@value^0,c
  6604   0022E0  EC99  F018         	call	_dec2bcd	;wreg free
  6605   0022E4  500F               	movf	?_dec2bcd^0,w,c
  6606   0022E6  ECD7  F01A         	call	_dsWriteData
  6607   0022EA                     
  6608                           ;var.c: 43:     (dsWriteData(dec2bcd(10),0x05));
  6609   0022EA  0E00               	movlw	0
  6610   0022EC  6E16               	movwf	(dsWriteData@address+1)^0,c
  6611   0022EE  0E05               	movlw	5
  6612   0022F0  6E15               	movwf	dsWriteData@address^0,c
  6613   0022F2  0E00               	movlw	0
  6614   0022F4  6E10               	movwf	(dec2bcd@value+1)^0,c
  6615   0022F6  0E0A               	movlw	10
  6616   0022F8  6E0F               	movwf	dec2bcd@value^0,c
  6617   0022FA  EC99  F018         	call	_dec2bcd	;wreg free
  6618   0022FE  500F               	movf	?_dec2bcd^0,w,c
  6619   002300  ECD7  F01A         	call	_dsWriteData
  6620   002304  0012               	return		;funcret
  6621   002306                     __end_of_varInit:
  6622                           	callstack 0
  6623                           
  6624 ;; *************** function _setAlarmLevel *****************
  6625 ;; Defined at:
  6626 ;;		line 101 in file "var.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  newAlarmLeve    2   23[COMRAM] int 
  6629 ;;  lh              1   25[COMRAM] unsigned char 
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  1    wreg      void 
  6634 ;; Registers used:
  6635 ;;		wreg, status,2, status,0, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6641 ;;      Params:         3       0       0       0       0       0       0       0       0
  6642 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6644 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6645 ;;Total ram usage:        3 bytes
  6646 ;; Hardware stack levels used: 1
  6647 ;; Hardware stack levels required when called: 5
  6648 ;; This function calls:
  6649 ;;		_dsWriteData
  6650 ;; This function is called by:
  6651 ;;		_smLoop
  6652 ;;		_varInit
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text30
  6657   0032A0                     __ptext30:
  6658                           	callstack 0
  6659   0032A0                     _setAlarmLevel:
  6660                           	callstack 24
  6661   0032A0                     
  6662                           ;var.c: 102:     if(lh == 1){
  6663   0032A0  041A               	decf	setAlarmLevel@lh^0,w,c
  6664   0032A2  A4D8               	btfss	status,2,c
  6665   0032A4  EF56  F019         	goto	u3491
  6666   0032A8  EF58  F019         	goto	u3490
  6667   0032AC                     u3491:
  6668   0032AC  EF63  F019         	goto	l810
  6669   0032B0                     u3490:
  6670   0032B0                     
  6671                           ;var.c: 103:         alarmLevelHigh = newAlarmLevel;
  6672   0032B0  C018  F053         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelHigh
  6673   0032B4                     
  6674                           ;var.c: 105:         dsWriteData(alarmLevelHigh, 0x20);
  6675   0032B4  0E00               	movlw	0
  6676   0032B6  6E16               	movwf	(dsWriteData@address+1)^0,c
  6677   0032B8  0E20               	movlw	32
  6678   0032BA  6E15               	movwf	dsWriteData@address^0,c
  6679   0032BC  5053               	movf	_alarmLevelHigh^0,w,c
  6680   0032BE  ECD7  F01A         	call	_dsWriteData
  6681                           
  6682                           ;var.c: 106:     }
  6683   0032C2  EF6C  F019         	goto	l811
  6684   0032C6                     l810:
  6685                           
  6686                           ;var.c: 108:     {;var.c: 109:         alarmLevelLow = newAlarmLevel;
  6687   0032C6  C018  F052         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelLow
  6688   0032CA                     
  6689                           ;var.c: 111:         dsWriteData(alarmLevelLow, 0x21);
  6690   0032CA  0E00               	movlw	0
  6691   0032CC  6E16               	movwf	(dsWriteData@address+1)^0,c
  6692   0032CE  0E21               	movlw	33
  6693   0032D0  6E15               	movwf	dsWriteData@address^0,c
  6694   0032D2  5052               	movf	_alarmLevelLow^0,w,c
  6695   0032D4  ECD7  F01A         	call	_dsWriteData
  6696   0032D8                     l811:
  6697                           
  6698                           ;var.c: 113:     dsWriteData(alarmLevelHigh + alarmLevelLow, 0x22);
  6699   0032D8  0E00               	movlw	0
  6700   0032DA  6E16               	movwf	(dsWriteData@address+1)^0,c
  6701   0032DC  0E22               	movlw	34
  6702   0032DE  6E15               	movwf	dsWriteData@address^0,c
  6703   0032E0  5053               	movf	_alarmLevelHigh^0,w,c
  6704   0032E2  2452               	addwf	_alarmLevelLow^0,w,c
  6705   0032E4  ECD7  F01A         	call	_dsWriteData
  6706   0032E8  0012               	return		;funcret
  6707   0032EA                     __end_of_setAlarmLevel:
  6708                           	callstack 0
  6709                           
  6710 ;; *************** function _dsWriteData *****************
  6711 ;; Defined at:
  6712 ;;		line 26 in file "ds1307.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  value           1    wreg     unsigned char 
  6715 ;;  address         2   20[COMRAM] int 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  value           1   22[COMRAM] unsigned char 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  1    wreg      void 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0, cstack
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6727 ;;      Params:         2       0       0       0       0       0       0       0       0
  6728 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6730 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6731 ;;Total ram usage:        3 bytes
  6732 ;; Hardware stack levels used: 1
  6733 ;; Hardware stack levels required when called: 4
  6734 ;; This function calls:
  6735 ;;		_i2cWriteByte
  6736 ;; This function is called by:
  6737 ;;		_varInit
  6738 ;;		_setTime
  6739 ;;		_setAlarmLevel
  6740 ;;		_setLanguage
  6741 ;;		_dsStartClock
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text31
  6746   0035AE                     __ptext31:
  6747                           	callstack 0
  6748   0035AE                     _dsWriteData:
  6749                           	callstack 24
  6750                           
  6751                           ;incstack = 0
  6752                           ;dsWriteData@value stored from wreg
  6753   0035AE  6E17               	movwf	dsWriteData@value^0,c
  6754   0035B0                     
  6755                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  6756   0035B0  0E00               	movlw	0
  6757   0035B2  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6758   0035B4  0EDE               	movlw	222
  6759   0035B6  6E09               	movwf	i2cWriteByte@byte^0,c
  6760   0035B8  0E01               	movlw	1
  6761   0035BA  ECCA  F018         	call	_i2cWriteByte
  6762                           
  6763                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  6764   0035BE  0E00               	movlw	0
  6765   0035C0  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6766   0035C2  C015  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  6767   0035C6  0E00               	movlw	0
  6768   0035C8  ECCA  F018         	call	_i2cWriteByte
  6769                           
  6770                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  6771   0035CC  0E01               	movlw	1
  6772   0035CE  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6773   0035D0  C017  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  6774   0035D4  0E00               	movlw	0
  6775   0035D6  ECCA  F018         	call	_i2cWriteByte
  6776   0035DA  0012               	return		;funcret
  6777   0035DC                     __end_of_dsWriteData:
  6778                           	callstack 0
  6779                           
  6780 ;; *************** function _dsReadData *****************
  6781 ;; Defined at:
  6782 ;;		line 31 in file "ds1307.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  address         2   13[COMRAM] int 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  result          2   16[COMRAM] int 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  2   13[COMRAM] int 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6796 ;;      Params:         2       0       0       0       0       0       0       0       0
  6797 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6798 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6799 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6800 ;;Total ram usage:        5 bytes
  6801 ;; Hardware stack levels used: 1
  6802 ;; Hardware stack levels required when called: 4
  6803 ;; This function calls:
  6804 ;;		_i2cReadByte
  6805 ;;		_i2cWriteByte
  6806 ;; This function is called by:
  6807 ;;		_outputPrint
  6808 ;;		_varInit
  6809 ;;		_getTime
  6810 ;;		_dsStartClock
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text32
  6815   003332                     __ptext32:
  6816                           	callstack 0
  6817   003332                     _dsReadData:
  6818                           	callstack 23
  6819   003332                     
  6820                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  6821   003332  0E00               	movlw	0
  6822   003334  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6823   003336  0EDE               	movlw	222
  6824   003338  6E09               	movwf	i2cWriteByte@byte^0,c
  6825   00333A  0E01               	movlw	1
  6826   00333C  ECCA  F018         	call	_i2cWriteByte
  6827                           
  6828                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  6829   003340  0E00               	movlw	0
  6830   003342  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6831   003344  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  6832   003348  0E00               	movlw	0
  6833   00334A  ECCA  F018         	call	_i2cWriteByte
  6834                           
  6835                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  6836   00334E  0E00               	movlw	0
  6837   003350  6E08               	movwf	i2cWriteByte@send_stop^0,c
  6838   003352  0EDF               	movlw	223
  6839   003354  6E09               	movwf	i2cWriteByte@byte^0,c
  6840   003356  0E01               	movlw	1
  6841   003358  ECCA  F018         	call	_i2cWriteByte
  6842                           
  6843                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  6844   00335C  0E01               	movlw	1
  6845   00335E  6E08               	movwf	i2cReadByte@send_stop^0,c
  6846   003360  0E01               	movlw	1
  6847   003362  EC26  F019         	call	_i2cReadByte
  6848   003366  6E10               	movwf	??_dsReadData^0,c
  6849   003368  5010               	movf	??_dsReadData^0,w,c
  6850   00336A  6E11               	movwf	dsReadData@result^0,c
  6851   00336C  6A12               	clrf	(dsReadData@result+1)^0,c
  6852   00336E                     
  6853                           ;ds1307.c: 37:  return result;
  6854   00336E  C011  F00E         	movff	dsReadData@result,?_dsReadData
  6855   003372  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  6856   003376  0012               	return		;funcret
  6857   003378                     __end_of_dsReadData:
  6858                           	callstack 0
  6859                           
  6860 ;; *************** function _i2cWriteByte *****************
  6861 ;; Defined at:
  6862 ;;		line 113 in file "soft_i2c.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;  send_start      1    wreg     unsigned char 
  6865 ;;  send_stop       1    7[COMRAM] unsigned char 
  6866 ;;  byte            1    8[COMRAM] unsigned char 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  send_start      1    9[COMRAM] unsigned char 
  6869 ;;  bit             1   10[COMRAM] unsigned char 
  6870 ;;  nack            1    0        unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      unsigned char 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6880 ;;      Params:         2       0       0       0       0       0       0       0       0
  6881 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6883 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6884 ;;Total ram usage:        4 bytes
  6885 ;; Hardware stack levels used: 1
  6886 ;; Hardware stack levels required when called: 3
  6887 ;; This function calls:
  6888 ;;		_i2c_read_bit
  6889 ;;		_i2c_start
  6890 ;;		_i2c_stop
  6891 ;;		_i2c_write_bit
  6892 ;; This function is called by:
  6893 ;;		_dsWriteData
  6894 ;;		_dsReadData
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text33
  6899   003194                     __ptext33:
  6900                           	callstack 0
  6901   003194                     _i2cWriteByte:
  6902                           	callstack 24
  6903                           
  6904                           ;incstack = 0
  6905                           ;i2cWriteByte@send_start stored from wreg
  6906   003194  6E0A               	movwf	i2cWriteByte@send_start^0,c
  6907   003196                     
  6908                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  6909   003196  500A               	movf	i2cWriteByte@send_start^0,w,c
  6910   003198  B4D8               	btfsc	status,2,c
  6911   00319A  EFD1  F018         	goto	u3101
  6912   00319E  EFD3  F018         	goto	u3100
  6913   0031A2                     u3101:
  6914   0031A2  EFD5  F018         	goto	l3646
  6915   0031A6                     u3100:
  6916   0031A6                     
  6917                           ;soft_i2c.c: 117:   i2c_start();
  6918   0031A6  ECBC  F019         	call	_i2c_start	;wreg free
  6919   0031AA                     l3646:
  6920                           
  6921                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  6922   0031AA  0E00               	movlw	0
  6923   0031AC  6E0B               	movwf	i2cWriteByte@bit^0,c
  6924   0031AE                     l3652:
  6925                           
  6926                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  6927   0031AE  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  6928   0031B0  EFDC  F018         	goto	u3111
  6929   0031B4  EFDF  F018         	goto	u3110
  6930   0031B8                     u3111:
  6931   0031B8  0E01               	movlw	1
  6932   0031BA  EFE0  F018         	goto	u3120
  6933   0031BE                     u3110:
  6934   0031BE  0E00               	movlw	0
  6935   0031C0                     u3120:
  6936   0031C0  ECFA  F018         	call	_i2c_write_bit
  6937   0031C4                     
  6938                           ;soft_i2c.c: 121:   byte <<= 1;
  6939   0031C4  90D8               	bcf	status,0,c
  6940   0031C6  3609               	rlcf	i2cWriteByte@byte^0,f,c
  6941   0031C8                     
  6942                           ;soft_i2c.c: 122:  }
  6943   0031C8  2A0B               	incf	i2cWriteByte@bit^0,f,c
  6944   0031CA  0E07               	movlw	7
  6945   0031CC  640B               	cpfsgt	i2cWriteByte@bit^0,c
  6946   0031CE  EFEB  F018         	goto	u3131
  6947   0031D2  EFED  F018         	goto	u3130
  6948   0031D6                     u3131:
  6949   0031D6  EFD7  F018         	goto	l3652
  6950   0031DA                     u3130:
  6951   0031DA  EC8E  F01A         	call	_i2c_read_bit	;wreg free
  6952   0031DE                     
  6953                           ;soft_i2c.c: 124:  if (send_stop) {
  6954   0031DE  5008               	movf	i2cWriteByte@send_stop^0,w,c
  6955   0031E0  B4D8               	btfsc	status,2,c
  6956   0031E2  EFF5  F018         	goto	u3141
  6957   0031E6  EFF7  F018         	goto	u3140
  6958   0031EA                     u3141:
  6959   0031EA  EFF9  F018         	goto	l414
  6960   0031EE                     u3140:
  6961   0031EE                     
  6962                           ;soft_i2c.c: 125:   i2c_stop();
  6963   0031EE  ECEE  F01A         	call	_i2c_stop	;wreg free
  6964   0031F2                     l414:
  6965   0031F2  0012               	return		;funcret
  6966   0031F4                     __end_of_i2cWriteByte:
  6967                           	callstack 0
  6968                           
  6969 ;; *************** function _i2c_start *****************
  6970 ;; Defined at:
  6971 ;;		line 52 in file "soft_i2c.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;		None
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6988 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6989 ;;Total ram usage:        0 bytes
  6990 ;; Hardware stack levels used: 1
  6991 ;; Hardware stack levels required when called: 2
  6992 ;; This function calls:
  6993 ;;		_I2C_delay
  6994 ;;		_clear_SCL
  6995 ;;		_clear_SDA
  6996 ;;		_read_SCL
  6997 ;;		_read_SDA
  6998 ;; This function is called by:
  6999 ;;		_i2cWriteByte
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text34
  7004   003378                     __ptext34:
  7005                           	callstack 0
  7006   003378                     _i2c_start:
  7007                           	callstack 24
  7008   003378                     
  7009                           ;soft_i2c.c: 54:  if (started) {
  7010   003378  505A               	movf	_started^0,w,c
  7011   00337A  B4D8               	btfsc	status,2,c
  7012   00337C  EFC2  F019         	goto	u3031
  7013   003380  EFC4  F019         	goto	u3030
  7014   003384                     u3031:
  7015   003384  EFD4  F019         	goto	l3582
  7016   003388                     u3030:
  7017   003388                     
  7018                           ;soft_i2c.c: 55:   read_SDA();
  7019   003388  EC21  F01A         	call	_read_SDA	;wreg free
  7020   00338C                     
  7021                           ;soft_i2c.c: 56:   I2C_delay();
  7022   00338C  EC48  F01C         	call	_I2C_delay	;wreg free
  7023   003390                     l3578:
  7024   003390  EC3D  F01A         	call	_read_SCL	;wreg free
  7025   003394  0900               	iorlw	0
  7026   003396  B4D8               	btfsc	status,2,c
  7027   003398  EFD0  F019         	goto	u3041
  7028   00339C  EFD2  F019         	goto	u3040
  7029   0033A0                     u3041:
  7030   0033A0  EFC8  F019         	goto	l3578
  7031   0033A4                     u3040:
  7032   0033A4                     
  7033                           ;soft_i2c.c: 59:   I2C_delay();
  7034   0033A4  EC48  F01C         	call	_I2C_delay	;wreg free
  7035   0033A8                     l3582:
  7036                           
  7037                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  7038   0033A8  EC21  F01A         	call	_read_SDA	;wreg free
  7039   0033AC                     
  7040                           ;soft_i2c.c: 65:  clear_SDA();
  7041   0033AC  EC5D  F01B         	call	_clear_SDA	;wreg free
  7042   0033B0                     
  7043                           ;soft_i2c.c: 66:  I2C_delay();
  7044   0033B0  EC48  F01C         	call	_I2C_delay	;wreg free
  7045   0033B4                     
  7046                           ;soft_i2c.c: 67:  clear_SCL();
  7047   0033B4  EC72  F01B         	call	_clear_SCL	;wreg free
  7048   0033B8                     
  7049                           ;soft_i2c.c: 68:  started = 1;
  7050   0033B8  0E01               	movlw	1
  7051   0033BA  6E5A               	movwf	_started^0,c
  7052   0033BC  0012               	return		;funcret
  7053   0033BE                     __end_of_i2c_start:
  7054                           	callstack 0
  7055                           
  7056 ;; *************** function _i2cReadByte *****************
  7057 ;; Defined at:
  7058 ;;		line 131 in file "soft_i2c.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  nack            1    wreg     unsigned char 
  7061 ;;  send_stop       1    7[COMRAM] unsigned char 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  nack            1    9[COMRAM] unsigned char 
  7064 ;;  bit             2   10[COMRAM] unsigned int 
  7065 ;;  byte            1   12[COMRAM] unsigned char 
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  1    wreg      unsigned char 
  7068 ;; Registers used:
  7069 ;;		wreg, status,2, status,0, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7075 ;;      Params:         1       0       0       0       0       0       0       0       0
  7076 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7077 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7078 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7079 ;;Total ram usage:        6 bytes
  7080 ;; Hardware stack levels used: 1
  7081 ;; Hardware stack levels required when called: 3
  7082 ;; This function calls:
  7083 ;;		_i2c_read_bit
  7084 ;;		_i2c_stop
  7085 ;;		_i2c_write_bit
  7086 ;; This function is called by:
  7087 ;;		_dsReadData
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text35
  7092   00324C                     __ptext35:
  7093                           	callstack 0
  7094   00324C                     _i2cReadByte:
  7095                           	callstack 23
  7096                           
  7097                           ;incstack = 0
  7098                           ;i2cReadByte@nack stored from wreg
  7099   00324C  6E0A               	movwf	i2cReadByte@nack^0,c
  7100   00324E                     
  7101                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  7102   00324E  0E00               	movlw	0
  7103   003250  6E0D               	movwf	i2cReadByte@byte^0,c
  7104                           
  7105                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  7106   003252  0E00               	movlw	0
  7107   003254  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  7108   003256  0E00               	movlw	0
  7109   003258  6E0B               	movwf	i2cReadByte@bit^0,c
  7110   00325A                     l3674:
  7111                           
  7112                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  7113   00325A  EC8E  F01A         	call	_i2c_read_bit	;wreg free
  7114   00325E  6E09               	movwf	??_i2cReadByte^0,c
  7115   003260  500D               	movf	i2cReadByte@byte^0,w,c
  7116   003262  240D               	addwf	i2cReadByte@byte^0,w,c
  7117   003264  1009               	iorwf	??_i2cReadByte^0,w,c
  7118   003266  6E0D               	movwf	i2cReadByte@byte^0,c
  7119   003268                     
  7120                           ;soft_i2c.c: 136:  }
  7121   003268  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  7122   00326A  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  7123   00326C  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  7124   00326E  E109               	bnz	u3150
  7125   003270  0E08               	movlw	8
  7126   003272  5C0B               	subwf	i2cReadByte@bit^0,w,c
  7127   003274  A0D8               	btfss	status,0,c
  7128   003276  EF3F  F019         	goto	u3151
  7129   00327A  EF41  F019         	goto	u3150
  7130   00327E                     u3151:
  7131   00327E  EF2D  F019         	goto	l3674
  7132   003282                     u3150:
  7133   003282                     
  7134                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  7135   003282  500A               	movf	i2cReadByte@nack^0,w,c
  7136   003284  ECFA  F018         	call	_i2c_write_bit
  7137   003288                     
  7138                           ;soft_i2c.c: 138:  if (send_stop) {
  7139   003288  5008               	movf	i2cReadByte@send_stop^0,w,c
  7140   00328A  B4D8               	btfsc	status,2,c
  7141   00328C  EF4A  F019         	goto	u3161
  7142   003290  EF4C  F019         	goto	u3160
  7143   003294                     u3161:
  7144   003294  EF4E  F019         	goto	l3686
  7145   003298                     u3160:
  7146   003298                     
  7147                           ;soft_i2c.c: 139:   i2c_stop();
  7148   003298  ECEE  F01A         	call	_i2c_stop	;wreg free
  7149   00329C                     l3686:
  7150                           
  7151                           ;soft_i2c.c: 141:  return byte;
  7152   00329C  500D               	movf	i2cReadByte@byte^0,w,c
  7153   00329E  0012               	return		;funcret
  7154   0032A0                     __end_of_i2cReadByte:
  7155                           	callstack 0
  7156                           
  7157 ;; *************** function _i2c_write_bit *****************
  7158 ;; Defined at:
  7159 ;;		line 84 in file "soft_i2c.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  bit             1    wreg     unsigned char 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  bit             1    6[COMRAM] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      void 
  7166 ;; Registers used:
  7167 ;;		wreg, status,2, status,0, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7173 ;;      Params:         0       0       0       0       0       0       0       0       0
  7174 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7175 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7176 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7177 ;;Total ram usage:        1 bytes
  7178 ;; Hardware stack levels used: 1
  7179 ;; Hardware stack levels required when called: 2
  7180 ;; This function calls:
  7181 ;;		_I2C_delay
  7182 ;;		_clear_SCL
  7183 ;;		_clear_SDA
  7184 ;;		_read_SCL
  7185 ;;		_read_SDA
  7186 ;; This function is called by:
  7187 ;;		_i2cWriteByte
  7188 ;;		_i2cReadByte
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text36
  7193   0031F4                     __ptext36:
  7194                           	callstack 0
  7195   0031F4                     _i2c_write_bit:
  7196                           	callstack 24
  7197                           
  7198                           ;incstack = 0
  7199                           ;i2c_write_bit@bit stored from wreg
  7200   0031F4  6E07               	movwf	i2c_write_bit@bit^0,c
  7201   0031F6                     
  7202                           ;soft_i2c.c: 85:  if (bit) {
  7203   0031F6  5007               	movf	i2c_write_bit@bit^0,w,c
  7204   0031F8  B4D8               	btfsc	status,2,c
  7205   0031FA  EF01  F019         	goto	u3061
  7206   0031FE  EF03  F019         	goto	u3060
  7207   003202                     u3061:
  7208   003202  EF07  F019         	goto	l3610
  7209   003206                     u3060:
  7210   003206                     
  7211                           ;soft_i2c.c: 86:   read_SDA();
  7212   003206  EC21  F01A         	call	_read_SDA	;wreg free
  7213                           
  7214                           ;soft_i2c.c: 87:  } else {
  7215   00320A  EF09  F019         	goto	l3612
  7216   00320E                     l3610:
  7217                           
  7218                           ;soft_i2c.c: 88:   clear_SDA();
  7219   00320E  EC5D  F01B         	call	_clear_SDA	;wreg free
  7220   003212                     l3612:
  7221                           
  7222                           ;soft_i2c.c: 90:  I2C_delay();
  7223   003212  EC48  F01C         	call	_I2C_delay	;wreg free
  7224   003216                     l3614:
  7225   003216  EC3D  F01A         	call	_read_SCL	;wreg free
  7226   00321A  0900               	iorlw	0
  7227   00321C  B4D8               	btfsc	status,2,c
  7228   00321E  EF13  F019         	goto	u3071
  7229   003222  EF15  F019         	goto	u3070
  7230   003226                     u3071:
  7231   003226  EF0B  F019         	goto	l3614
  7232   00322A                     u3070:
  7233   00322A                     
  7234                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  7235   00322A  5007               	movf	i2c_write_bit@bit^0,w,c
  7236   00322C  B4D8               	btfsc	status,2,c
  7237   00322E  EF1B  F019         	goto	u3081
  7238   003232  EF1D  F019         	goto	u3080
  7239   003236                     u3081:
  7240   003236  EF1F  F019         	goto	l3620
  7241   00323A                     u3080:
  7242   00323A  EC21  F01A         	call	_read_SDA	;wreg free
  7243   00323E                     l3620:
  7244                           
  7245                           ;soft_i2c.c: 95:  I2C_delay();
  7246   00323E  EC48  F01C         	call	_I2C_delay	;wreg free
  7247   003242                     
  7248                           ;soft_i2c.c: 96:  clear_SCL();
  7249   003242  EC72  F01B         	call	_clear_SCL	;wreg free
  7250   003246                     
  7251                           ;soft_i2c.c: 97:  I2C_delay();
  7252   003246  EC48  F01C         	call	_I2C_delay	;wreg free
  7253   00324A  0012               	return		;funcret
  7254   00324C                     __end_of_i2c_write_bit:
  7255                           	callstack 0
  7256                           
  7257 ;; *************** function _i2c_stop *****************
  7258 ;; Defined at:
  7259 ;;		line 71 in file "soft_i2c.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;		None
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      void 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7273 ;;      Params:         0       0       0       0       0       0       0       0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7276 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7277 ;;Total ram usage:        0 bytes
  7278 ;; Hardware stack levels used: 1
  7279 ;; Hardware stack levels required when called: 2
  7280 ;; This function calls:
  7281 ;;		_I2C_delay
  7282 ;;		_clear_SDA
  7283 ;;		_read_SCL
  7284 ;;		_read_SDA
  7285 ;; This function is called by:
  7286 ;;		_i2cWriteByte
  7287 ;;		_i2cReadByte
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text37
  7292   0035DC                     __ptext37:
  7293                           	callstack 0
  7294   0035DC                     _i2c_stop:
  7295                           	callstack 24
  7296   0035DC                     
  7297                           ;soft_i2c.c: 73:  clear_SDA();
  7298   0035DC  EC5D  F01B         	call	_clear_SDA	;wreg free
  7299   0035E0                     
  7300                           ;soft_i2c.c: 74:  I2C_delay();
  7301   0035E0  EC48  F01C         	call	_I2C_delay	;wreg free
  7302   0035E4                     l3596:
  7303   0035E4  EC3D  F01A         	call	_read_SCL	;wreg free
  7304   0035E8  0900               	iorlw	0
  7305   0035EA  B4D8               	btfsc	status,2,c
  7306   0035EC  EFFA  F01A         	goto	u3051
  7307   0035F0  EFFC  F01A         	goto	u3050
  7308   0035F4                     u3051:
  7309   0035F4  EFF2  F01A         	goto	l3596
  7310   0035F8                     u3050:
  7311   0035F8                     
  7312                           ;soft_i2c.c: 76:  I2C_delay();
  7313   0035F8  EC48  F01C         	call	_I2C_delay	;wreg free
  7314   0035FC                     
  7315                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  7316   0035FC  EC21  F01A         	call	_read_SDA	;wreg free
  7317   003600                     
  7318                           ;soft_i2c.c: 80:  I2C_delay();
  7319   003600  EC48  F01C         	call	_I2C_delay	;wreg free
  7320   003604                     
  7321                           ;soft_i2c.c: 81:  started = 0;
  7322   003604  0E00               	movlw	0
  7323   003606  6E5A               	movwf	_started^0,c
  7324   003608  0012               	return		;funcret
  7325   00360A                     __end_of_i2c_stop:
  7326                           	callstack 0
  7327                           
  7328 ;; *************** function _clear_SDA *****************
  7329 ;; Defined at:
  7330 ;;		line 45 in file "soft_i2c.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;		None
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;		None
  7335 ;; Return value:  Size  Location     Type
  7336 ;;                  1    wreg      void 
  7337 ;; Registers used:
  7338 ;;		wreg, status,2, status,0, cstack
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7344 ;;      Params:         0       0       0       0       0       0       0       0       0
  7345 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7346 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7347 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7348 ;;Total ram usage:        0 bytes
  7349 ;; Hardware stack levels used: 1
  7350 ;; Hardware stack levels required when called: 1
  7351 ;; This function calls:
  7352 ;;		_digitalWrite
  7353 ;;		_pinMode
  7354 ;; This function is called by:
  7355 ;;		_i2c_start
  7356 ;;		_i2c_stop
  7357 ;;		_i2c_write_bit
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text38
  7362   0036BA                     __ptext38:
  7363                           	callstack 0
  7364   0036BA                     _clear_SDA:
  7365                           	callstack 24
  7366   0036BA                     
  7367                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  7368   0036BA  0E00               	movlw	0
  7369   0036BC  6E02               	movwf	(pinMode@pin+1)^0,c
  7370   0036BE  0E08               	movlw	8
  7371   0036C0  6E01               	movwf	pinMode@pin^0,c
  7372   0036C2  0E00               	movlw	0
  7373   0036C4  6E04               	movwf	(pinMode@type+1)^0,c
  7374   0036C6  0E00               	movlw	0
  7375   0036C8  6E03               	movwf	pinMode@type^0,c
  7376   0036CA  EC3F  F00F         	call	_pinMode	;wreg free
  7377                           
  7378                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  7379   0036CE  0E00               	movlw	0
  7380   0036D0  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7381   0036D2  0E08               	movlw	8
  7382   0036D4  6E01               	movwf	digitalWrite@pin^0,c
  7383   0036D6  0E00               	movlw	0
  7384   0036D8  6E04               	movwf	(digitalWrite@value+1)^0,c
  7385   0036DA  0E00               	movlw	0
  7386   0036DC  6E03               	movwf	digitalWrite@value^0,c
  7387   0036DE  EC18  F00E         	call	_digitalWrite	;wreg free
  7388   0036E2  0012               	return		;funcret
  7389   0036E4                     __end_of_clear_SDA:
  7390                           	callstack 0
  7391                           
  7392 ;; *************** function _i2c_read_bit *****************
  7393 ;; Defined at:
  7394 ;;		line 100 in file "soft_i2c.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;		None
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  bit             1    6[COMRAM] unsigned char 
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      unsigned char 
  7401 ;; Registers used:
  7402 ;;		wreg, status,2, status,0, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0
  7409 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7411 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7412 ;;Total ram usage:        1 bytes
  7413 ;; Hardware stack levels used: 1
  7414 ;; Hardware stack levels required when called: 2
  7415 ;; This function calls:
  7416 ;;		_I2C_delay
  7417 ;;		_clear_SCL
  7418 ;;		_read_SCL
  7419 ;;		_read_SDA
  7420 ;; This function is called by:
  7421 ;;		_i2cWriteByte
  7422 ;;		_i2cReadByte
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text39
  7427   00351C                     __ptext39:
  7428                           	callstack 0
  7429   00351C                     _i2c_read_bit:
  7430                           	callstack 24
  7431   00351C                     
  7432                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  7433   00351C  EC21  F01A         	call	_read_SDA	;wreg free
  7434   003520                     
  7435                           ;soft_i2c.c: 103:  I2C_delay();
  7436   003520  EC48  F01C         	call	_I2C_delay	;wreg free
  7437   003524                     l3630:
  7438   003524  EC3D  F01A         	call	_read_SCL	;wreg free
  7439   003528  0900               	iorlw	0
  7440   00352A  B4D8               	btfsc	status,2,c
  7441   00352C  EF9A  F01A         	goto	u3091
  7442   003530  EF9C  F01A         	goto	u3090
  7443   003534                     u3091:
  7444   003534  EF92  F01A         	goto	l3630
  7445   003538                     u3090:
  7446   003538                     
  7447                           ;soft_i2c.c: 105:  bit = read_SDA();
  7448   003538  EC21  F01A         	call	_read_SDA	;wreg free
  7449   00353C  6E07               	movwf	i2c_read_bit@bit^0,c
  7450   00353E                     
  7451                           ;soft_i2c.c: 106:  I2C_delay();
  7452   00353E  EC48  F01C         	call	_I2C_delay	;wreg free
  7453   003542                     
  7454                           ;soft_i2c.c: 107:  clear_SCL();
  7455   003542  EC72  F01B         	call	_clear_SCL	;wreg free
  7456                           
  7457                           ;soft_i2c.c: 108:  I2C_delay();
  7458   003546  EC48  F01C         	call	_I2C_delay	;wreg free
  7459   00354A                     
  7460                           ;soft_i2c.c: 109:  return bit;
  7461   00354A  5007               	movf	i2c_read_bit@bit^0,w,c
  7462   00354C  0012               	return		;funcret
  7463   00354E                     __end_of_i2c_read_bit:
  7464                           	callstack 0
  7465                           
  7466 ;; *************** function _read_SDA *****************
  7467 ;; Defined at:
  7468 ;;		line 34 in file "soft_i2c.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;		None
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;		None
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7482 ;;      Params:         0       0       0       0       0       0       0       0       0
  7483 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7484 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7485 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7486 ;;Total ram usage:        0 bytes
  7487 ;; Hardware stack levels used: 1
  7488 ;; Hardware stack levels required when called: 1
  7489 ;; This function calls:
  7490 ;;		_digitalRead
  7491 ;;		_pinMode
  7492 ;; This function is called by:
  7493 ;;		_i2c_start
  7494 ;;		_i2c_stop
  7495 ;;		_i2c_write_bit
  7496 ;;		_i2c_read_bit
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text40
  7501   003442                     __ptext40:
  7502                           	callstack 0
  7503   003442                     _read_SDA:
  7504                           	callstack 24
  7505   003442                     
  7506                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  7507   003442  0E00               	movlw	0
  7508   003444  6E02               	movwf	(pinMode@pin+1)^0,c
  7509   003446  0E08               	movlw	8
  7510   003448  6E01               	movwf	pinMode@pin^0,c
  7511   00344A  0E00               	movlw	0
  7512   00344C  6E04               	movwf	(pinMode@type+1)^0,c
  7513   00344E  0E01               	movlw	1
  7514   003450  6E03               	movwf	pinMode@type^0,c
  7515   003452  EC3F  F00F         	call	_pinMode	;wreg free
  7516                           
  7517                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  7518   003456  0E00               	movlw	0
  7519   003458  6E02               	movwf	(digitalRead@pin+1)^0,c
  7520   00345A  0E08               	movlw	8
  7521   00345C  6E01               	movwf	digitalRead@pin^0,c
  7522   00345E  EC39  F013         	call	_digitalRead	;wreg free
  7523   003462  5001               	movf	?_digitalRead^0,w,c
  7524   003464  1002               	iorwf	(?_digitalRead+1)^0,w,c
  7525   003466  A4D8               	btfss	status,2,c
  7526   003468  EF38  F01A         	goto	u3011
  7527   00346C  EF3B  F01A         	goto	u3010
  7528   003470                     u3011:
  7529   003470  0E01               	movlw	1
  7530   003472  EF3C  F01A         	goto	u3020
  7531   003476                     u3010:
  7532   003476  0E00               	movlw	0
  7533   003478                     u3020:
  7534   003478  0012               	return		;funcret
  7535   00347A                     __end_of_read_SDA:
  7536                           	callstack 0
  7537                           
  7538 ;; *************** function _read_SCL *****************
  7539 ;; Defined at:
  7540 ;;		line 29 in file "soft_i2c.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;		None
  7543 ;; Auto vars:     Size  Location     Type
  7544 ;;		None
  7545 ;; Return value:  Size  Location     Type
  7546 ;;                  1    wreg      unsigned char 
  7547 ;; Registers used:
  7548 ;;		wreg, status,2, status,0, cstack
  7549 ;; Tracked objects:
  7550 ;;		On entry : 0/0
  7551 ;;		On exit  : 0/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7554 ;;      Params:         0       0       0       0       0       0       0       0       0
  7555 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7557 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7558 ;;Total ram usage:        0 bytes
  7559 ;; Hardware stack levels used: 1
  7560 ;; Hardware stack levels required when called: 1
  7561 ;; This function calls:
  7562 ;;		_digitalRead
  7563 ;;		_pinMode
  7564 ;; This function is called by:
  7565 ;;		_i2c_start
  7566 ;;		_i2c_stop
  7567 ;;		_i2c_write_bit
  7568 ;;		_i2c_read_bit
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text41
  7573   00347A                     __ptext41:
  7574                           	callstack 0
  7575   00347A                     _read_SCL:
  7576                           	callstack 24
  7577   00347A                     
  7578                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  7579   00347A  0E00               	movlw	0
  7580   00347C  6E02               	movwf	(pinMode@pin+1)^0,c
  7581   00347E  0E09               	movlw	9
  7582   003480  6E01               	movwf	pinMode@pin^0,c
  7583   003482  0E00               	movlw	0
  7584   003484  6E04               	movwf	(pinMode@type+1)^0,c
  7585   003486  0E01               	movlw	1
  7586   003488  6E03               	movwf	pinMode@type^0,c
  7587   00348A  EC3F  F00F         	call	_pinMode	;wreg free
  7588                           
  7589                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  7590   00348E  0E00               	movlw	0
  7591   003490  6E02               	movwf	(digitalRead@pin+1)^0,c
  7592   003492  0E09               	movlw	9
  7593   003494  6E01               	movwf	digitalRead@pin^0,c
  7594   003496  EC39  F013         	call	_digitalRead	;wreg free
  7595   00349A  5001               	movf	?_digitalRead^0,w,c
  7596   00349C  1002               	iorwf	(?_digitalRead+1)^0,w,c
  7597   00349E  A4D8               	btfss	status,2,c
  7598   0034A0  EF54  F01A         	goto	u2991
  7599   0034A4  EF57  F01A         	goto	u2990
  7600   0034A8                     u2991:
  7601   0034A8  0E01               	movlw	1
  7602   0034AA  EF58  F01A         	goto	u3000
  7603   0034AE                     u2990:
  7604   0034AE  0E00               	movlw	0
  7605   0034B0                     u3000:
  7606   0034B0  0012               	return		;funcret
  7607   0034B2                     __end_of_read_SCL:
  7608                           	callstack 0
  7609                           
  7610 ;; *************** function _digitalRead *****************
  7611 ;; Defined at:
  7612 ;;		line 39 in file "io.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  pin             2    0[COMRAM] int 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  2    0[COMRAM] int 
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7626 ;;      Params:         2       0       0       0       0       0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7628 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7629 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7630 ;;Total ram usage:        5 bytes
  7631 ;; Hardware stack levels used: 1
  7632 ;; This function calls:
  7633 ;;		Nothing
  7634 ;; This function is called by:
  7635 ;;		_read_SCL
  7636 ;;		_read_SDA
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text42
  7641   002672                     __ptext42:
  7642                           	callstack 0
  7643   002672                     _digitalRead:
  7644                           	callstack 24
  7645   002672                     
  7646                           ;io.c: 40:     if(pin <8){
  7647   002672  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7648   002674  EF47  F013         	goto	u2690
  7649   002678  5002               	movf	(digitalRead@pin+1)^0,w,c
  7650   00267A  E107               	bnz	u2691
  7651   00267C  0E08               	movlw	8
  7652   00267E  5C01               	subwf	digitalRead@pin^0,w,c
  7653   002680  B0D8               	btfsc	status,0,c
  7654   002682  EF45  F013         	goto	u2691
  7655   002686  EF47  F013         	goto	u2690
  7656   00268A                     u2691:
  7657   00268A  EF5B  F013         	goto	l3488
  7658   00268E                     u2690:
  7659   00268E                     
  7660                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  7661   00268E  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7662   002692  0E01               	movlw	1
  7663   002694  6E04               	movwf	(??_digitalRead+1)^0,c
  7664   002696  2A03               	incf	??_digitalRead^0,f,c
  7665   002698  EF50  F013         	goto	u2704
  7666   00269C                     u2705:
  7667   00269C  90D8               	bcf	status,0,c
  7668   00269E  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7669   0026A0                     u2704:
  7670   0026A0  2E03               	decfsz	??_digitalRead^0,f,c
  7671   0026A2  EF4E  F013         	goto	u2705
  7672   0026A6  5004               	movf	(??_digitalRead+1)^0,w,c
  7673   0026A8  1480               	andwf	128,w,c	;volatile
  7674   0026AA  6E05               	movwf	(??_digitalRead+2)^0,c
  7675   0026AC  5005               	movf	(??_digitalRead+2)^0,w,c
  7676   0026AE  6E01               	movwf	?_digitalRead^0,c
  7677   0026B0  6A02               	clrf	(?_digitalRead+1)^0,c
  7678   0026B2  EFED  F013         	goto	l83
  7679   0026B6                     l3488:
  7680   0026B6  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7681   0026B8  EF69  F013         	goto	u2710
  7682   0026BC  5002               	movf	(digitalRead@pin+1)^0,w,c
  7683   0026BE  E107               	bnz	u2711
  7684   0026C0  0E10               	movlw	16
  7685   0026C2  5C01               	subwf	digitalRead@pin^0,w,c
  7686   0026C4  B0D8               	btfsc	status,0,c
  7687   0026C6  EF67  F013         	goto	u2711
  7688   0026CA  EF69  F013         	goto	u2710
  7689   0026CE                     u2711:
  7690   0026CE  EF7F  F013         	goto	l3496
  7691   0026D2                     u2710:
  7692   0026D2                     
  7693                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  7694   0026D2  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7695   0026D6  0EF8               	movlw	-8
  7696   0026D8  2603               	addwf	??_digitalRead^0,f,c
  7697   0026DA  0E01               	movlw	1
  7698   0026DC  6E04               	movwf	(??_digitalRead+1)^0,c
  7699   0026DE  2A03               	incf	??_digitalRead^0,f,c
  7700   0026E0  EF74  F013         	goto	u2724
  7701   0026E4                     u2725:
  7702   0026E4  90D8               	bcf	status,0,c
  7703   0026E6  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7704   0026E8                     u2724:
  7705   0026E8  2E03               	decfsz	??_digitalRead^0,f,c
  7706   0026EA  EF72  F013         	goto	u2725
  7707   0026EE  5004               	movf	(??_digitalRead+1)^0,w,c
  7708   0026F0  1481               	andwf	129,w,c	;volatile
  7709   0026F2  6E05               	movwf	(??_digitalRead+2)^0,c
  7710   0026F4  5005               	movf	(??_digitalRead+2)^0,w,c
  7711   0026F6  6E01               	movwf	?_digitalRead^0,c
  7712   0026F8  6A02               	clrf	(?_digitalRead+1)^0,c
  7713   0026FA  EFED  F013         	goto	l83
  7714   0026FE                     l3496:
  7715   0026FE  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7716   002700  EF8D  F013         	goto	u2730
  7717   002704  5002               	movf	(digitalRead@pin+1)^0,w,c
  7718   002706  E107               	bnz	u2731
  7719   002708  0E18               	movlw	24
  7720   00270A  5C01               	subwf	digitalRead@pin^0,w,c
  7721   00270C  B0D8               	btfsc	status,0,c
  7722   00270E  EF8B  F013         	goto	u2731
  7723   002712  EF8D  F013         	goto	u2730
  7724   002716                     u2731:
  7725   002716  EFA3  F013         	goto	l3504
  7726   00271A                     u2730:
  7727   00271A                     
  7728                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  7729   00271A  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7730   00271E  0EF0               	movlw	-16
  7731   002720  2603               	addwf	??_digitalRead^0,f,c
  7732   002722  0E01               	movlw	1
  7733   002724  6E04               	movwf	(??_digitalRead+1)^0,c
  7734   002726  2A03               	incf	??_digitalRead^0,f,c
  7735   002728  EF98  F013         	goto	u2744
  7736   00272C                     u2745:
  7737   00272C  90D8               	bcf	status,0,c
  7738   00272E  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7739   002730                     u2744:
  7740   002730  2E03               	decfsz	??_digitalRead^0,f,c
  7741   002732  EF96  F013         	goto	u2745
  7742   002736  5004               	movf	(??_digitalRead+1)^0,w,c
  7743   002738  1482               	andwf	130,w,c	;volatile
  7744   00273A  6E05               	movwf	(??_digitalRead+2)^0,c
  7745   00273C  5005               	movf	(??_digitalRead+2)^0,w,c
  7746   00273E  6E01               	movwf	?_digitalRead^0,c
  7747   002740  6A02               	clrf	(?_digitalRead+1)^0,c
  7748   002742  EFED  F013         	goto	l83
  7749   002746                     l3504:
  7750   002746  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7751   002748  EFB1  F013         	goto	u2750
  7752   00274C  5002               	movf	(digitalRead@pin+1)^0,w,c
  7753   00274E  E107               	bnz	u2751
  7754   002750  0E20               	movlw	32
  7755   002752  5C01               	subwf	digitalRead@pin^0,w,c
  7756   002754  B0D8               	btfsc	status,0,c
  7757   002756  EFAF  F013         	goto	u2751
  7758   00275A  EFB1  F013         	goto	u2750
  7759   00275E                     u2751:
  7760   00275E  EFC7  F013         	goto	l3512
  7761   002762                     u2750:
  7762   002762                     
  7763                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  7764   002762  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7765   002766  0EE8               	movlw	-24
  7766   002768  2603               	addwf	??_digitalRead^0,f,c
  7767   00276A  0E01               	movlw	1
  7768   00276C  6E04               	movwf	(??_digitalRead+1)^0,c
  7769   00276E  2A03               	incf	??_digitalRead^0,f,c
  7770   002770  EFBC  F013         	goto	u2764
  7771   002774                     u2765:
  7772   002774  90D8               	bcf	status,0,c
  7773   002776  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7774   002778                     u2764:
  7775   002778  2E03               	decfsz	??_digitalRead^0,f,c
  7776   00277A  EFBA  F013         	goto	u2765
  7777   00277E  5004               	movf	(??_digitalRead+1)^0,w,c
  7778   002780  1483               	andwf	131,w,c	;volatile
  7779   002782  6E05               	movwf	(??_digitalRead+2)^0,c
  7780   002784  5005               	movf	(??_digitalRead+2)^0,w,c
  7781   002786  6E01               	movwf	?_digitalRead^0,c
  7782   002788  6A02               	clrf	(?_digitalRead+1)^0,c
  7783   00278A  EFED  F013         	goto	l83
  7784   00278E                     l3512:
  7785   00278E  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  7786   002790  EFD5  F013         	goto	u2770
  7787   002794  5002               	movf	(digitalRead@pin+1)^0,w,c
  7788   002796  E107               	bnz	u2771
  7789   002798  0E28               	movlw	40
  7790   00279A  5C01               	subwf	digitalRead@pin^0,w,c
  7791   00279C  B0D8               	btfsc	status,0,c
  7792   00279E  EFD3  F013         	goto	u2771
  7793   0027A2  EFD5  F013         	goto	u2770
  7794   0027A6                     u2771:
  7795   0027A6  EFEB  F013         	goto	l88
  7796   0027AA                     u2770:
  7797   0027AA                     
  7798                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  7799   0027AA  C001  F003         	movff	digitalRead@pin,??_digitalRead
  7800   0027AE  0EE0               	movlw	-32
  7801   0027B0  2603               	addwf	??_digitalRead^0,f,c
  7802   0027B2  0E01               	movlw	1
  7803   0027B4  6E04               	movwf	(??_digitalRead+1)^0,c
  7804   0027B6  2A03               	incf	??_digitalRead^0,f,c
  7805   0027B8  EFE0  F013         	goto	u2784
  7806   0027BC                     u2785:
  7807   0027BC  90D8               	bcf	status,0,c
  7808   0027BE  3604               	rlcf	(??_digitalRead+1)^0,f,c
  7809   0027C0                     u2784:
  7810   0027C0  2E03               	decfsz	??_digitalRead^0,f,c
  7811   0027C2  EFDE  F013         	goto	u2785
  7812   0027C6  5004               	movf	(??_digitalRead+1)^0,w,c
  7813   0027C8  1484               	andwf	132,w,c	;volatile
  7814   0027CA  6E05               	movwf	(??_digitalRead+2)^0,c
  7815   0027CC  5005               	movf	(??_digitalRead+2)^0,w,c
  7816   0027CE  6E01               	movwf	?_digitalRead^0,c
  7817   0027D0  6A02               	clrf	(?_digitalRead+1)^0,c
  7818   0027D2  EFED  F013         	goto	l83
  7819   0027D6                     l88:
  7820   0027D6                     
  7821                           ;io.c: 51:     return -1;
  7822   0027D6  6801               	setf	?_digitalRead^0,c
  7823   0027D8  6802               	setf	(?_digitalRead+1)^0,c
  7824   0027DA                     l83:
  7825   0027DA  0012               	return		;funcret
  7826   0027DC                     __end_of_digitalRead:
  7827                           	callstack 0
  7828                           
  7829 ;; *************** function _clear_SCL *****************
  7830 ;; Defined at:
  7831 ;;		line 39 in file "soft_i2c.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;		None
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;		None
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  1    wreg      void 
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0, cstack
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7845 ;;      Params:         0       0       0       0       0       0       0       0       0
  7846 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7848 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7849 ;;Total ram usage:        0 bytes
  7850 ;; Hardware stack levels used: 1
  7851 ;; Hardware stack levels required when called: 1
  7852 ;; This function calls:
  7853 ;;		_digitalWrite
  7854 ;;		_pinMode
  7855 ;; This function is called by:
  7856 ;;		_i2c_start
  7857 ;;		_i2c_write_bit
  7858 ;;		_i2c_read_bit
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           	psect	text43
  7863   0036E4                     __ptext43:
  7864                           	callstack 0
  7865   0036E4                     _clear_SCL:
  7866                           	callstack 24
  7867   0036E4                     
  7868                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  7869   0036E4  0E00               	movlw	0
  7870   0036E6  6E02               	movwf	(pinMode@pin+1)^0,c
  7871   0036E8  0E09               	movlw	9
  7872   0036EA  6E01               	movwf	pinMode@pin^0,c
  7873   0036EC  0E00               	movlw	0
  7874   0036EE  6E04               	movwf	(pinMode@type+1)^0,c
  7875   0036F0  0E00               	movlw	0
  7876   0036F2  6E03               	movwf	pinMode@type^0,c
  7877   0036F4  EC3F  F00F         	call	_pinMode	;wreg free
  7878                           
  7879                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  7880   0036F8  0E00               	movlw	0
  7881   0036FA  6E02               	movwf	(digitalWrite@pin+1)^0,c
  7882   0036FC  0E09               	movlw	9
  7883   0036FE  6E01               	movwf	digitalWrite@pin^0,c
  7884   003700  0E00               	movlw	0
  7885   003702  6E04               	movwf	(digitalWrite@value+1)^0,c
  7886   003704  0E00               	movlw	0
  7887   003706  6E03               	movwf	digitalWrite@value^0,c
  7888   003708  EC18  F00E         	call	_digitalWrite	;wreg free
  7889   00370C  0012               	return		;funcret
  7890   00370E                     __end_of_clear_SCL:
  7891                           	callstack 0
  7892                           
  7893 ;; *************** function _digitalWrite *****************
  7894 ;; Defined at:
  7895 ;;		line 14 in file "io.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  pin             2    0[COMRAM] int 
  7898 ;;  value           2    2[COMRAM] int 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7910 ;;      Params:         4       0       0       0       0       0       0       0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7912 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7913 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7914 ;;Total ram usage:        6 bytes
  7915 ;; Hardware stack levels used: 1
  7916 ;; This function calls:
  7917 ;;		Nothing
  7918 ;; This function is called by:
  7919 ;;		_clear_SCL
  7920 ;;		_clear_SDA
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text44
  7925   001C30                     __ptext44:
  7926                           	callstack 0
  7927   001C30                     _digitalWrite:
  7928                           	callstack 24
  7929   001C30                     
  7930                           ;io.c: 16:     if(pin <8){
  7931   001C30  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7932   001C32  EF26  F00E         	goto	u2490
  7933   001C36  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7934   001C38  E107               	bnz	u2491
  7935   001C3A  0E08               	movlw	8
  7936   001C3C  5C01               	subwf	digitalWrite@pin^0,w,c
  7937   001C3E  B0D8               	btfsc	status,0,c
  7938   001C40  EF24  F00E         	goto	u2491
  7939   001C44  EF26  F00E         	goto	u2490
  7940   001C48                     u2491:
  7941   001C48  EF50  F00E         	goto	l3448
  7942   001C4C                     u2490:
  7943   001C4C                     
  7944                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  7945   001C4C  5003               	movf	digitalWrite@value^0,w,c
  7946   001C4E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7947   001C50  B4D8               	btfsc	status,2,c
  7948   001C52  EF2D  F00E         	goto	u2501
  7949   001C56  EF2F  F00E         	goto	u2500
  7950   001C5A                     u2501:
  7951   001C5A  EF3F  F00E         	goto	l3446
  7952   001C5E                     u2500:
  7953   001C5E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7954   001C62  0E01               	movlw	1
  7955   001C64  6E06               	movwf	(??_digitalWrite+1)^0,c
  7956   001C66  2A05               	incf	??_digitalWrite^0,f,c
  7957   001C68  EF38  F00E         	goto	u2514
  7958   001C6C                     u2515:
  7959   001C6C  90D8               	bcf	status,0,c
  7960   001C6E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7961   001C70                     u2514:
  7962   001C70  2E05               	decfsz	??_digitalWrite^0,f,c
  7963   001C72  EF36  F00E         	goto	u2515
  7964   001C76  5006               	movf	(??_digitalWrite+1)^0,w,c
  7965   001C78  1280               	iorwf	128,f,c	;volatile
  7966   001C7A  EF3E  F00F         	goto	l79
  7967   001C7E                     l3446:
  7968   001C7E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7969   001C82  0E01               	movlw	1
  7970   001C84  6E06               	movwf	(??_digitalWrite+1)^0,c
  7971   001C86  2A05               	incf	??_digitalWrite^0,f,c
  7972   001C88  EF48  F00E         	goto	u2524
  7973   001C8C                     u2525:
  7974   001C8C  90D8               	bcf	status,0,c
  7975   001C8E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7976   001C90                     u2524:
  7977   001C90  2E05               	decfsz	??_digitalWrite^0,f,c
  7978   001C92  EF46  F00E         	goto	u2525
  7979   001C96  5006               	movf	(??_digitalWrite+1)^0,w,c
  7980   001C98  0AFF               	xorlw	255
  7981   001C9A  1680               	andwf	128,f,c	;volatile
  7982   001C9C  EF3E  F00F         	goto	l79
  7983   001CA0                     l3448:
  7984   001CA0  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7985   001CA2  EF5E  F00E         	goto	u2530
  7986   001CA6  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7987   001CA8  E107               	bnz	u2531
  7988   001CAA  0E10               	movlw	16
  7989   001CAC  5C01               	subwf	digitalWrite@pin^0,w,c
  7990   001CAE  B0D8               	btfsc	status,0,c
  7991   001CB0  EF5C  F00E         	goto	u2531
  7992   001CB4  EF5E  F00E         	goto	u2530
  7993   001CB8                     u2531:
  7994   001CB8  EF8C  F00E         	goto	l3456
  7995   001CBC                     u2530:
  7996   001CBC                     
  7997                           ;io.c: 20:         pin -=8;
  7998   001CBC  0EF8               	movlw	248
  7999   001CBE  2601               	addwf	digitalWrite@pin^0,f,c
  8000   001CC0  0EFF               	movlw	255
  8001   001CC2  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  8002                           
  8003                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  8004   001CC4  5003               	movf	digitalWrite@value^0,w,c
  8005   001CC6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  8006   001CC8  B4D8               	btfsc	status,2,c
  8007   001CCA  EF69  F00E         	goto	u2541
  8008   001CCE  EF6B  F00E         	goto	u2540
  8009   001CD2                     u2541:
  8010   001CD2  EF7B  F00E         	goto	l3454
  8011   001CD6                     u2540:
  8012   001CD6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8013   001CDA  0E01               	movlw	1
  8014   001CDC  6E06               	movwf	(??_digitalWrite+1)^0,c
  8015   001CDE  2A05               	incf	??_digitalWrite^0,f,c
  8016   001CE0  EF74  F00E         	goto	u2554
  8017   001CE4                     u2555:
  8018   001CE4  90D8               	bcf	status,0,c
  8019   001CE6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8020   001CE8                     u2554:
  8021   001CE8  2E05               	decfsz	??_digitalWrite^0,f,c
  8022   001CEA  EF72  F00E         	goto	u2555
  8023   001CEE  5006               	movf	(??_digitalWrite+1)^0,w,c
  8024   001CF0  1281               	iorwf	129,f,c	;volatile
  8025   001CF2  EF3E  F00F         	goto	l79
  8026   001CF6                     l3454:
  8027   001CF6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8028   001CFA  0E01               	movlw	1
  8029   001CFC  6E06               	movwf	(??_digitalWrite+1)^0,c
  8030   001CFE  2A05               	incf	??_digitalWrite^0,f,c
  8031   001D00  EF84  F00E         	goto	u2564
  8032   001D04                     u2565:
  8033   001D04  90D8               	bcf	status,0,c
  8034   001D06  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8035   001D08                     u2564:
  8036   001D08  2E05               	decfsz	??_digitalWrite^0,f,c
  8037   001D0A  EF82  F00E         	goto	u2565
  8038   001D0E  5006               	movf	(??_digitalWrite+1)^0,w,c
  8039   001D10  0AFF               	xorlw	255
  8040   001D12  1681               	andwf	129,f,c	;volatile
  8041   001D14  EF3E  F00F         	goto	l79
  8042   001D18                     l3456:
  8043   001D18  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  8044   001D1A  EF9A  F00E         	goto	u2570
  8045   001D1E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  8046   001D20  E107               	bnz	u2571
  8047   001D22  0E18               	movlw	24
  8048   001D24  5C01               	subwf	digitalWrite@pin^0,w,c
  8049   001D26  B0D8               	btfsc	status,0,c
  8050   001D28  EF98  F00E         	goto	u2571
  8051   001D2C  EF9A  F00E         	goto	u2570
  8052   001D30                     u2571:
  8053   001D30  EFC8  F00E         	goto	l3464
  8054   001D34                     u2570:
  8055   001D34                     
  8056                           ;io.c: 24:         pin -=16;
  8057   001D34  0EF0               	movlw	240
  8058   001D36  2601               	addwf	digitalWrite@pin^0,f,c
  8059   001D38  0EFF               	movlw	255
  8060   001D3A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  8061                           
  8062                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  8063   001D3C  5003               	movf	digitalWrite@value^0,w,c
  8064   001D3E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  8065   001D40  B4D8               	btfsc	status,2,c
  8066   001D42  EFA5  F00E         	goto	u2581
  8067   001D46  EFA7  F00E         	goto	u2580
  8068   001D4A                     u2581:
  8069   001D4A  EFB7  F00E         	goto	l3462
  8070   001D4E                     u2580:
  8071   001D4E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8072   001D52  0E01               	movlw	1
  8073   001D54  6E06               	movwf	(??_digitalWrite+1)^0,c
  8074   001D56  2A05               	incf	??_digitalWrite^0,f,c
  8075   001D58  EFB0  F00E         	goto	u2594
  8076   001D5C                     u2595:
  8077   001D5C  90D8               	bcf	status,0,c
  8078   001D5E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8079   001D60                     u2594:
  8080   001D60  2E05               	decfsz	??_digitalWrite^0,f,c
  8081   001D62  EFAE  F00E         	goto	u2595
  8082   001D66  5006               	movf	(??_digitalWrite+1)^0,w,c
  8083   001D68  1282               	iorwf	130,f,c	;volatile
  8084   001D6A  EF3E  F00F         	goto	l79
  8085   001D6E                     l3462:
  8086   001D6E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8087   001D72  0E01               	movlw	1
  8088   001D74  6E06               	movwf	(??_digitalWrite+1)^0,c
  8089   001D76  2A05               	incf	??_digitalWrite^0,f,c
  8090   001D78  EFC0  F00E         	goto	u2604
  8091   001D7C                     u2605:
  8092   001D7C  90D8               	bcf	status,0,c
  8093   001D7E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8094   001D80                     u2604:
  8095   001D80  2E05               	decfsz	??_digitalWrite^0,f,c
  8096   001D82  EFBE  F00E         	goto	u2605
  8097   001D86  5006               	movf	(??_digitalWrite+1)^0,w,c
  8098   001D88  0AFF               	xorlw	255
  8099   001D8A  1682               	andwf	130,f,c	;volatile
  8100   001D8C  EF3E  F00F         	goto	l79
  8101   001D90                     l3464:
  8102   001D90  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  8103   001D92  EFD6  F00E         	goto	u2610
  8104   001D96  5002               	movf	(digitalWrite@pin+1)^0,w,c
  8105   001D98  E107               	bnz	u2611
  8106   001D9A  0E20               	movlw	32
  8107   001D9C  5C01               	subwf	digitalWrite@pin^0,w,c
  8108   001D9E  B0D8               	btfsc	status,0,c
  8109   001DA0  EFD4  F00E         	goto	u2611
  8110   001DA4  EFD6  F00E         	goto	u2610
  8111   001DA8                     u2611:
  8112   001DA8  EF04  F00F         	goto	l3472
  8113   001DAC                     u2610:
  8114   001DAC                     
  8115                           ;io.c: 28:         pin -=24;
  8116   001DAC  0EE8               	movlw	232
  8117   001DAE  2601               	addwf	digitalWrite@pin^0,f,c
  8118   001DB0  0EFF               	movlw	255
  8119   001DB2  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  8120                           
  8121                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  8122   001DB4  5003               	movf	digitalWrite@value^0,w,c
  8123   001DB6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  8124   001DB8  B4D8               	btfsc	status,2,c
  8125   001DBA  EFE1  F00E         	goto	u2621
  8126   001DBE  EFE3  F00E         	goto	u2620
  8127   001DC2                     u2621:
  8128   001DC2  EFF3  F00E         	goto	l3470
  8129   001DC6                     u2620:
  8130   001DC6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8131   001DCA  0E01               	movlw	1
  8132   001DCC  6E06               	movwf	(??_digitalWrite+1)^0,c
  8133   001DCE  2A05               	incf	??_digitalWrite^0,f,c
  8134   001DD0  EFEC  F00E         	goto	u2634
  8135   001DD4                     u2635:
  8136   001DD4  90D8               	bcf	status,0,c
  8137   001DD6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8138   001DD8                     u2634:
  8139   001DD8  2E05               	decfsz	??_digitalWrite^0,f,c
  8140   001DDA  EFEA  F00E         	goto	u2635
  8141   001DDE  5006               	movf	(??_digitalWrite+1)^0,w,c
  8142   001DE0  1283               	iorwf	131,f,c	;volatile
  8143   001DE2  EF3E  F00F         	goto	l79
  8144   001DE6                     l3470:
  8145   001DE6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8146   001DEA  0E01               	movlw	1
  8147   001DEC  6E06               	movwf	(??_digitalWrite+1)^0,c
  8148   001DEE  2A05               	incf	??_digitalWrite^0,f,c
  8149   001DF0  EFFC  F00E         	goto	u2644
  8150   001DF4                     u2645:
  8151   001DF4  90D8               	bcf	status,0,c
  8152   001DF6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8153   001DF8                     u2644:
  8154   001DF8  2E05               	decfsz	??_digitalWrite^0,f,c
  8155   001DFA  EFFA  F00E         	goto	u2645
  8156   001DFE  5006               	movf	(??_digitalWrite+1)^0,w,c
  8157   001E00  0AFF               	xorlw	255
  8158   001E02  1683               	andwf	131,f,c	;volatile
  8159   001E04  EF3E  F00F         	goto	l79
  8160   001E08                     l3472:
  8161   001E08  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  8162   001E0A  EF12  F00F         	goto	u2650
  8163   001E0E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  8164   001E10  E107               	bnz	u2651
  8165   001E12  0E28               	movlw	40
  8166   001E14  5C01               	subwf	digitalWrite@pin^0,w,c
  8167   001E16  B0D8               	btfsc	status,0,c
  8168   001E18  EF10  F00F         	goto	u2651
  8169   001E1C  EF12  F00F         	goto	u2650
  8170   001E20                     u2651:
  8171   001E20  EF3E  F00F         	goto	l79
  8172   001E24                     u2650:
  8173   001E24                     
  8174                           ;io.c: 32:         pin -=32;
  8175   001E24  0EE0               	movlw	224
  8176   001E26  2601               	addwf	digitalWrite@pin^0,f,c
  8177   001E28  0EFF               	movlw	255
  8178   001E2A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  8179                           
  8180                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  8181   001E2C  5003               	movf	digitalWrite@value^0,w,c
  8182   001E2E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  8183   001E30  B4D8               	btfsc	status,2,c
  8184   001E32  EF1D  F00F         	goto	u2661
  8185   001E36  EF1F  F00F         	goto	u2660
  8186   001E3A                     u2661:
  8187   001E3A  EF2F  F00F         	goto	l3478
  8188   001E3E                     u2660:
  8189   001E3E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8190   001E42  0E01               	movlw	1
  8191   001E44  6E06               	movwf	(??_digitalWrite+1)^0,c
  8192   001E46  2A05               	incf	??_digitalWrite^0,f,c
  8193   001E48  EF28  F00F         	goto	u2674
  8194   001E4C                     u2675:
  8195   001E4C  90D8               	bcf	status,0,c
  8196   001E4E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8197   001E50                     u2674:
  8198   001E50  2E05               	decfsz	??_digitalWrite^0,f,c
  8199   001E52  EF26  F00F         	goto	u2675
  8200   001E56  5006               	movf	(??_digitalWrite+1)^0,w,c
  8201   001E58  1284               	iorwf	132,f,c	;volatile
  8202   001E5A  EF3E  F00F         	goto	l79
  8203   001E5E                     l3478:
  8204   001E5E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  8205   001E62  0E01               	movlw	1
  8206   001E64  6E06               	movwf	(??_digitalWrite+1)^0,c
  8207   001E66  2A05               	incf	??_digitalWrite^0,f,c
  8208   001E68  EF38  F00F         	goto	u2684
  8209   001E6C                     u2685:
  8210   001E6C  90D8               	bcf	status,0,c
  8211   001E6E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  8212   001E70                     u2684:
  8213   001E70  2E05               	decfsz	??_digitalWrite^0,f,c
  8214   001E72  EF36  F00F         	goto	u2685
  8215   001E76  5006               	movf	(??_digitalWrite+1)^0,w,c
  8216   001E78  0AFF               	xorlw	255
  8217   001E7A  1684               	andwf	132,f,c	;volatile
  8218   001E7C                     l79:
  8219   001E7C  0012               	return		;funcret
  8220   001E7E                     __end_of_digitalWrite:
  8221                           	callstack 0
  8222                           
  8223 ;; *************** function _I2C_delay *****************
  8224 ;; Defined at:
  8225 ;;		line 22 in file "soft_i2c.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;		None
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;  i               2    0        int 
  8230 ;;  v               2    0        volatile int 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;                  1    wreg      void 
  8233 ;; Registers used:
  8234 ;;		None
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8240 ;;      Params:         0       0       0       0       0       0       0       0       0
  8241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8243 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8244 ;;Total ram usage:        0 bytes
  8245 ;; Hardware stack levels used: 1
  8246 ;; This function calls:
  8247 ;;		Nothing
  8248 ;; This function is called by:
  8249 ;;		_i2c_start
  8250 ;;		_i2c_stop
  8251 ;;		_i2c_write_bit
  8252 ;;		_i2c_read_bit
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text45
  8257   003890                     __ptext45:
  8258                           	callstack 0
  8259   003890                     _I2C_delay:
  8260                           	callstack 25
  8261   003890  0012               	return		;funcret
  8262   003892                     __end_of_I2C_delay:
  8263                           	callstack 0
  8264                           
  8265 ;; *************** function _dec2bcd *****************
  8266 ;; Defined at:
  8267 ;;		line 9 in file "ds1307.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  value           2   14[COMRAM] int 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;		None
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  2   14[COMRAM] int 
  8274 ;; Registers used:
  8275 ;;		wreg, status,2, status,0, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8281 ;;      Params:         2       0       0       0       0       0       0       0       0
  8282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8283 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8284 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8285 ;;Total ram usage:        6 bytes
  8286 ;; Hardware stack levels used: 1
  8287 ;; Hardware stack levels required when called: 1
  8288 ;; This function calls:
  8289 ;;		___awdiv
  8290 ;;		___awmod
  8291 ;; This function is called by:
  8292 ;;		_varInit
  8293 ;;		_setTime
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           	psect	text46
  8298   003132                     __ptext46:
  8299                           	callstack 0
  8300   003132                     _dec2bcd:
  8301                           	callstack 27
  8302   003132                     
  8303                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  8304   003132  C00F  F001         	movff	dec2bcd@value,___awdiv@dividend
  8305   003136  C010  F002         	movff	dec2bcd@value+1,___awdiv@dividend+1
  8306   00313A  0E00               	movlw	0
  8307   00313C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  8308   00313E  0E0A               	movlw	10
  8309   003140  6E03               	movwf	___awdiv@divisor^0,c
  8310   003142  ECC4  F016         	call	___awdiv	;wreg free
  8311   003146  C001  F011         	movff	?___awdiv,??_dec2bcd
  8312   00314A  C002  F012         	movff	?___awdiv+1,??_dec2bcd+1
  8313   00314E  3A11               	swapf	??_dec2bcd^0,f,c
  8314   003150  3A12               	swapf	(??_dec2bcd+1)^0,f,c
  8315   003152  0EF0               	movlw	240
  8316   003154  1612               	andwf	(??_dec2bcd+1)^0,f,c
  8317   003156  5011               	movf	??_dec2bcd^0,w,c
  8318   003158  0B0F               	andlw	15
  8319   00315A  1212               	iorwf	(??_dec2bcd+1)^0,f,c
  8320   00315C  0EF0               	movlw	240
  8321   00315E  1611               	andwf	??_dec2bcd^0,f,c
  8322   003160  C00F  F009         	movff	dec2bcd@value,___awmod@dividend
  8323   003164  C010  F00A         	movff	dec2bcd@value+1,___awmod@dividend+1
  8324   003168  0E00               	movlw	0
  8325   00316A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  8326   00316C  0E0A               	movlw	10
  8327   00316E  6E0B               	movwf	___awmod@divisor^0,c
  8328   003170  EC85  F017         	call	___awmod	;wreg free
  8329   003174  5009               	movf	?___awmod^0,w,c
  8330   003176  2411               	addwf	??_dec2bcd^0,w,c
  8331   003178  6E13               	movwf	(??_dec2bcd+2)^0,c
  8332   00317A  500A               	movf	(?___awmod+1)^0,w,c
  8333   00317C  2012               	addwfc	(??_dec2bcd+1)^0,w,c
  8334   00317E  6E14               	movwf	(??_dec2bcd+3)^0,c
  8335   003180  0E80               	movlw	128
  8336   003182  1013               	iorwf	(??_dec2bcd+2)^0,w,c
  8337   003184  6E0F               	movwf	dec2bcd@value^0,c
  8338   003186  5014               	movf	(??_dec2bcd+3)^0,w,c
  8339   003188  6E10               	movwf	(dec2bcd@value+1)^0,c
  8340   00318A                     
  8341                           ;ds1307.c: 11:     return value;
  8342   00318A  C00F  F00F         	movff	dec2bcd@value,?_dec2bcd
  8343   00318E  C010  F010         	movff	dec2bcd@value+1,?_dec2bcd+1
  8344   003192  0012               	return		;funcret
  8345   003194                     __end_of_dec2bcd:
  8346                           	callstack 0
  8347                           
  8348 ;; *************** function ___awmod *****************
  8349 ;; Defined at:
  8350 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  dividend        2    8[COMRAM] int 
  8353 ;;  divisor         2   10[COMRAM] int 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  sign            1   13[COMRAM] unsigned char 
  8356 ;;  counter         1   12[COMRAM] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  2    8[COMRAM] int 
  8359 ;; Registers used:
  8360 ;;		wreg, status,2, status,0
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8366 ;;      Params:         4       0       0       0       0       0       0       0       0
  8367 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8369 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8370 ;;Total ram usage:        6 bytes
  8371 ;; Hardware stack levels used: 1
  8372 ;; This function calls:
  8373 ;;		Nothing
  8374 ;; This function is called by:
  8375 ;;		_dec2bcd
  8376 ;;		_lcdInt
  8377 ;;		_rtcPutSeconds
  8378 ;;		_rtcPutMinutes
  8379 ;;		_rtcPutHours
  8380 ;;		_rtcPutDate
  8381 ;;		_rtcPutMonth
  8382 ;;		_rtcPutYear
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           	psect	text47
  8387   002F0A                     __ptext47:
  8388                           	callstack 0
  8389   002F0A                     ___awmod:
  8390                           	callstack 27
  8391   002F0A  0E00               	movlw	0
  8392   002F0C  6E0E               	movwf	___awmod@sign^0,c
  8393   002F0E  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  8394   002F10  EF8E  F017         	goto	u3290
  8395   002F14  EF8C  F017         	goto	u3291
  8396   002F18                     u3291:
  8397   002F18  EF94  F017         	goto	l3790
  8398   002F1C                     u3290:
  8399   002F1C  6C09               	negf	___awmod@dividend^0,c
  8400   002F1E  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  8401   002F20  B0D8               	btfsc	status,0,c
  8402   002F22  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  8403   002F24  0E01               	movlw	1
  8404   002F26  6E0E               	movwf	___awmod@sign^0,c
  8405   002F28                     l3790:
  8406   002F28  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  8407   002F2A  EF9B  F017         	goto	u3300
  8408   002F2E  EF99  F017         	goto	u3301
  8409   002F32                     u3301:
  8410   002F32  EF9F  F017         	goto	l3794
  8411   002F36                     u3300:
  8412   002F36  6C0B               	negf	___awmod@divisor^0,c
  8413   002F38  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  8414   002F3A  B0D8               	btfsc	status,0,c
  8415   002F3C  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  8416   002F3E                     l3794:
  8417   002F3E  500B               	movf	___awmod@divisor^0,w,c
  8418   002F40  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  8419   002F42  B4D8               	btfsc	status,2,c
  8420   002F44  EFA6  F017         	goto	u3311
  8421   002F48  EFA8  F017         	goto	u3310
  8422   002F4C                     u3311:
  8423   002F4C  EFCC  F017         	goto	l3810
  8424   002F50                     u3310:
  8425   002F50  0E01               	movlw	1
  8426   002F52  6E0D               	movwf	___awmod@counter^0,c
  8427   002F54  EFB0  F017         	goto	l3800
  8428   002F58                     l3798:
  8429   002F58  90D8               	bcf	status,0,c
  8430   002F5A  360B               	rlcf	___awmod@divisor^0,f,c
  8431   002F5C  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  8432   002F5E  2A0D               	incf	___awmod@counter^0,f,c
  8433   002F60                     l3800:
  8434   002F60  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  8435   002F62  EFB5  F017         	goto	u3321
  8436   002F66  EFB7  F017         	goto	u3320
  8437   002F6A                     u3321:
  8438   002F6A  EFAC  F017         	goto	l3798
  8439   002F6E                     u3320:
  8440   002F6E                     l3802:
  8441   002F6E  500B               	movf	___awmod@divisor^0,w,c
  8442   002F70  5C09               	subwf	___awmod@dividend^0,w,c
  8443   002F72  500C               	movf	(___awmod@divisor+1)^0,w,c
  8444   002F74  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  8445   002F76  A0D8               	btfss	status,0,c
  8446   002F78  EFC0  F017         	goto	u3331
  8447   002F7C  EFC2  F017         	goto	u3330
  8448   002F80                     u3331:
  8449   002F80  EFC6  F017         	goto	l3806
  8450   002F84                     u3330:
  8451   002F84  500B               	movf	___awmod@divisor^0,w,c
  8452   002F86  5E09               	subwf	___awmod@dividend^0,f,c
  8453   002F88  500C               	movf	(___awmod@divisor+1)^0,w,c
  8454   002F8A  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  8455   002F8C                     l3806:
  8456   002F8C  90D8               	bcf	status,0,c
  8457   002F8E  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  8458   002F90  320B               	rrcf	___awmod@divisor^0,f,c
  8459   002F92  2E0D               	decfsz	___awmod@counter^0,f,c
  8460   002F94  EFB7  F017         	goto	l3802
  8461   002F98                     l3810:
  8462   002F98  500E               	movf	___awmod@sign^0,w,c
  8463   002F9A  B4D8               	btfsc	status,2,c
  8464   002F9C  EFD2  F017         	goto	u3341
  8465   002FA0  EFD4  F017         	goto	u3340
  8466   002FA4                     u3341:
  8467   002FA4  EFD8  F017         	goto	l3814
  8468   002FA8                     u3340:
  8469   002FA8  6C09               	negf	___awmod@dividend^0,c
  8470   002FAA  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  8471   002FAC  B0D8               	btfsc	status,0,c
  8472   002FAE  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  8473   002FB0                     l3814:
  8474   002FB0  C009  F009         	movff	___awmod@dividend,?___awmod
  8475   002FB4  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  8476   002FB8  0012               	return		;funcret
  8477   002FBA                     __end_of___awmod:
  8478                           	callstack 0
  8479                           
  8480 ;; *************** function _bcd2dec *****************
  8481 ;; Defined at:
  8482 ;;		line 14 in file "ds1307.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;  value           2   18[COMRAM] int 
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;		None
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  2   18[COMRAM] int 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8496 ;;      Params:         2       0       0       0       0       0       0       0       0
  8497 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8498 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8499 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8500 ;;Total ram usage:        4 bytes
  8501 ;; Hardware stack levels used: 1
  8502 ;; Hardware stack levels required when called: 1
  8503 ;; This function calls:
  8504 ;;		___awdiv
  8505 ;;		___wmul
  8506 ;; This function is called by:
  8507 ;;		_outputPrint
  8508 ;;		_varInit
  8509 ;;		_getTime
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           	psect	text48
  8514   003400                     __ptext48:
  8515                           	callstack 0
  8516   003400                     _bcd2dec:
  8517                           	callstack 26
  8518   003400                     
  8519                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  8520   003400  0E0F               	movlw	15
  8521   003402  1413               	andwf	bcd2dec@value^0,w,c
  8522   003404  6E15               	movwf	??_bcd2dec^0,c
  8523   003406  0E00               	movlw	0
  8524   003408  1414               	andwf	(bcd2dec@value+1)^0,w,c
  8525   00340A  6E16               	movwf	(??_bcd2dec+1)^0,c
  8526   00340C  0E00               	movlw	0
  8527   00340E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  8528   003410  0E10               	movlw	16
  8529   003412  6E03               	movwf	___awdiv@divisor^0,c
  8530   003414  C013  F001         	movff	bcd2dec@value,___awdiv@dividend
  8531   003418  C014  F002         	movff	bcd2dec@value+1,___awdiv@dividend+1
  8532   00341C  ECC4  F016         	call	___awdiv	;wreg free
  8533   003420  C001  F009         	movff	?___awdiv,___wmul@multiplier
  8534   003424  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  8535   003428  0E00               	movlw	0
  8536   00342A  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  8537   00342C  0E0A               	movlw	10
  8538   00342E  6E0B               	movwf	___wmul@multiplicand^0,c
  8539   003430  EC9C  F01B         	call	___wmul	;wreg free
  8540   003434  5015               	movf	??_bcd2dec^0,w,c
  8541   003436  2409               	addwf	?___wmul^0,w,c
  8542   003438  6E13               	movwf	?_bcd2dec^0,c
  8543   00343A  5016               	movf	(??_bcd2dec+1)^0,w,c
  8544   00343C  200A               	addwfc	(?___wmul+1)^0,w,c
  8545   00343E  6E14               	movwf	(?_bcd2dec+1)^0,c
  8546   003440  0012               	return		;funcret
  8547   003442                     __end_of_bcd2dec:
  8548                           	callstack 0
  8549                           
  8550 ;; *************** function ___wmul *****************
  8551 ;; Defined at:
  8552 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  multiplier      2    8[COMRAM] unsigned int 
  8555 ;;  multiplicand    2   10[COMRAM] unsigned int 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;  product         2   12[COMRAM] unsigned int 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  2    8[COMRAM] unsigned int 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0, prodl, prodh
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8567 ;;      Params:         4       0       0       0       0       0       0       0       0
  8568 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8570 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8571 ;;Total ram usage:        6 bytes
  8572 ;; Hardware stack levels used: 1
  8573 ;; This function calls:
  8574 ;;		Nothing
  8575 ;; This function is called by:
  8576 ;;		_bcd2dec
  8577 ;;		_lcdInt
  8578 ;;		_smLoop
  8579 ;;		_pwmSet1
  8580 ;;		_pwmSet2
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           	psect	text49
  8585   003738                     __ptext49:
  8586                           	callstack 0
  8587   003738                     ___wmul:
  8588                           	callstack 27
  8589   003738  5009               	movf	___wmul@multiplier^0,w,c
  8590   00373A  020B               	mulwf	___wmul@multiplicand^0,c
  8591   00373C  CFF3 F00D          	movff	prodl,___wmul@product
  8592   003740  CFF4 F00E          	movff	prodh,___wmul@product+1
  8593   003744  5009               	movf	___wmul@multiplier^0,w,c
  8594   003746  020C               	mulwf	(___wmul@multiplicand+1)^0,c
  8595   003748  50F3               	movf	243,w,c
  8596   00374A  260E               	addwf	(___wmul@product+1)^0,f,c
  8597   00374C  500A               	movf	(___wmul@multiplier+1)^0,w,c
  8598   00374E  020B               	mulwf	___wmul@multiplicand^0,c
  8599   003750  50F3               	movf	243,w,c
  8600   003752  260E               	addwf	(___wmul@product+1)^0,f,c
  8601   003754  C00D  F009         	movff	___wmul@product,?___wmul
  8602   003758  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  8603   00375C  0012               	return		;funcret
  8604   00375E                     __end_of___wmul:
  8605                           	callstack 0
  8606                           
  8607 ;; *************** function ___awdiv *****************
  8608 ;; Defined at:
  8609 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  dividend        2    0[COMRAM] int 
  8612 ;;  divisor         2    2[COMRAM] int 
  8613 ;; Auto vars:     Size  Location     Type
  8614 ;;  quotient        2    6[COMRAM] int 
  8615 ;;  sign            1    5[COMRAM] unsigned char 
  8616 ;;  counter         1    4[COMRAM] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  2    0[COMRAM] int 
  8619 ;; Registers used:
  8620 ;;		wreg, status,2, status,0
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8626 ;;      Params:         4       0       0       0       0       0       0       0       0
  8627 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8628 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8629 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8630 ;;Total ram usage:        8 bytes
  8631 ;; Hardware stack levels used: 1
  8632 ;; This function calls:
  8633 ;;		Nothing
  8634 ;; This function is called by:
  8635 ;;		_dec2bcd
  8636 ;;		_bcd2dec
  8637 ;;		_lcdInt
  8638 ;;		_readTemp
  8639 ;;		_rtcPutSeconds
  8640 ;;		_rtcPutMinutes
  8641 ;;		_rtcPutHours
  8642 ;;		_rtcPutDate
  8643 ;;		_rtcPutMonth
  8644 ;;		_rtcPutYear
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           	psect	text50
  8649   002D88                     __ptext50:
  8650                           	callstack 0
  8651   002D88                     ___awdiv:
  8652                           	callstack 27
  8653   002D88  0E00               	movlw	0
  8654   002D8A  6E06               	movwf	___awdiv@sign^0,c
  8655   002D8C  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  8656   002D8E  EFCD  F016         	goto	u3230
  8657   002D92  EFCB  F016         	goto	u3231
  8658   002D96                     u3231:
  8659   002D96  EFD3  F016         	goto	l3746
  8660   002D9A                     u3230:
  8661   002D9A  6C03               	negf	___awdiv@divisor^0,c
  8662   002D9C  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  8663   002D9E  B0D8               	btfsc	status,0,c
  8664   002DA0  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  8665   002DA2  0E01               	movlw	1
  8666   002DA4  6E06               	movwf	___awdiv@sign^0,c
  8667   002DA6                     l3746:
  8668   002DA6  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  8669   002DA8  EFDA  F016         	goto	u3240
  8670   002DAC  EFD8  F016         	goto	u3241
  8671   002DB0                     u3241:
  8672   002DB0  EFE0  F016         	goto	l3752
  8673   002DB4                     u3240:
  8674   002DB4  6C01               	negf	___awdiv@dividend^0,c
  8675   002DB6  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  8676   002DB8  B0D8               	btfsc	status,0,c
  8677   002DBA  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  8678   002DBC  0E01               	movlw	1
  8679   002DBE  1A06               	xorwf	___awdiv@sign^0,f,c
  8680   002DC0                     l3752:
  8681   002DC0  0E00               	movlw	0
  8682   002DC2  6E08               	movwf	(___awdiv@quotient+1)^0,c
  8683   002DC4  0E00               	movlw	0
  8684   002DC6  6E07               	movwf	___awdiv@quotient^0,c
  8685   002DC8  5003               	movf	___awdiv@divisor^0,w,c
  8686   002DCA  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  8687   002DCC  B4D8               	btfsc	status,2,c
  8688   002DCE  EFEB  F016         	goto	u3251
  8689   002DD2  EFED  F016         	goto	u3250
  8690   002DD6                     u3251:
  8691   002DD6  EF15  F017         	goto	l3774
  8692   002DDA                     u3250:
  8693   002DDA  0E01               	movlw	1
  8694   002DDC  6E05               	movwf	___awdiv@counter^0,c
  8695   002DDE  EFF5  F016         	goto	l3760
  8696   002DE2                     l3758:
  8697   002DE2  90D8               	bcf	status,0,c
  8698   002DE4  3603               	rlcf	___awdiv@divisor^0,f,c
  8699   002DE6  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  8700   002DE8  2A05               	incf	___awdiv@counter^0,f,c
  8701   002DEA                     l3760:
  8702   002DEA  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  8703   002DEC  EFFA  F016         	goto	u3261
  8704   002DF0  EFFC  F016         	goto	u3260
  8705   002DF4                     u3261:
  8706   002DF4  EFF1  F016         	goto	l3758
  8707   002DF8                     u3260:
  8708   002DF8                     l3762:
  8709   002DF8  90D8               	bcf	status,0,c
  8710   002DFA  3607               	rlcf	___awdiv@quotient^0,f,c
  8711   002DFC  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  8712   002DFE  5003               	movf	___awdiv@divisor^0,w,c
  8713   002E00  5C01               	subwf	___awdiv@dividend^0,w,c
  8714   002E02  5004               	movf	(___awdiv@divisor+1)^0,w,c
  8715   002E04  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  8716   002E06  A0D8               	btfss	status,0,c
  8717   002E08  EF08  F017         	goto	u3271
  8718   002E0C  EF0A  F017         	goto	u3270
  8719   002E10                     u3271:
  8720   002E10  EF0F  F017         	goto	l3770
  8721   002E14                     u3270:
  8722   002E14  5003               	movf	___awdiv@divisor^0,w,c
  8723   002E16  5E01               	subwf	___awdiv@dividend^0,f,c
  8724   002E18  5004               	movf	(___awdiv@divisor+1)^0,w,c
  8725   002E1A  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  8726   002E1C  8007               	bsf	___awdiv@quotient^0,0,c
  8727   002E1E                     l3770:
  8728   002E1E  90D8               	bcf	status,0,c
  8729   002E20  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  8730   002E22  3203               	rrcf	___awdiv@divisor^0,f,c
  8731   002E24  2E05               	decfsz	___awdiv@counter^0,f,c
  8732   002E26  EFFC  F016         	goto	l3762
  8733   002E2A                     l3774:
  8734   002E2A  5006               	movf	___awdiv@sign^0,w,c
  8735   002E2C  B4D8               	btfsc	status,2,c
  8736   002E2E  EF1B  F017         	goto	u3281
  8737   002E32  EF1D  F017         	goto	u3280
  8738   002E36                     u3281:
  8739   002E36  EF21  F017         	goto	l3778
  8740   002E3A                     u3280:
  8741   002E3A  6C07               	negf	___awdiv@quotient^0,c
  8742   002E3C  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  8743   002E3E  B0D8               	btfsc	status,0,c
  8744   002E40  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  8745   002E42                     l3778:
  8746   002E42  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8747   002E46  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8748   002E4A  0012               	return		;funcret
  8749   002E4C                     __end_of___awdiv:
  8750                           	callstack 0
  8751                           
  8752 ;; *************** function _setState *****************
  8753 ;; Defined at:
  8754 ;;		line 60 in file "var.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  newState        1    wreg     unsigned char 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  newState        1    3[COMRAM] unsigned char 
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      void 
  8761 ;; Registers used:
  8762 ;;		wreg, status,2, status,0, cstack
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0
  8769 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8771 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8772 ;;Total ram usage:        1 bytes
  8773 ;; Hardware stack levels used: 1
  8774 ;; Hardware stack levels required when called: 3
  8775 ;; This function calls:
  8776 ;;		_lcdCommand
  8777 ;; This function is called by:
  8778 ;;		_smInit
  8779 ;;		_smLoop
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text51
  8784   003842                     __ptext51:
  8785                           	callstack 0
  8786   003842                     _setState:
  8787                           	callstack 26
  8788                           
  8789                           ;incstack = 0
  8790                           ;setState@newState stored from wreg
  8791   003842  6E04               	movwf	setState@newState^0,c
  8792   003844                     
  8793                           ;var.c: 61:     state = newState;
  8794   003844  C004  F0BF         	movff	setState@newState,_state
  8795   003848                     
  8796                           ;var.c: 62:     lcdCommand(0x01);
  8797   003848  0E01               	movlw	1
  8798   00384A  EC75  F019         	call	_lcdCommand
  8799   00384E  0012               	return		;funcret
  8800   003850                     __end_of_setState:
  8801                           	callstack 0
  8802                           
  8803 ;; *************** function _eventInit *****************
  8804 ;; Defined at:
  8805 ;;		line 18 in file "event.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8822 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8823 ;;Total ram usage:        0 bytes
  8824 ;; Hardware stack levels used: 1
  8825 ;; Hardware stack levels required when called: 1
  8826 ;; This function calls:
  8827 ;;		_kpInit
  8828 ;; This function is called by:
  8829 ;;		_smInit
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text52
  8834   0037EC                     __ptext52:
  8835                           	callstack 0
  8836   0037EC                     _eventInit:
  8837                           	callstack 28
  8838   0037EC                     
  8839                           ;event.c: 19:     kpInit();
  8840   0037EC  EC28  F01C         	call	_kpInit	;wreg free
  8841   0037F0                     
  8842                           ;event.c: 21:     ev_ant = 0;
  8843   0037F0  0E00               	movlw	0
  8844   0037F2  0100               	movlb	0	; () banked
  8845   0037F4  6FBC               	movwf	(_ev_ant+1)& (0+255),b
  8846   0037F6  0E00               	movlw	0
  8847   0037F8  6FBB               	movwf	_ev_ant& (0+255),b
  8848   0037FA                     
  8849                           ; BSR set to: 0
  8850                           ;event.c: 22:     key = 1;
  8851   0037FA  0E00               	movlw	0
  8852   0037FC  6FB8               	movwf	(_key+1)& (0+255),b
  8853   0037FE  0E01               	movlw	1
  8854   003800  6FB7               	movwf	_key& (0+255),b
  8855   003802                     
  8856                           ; BSR set to: 0
  8857   003802  0012               	return		;funcret
  8858   003804                     __end_of_eventInit:
  8859                           	callstack 0
  8860                           
  8861 ;; *************** function _kpInit *****************
  8862 ;; Defined at:
  8863 ;;		line 81 in file "keypad.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;		None
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;		None
  8868 ;; Return value:  Size  Location     Type
  8869 ;;                  1    wreg      void 
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8877 ;;      Params:         0       0       0       0       0       0       0       0       0
  8878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8880 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8881 ;;Total ram usage:        0 bytes
  8882 ;; Hardware stack levels used: 1
  8883 ;; This function calls:
  8884 ;;		Nothing
  8885 ;; This function is called by:
  8886 ;;		_main
  8887 ;;		_eventInit
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text53
  8892   003850                     __ptext53:
  8893                           	callstack 0
  8894   003850                     _kpInit:
  8895                           	callstack 28
  8896   003850                     
  8897                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  8898   003850  6893               	setf	147,c	;volatile
  8899   003852                     
  8900                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  8901   003852  9EF1               	bcf	241,7,c	;volatile
  8902   003854                     
  8903                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  8904   003854  0E0E               	movlw	14
  8905   003856  6EC1               	movwf	193,c	;volatile
  8906   003858                     
  8907                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  8908   003858  0E00               	movlw	0
  8909   00385A  6E63               	movwf	99,c	;volatile
  8910   00385C  0012               	return		;funcret
  8911   00385E                     __end_of_kpInit:
  8912                           	callstack 0
  8913                           
  8914 ;; *************** function _serialInit *****************
  8915 ;; Defined at:
  8916 ;;		line 48 in file "serial.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;		None
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;		None
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, status,2, status,0
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0
  8931 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8933 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8934 ;;Total ram usage:        0 bytes
  8935 ;; Hardware stack levels used: 1
  8936 ;; This function calls:
  8937 ;;		Nothing
  8938 ;; This function is called by:
  8939 ;;		_main
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           	psect	text54
  8944   0037BA                     __ptext54:
  8945                           	callstack 0
  8946   0037BA                     _serialInit:
  8947                           	callstack 30
  8948   0037BA                     
  8949                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  8950   0037BA  0E2C               	movlw	44
  8951   0037BC  6EAC               	movwf	172,c	;volatile
  8952                           
  8953                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  8954   0037BE  0E90               	movlw	144
  8955   0037C0  6EAB               	movwf	171,c	;volatile
  8956                           
  8957                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  8958   0037C2  0E08               	movlw	8
  8959   0037C4  6EB8               	movwf	184,c	;volatile
  8960                           
  8961                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  8962   0037C6  0E00               	movlw	0
  8963   0037C8  6EB0               	movwf	176,c	;volatile
  8964                           
  8965                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  8966   0037CA  0E22               	movlw	34
  8967   0037CC  6EAF               	movwf	175,c	;volatile
  8968   0037CE                     
  8969                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  8970   0037CE  8C94               	bsf	148,6,c	;volatile
  8971   0037D0                     
  8972                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  8973   0037D0  8E94               	bsf	148,7,c	;volatile
  8974   0037D2  0012               	return		;funcret
  8975   0037D4                     __end_of_serialInit:
  8976                           	callstack 0
  8977                           
  8978 ;; *************** function _lcdInit *****************
  8979 ;; Defined at:
  8980 ;;		line 117 in file "lcd.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;  i               1    3[COMRAM] unsigned char 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      void 
  8987 ;; Registers used:
  8988 ;;		wreg, status,2, status,0, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8994 ;;      Params:         0       0       0       0       0       0       0       0       0
  8995 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8997 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8998 ;;Total ram usage:        1 bytes
  8999 ;; Hardware stack levels used: 1
  9000 ;; Hardware stack levels required when called: 3
  9001 ;; This function calls:
  9002 ;;		_Delay2ms
  9003 ;;		_lcdCommand
  9004 ;;		_lcdCommand4bits
  9005 ;; This function is called by:
  9006 ;;		_main
  9007 ;;		_outputInit
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text55
  9012   003042                     __ptext55:
  9013                           	callstack 0
  9014   003042                     _lcdInit:
  9015                           	callstack 27
  9016   003042                     
  9017                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  9018   003042  9095               	bcf	149,0,c	;volatile
  9019                           
  9020                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  9021   003044  9E95               	bcf	149,7,c	;volatile
  9022                           
  9023                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  9024   003046  9C95               	bcf	149,6,c	;volatile
  9025                           
  9026                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  9027   003048  9A95               	bcf	149,5,c	;volatile
  9028                           
  9029                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  9030   00304A  9895               	bcf	149,4,c	;volatile
  9031                           
  9032                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  9033   00304C  9495               	bcf	149,2,c	;volatile
  9034   00304E                     
  9035                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  9036   00304E  0E00               	movlw	0
  9037   003050  6E04               	movwf	lcdInit@i^0,c
  9038   003052                     l4696:
  9039                           
  9040                           ;lcd.c: 133:         Delay2ms();
  9041   003052  EC05  F01B         	call	_Delay2ms	;wreg free
  9042   003056  2A04               	incf	lcdInit@i^0,f,c
  9043   003058  0E06               	movlw	6
  9044   00305A  6404               	cpfsgt	lcdInit@i^0,c
  9045   00305C  EF32  F018         	goto	u4291
  9046   003060  EF34  F018         	goto	u4290
  9047   003064                     u4291:
  9048   003064  EF29  F018         	goto	l4696
  9049   003068                     u4290:
  9050   003068                     
  9051                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  9052   003068  0E00               	movlw	0
  9053   00306A  6E01               	movwf	lcdCommand4bits@data^0,c
  9054   00306C  0E30               	movlw	48
  9055   00306E  EC5D  F018         	call	_lcdCommand4bits
  9056                           
  9057                           ;lcd.c: 138:     Delay2ms();
  9058   003072  EC05  F01B         	call	_Delay2ms	;wreg free
  9059                           
  9060                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  9061   003076  0E00               	movlw	0
  9062   003078  6E01               	movwf	lcdCommand4bits@data^0,c
  9063   00307A  0E30               	movlw	48
  9064   00307C  EC5D  F018         	call	_lcdCommand4bits
  9065                           
  9066                           ;lcd.c: 142:     Delay2ms();
  9067   003080  EC05  F01B         	call	_Delay2ms	;wreg free
  9068                           
  9069                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  9070   003084  0E00               	movlw	0
  9071   003086  6E01               	movwf	lcdCommand4bits@data^0,c
  9072   003088  0E30               	movlw	48
  9073   00308A  EC5D  F018         	call	_lcdCommand4bits
  9074                           
  9075                           ;lcd.c: 146:     Delay2ms();
  9076   00308E  EC05  F01B         	call	_Delay2ms	;wreg free
  9077                           
  9078                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  9079   003092  0E00               	movlw	0
  9080   003094  6E01               	movwf	lcdCommand4bits@data^0,c
  9081   003096  0E20               	movlw	32
  9082   003098  EC5D  F018         	call	_lcdCommand4bits
  9083                           
  9084                           ;lcd.c: 150:     Delay2ms();
  9085   00309C  EC05  F01B         	call	_Delay2ms	;wreg free
  9086                           
  9087                           ;lcd.c: 153:     lcdCommand(0x28);
  9088   0030A0  0E28               	movlw	40
  9089   0030A2  EC75  F019         	call	_lcdCommand
  9090                           
  9091                           ;lcd.c: 154:     lcdCommand(0x06);
  9092   0030A6  0E06               	movlw	6
  9093   0030A8  EC75  F019         	call	_lcdCommand
  9094                           
  9095                           ;lcd.c: 156:     lcdCommand(0x0C);
  9096   0030AC  0E0C               	movlw	12
  9097   0030AE  EC75  F019         	call	_lcdCommand
  9098                           
  9099                           ;lcd.c: 157:     lcdCommand(0x01);
  9100   0030B2  0E01               	movlw	1
  9101   0030B4  EC75  F019         	call	_lcdCommand
  9102   0030B8  0012               	return		;funcret
  9103   0030BA                     __end_of_lcdInit:
  9104                           	callstack 0
  9105                           
  9106 ;; *************** function _lcdCommand *****************
  9107 ;; Defined at:
  9108 ;;		line 93 in file "lcd.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  cmd             1    wreg     unsigned char 
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  cmd             1    2[COMRAM] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0
  9123 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9125 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9126 ;;Total ram usage:        1 bytes
  9127 ;; Hardware stack levels used: 1
  9128 ;; Hardware stack levels required when called: 2
  9129 ;; This function calls:
  9130 ;;		_Delay2ms
  9131 ;;		_Delay40us
  9132 ;;		_lcdCommand4bits
  9133 ;; This function is called by:
  9134 ;;		_lcdInit
  9135 ;;		_outputPrint
  9136 ;;		_setState
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text56
  9141   0032EA                     __ptext56:
  9142                           	callstack 0
  9143   0032EA                     _lcdCommand:
  9144                           	callstack 26
  9145                           
  9146                           ;incstack = 0
  9147                           ;lcdCommand@cmd stored from wreg
  9148   0032EA  6E03               	movwf	lcdCommand@cmd^0,c
  9149   0032EC                     
  9150                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  9151   0032EC  0E00               	movlw	0
  9152   0032EE  6E01               	movwf	lcdCommand4bits@data^0,c
  9153   0032F0  5003               	movf	lcdCommand@cmd^0,w,c
  9154   0032F2  EC5D  F018         	call	_lcdCommand4bits
  9155                           
  9156                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  9157   0032F6  0E00               	movlw	0
  9158   0032F8  6E01               	movwf	lcdCommand4bits@data^0,c
  9159   0032FA  3803               	swapf	lcdCommand@cmd^0,w,c
  9160   0032FC  0BF0               	andlw	240
  9161   0032FE  EC5D  F018         	call	_lcdCommand4bits
  9162   003302                     
  9163                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  9164   003302  0E02               	movlw	2
  9165   003304  1803               	xorwf	lcdCommand@cmd^0,w,c
  9166   003306  B4D8               	btfsc	status,2,c
  9167   003308  EF88  F019         	goto	u3381
  9168   00330C  EF8A  F019         	goto	u3380
  9169   003310                     u3381:
  9170   003310  EF92  F019         	goto	l3890
  9171   003314                     u3380:
  9172   003314  0403               	decf	lcdCommand@cmd^0,w,c
  9173   003316  A4D8               	btfss	status,2,c
  9174   003318  EF90  F019         	goto	u3391
  9175   00331C  EF92  F019         	goto	u3390
  9176   003320                     u3391:
  9177   003320  EF96  F019         	goto	l3892
  9178   003324                     u3390:
  9179   003324                     l3890:
  9180                           
  9181                           ;lcd.c: 100:         Delay2ms();
  9182   003324  EC05  F01B         	call	_Delay2ms	;wreg free
  9183                           
  9184                           ;lcd.c: 102:     } else {
  9185   003328  EF98  F019         	goto	l180
  9186   00332C                     l3892:
  9187                           
  9188                           ;lcd.c: 103:         Delay40us();
  9189   00332C  EC02  F01C         	call	_Delay40us	;wreg free
  9190   003330                     l180:
  9191   003330  0012               	return		;funcret
  9192   003332                     __end_of_lcdCommand:
  9193                           	callstack 0
  9194                           
  9195 ;; *************** function _lcdCommand4bits *****************
  9196 ;; Defined at:
  9197 ;;		line 52 in file "lcd.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  cmd             1    wreg     unsigned char 
  9200 ;;  data            1    0[COMRAM] unsigned char 
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;  cmd             1    1[COMRAM] unsigned char 
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      void 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2, status,0, cstack
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9212 ;;      Params:         1       0       0       0       0       0       0       0       0
  9213 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9215 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9216 ;;Total ram usage:        2 bytes
  9217 ;; Hardware stack levels used: 1
  9218 ;; Hardware stack levels required when called: 1
  9219 ;; This function calls:
  9220 ;;		_pulseEnable
  9221 ;; This function is called by:
  9222 ;;		_lcdCommand
  9223 ;;		_lcdData
  9224 ;;		_lcdInit
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text57
  9229   0030BA                     __ptext57:
  9230                           	callstack 0
  9231   0030BA                     _lcdCommand4bits:
  9232                           	callstack 26
  9233                           
  9234                           ;incstack = 0
  9235                           ;lcdCommand4bits@cmd stored from wreg
  9236   0030BA  6E02               	movwf	lcdCommand4bits@cmd^0,c
  9237   0030BC                     
  9238                           ;lcd.c: 54:     if (data) {
  9239   0030BC  5001               	movf	lcdCommand4bits@data^0,w,c
  9240   0030BE  B4D8               	btfsc	status,2,c
  9241   0030C0  EF64  F018         	goto	u3181
  9242   0030C4  EF66  F018         	goto	u3180
  9243   0030C8                     u3181:
  9244   0030C8  EF69  F018         	goto	l3704
  9245   0030CC                     u3180:
  9246   0030CC                     
  9247                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  9248   0030CC  8083               	bsf	131,0,c	;volatile
  9249                           
  9250                           ;lcd.c: 56:     } else {
  9251   0030CE  EF6A  F018         	goto	l3706
  9252   0030D2                     l3704:
  9253                           
  9254                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  9255   0030D2  9083               	bcf	131,0,c	;volatile
  9256   0030D4                     l3706:
  9257                           
  9258                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  9259   0030D4  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  9260   0030D6  EF6F  F018         	goto	u3191
  9261   0030DA  EF71  F018         	goto	u3190
  9262   0030DE                     u3191:
  9263   0030DE  EF74  F018         	goto	l3710
  9264   0030E2                     u3190:
  9265   0030E2                     
  9266                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  9267   0030E2  8483               	bsf	131,2,c	;volatile
  9268                           
  9269                           ;lcd.c: 65:     } else {
  9270   0030E4  EF75  F018         	goto	l3712
  9271   0030E8                     l3710:
  9272                           
  9273                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  9274   0030E8  9483               	bcf	131,2,c	;volatile
  9275   0030EA                     l3712:
  9276                           
  9277                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  9278   0030EA  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  9279   0030EC  EF7A  F018         	goto	u3201
  9280   0030F0  EF7C  F018         	goto	u3200
  9281   0030F4                     u3201:
  9282   0030F4  EF7F  F018         	goto	l3716
  9283   0030F8                     u3200:
  9284   0030F8                     
  9285                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  9286   0030F8  8883               	bsf	131,4,c	;volatile
  9287                           
  9288                           ;lcd.c: 72:     } else {
  9289   0030FA  EF80  F018         	goto	l3718
  9290   0030FE                     l3716:
  9291                           
  9292                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  9293   0030FE  9883               	bcf	131,4,c	;volatile
  9294   003100                     l3718:
  9295                           
  9296                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  9297   003100  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  9298   003102  EF85  F018         	goto	u3211
  9299   003106  EF87  F018         	goto	u3210
  9300   00310A                     u3211:
  9301   00310A  EF8A  F018         	goto	l3722
  9302   00310E                     u3210:
  9303   00310E                     
  9304                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  9305   00310E  8A83               	bsf	131,5,c	;volatile
  9306                           
  9307                           ;lcd.c: 79:     } else {
  9308   003110  EF8B  F018         	goto	l3724
  9309   003114                     l3722:
  9310                           
  9311                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  9312   003114  9A83               	bcf	131,5,c	;volatile
  9313   003116                     l3724:
  9314                           
  9315                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  9316   003116  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  9317   003118  EF90  F018         	goto	u3221
  9318   00311C  EF92  F018         	goto	u3220
  9319   003120                     u3221:
  9320   003120  EF95  F018         	goto	l3728
  9321   003124                     u3220:
  9322   003124                     
  9323                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  9324   003124  8C83               	bsf	131,6,c	;volatile
  9325                           
  9326                           ;lcd.c: 86:     } else {
  9327   003126  EF96  F018         	goto	l3730
  9328   00312A                     l3728:
  9329                           
  9330                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  9331   00312A  9C83               	bcf	131,6,c	;volatile
  9332   00312C                     l3730:
  9333                           
  9334                           ;lcd.c: 90:     pulseEnable();
  9335   00312C  EC3C  F01C         	call	_pulseEnable	;wreg free
  9336   003130  0012               	return		;funcret
  9337   003132                     __end_of_lcdCommand4bits:
  9338                           	callstack 0
  9339                           
  9340 ;; *************** function _pulseEnable *****************
  9341 ;; Defined at:
  9342 ;;		line 47 in file "lcd.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;		None
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;		None
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  1    wreg      void 
  9349 ;; Registers used:
  9350 ;;		status,2, status,0
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9356 ;;      Params:         0       0       0       0       0       0       0       0       0
  9357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9359 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9360 ;;Total ram usage:        0 bytes
  9361 ;; Hardware stack levels used: 1
  9362 ;; This function calls:
  9363 ;;		Nothing
  9364 ;; This function is called by:
  9365 ;;		_lcdCommand4bits
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           	psect	text58
  9370   003878                     __ptext58:
  9371                           	callstack 0
  9372   003878                     _pulseEnable:
  9373                           	callstack 26
  9374   003878                     
  9375                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  9376   003878  8E83               	bsf	131,7,c	;volatile
  9377                           
  9378                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  9379   00387A  9E83               	bcf	131,7,c	;volatile
  9380   00387C  0012               	return		;funcret
  9381   00387E                     __end_of_pulseEnable:
  9382                           	callstack 0
  9383                           
  9384 ;; *************** function _Delay40us *****************
  9385 ;; Defined at:
  9386 ;;		line 36 in file "lcd.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  j               1    0[COMRAM] unsigned char 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      void 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0
  9401 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9403 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9404 ;;Total ram usage:        1 bytes
  9405 ;; Hardware stack levels used: 1
  9406 ;; This function calls:
  9407 ;;		Nothing
  9408 ;; This function is called by:
  9409 ;;		_lcdCommand
  9410 ;;		_lcdData
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text59
  9415   003804                     __ptext59:
  9416                           	callstack 0
  9417   003804                     _Delay40us:
  9418                           	callstack 27
  9419   003804                     
  9420                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  9421   003804  0E00               	movlw	0
  9422   003806  6E01               	movwf	Delay40us@j^0,c
  9423   003808                     l3696:
  9424   003808  2A01               	incf	Delay40us@j^0,f,c
  9425   00380A  0E43               	movlw	67
  9426   00380C  6401               	cpfsgt	Delay40us@j^0,c
  9427   00380E  EF0B  F01C         	goto	u3171
  9428   003812  EF0D  F01C         	goto	u3170
  9429   003816                     u3171:
  9430   003816  EF04  F01C         	goto	l3696
  9431   00381A                     u3170:
  9432   00381A  0012               	return		;funcret
  9433   00381C                     __end_of_Delay40us:
  9434                           	callstack 0
  9435                           
  9436 ;; *************** function _Delay2ms *****************
  9437 ;; Defined at:
  9438 ;;		line 41 in file "lcd.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;		None
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  k               1    1[COMRAM] unsigned char 
  9443 ;;  j               1    0[COMRAM] unsigned char 
  9444 ;; Return value:  Size  Location     Type
  9445 ;;                  1    wreg      void 
  9446 ;; Registers used:
  9447 ;;		wreg, status,2, status,0
  9448 ;; Tracked objects:
  9449 ;;		On entry : 0/0
  9450 ;;		On exit  : 0/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9453 ;;      Params:         0       0       0       0       0       0       0       0       0
  9454 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9456 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9457 ;;Total ram usage:        2 bytes
  9458 ;; Hardware stack levels used: 1
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_lcdCommand
  9463 ;;		_lcdInit
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           	psect	text60
  9468   00360A                     __ptext60:
  9469                           	callstack 0
  9470   00360A                     _Delay2ms:
  9471                           	callstack 27
  9472   00360A                     
  9473                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  9474   00360A  0E00               	movlw	0
  9475   00360C  6E01               	movwf	Delay2ms@j^0,c
  9476   00360E                     l3842:
  9477                           
  9478                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  9479   00360E  0E00               	movlw	0
  9480   003610  6E02               	movwf	Delay2ms@k^0,c
  9481   003612                     l3848:
  9482   003612  2A02               	incf	Delay2ms@k^0,f,c
  9483   003614  0EB1               	movlw	177
  9484   003616  6402               	cpfsgt	Delay2ms@k^0,c
  9485   003618  EF10  F01B         	goto	u3351
  9486   00361C  EF12  F01B         	goto	u3350
  9487   003620                     u3351:
  9488   003620  EF09  F01B         	goto	l3848
  9489   003624                     u3350:
  9490   003624  2A01               	incf	Delay2ms@j^0,f,c
  9491   003626  0E13               	movlw	19
  9492   003628  6401               	cpfsgt	Delay2ms@j^0,c
  9493   00362A  EF19  F01B         	goto	u3361
  9494   00362E  EF1B  F01B         	goto	u3360
  9495   003632                     u3361:
  9496   003632  EF07  F01B         	goto	l3842
  9497   003636                     u3360:
  9498   003636  0012               	return		;funcret
  9499   003638                     __end_of_Delay2ms:
  9500                           	callstack 0
  9501                           
  9502 ;; *************** function _kpDebounce *****************
  9503 ;; Defined at:
  9504 ;;		line 33 in file "keypad.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  portes          5    8[COMRAM] unsigned char [5]
  9509 ;;  bits            5    3[COMRAM] unsigned char [5]
  9510 ;;  j               1   13[COMRAM] unsigned char 
  9511 ;;  i               1    0        unsigned char 
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  1    wreg      void 
  9514 ;; Registers used:
  9515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9521 ;;      Params:         0       0       0       0       0       0       0       0       0
  9522 ;;      Locals:        11       0       0       0       0       0       0       0       0
  9523 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9524 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9525 ;;Total ram usage:       14 bytes
  9526 ;; Hardware stack levels used: 1
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		_main
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           	psect	text61
  9535   0029F2                     __ptext61:
  9536                           	callstack 0
  9537   0029F2                     _kpDebounce:
  9538                           	callstack 30
  9539   0029F2                     
  9540                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  9541   0029F2  EE20  F009         	lfsr	2,kpDebounce@portes
  9542   0029F6  0E04               	movlw	4
  9543   0029F8                     u4201:
  9544   0029F8  6ADE               	clrf	postinc2,c
  9545   0029FA  06E8               	decf	wreg,f,c
  9546   0029FC  E2FD               	bc	u4201
  9547   0029FE  CF81 F009          	movff	3969,kpDebounce@portes	;volatile
  9548   002A02  CF81 F00A          	movff	3969,kpDebounce@portes+1	;volatile
  9549   002A06  CF81 F00B          	movff	3969,kpDebounce@portes+2	;volatile
  9550   002A0A  CF81 F00C          	movff	3969,kpDebounce@portes+3	;volatile
  9551   002A0E  CF84 F00D          	movff	3972,kpDebounce@portes+4	;volatile
  9552   002A12                     
  9553                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  9554   002A12  EE20  F0DC         	lfsr	2,kpDebounce@F15
  9555   002A16  EE10  F004         	lfsr	1,kpDebounce@bits
  9556   002A1A  0E04               	movlw	4
  9557   002A1C                     u4211:
  9558   002A1C  CFDB FFE3          	movff	plusw2,plusw1
  9559   002A20  06E8               	decf	wreg,f,c
  9560   002A22  E2FC               	bc	u4211
  9561   002A24                     
  9562                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  9563   002A24  0E00               	movlw	0
  9564   002A26  6E0E               	movwf	kpDebounce@j^0,c
  9565   002A28                     l4668:
  9566                           
  9567                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  9568   002A28  500E               	movf	kpDebounce@j^0,w,c
  9569   002A2A  0F09               	addlw	low kpDebounce@portes
  9570   002A2C  6ED9               	movwf	fsr2l,c
  9571   002A2E  6ADA               	clrf	fsr2h,c
  9572   002A30  50DF               	movf	indf2,w,c
  9573   002A32  6E01               	movwf	??_kpDebounce^0,c
  9574   002A34  500E               	movf	kpDebounce@j^0,w,c
  9575   002A36  0F04               	addlw	low kpDebounce@bits
  9576   002A38  6ED9               	movwf	fsr2l,c
  9577   002A3A  6ADA               	clrf	fsr2h,c
  9578   002A3C  50DF               	movf	indf2,w,c
  9579   002A3E  6E02               	movwf	(??_kpDebounce+1)^0,c
  9580   002A40  0E01               	movlw	1
  9581   002A42  6E03               	movwf	(??_kpDebounce+2)^0,c
  9582   002A44  2A02               	incf	(??_kpDebounce+1)^0,f,c
  9583   002A46  EF27  F015         	goto	u4224
  9584   002A4A                     u4225:
  9585   002A4A  90D8               	bcf	status,0,c
  9586   002A4C  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  9587   002A4E                     u4224:
  9588   002A4E  2E02               	decfsz	(??_kpDebounce+1)^0,f,c
  9589   002A50  EF25  F015         	goto	u4225
  9590   002A54  5003               	movf	(??_kpDebounce+2)^0,w,c
  9591   002A56  1401               	andwf	??_kpDebounce^0,w,c
  9592   002A58  0900               	iorlw	0
  9593   002A5A  A4D8               	btfss	status,2,c
  9594   002A5C  EF32  F015         	goto	u4231
  9595   002A60  EF34  F015         	goto	u4230
  9596   002A64                     u4231:
  9597   002A64  EF44  F015         	goto	l4672
  9598   002A68                     u4230:
  9599   002A68                     
  9600                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  9601   002A68  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  9602   002A6C  0E01               	movlw	1
  9603   002A6E  6E02               	movwf	(??_kpDebounce+1)^0,c
  9604   002A70  2A01               	incf	??_kpDebounce^0,f,c
  9605   002A72  EF3D  F015         	goto	u4244
  9606   002A76                     u4245:
  9607   002A76  90D8               	bcf	status,0,c
  9608   002A78  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9609   002A7A                     u4244:
  9610   002A7A  2E01               	decfsz	??_kpDebounce^0,f,c
  9611   002A7C  EF3B  F015         	goto	u4245
  9612   002A80  5002               	movf	(??_kpDebounce+1)^0,w,c
  9613   002A82  125D               	iorwf	kpDebounce@valorNovo^0,f,c
  9614                           
  9615                           ;keypad.c: 65:             } else {
  9616   002A84  EF53  F015         	goto	l4674
  9617   002A88                     l4672:
  9618                           
  9619                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  9620   002A88  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  9621   002A8C  0E01               	movlw	1
  9622   002A8E  6E02               	movwf	(??_kpDebounce+1)^0,c
  9623   002A90  2A01               	incf	??_kpDebounce^0,f,c
  9624   002A92  EF4D  F015         	goto	u4254
  9625   002A96                     u4255:
  9626   002A96  90D8               	bcf	status,0,c
  9627   002A98  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  9628   002A9A                     u4254:
  9629   002A9A  2E01               	decfsz	??_kpDebounce^0,f,c
  9630   002A9C  EF4B  F015         	goto	u4255
  9631   002AA0  5002               	movf	(??_kpDebounce+1)^0,w,c
  9632   002AA2  0AFF               	xorlw	255
  9633   002AA4  165D               	andwf	kpDebounce@valorNovo^0,f,c
  9634   002AA6                     l4674:
  9635                           
  9636                           ;keypad.c: 68:         }
  9637   002AA6  2A0E               	incf	kpDebounce@j^0,f,c
  9638   002AA8  0E04               	movlw	4
  9639   002AAA  640E               	cpfsgt	kpDebounce@j^0,c
  9640   002AAC  EF5A  F015         	goto	u4261
  9641   002AB0  EF5C  F015         	goto	u4260
  9642   002AB4                     u4261:
  9643   002AB4  EF14  F015         	goto	l4668
  9644   002AB8                     u4260:
  9645   002AB8                     
  9646                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  9647   002AB8  505D               	movf	kpDebounce@valorNovo^0,w,c
  9648   002ABA  185C               	xorwf	kpDebounce@valorAntigo^0,w,c
  9649   002ABC  A4D8               	btfss	status,2,c
  9650   002ABE  EF63  F015         	goto	u4271
  9651   002AC2  EF65  F015         	goto	u4270
  9652   002AC6                     u4271:
  9653   002AC6  EF68  F015         	goto	l4682
  9654   002ACA                     u4270:
  9655   002ACA                     
  9656                           ;keypad.c: 70:         tempo--;
  9657   002ACA  065E               	decf	kpDebounce@tempo^0,f,c
  9658                           
  9659                           ;keypad.c: 71:     } else {
  9660   002ACC  EF6C  F015         	goto	l136
  9661   002AD0                     l4682:
  9662                           
  9663                           ;keypad.c: 72:         tempo = 10;
  9664   002AD0  0E0A               	movlw	10
  9665   002AD2  6E5E               	movwf	kpDebounce@tempo^0,c
  9666   002AD4                     
  9667                           ;keypad.c: 73:         valorAntigo = valorNovo;
  9668   002AD4  C05D  F05C         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  9669   002AD8                     l136:
  9670                           
  9671                           ;keypad.c: 75:     if (tempo == 0) {
  9672   002AD8  505E               	movf	kpDebounce@tempo^0,w,c
  9673   002ADA  A4D8               	btfss	status,2,c
  9674   002ADC  EF72  F015         	goto	u4281
  9675   002AE0  EF74  F015         	goto	u4280
  9676   002AE4                     u4281:
  9677   002AE4  EF76  F015         	goto	l138
  9678   002AE8                     u4280:
  9679   002AE8                     
  9680                           ;keypad.c: 76:         valor = valorAntigo;
  9681   002AE8  C05C  F05F         	movff	kpDebounce@valorAntigo,_valor
  9682   002AEC                     l138:
  9683   002AEC  0012               	return		;funcret
  9684   002AEE                     __end_of_kpDebounce:
  9685                           	callstack 0
  9686                           
  9687 ;; *************** function _dsInit *****************
  9688 ;; Defined at:
  9689 ;;		line 17 in file "ds1307.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;		None
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;		None
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  1    wreg      void 
  9696 ;; Registers used:
  9697 ;;		wreg, status,2, status,0, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9703 ;;      Params:         0       0       0       0       0       0       0       0       0
  9704 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9705 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9706 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9707 ;;Total ram usage:        0 bytes
  9708 ;; Hardware stack levels used: 1
  9709 ;; Hardware stack levels required when called: 2
  9710 ;; This function calls:
  9711 ;;		_i2cInit
  9712 ;; This function is called by:
  9713 ;;		_main
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text62
  9718   00387E                     __ptext62:
  9719                           	callstack 0
  9720   00387E                     _dsInit:
  9721                           	callstack 28
  9722   00387E                     
  9723                           ;ds1307.c: 18:  i2cInit();
  9724   00387E  EC87  F01B         	call	_i2cInit	;wreg free
  9725   003882  0012               	return		;funcret
  9726   003884                     __end_of_dsInit:
  9727                           	callstack 0
  9728                           
  9729 ;; *************** function _i2cInit *****************
  9730 ;; Defined at:
  9731 ;;		line 14 in file "soft_i2c.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;		None
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;		None
  9736 ;; Return value:  Size  Location     Type
  9737 ;;                  1    wreg      void 
  9738 ;; Registers used:
  9739 ;;		wreg, status,2, status,0, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 0/0
  9742 ;;		On exit  : 0/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9745 ;;      Params:         0       0       0       0       0       0       0       0       0
  9746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9748 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9749 ;;Total ram usage:        0 bytes
  9750 ;; Hardware stack levels used: 1
  9751 ;; Hardware stack levels required when called: 1
  9752 ;; This function calls:
  9753 ;;		_pinMode
  9754 ;; This function is called by:
  9755 ;;		_dsInit
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           	psect	text63
  9760   00370E                     __ptext63:
  9761                           	callstack 0
  9762   00370E                     _i2cInit:
  9763                           	callstack 28
  9764   00370E                     
  9765                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  9766   00370E  0E00               	movlw	0
  9767   003710  6E02               	movwf	(pinMode@pin+1)^0,c
  9768   003712  0E08               	movlw	8
  9769   003714  6E01               	movwf	pinMode@pin^0,c
  9770   003716  0E00               	movlw	0
  9771   003718  6E04               	movwf	(pinMode@type+1)^0,c
  9772   00371A  0E01               	movlw	1
  9773   00371C  6E03               	movwf	pinMode@type^0,c
  9774   00371E  EC3F  F00F         	call	_pinMode	;wreg free
  9775                           
  9776                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  9777   003722  0E00               	movlw	0
  9778   003724  6E02               	movwf	(pinMode@pin+1)^0,c
  9779   003726  0E09               	movlw	9
  9780   003728  6E01               	movwf	pinMode@pin^0,c
  9781   00372A  0E00               	movlw	0
  9782   00372C  6E04               	movwf	(pinMode@type+1)^0,c
  9783   00372E  0E01               	movlw	1
  9784   003730  6E03               	movwf	pinMode@type^0,c
  9785   003732  EC3F  F00F         	call	_pinMode	;wreg free
  9786   003736  0012               	return		;funcret
  9787   003738                     __end_of_i2cInit:
  9788                           	callstack 0
  9789                           
  9790 ;; *************** function _pinMode *****************
  9791 ;; Defined at:
  9792 ;;		line 54 in file "io.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;  pin             2    0[COMRAM] int 
  9795 ;;  type            2    2[COMRAM] int 
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      void 
  9800 ;; Registers used:
  9801 ;;		wreg, status,2, status,0
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9807 ;;      Params:         4       0       0       0       0       0       0       0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9809 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9810 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9811 ;;Total ram usage:        6 bytes
  9812 ;; Hardware stack levels used: 1
  9813 ;; This function calls:
  9814 ;;		Nothing
  9815 ;; This function is called by:
  9816 ;;		_i2cInit
  9817 ;;		_read_SCL
  9818 ;;		_read_SDA
  9819 ;;		_clear_SCL
  9820 ;;		_clear_SDA
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           	psect	text64
  9825   001E7E                     __ptext64:
  9826                           	callstack 0
  9827   001E7E                     _pinMode:
  9828                           	callstack 24
  9829   001E7E                     
  9830                           ;io.c: 56:     if(pin <8){
  9831   001E7E  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9832   001E80  EF4D  F00F         	goto	u2790
  9833   001E84  5002               	movf	(pinMode@pin+1)^0,w,c
  9834   001E86  E107               	bnz	u2791
  9835   001E88  0E08               	movlw	8
  9836   001E8A  5C01               	subwf	pinMode@pin^0,w,c
  9837   001E8C  B0D8               	btfsc	status,0,c
  9838   001E8E  EF4B  F00F         	goto	u2791
  9839   001E92  EF4D  F00F         	goto	u2790
  9840   001E96                     u2791:
  9841   001E96  EF77  F00F         	goto	l3526
  9842   001E9A                     u2790:
  9843   001E9A                     
  9844                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  9845   001E9A  5003               	movf	pinMode@type^0,w,c
  9846   001E9C  1004               	iorwf	(pinMode@type+1)^0,w,c
  9847   001E9E  B4D8               	btfsc	status,2,c
  9848   001EA0  EF54  F00F         	goto	u2801
  9849   001EA4  EF56  F00F         	goto	u2800
  9850   001EA8                     u2801:
  9851   001EA8  EF66  F00F         	goto	l3524
  9852   001EAC                     u2800:
  9853   001EAC  C001  F005         	movff	pinMode@pin,??_pinMode
  9854   001EB0  0E01               	movlw	1
  9855   001EB2  6E06               	movwf	(??_pinMode+1)^0,c
  9856   001EB4  2A05               	incf	??_pinMode^0,f,c
  9857   001EB6  EF5F  F00F         	goto	u2814
  9858   001EBA                     u2815:
  9859   001EBA  90D8               	bcf	status,0,c
  9860   001EBC  3606               	rlcf	(??_pinMode+1)^0,f,c
  9861   001EBE                     u2814:
  9862   001EBE  2E05               	decfsz	??_pinMode^0,f,c
  9863   001EC0  EF5D  F00F         	goto	u2815
  9864   001EC4  5006               	movf	(??_pinMode+1)^0,w,c
  9865   001EC6  1292               	iorwf	146,f,c	;volatile
  9866   001EC8  EF65  F010         	goto	l113
  9867   001ECC                     l3524:
  9868   001ECC  C001  F005         	movff	pinMode@pin,??_pinMode
  9869   001ED0  0E01               	movlw	1
  9870   001ED2  6E06               	movwf	(??_pinMode+1)^0,c
  9871   001ED4  2A05               	incf	??_pinMode^0,f,c
  9872   001ED6  EF6F  F00F         	goto	u2824
  9873   001EDA                     u2825:
  9874   001EDA  90D8               	bcf	status,0,c
  9875   001EDC  3606               	rlcf	(??_pinMode+1)^0,f,c
  9876   001EDE                     u2824:
  9877   001EDE  2E05               	decfsz	??_pinMode^0,f,c
  9878   001EE0  EF6D  F00F         	goto	u2825
  9879   001EE4  5006               	movf	(??_pinMode+1)^0,w,c
  9880   001EE6  0AFF               	xorlw	255
  9881   001EE8  1692               	andwf	146,f,c	;volatile
  9882   001EEA  EF65  F010         	goto	l113
  9883   001EEE                     l3526:
  9884   001EEE  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9885   001EF0  EF85  F00F         	goto	u2830
  9886   001EF4  5002               	movf	(pinMode@pin+1)^0,w,c
  9887   001EF6  E107               	bnz	u2831
  9888   001EF8  0E10               	movlw	16
  9889   001EFA  5C01               	subwf	pinMode@pin^0,w,c
  9890   001EFC  B0D8               	btfsc	status,0,c
  9891   001EFE  EF83  F00F         	goto	u2831
  9892   001F02  EF85  F00F         	goto	u2830
  9893   001F06                     u2831:
  9894   001F06  EFB3  F00F         	goto	l3534
  9895   001F0A                     u2830:
  9896   001F0A                     
  9897                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  9898   001F0A  5003               	movf	pinMode@type^0,w,c
  9899   001F0C  1004               	iorwf	(pinMode@type+1)^0,w,c
  9900   001F0E  B4D8               	btfsc	status,2,c
  9901   001F10  EF8C  F00F         	goto	u2841
  9902   001F14  EF8E  F00F         	goto	u2840
  9903   001F18                     u2841:
  9904   001F18  EFA0  F00F         	goto	l3532
  9905   001F1C                     u2840:
  9906   001F1C  C001  F005         	movff	pinMode@pin,??_pinMode
  9907   001F20  0EF8               	movlw	-8
  9908   001F22  2605               	addwf	??_pinMode^0,f,c
  9909   001F24  0E01               	movlw	1
  9910   001F26  6E06               	movwf	(??_pinMode+1)^0,c
  9911   001F28  2A05               	incf	??_pinMode^0,f,c
  9912   001F2A  EF99  F00F         	goto	u2854
  9913   001F2E                     u2855:
  9914   001F2E  90D8               	bcf	status,0,c
  9915   001F30  3606               	rlcf	(??_pinMode+1)^0,f,c
  9916   001F32                     u2854:
  9917   001F32  2E05               	decfsz	??_pinMode^0,f,c
  9918   001F34  EF97  F00F         	goto	u2855
  9919   001F38  5006               	movf	(??_pinMode+1)^0,w,c
  9920   001F3A  1293               	iorwf	147,f,c	;volatile
  9921   001F3C  EF65  F010         	goto	l113
  9922   001F40                     l3532:
  9923   001F40  C001  F005         	movff	pinMode@pin,??_pinMode
  9924   001F44  0EF8               	movlw	-8
  9925   001F46  2605               	addwf	??_pinMode^0,f,c
  9926   001F48  0E01               	movlw	1
  9927   001F4A  6E06               	movwf	(??_pinMode+1)^0,c
  9928   001F4C  2A05               	incf	??_pinMode^0,f,c
  9929   001F4E  EFAB  F00F         	goto	u2864
  9930   001F52                     u2865:
  9931   001F52  90D8               	bcf	status,0,c
  9932   001F54  3606               	rlcf	(??_pinMode+1)^0,f,c
  9933   001F56                     u2864:
  9934   001F56  2E05               	decfsz	??_pinMode^0,f,c
  9935   001F58  EFA9  F00F         	goto	u2865
  9936   001F5C  5006               	movf	(??_pinMode+1)^0,w,c
  9937   001F5E  0AFF               	xorlw	255
  9938   001F60  1693               	andwf	147,f,c	;volatile
  9939   001F62  EF65  F010         	goto	l113
  9940   001F66                     l3534:
  9941   001F66  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9942   001F68  EFC1  F00F         	goto	u2870
  9943   001F6C  5002               	movf	(pinMode@pin+1)^0,w,c
  9944   001F6E  E107               	bnz	u2871
  9945   001F70  0E18               	movlw	24
  9946   001F72  5C01               	subwf	pinMode@pin^0,w,c
  9947   001F74  B0D8               	btfsc	status,0,c
  9948   001F76  EFBF  F00F         	goto	u2871
  9949   001F7A  EFC1  F00F         	goto	u2870
  9950   001F7E                     u2871:
  9951   001F7E  EFEF  F00F         	goto	l3542
  9952   001F82                     u2870:
  9953   001F82                     
  9954                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  9955   001F82  5003               	movf	pinMode@type^0,w,c
  9956   001F84  1004               	iorwf	(pinMode@type+1)^0,w,c
  9957   001F86  B4D8               	btfsc	status,2,c
  9958   001F88  EFC8  F00F         	goto	u2881
  9959   001F8C  EFCA  F00F         	goto	u2880
  9960   001F90                     u2881:
  9961   001F90  EFDC  F00F         	goto	l3540
  9962   001F94                     u2880:
  9963   001F94  C001  F005         	movff	pinMode@pin,??_pinMode
  9964   001F98  0EF0               	movlw	-16
  9965   001F9A  2605               	addwf	??_pinMode^0,f,c
  9966   001F9C  0E01               	movlw	1
  9967   001F9E  6E06               	movwf	(??_pinMode+1)^0,c
  9968   001FA0  2A05               	incf	??_pinMode^0,f,c
  9969   001FA2  EFD5  F00F         	goto	u2894
  9970   001FA6                     u2895:
  9971   001FA6  90D8               	bcf	status,0,c
  9972   001FA8  3606               	rlcf	(??_pinMode+1)^0,f,c
  9973   001FAA                     u2894:
  9974   001FAA  2E05               	decfsz	??_pinMode^0,f,c
  9975   001FAC  EFD3  F00F         	goto	u2895
  9976   001FB0  5006               	movf	(??_pinMode+1)^0,w,c
  9977   001FB2  1294               	iorwf	148,f,c	;volatile
  9978   001FB4  EF65  F010         	goto	l113
  9979   001FB8                     l3540:
  9980   001FB8  C001  F005         	movff	pinMode@pin,??_pinMode
  9981   001FBC  0EF0               	movlw	-16
  9982   001FBE  2605               	addwf	??_pinMode^0,f,c
  9983   001FC0  0E01               	movlw	1
  9984   001FC2  6E06               	movwf	(??_pinMode+1)^0,c
  9985   001FC4  2A05               	incf	??_pinMode^0,f,c
  9986   001FC6  EFE7  F00F         	goto	u2904
  9987   001FCA                     u2905:
  9988   001FCA  90D8               	bcf	status,0,c
  9989   001FCC  3606               	rlcf	(??_pinMode+1)^0,f,c
  9990   001FCE                     u2904:
  9991   001FCE  2E05               	decfsz	??_pinMode^0,f,c
  9992   001FD0  EFE5  F00F         	goto	u2905
  9993   001FD4  5006               	movf	(??_pinMode+1)^0,w,c
  9994   001FD6  0AFF               	xorlw	255
  9995   001FD8  1694               	andwf	148,f,c	;volatile
  9996   001FDA  EF65  F010         	goto	l113
  9997   001FDE                     l3542:
  9998   001FDE  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  9999   001FE0  EFFD  F00F         	goto	u2910
 10000   001FE4  5002               	movf	(pinMode@pin+1)^0,w,c
 10001   001FE6  E107               	bnz	u2911
 10002   001FE8  0E20               	movlw	32
 10003   001FEA  5C01               	subwf	pinMode@pin^0,w,c
 10004   001FEC  B0D8               	btfsc	status,0,c
 10005   001FEE  EFFB  F00F         	goto	u2911
 10006   001FF2  EFFD  F00F         	goto	u2910
 10007   001FF6                     u2911:
 10008   001FF6  EF2B  F010         	goto	l3550
 10009   001FFA                     u2910:
 10010   001FFA                     
 10011                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
 10012   001FFA  5003               	movf	pinMode@type^0,w,c
 10013   001FFC  1004               	iorwf	(pinMode@type+1)^0,w,c
 10014   001FFE  B4D8               	btfsc	status,2,c
 10015   002000  EF04  F010         	goto	u2921
 10016   002004  EF06  F010         	goto	u2920
 10017   002008                     u2921:
 10018   002008  EF18  F010         	goto	l3548
 10019   00200C                     u2920:
 10020   00200C  C001  F005         	movff	pinMode@pin,??_pinMode
 10021   002010  0EE8               	movlw	-24
 10022   002012  2605               	addwf	??_pinMode^0,f,c
 10023   002014  0E01               	movlw	1
 10024   002016  6E06               	movwf	(??_pinMode+1)^0,c
 10025   002018  2A05               	incf	??_pinMode^0,f,c
 10026   00201A  EF11  F010         	goto	u2934
 10027   00201E                     u2935:
 10028   00201E  90D8               	bcf	status,0,c
 10029   002020  3606               	rlcf	(??_pinMode+1)^0,f,c
 10030   002022                     u2934:
 10031   002022  2E05               	decfsz	??_pinMode^0,f,c
 10032   002024  EF0F  F010         	goto	u2935
 10033   002028  5006               	movf	(??_pinMode+1)^0,w,c
 10034   00202A  1295               	iorwf	149,f,c	;volatile
 10035   00202C  EF65  F010         	goto	l113
 10036   002030                     l3548:
 10037   002030  C001  F005         	movff	pinMode@pin,??_pinMode
 10038   002034  0EE8               	movlw	-24
 10039   002036  2605               	addwf	??_pinMode^0,f,c
 10040   002038  0E01               	movlw	1
 10041   00203A  6E06               	movwf	(??_pinMode+1)^0,c
 10042   00203C  2A05               	incf	??_pinMode^0,f,c
 10043   00203E  EF23  F010         	goto	u2944
 10044   002042                     u2945:
 10045   002042  90D8               	bcf	status,0,c
 10046   002044  3606               	rlcf	(??_pinMode+1)^0,f,c
 10047   002046                     u2944:
 10048   002046  2E05               	decfsz	??_pinMode^0,f,c
 10049   002048  EF21  F010         	goto	u2945
 10050   00204C  5006               	movf	(??_pinMode+1)^0,w,c
 10051   00204E  0AFF               	xorlw	255
 10052   002050  1695               	andwf	149,f,c	;volatile
 10053   002052  EF65  F010         	goto	l113
 10054   002056                     l3550:
 10055   002056  BE02               	btfsc	(pinMode@pin+1)^0,7,c
 10056   002058  EF39  F010         	goto	u2950
 10057   00205C  5002               	movf	(pinMode@pin+1)^0,w,c
 10058   00205E  E107               	bnz	u2951
 10059   002060  0E28               	movlw	40
 10060   002062  5C01               	subwf	pinMode@pin^0,w,c
 10061   002064  B0D8               	btfsc	status,0,c
 10062   002066  EF37  F010         	goto	u2951
 10063   00206A  EF39  F010         	goto	u2950
 10064   00206E                     u2951:
 10065   00206E  EF65  F010         	goto	l113
 10066   002072                     u2950:
 10067   002072                     
 10068                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
 10069   002072  5003               	movf	pinMode@type^0,w,c
 10070   002074  1004               	iorwf	(pinMode@type+1)^0,w,c
 10071   002076  B4D8               	btfsc	status,2,c
 10072   002078  EF40  F010         	goto	u2961
 10073   00207C  EF42  F010         	goto	u2960
 10074   002080                     u2961:
 10075   002080  EF54  F010         	goto	l3556
 10076   002084                     u2960:
 10077   002084  C001  F005         	movff	pinMode@pin,??_pinMode
 10078   002088  0EE0               	movlw	-32
 10079   00208A  2605               	addwf	??_pinMode^0,f,c
 10080   00208C  0E01               	movlw	1
 10081   00208E  6E06               	movwf	(??_pinMode+1)^0,c
 10082   002090  2A05               	incf	??_pinMode^0,f,c
 10083   002092  EF4D  F010         	goto	u2974
 10084   002096                     u2975:
 10085   002096  90D8               	bcf	status,0,c
 10086   002098  3606               	rlcf	(??_pinMode+1)^0,f,c
 10087   00209A                     u2974:
 10088   00209A  2E05               	decfsz	??_pinMode^0,f,c
 10089   00209C  EF4B  F010         	goto	u2975
 10090   0020A0  5006               	movf	(??_pinMode+1)^0,w,c
 10091   0020A2  1296               	iorwf	150,f,c	;volatile
 10092   0020A4  EF65  F010         	goto	l113
 10093   0020A8                     l3556:
 10094   0020A8  C001  F005         	movff	pinMode@pin,??_pinMode
 10095   0020AC  0EE0               	movlw	-32
 10096   0020AE  2605               	addwf	??_pinMode^0,f,c
 10097   0020B0  0E01               	movlw	1
 10098   0020B2  6E06               	movwf	(??_pinMode+1)^0,c
 10099   0020B4  2A05               	incf	??_pinMode^0,f,c
 10100   0020B6  EF5F  F010         	goto	u2984
 10101   0020BA                     u2985:
 10102   0020BA  90D8               	bcf	status,0,c
 10103   0020BC  3606               	rlcf	(??_pinMode+1)^0,f,c
 10104   0020BE                     u2984:
 10105   0020BE  2E05               	decfsz	??_pinMode^0,f,c
 10106   0020C0  EF5D  F010         	goto	u2985
 10107   0020C4  5006               	movf	(??_pinMode+1)^0,w,c
 10108   0020C6  0AFF               	xorlw	255
 10109   0020C8  1696               	andwf	150,f,c	;volatile
 10110   0020CA                     l113:
 10111   0020CA  0012               	return		;funcret
 10112   0020CC                     __end_of_pinMode:
 10113                           	callstack 0
 10114                           
 10115 ;; *************** function _adcInit *****************
 10116 ;; Defined at:
 10117 ;;		line 27 in file "adc.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;		None
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;		None
 10122 ;; Return value:  Size  Location     Type
 10123 ;;                  1    wreg      void 
 10124 ;; Registers used:
 10125 ;;		wreg, status,2, status,0
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10131 ;;      Params:         0       0       0       0       0       0       0       0       0
 10132 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10133 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10134 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10135 ;;Total ram usage:        0 bytes
 10136 ;; Hardware stack levels used: 1
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_main
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text65
 10145   003832                     __ptext65:
 10146                           	callstack 0
 10147   003832                     _adcInit:
 10148                           	callstack 30
 10149   003832                     
 10150                           ;adc.c: 29:  (((*(volatile __near unsigned char*)0xF96)) |= (1<<0));
 10151   003832  8096               	bsf	150,0,c	;volatile
 10152   003834                     
 10153                           ;adc.c: 31:  (*(volatile __near unsigned char*)0xFC2) = 0b00010101;
 10154   003834  0E15               	movlw	21
 10155   003836  6EC2               	movwf	194,c	;volatile
 10156   003838                     
 10157                           ;adc.c: 32:  (*(volatile __near unsigned char*)0xFC1) = 0b00001111;
 10158   003838  0E0F               	movlw	15
 10159   00383A  6EC1               	movwf	193,c	;volatile
 10160   00383C                     
 10161                           ;adc.c: 33:  (*(volatile __near unsigned char*)0xFC0) = 0b10101010;
 10162   00383C  0EAA               	movlw	170
 10163   00383E  6EC0               	movwf	192,c	;volatile
 10164   003840  0012               	return		;funcret
 10165   003842                     __end_of_adcInit:
 10166                           	callstack 0
 10167                           
 10168                           	psect	rparam
 10169   000000                     
 10170                           	psect	config
 10171                           
 10172                           ;Config register CONFIG1L @ 0x300000
 10173                           ;	unspecified, using default values
 10174                           ;	PLL Prescaler Selection bits
 10175                           ;	PLLDIV = 0x0, unprogrammed default
 10176                           ;	System Clock Postscaler Selection bits
 10177                           ;	CPUDIV = 0x0, unprogrammed default
 10178                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 10179                           ;	USBDIV = 0x0, unprogrammed default
 10180   300000                     	org	3145728
 10181   300000  00                 	db	0
 10182                           
 10183                           ;Config register CONFIG1H @ 0x300001
 10184                           ;	Oscillator Selection bits
 10185                           ;	FOSC = HS, HS oscillator (HS)
 10186                           ;	Fail-Safe Clock Monitor Enable bit
 10187                           ;	FCMEN = 0x0, unprogrammed default
 10188                           ;	Internal/External Oscillator Switchover bit
 10189                           ;	IESO = 0x0, unprogrammed default
 10190   300001                     	org	3145729
 10191   300001  0C                 	db	12
 10192                           
 10193                           ;Config register CONFIG2L @ 0x300002
 10194                           ;	unspecified, using default values
 10195                           ;	Power-up Timer Enable bit
 10196                           ;	PWRT = 0x1, unprogrammed default
 10197                           ;	Brown-out Reset Enable bits
 10198                           ;	BOR = 0x3, unprogrammed default
 10199                           ;	Brown-out Reset Voltage bits
 10200                           ;	BORV = 0x3, unprogrammed default
 10201                           ;	USB Voltage Regulator Enable bit
 10202                           ;	VREGEN = 0x0, unprogrammed default
 10203   300002                     	org	3145730
 10204   300002  1F                 	db	31
 10205                           
 10206                           ;Config register CONFIG2H @ 0x300003
 10207                           ;	Watchdog Timer Enable bit
 10208                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10209                           ;	Watchdog Timer Postscale Select bits
 10210                           ;	WDTPS = 0xF, unprogrammed default
 10211   300003                     	org	3145731
 10212   300003  1E                 	db	30
 10213                           
 10214                           ; Padding undefined space
 10215   300004                     	org	3145732
 10216   300004  FF                 	db	255
 10217                           
 10218                           ;Config register CONFIG3H @ 0x300005
 10219                           ;	CCP2 MUX bit
 10220                           ;	CCP2MX = 0x1, unprogrammed default
 10221                           ;	PORTB A/D Enable bit
 10222                           ;	PBADEN = 0x1, unprogrammed default
 10223                           ;	Low-Power Timer 1 Oscillator Enable bit
 10224                           ;	LPT1OSC = 0x0, unprogrammed default
 10225                           ;	MCLR Pin Enable bit
 10226                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10227   300005                     	org	3145733
 10228   300005  83                 	db	131
 10229                           
 10230                           ;Config register CONFIG4L @ 0x300006
 10231                           ;	Stack Full/Underflow Reset Enable bit
 10232                           ;	STVREN = 0x1, unprogrammed default
 10233                           ;	Single-Supply ICSP Enable bit
 10234                           ;	LVP = OFF, Single-Supply ICSP disabled
 10235                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 10236                           ;	ICPRT = 0x0, unprogrammed default
 10237                           ;	Extended Instruction Set Enable bit
 10238                           ;	XINST = 0x0, unprogrammed default
 10239                           ;	Background Debugger Enable bit
 10240                           ;	DEBUG = 0x1, unprogrammed default
 10241   300006                     	org	3145734
 10242   300006  81                 	db	129
 10243                           
 10244                           ; Padding undefined space
 10245   300007                     	org	3145735
 10246   300007  FF                 	db	255
 10247                           tosu	equ	0xFFF
 10248                           tosh	equ	0xFFE
 10249                           tosl	equ	0xFFD
 10250                           stkptr	equ	0xFFC
 10251                           pclatu	equ	0xFFB
 10252                           pclath	equ	0xFFA
 10253                           pcl	equ	0xFF9
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           indf0	equ	0xFEF
 10261                           postinc0	equ	0xFEE
 10262                           postdec0	equ	0xFED
 10263                           preinc0	equ	0xFEC
 10264                           plusw0	equ	0xFEB
 10265                           fsr0h	equ	0xFEA
 10266                           fsr0l	equ	0xFE9
 10267                           wreg	equ	0xFE8
 10268                           indf1	equ	0xFE7
 10269                           postinc1	equ	0xFE6
 10270                           postdec1	equ	0xFE5
 10271                           preinc1	equ	0xFE4
 10272                           plusw1	equ	0xFE3
 10273                           fsr1h	equ	0xFE2
 10274                           fsr1l	equ	0xFE1
 10275                           bsr	equ	0xFE0
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           preinc2	equ	0xFDC
 10280                           plusw2	equ	0xFDB
 10281                           fsr2h	equ	0xFDA
 10282                           fsr2l	equ	0xFD9
 10283                           status	equ	0xFD8

Data Sizes:
    Strings     158
    Constant    16
    Data        27
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      95
    BANK0           160      0     131
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    date	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eventRead@prot	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 

    lcdString@str	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_11(CODE[12]), STR_12(CODE[12]), 
		 -> STR_13(CODE[12]), STR_14(CODE[12]), STR_15(CODE[4]), STR_16(CODE[12]), 
		 -> STR_17(CODE[4]), STR_18(CODE[12]), STR_19(CODE[17]), STR_2(CODE[16]), 
		 -> STR_20(CODE[17]), STR_21(CODE[4]), STR_22(CODE[16]), STR_23(CODE[16]), 
		 -> STR_3(CODE[16]), STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), 
		 -> STR_7(CODE[16]), STR_8(CODE[16]), STR_9(CODE[16]), 

    msgs	PTR unsigned char [2][10] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), 
		 -> STR_8(CODE[16]), STR_9(CODE[16]), 

    setDate@date	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    smLoop@date	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    smLoop@date_552	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 

    sp__getDate	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_readTemp
    _setDate->_setTime
    _setTime->_getTime
    _readTemp->___fltol
    ___xxtofl->_adcRead
    ___fltol->___flmul
    ___flmul->___xxtofl
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_getTime
    _lcdData->_lcdCommand4bits
    _getTime->_bcd2dec
    _eventRead->_setLanguage
    _setLanguage->_dsWriteData
    _smInit->_varInit
    _varInit->_setAlarmLevel
    _setAlarmLevel->_dsWriteData
    _dsWriteData->_dec2bcd
    _dsReadData->_i2cReadByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _dec2bcd->___awmod
    ___awmod->___awdiv
    _bcd2dec->_dsReadData
    ___wmul->___awdiv
    _setState->_lcdCommand
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  477521
                            _adcInit
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                              21    21      0  354458
                                             58 COMRAM    21    21      0
                            ___llmod
                             ___wmul
                          _eventRead
                      _getAlarmLevel
                            _getDate
                        _getLanguage
                            _getProt
                           _getState
                            _getTemp
                            _getTime
                        _outputPrint
                           _readTemp
                          _resetProt
                      _setAlarmLevel
                            _setDate
                        _setLanguage
                           _setState
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setDate                                              6     4      2   35248
                                             28 COMRAM     6     4      2
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setTime                                              3     0      3   34964
                                             25 COMRAM     3     0      3
                            _dec2bcd
                        _dsWriteData
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readTemp                                             5     5      0    4407
                                             53 COMRAM     5     5      0
                            ___awdiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                            _adcRead
 ---------------------------------------------------------------------------------
 (3) _adcRead                                              4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     398
                                              4 COMRAM    14    10      4
                            _adcRead (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     305
                                             43 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                            _adcRead (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                             18 COMRAM    25    17      8
                           ___xxtofl (ARG)
                            _adcRead (ARG)
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          8     4      4  128877
                                             35 COMRAM     8     4      4
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTemp
                            _getTime
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            1     0      1    2373
                                              3 COMRAM     1     0      1
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                              10     7      3   11898
                                             25 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                             ___wmul
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _getTemp (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getTime                                              3     1      2   55596
                                             22 COMRAM     3     1      2
                            _bcd2dec
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getTemp                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        4     2      2     958
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getDate                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            7     7      0   29144
                                             24 COMRAM     7     7      0
                        _getLanguage
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                        _setLanguage
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28773
                                             23 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0  119631
                          _eventInit
                           _setState
                            _varInit
 ---------------------------------------------------------------------------------
 (2) _varInit                                              8     8      0  118665
                                             26 COMRAM     8     8      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                      _setAlarmLevel
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        3     0      3   30033
                                             23 COMRAM     3     0      3
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28751
                                             20 COMRAM     3     1      2
                            _dec2bcd (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _dsReadData                                           5     3      2   48535
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (3) _dec2bcd                                              6     4      2    4235
                                             14 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1512
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) _bcd2dec                                              4     2      2    7039
                                             18 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3579
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0     966
                                              3 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (4) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (5) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     279
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcInit
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
       _lcdCommand
     _varInit
       _bcd2dec
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _dsReadData (ARG)
           _i2cReadByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
                 _digitalWrite
                 _pinMode
               _read_SCL
                 _digitalRead
                 _pinMode
               _read_SDA
                 _digitalRead
                 _pinMode
             _i2c_stop
               _I2C_delay
               _clear_SDA
                 _digitalWrite
                 _pinMode
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
           _i2cWriteByte
             _i2c_read_bit
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_stop
             _i2c_write_bit
       _dec2bcd
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _dsReadData
       _dsWriteData
         _dec2bcd (ARG)
         _i2cWriteByte (ARG)
       _setAlarmLevel
         _dsWriteData
         _getAlarmLevel (ARG)
   _smLoop
     ___llmod
     ___wmul
     _eventRead
       _getLanguage
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setLanguage
         _dsWriteData
       _setProt
     _getAlarmLevel
     _getDate
     _getLanguage
     _getProt
     _getState
     _getTemp
     _getTime
       _bcd2dec
       _dsReadData
     _outputPrint
       _bcd2dec
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTemp (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         ___wmul
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _getTemp (ARG)
         _getTime (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _readTemp
       ___awdiv
       ___flmul
         ___xxtofl (ARG)
           _adcRead (ARG)
         _adcRead (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
         _adcRead (ARG)
       ___xxtofl
       _adcRead
     _resetProt
     _setAlarmLevel
     _setDate
       _setTime
         _dec2bcd
         _dsWriteData
         _getTime (ARG)
     _setLanguage
     _setState
     _setTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      83       5       81.9%
BITBIGSFRhh         69      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5F       1      100.0%
BITBIGSFRl          20      0       0      23        0.0%
BITBIGSFRhlh         8      0       0      21        0.0%
BITBIGSFRhll         4      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E2      24        0.0%
DATA                 0      0      E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Jul 08 18:07:40 2024

     __end_of_setAlarmLevel 32EA                           l3 3840                           l6 34B8  
                         l8 34C6                           l9 34E6                           _i 0050  
                         _m 00A7                           _t 0060                          l22 3192  
                        l25 3440                          l34 35DA                          l28 3882  
                        l37 3376                          l83 27DA                          l84 27D6  
            setTime@newTime 001A                          l79 1E7C                          l88 27D6  
              lcdString@str 0004                ___awdiv@sign 0006                          _v0 0058  
                        _v1 0057                          _v2 0056                          _v3 0055  
                        _de 005B                          _ev 00E1         ___wmul@multiplicand 000B  
             ??_i2cReadByte 0009       i2cWriteByte@send_stop 0008              i2cReadByte@bit 000B  
                       l113 20CA                         l203 2D86                         l141 385C  
                       l150 381A                         l118 3886                         l136 2AD8  
                       l160 387C                         l401 324A                         l138 2AEC  
                       l180 3330                         l500 3802                         l420 329E  
                       l340 381E                         l157 3636                         l173 3130  
                       l414 31F2                         l351 37D2                         l407 354C  
                       l343 3830                         l183 379C                         l360 3736  
                       l194 351A                         l363 3890                         l188 30B8  
                       l372 370C                         l348 368E                         l525 24BC  
                       l509 24BA                         l366 34B0                         l630 377E  
                       l375 36E2                         l392 3608                         l704 11D0  
                       l369 3478                         l385 33BC                         l810 32C6  
                       l811 32D8                         l707 11F4                         l812 32E8  
                       l821 388A                         l805 3654                         l806 365A  
                       l815 388E                         l807 3662                         l583 1804  
                       l831 35AC                         l840 2CBE                         l825 36B8  
                       l818 37EA                         l834 3866                         l843 2F08  
                       l780 384E                         l774 2304                         l846 3870  
                       l849 375C                         l777 3876                         l785 28EA  
                       l796 2BDC                         _key 00B7                ___awmod@sign 000E  
                       wreg 0FE8            i2c_write_bit@bit 0007                ___flmul@aexp 0024  
              ___flmul@bexp 0025                ___flmul@sign 001F                ___flmul@temp 002A  
              ___flmul@prod 0026               ?_i2cWriteByte 0008      i2cWriteByte@send_start 000A  
           i2cReadByte@nack 000A                ___fltol@exp1 0035             i2cReadByte@byte 000D  
                      l1080 2E4A                        l1146 29F0                        l1093 2FB8  
                      l1511 25AC                        l4000 385E                        l1504 2514  
                      l4002 32A0                        l4010 2AEE                        l1507 2670  
                      l4004 32B0                        l1276 3040                        l4100 1990  
                      l4020 2B2E                        l4012 2AF2                        l1269 3030  
                      l4006 32B4                        l1470 1AC0                        l4110 19F2  
                      l4102 199C                        l1518 2608                        l1463 18CA  
                      l4008 32CA                        l1480 1BF0                        l1472 1B38  
                      l4120 1A88                        l4112 19FE                        l4104 19AC  
                      l4040 1806                        l4032 2B88                        l4024 2B4C  
                      l4016 2B10                        l1473 1B26                        l4130 1ADE  
                      l4122 1AA6                        l4114 1A1A                        l4106 19C6  
                      l4050 1842                        l4042 1812                        l4210 29E0  
                      l4202 29A4                        l1467 1C2E                        l4300 23B6  
                      l4140 1B48                        l4132 1AE2                        l4124 1AB0  
                      l4116 1A44                        l4108 19D6                        l4060 1874  
                      l4052 1852                        l4044 1820                        l4204 29B0  
                      l4220 2524                        l4028 2B6A                        l4310 23F2  
                      l4302 23C6                        l4150 1BAA                        l4142 1B54  
                      l4134 1AF0                        l4126 1ABE                        l4118 1A7A  
                      l4070 18B4                        l4062 1882                        l4054 1858  
                      l4046 1822                        l4206 29C0                        l4230 2562  
                      l4222 253A                        l4214 24C0                        l4038 2BA6  
                      l3520 1E9A                        l3440 1C30                        l3512 278E  
                      l3504 2746                        l3600 35FC                        l4320 242A  
                      l4312 23FE                        l4304 23CC                        l4400 13A8  
                      l4160 1C12                        l4152 1BBE                        l4144 1B62  
                      l4136 1B1E                        l4128 1AD0                        l4080 18FE  
                      l4072 18BA                        l4064 1884                        l4056 1868  
                      l4048 1832                        l4208 29D0                        l4240 25EA  
                      l4232 2594                        l4216 24D0                        l2810 3832  
                      l3530 1F1C                        l3522 1EAC                        l3450 1CBC  
                      l3442 1C4C                        l3514 27AA                        l3506 2762  
                      l3602 3600                        l3610 320E                        l4322 2434  
                      l4314 240A                        l4330 249A                        l4410 141C  
                      l4402 13AE                        l4162 1C14                        l4154 1BD8  
                      l4146 1B8C                        l4090 194E                        l4082 190A  
                      l4074 18DA                        l4066 1894                        l4058 186E  
                      l4170 28EC                        l4250 2640                        l4242 25F8  
                      l4234 2596                        l4226 254E                        l4218 24DE  
                      l2812 3834                        l3540 1FB8                        l3532 1F40  
                      l3524 1ECC                        l4260 370E                        l3700 30BC  
                      l3460 1D4E                        l3452 1CD6                        l3444 1C5E  
                      l3604 3604                        l3620 323E                        l3612 3212  
                      l4332 24A0                        l4324 243C                        l4316 2416  
                      l4308 23E6                        l4500 1684                        l4420 1464  
                      l4412 1422                        l4404 13DA                        l4340 120A  
                      l4156 1BF4                        l4164 1C1A                        l4148 1B90  
                      l4092 195A                        l4084 1914                        l4076 18EA  
                      l4068 18A4                        l4180 2942                        l4172 2902  
                      l4252 2650                        l4244 2616                        l4236 25A2  
                      l4228 2556                        l2814 3838                        l3550 2056  
                      l3542 1FDE                        l3534 1F66                        l3526 1EEE  
                      l3518 1E7E                        l3710 30E8                        l3702 30CC  
                      l4262 37EC                        l3470 1DE6                        l3462 1D6E  
                      l3454 1CF6                        l3446 1C7E                        l3630 3524  
                      l3622 3242                        l3614 3216                        l3606 31F6  
                      l4334 24B2                        l4318 2422                        l4270 230E  
                      l4510 16F0                        l4502 16A0                        l4422 146A  
                      l4414 1432                        l4430 14C4                        l4406 1400  
                      l4350 1248                        l4342 1210                        l4166 1C1E  
                      l4158 1C04                        l4094 1966                        l4086 192A  
                      l4182 2952                        l4254 265E                        l4246 2618  
                      l4238 25DE                        l2816 383C                        l3552 2072  
                      l3544 1FFA                        l3536 1F82                        l3528 1F0A  
                      l3720 310E                        l3712 30EA                        l3704 30D2  
                      l4264 37F0                        l3800 2F60                        l3472 1E08  
                      l3464 1D90                        l3456 1D18                        l3448 1CA0  
                      l3480 2672                        l3632 3538                        l3624 3246  
                      l3616 322A                        l3608 3206                        l4328 244C  
                      l4280 2358                        l4272 231A                        l4520 175E  
                      l4512 1700                        l4504 16A8                        l4440 14FE  
                      l4432 14D6                        l4424 1490                        l4416 1438  
                      l4408 1408                        l4352 124E                        l4344 1226  
                      l4360 1288                        l4096 1974                        l4088 1936  
                      l4192 297C                        l4184 2956                        l4176 2916  
                      l4256 2660                        l4248 261C                        l4600 2C76  
                      l3554 2084                        l3546 200C                        l3538 1F94  
                      l3570 3878                        l3730 312C                        l3722 3114  
                      l3714 30F8                        l3706 30D4                        l4266 37FA  
                      l3802 2F6E                        l3810 2F98                        l3474 1E24  
                      l3466 1DAC                        l3458 1D34                        l3490 26D2  
                      l3482 268E                        l3562 3442                        l3634 353E  
                      l3626 351C                        l3618 323A                        l3642 3196  
                      l4290 238C                        l4282 2360                        l4274 2334  
                      l4610 3868                        l4530 17BA                        l4522 1764  
                      l4514 1706                        l4506 16C6                        l4450 154A  
                      l4442 151A                        l4434 14DC                        l4426 1496  
                      l4418 145E                        l4370 12D4                        l4362 129C  
                      l4354 1264                        l4346 122C                        l4338 11F6  
                      l4098 1980                        l4194 2986                        l4186 2964  
                      l4178 2940                        l4602 2C86                        l3556 20A8  
                      l3548 2030                        l3724 3116                        l3716 30FE  
                      l3708 30E2                        l4700 3058                        l3740 2D8C  
                      l3732 3738                        l3812 2FA8                        l3804 2F84  
                      l3820 318A                        l3476 1E3E                        l3468 1DC6  
                      l3636 3542                        l3628 3520                        l3580 33A4  
                      l3572 3378                        l3660 31DA                        l3652 31AE  
                      l3644 31A6                        l4540 20CC                        l4292 239A  
                      l4284 236E                        l4276 2342                        l4268 2306  
                      l3900 34FE                        l4524 1792                        l4516 1732  
                      l4508 16D8                        l4532 17D4                        l4460 1586  
                      l4452 1550                        l4444 1520                        l4436 14F2  
                      l4428 14BC                        l4380 1312                        l4372 12DA  
                      l4364 12A2                        l4356 126A                        l4348 1232  
                      l4196 2990                        l4604 2CA2                        l4620 357E  
                      l3726 3124                        l3718 3100                        l4702 3068  
                      l3750 2DBC                        l3742 2D9A                        l3734 3754  
                      l3814 2FB0                        l3806 2F8C                        l3478 1E5E  
                      l3566 36E4                        l3558 347A                        l3638 354A  
                      l3590 33B8                        l3574 3388                        l3582 33A8  
                      l3662 31DE                        l3654 31C4                        l3646 31AA  
                      l3830 336E                        l4550 2160                        l4542 20EA  
                      l4710 376C                        l4630 2FBA                        l4286 2376  
                      l4278 234A                        l4294 23A2                        l3910 2CE8  
                      l3902 2CC0                        l4534 17E8                        l4526 17AE  
                      l4518 1758                        l4470 15BC                        l4462 158C  
                      l4446 1528                        l4438 14F8                        l4454 1558  
                      l4390 134A                        l4374 12E0                        l4366 12B8  
                      l4382 131A                        l4358 1280                        l4606 2CB2  
                      l4622 3586                        l4614 2E4C                        l3728 312A  
                      l3760 2DEA                        l3752 2DC0                        l3744 2DA2  
                      l3824 3400                        l3808 2F92                        l3496 26FE  
                      l3488 26B6                        l3568 36BA                        l3592 35DC  
                      l3680 3282                        l3584 33AC                        l3576 338C  
                      l3664 31EE                        l3656 31C8                        l4560 21F0  
                      l4552 2180                        l4544 20FA                        l4704 375E  
                      l4640 3010                        l4632 2FD0                        l4296 23AA  
                      l4288 2384                        l4616 3872                        l3920 2D2E  
                      l3904 2CCE                        l4536 17EE                        l4528 17B4  
                      l4480 1600                        l4472 15C2                        l4464 1592  
                      l4456 156A                        l4448 152E                        l4392 1350  
                      l4384 132E                        l4376 12F6                        l4368 12BE  
                      l4608 2CB6                        l4624 3590                        l4800 0B58  
                      l4720 08DE                        l4712 08B0                        l4650 29FE  
                      l3850 3614                        l3842 360E                        l3690 3804  
                      l3770 2E1E                        l3762 2DF8                        l3754 2DC8  
                      l3746 2DA6                        l3738 2D88                        l3818 3132  
                      l3498 271A                        l3594 35E0                        l3682 3288  
                      l3674 325A                        l3586 33B0                        l3578 3390  
                      l3658 31CA                        l3834 35B0                        l4570 228A  
                      l4562 221A                        l4554 21AA                        l4546 210A  
                      l4706 3762                        l4642 3020                        l4634 2FD8  
                      l3930 382C                        l4298 23B0                        l3922 2D4C  
                      l3914 2CFA                        l3906 2CD6                        l4538 17F6  
                      l4490 1638                        l4482 1606                        l4474 15DE  
                      l4466 15AE                        l4458 1570                        l4394 136E  
                      l4386 1334                        l4378 12FC                        l4626 3592  
                      l4810 0B9A                        l4802 0B6A                        l4730 0946  
                      l4722 08F0                        l4714 08B4                        l4660 2A12  
                      l4652 2A02                        l3852 3624                        l3836 360A  
                      l2884 37BA                        l4580 3844                        l3772 2E24  
                      l3764 2DFE                        l3756 2DDA                        l3748 2DB4  
                      l3596 35E4                        l3684 3298                        l3676 3268  
                      l3668 324E                        l3588 33B4                        l3828 3332  
                      l4572 22AE                        l4564 223E                        l4556 21CE  
                      l4548 212E                        l4708 3768                        l4644 302A  
                      l4636 2FE4                        l3940 3688                        l3932 3664  
                      l3924 2D7C                        l3916 2D0E                        l3908 2CDC  
                      l4492 164C                        l4484 1616                        l4476 15E4  
                      l4468 15B4                        l4396 1380                        l4388 1344  
                      l3860 34B6                        l4628 35A2                        l4900 0DE8  
                      l4820 0BE4                        l4812 0BA0                        l4804 0B70  
                      l4740 09A0                        l4732 0956                        l4724 090C  
                      l4716 08BA                        l4646 387E                        l4670 2A68  
                      l4662 2A24                        l4654 2A06                        l3854 3626  
                      l2886 37CE                        l4582 3848                        l3766 2E14  
                      l3758 2DE2                        l3774 2E2A                        l3790 2F28  
                      l3782 2F0A                        l3598 35F8                        l3686 329C  
                      l3678 326C                        l4574 22B6                        l4566 2246  
                      l4558 21D6                        l4638 2FF2                        l3942 368C  
                      l3934 3668                        l3950 3692                        l3918 2D2A  
                      l4486 161C                        l4494 1654                        l4478 15EC  
                      l4398 1398                        l3862 34CC                        l4590 2C5C  
                      l4910 0E5C                        l4902 0DF0                        l4830 0C2E  
                      l4822 0BFE                        l4814 0BAA                        l4806 0B82  
                      l4750 09D8                        l4742 09A6                        l4734 0976  
                      l4726 0916                        l4718 08CC                        l4680 2ACA  
                      l4672 2A88                        l4656 2A0A                        l4648 29F2  
                      l3848 3612                        l3696 3808                        l2888 37D0  
                      l3880 3854                        l3776 2E3A                        l3768 2E1C  
                      l3792 2F36                        l3784 2F0E                        l4576 22D0  
                      l4568 2260                        l3872 3884                        l3936 3676  
                      l3928 381E                        l3952 369E                        l3856 3782  
                      l4496 1668                        l4488 1630                        l3864 34D2  
                      l4584 2BDE                        l4920 0ECC                        l4912 0E62  
                      l4904 0E00                        l4840 0C66                        l4832 0C40  
                      l4824 0C10                        l4816 0BBA                        l4808 0B88  
                      l4760 0A40                        l4752 09F8                        l4744 09B8  
                      l4736 0988                        l4728 0926                        l4682 2AD0  
                      l4674 2AA6                        l4658 2A0E                        l3698 380A  
                      l3890 3324                        l4690 304E                        l3882 3858  
                      l3778 2E42                        l3794 2F3E                        l3786 2F1C  
                      l4578 22EA                        l3946 3888                        l3938 367A  
                      l3962 37D6                        l3954 36A0                        l4498 166E  
                      l3866 34DA                        l3858 34B2                        l4586 2C52  
                      l4930 0F92                        l4922 0ED6                        l4850 0C90  
                      l4826 0C16                        l4818 0BD4                        l4770 0A7A  
                      l4762 0A52                        l4754 0A08                        l4746 09BE  
                      l4738 098E                        l4684 2AD4                        l4676 2AA8  
                      l4668 2A28                        l3892 332C                        l3884 32EC  
                      l3876 3850                        l3796 2F50                        l3788 2F24  
                      l3964 37DC                        l3956 36B2                        l3980 284E  
                      l3972 2806                        l3868 34DE                        l4596 2C60  
                      l4588 2C54                        l4940 1026                        l4932 0FC0  
                      l4924 0F32                        l4908 0E1E                        l4860 0CDE  
                      l4852 0C9C                        l4836 0C4A                        l4828 0C28  
                      l4780 0ABC                        l4772 0A8C                        l4764 0A58  
                      l4756 0A28                        l4748 09C8                        l4916 0E6A  
                      l4686 2AE8                        l4678 2AB8                        l3886 3302  
                      l3878 3852                        l3798 2F58                        l3958 388C  
                      l3966 27DE                        l3894 34E8                        l4598 2C74  
                      l4950 10D0                        l4942 1054                        l4934 0FE2  
                      l4926 0F54                        l4870 0D1A                        l4854 0CAA  
                      l4862 0CEA                        l4846 0C74                        l4838 0C5A  
                      l4790 0AF4                        l4782 0AC2                        l4774 0A92  
                      l4766 0A6A                        l4758 0A3A                        l4918 0EBA  
                      l3888 3314                        l4696 3052                        l4688 3042  
                      l3984 2870                        l3976 282A                        l3968 27E2  
                      l3896 34EC                        l4960 1152                        l4952 10F2  
                      l4944 1076                        l4928 0F64                        l4880 0D60  
                      l4872 0D2C                        l4864 0CFC                        l4856 0CC6  
                      l4848 0C80                        l4792 0B04                        l4784 0AC8  
                      l4776 0AA4                        l4768 0A70                        l4698 3056  
                      l3994 28B4                        l3898 34FC                        l4970 11CA  
                      l4954 110E                        l4946 1092                        l4938 0FF6  
                      l4962 1156                        l4890 0DB4                        l4882 0D70  
                      l4866 0D02                        l4858 0CD4                        l4794 0B14  
                      l4786 0AD8                        l4778 0AAA                        l3996 3638  
                      l3988 2892                        l4972 11DC                        l4964 1162  
                      l4948 10A2                        l4892 0DBA                        l4884 0D8A  
                      l4876 0D36                        l4868 0D14                        l4796 0B2E  
                      l4788 0AE4                        l4980 3556                        l3998 364A  
                      l4966 1176                        l4958 1122                        l4894 0DCC  
                      l4886 0D9C                        l4878 0D46                        l4798 0B3E  
                      l4990 356A                        l4982 355A                        l4968 11A0  
                      l4888 0DA2                        l4992 356E                        l4984 355E  
                      l4898 0DD6                        l4994 356E                        l4986 3562  
                      l4978 354E                        l4996 3572                        l4988 3566  
                      STR_1 0873                        STR_2 0843                        STR_3 0873  
                      STR_4 0843                        STR_5 0853                        STR_6 0833  
                      STR_7 0853                        STR_8 0833                        STR_9 0863  
                      u3000 34B0                        u3010 3476                        u3011 3470  
                      u3020 3478                        u3100 31A6                        u3101 31A2  
                      _LATA 0F89                        u3030 3388                        u3110 31BE  
                      u3031 3384                        u3111 31B8                        u3200 30F8  
                      u3040 33A4                        u3120 31C0                        u4000 14D6  
                      u3201 30F4                        u3041 33A0                        u4001 14D2  
                      u3210 310E                        u3050 35F8                        u3130 31DA  
                      u4010 156A                        u3211 310A                        u3051 35F4  
                      u3131 31D6                        u4011 1566                        u3220 3124  
                      u3300 2F36                        u2500 1C5E                        u3060 3206  
                      u3140 31EE                        u4100 2160                        u4020 1600  
                      u3221 3120                        u3301 2F32                        u2501 1C5A  
                      u3061 3202                        u3141 31EA                        u4101 215C  
                      u4021 15FC                        u3230 2D9A                        u3310 2F50  
                      u3070 322A                        u3150 3282                        u4110 21AA  
                      u4030 1630                        u3231 2D96                        u3311 2F4C  
                      u3071 3226                        u3151 327E                        u4111 21A6  
                      u4031 162C                        u3240 2DB4                        u3320 2F6E  
                      u3080 323A                        u3160 3298                        u4120 221A  
                      u3400 351A                        u4040 164C                        u4201 29F8  
                      u3241 2DB0                        u3321 2F6A                        u3081 3236  
                      u3161 3294                        u4121 2216                        u3401 3516  
                      u4041 1648                        u3170 381A                        u3250 2DDA  
                      u3330 2F84                        u2610 1DAC                        u2530 1CBC  
                      u2514 1C70                        u3090 3538                        u4130 228A  
                      u3410 2CCE                        u4050 1668                        u4211 2A1C  
                      u3171 3816                        u3251 2DD6                        u3331 2F80  
                      u2611 1DA8                        u2531 1CB8                        u2515 1C6C  
                      u3091 3534                        u4131 2286                        u3411 2CCA  
                      u4051 1664                        u3180 30CC                        u3260 2DF8  
                      u3340 2FA8                        u2620 1DC6                        u2604 1D80  
                      u2540 1CD6                        u2524 1C90                        u3420 2CF6  
                      u4060 16D8                        u3500 1820                        u4140 2C86  
                      u4300 08CC                        u3181 30C8                        u3261 2DF4  
                      u3341 2FA4                        u2621 1DC2                        u2605 1D7C  
                      u2541 1CD2                        u2525 1C8C                        u3421 2CF2  
                      u4061 16D4                        u3501 181C                        u4141 2C82  
                      u4301 08C8                        u4230 2A68                        u3350 3624  
                      u3190 30E2                        u3270 2E14                        u2710 26D2  
                      u3430 2D4C                        u4070 17E8                        u3510 1832  
                      u4150 2CB2                        u4310 090C                        u4231 2A64  
                      u3351 3620                        u3191 30DE                        u3271 2E10  
                      u2711 26CE                        u3431 2D48                        u4071 17E4  
                      u3511 182E                        u4151 2CAE                        u4311 0908  
                      u2800 1EAC                        u4224 2A4E                        u3360 3636  
                      u3280 2E3A                        u2704 26A0                        u4080 212A  
                      u3440 382C                        u3600 1ADE                        u3520 1842  
                      u4160 35A2                        u4400 0A52                        u4320 0926  
                      u2801 1EA8                        u4225 2A4A                        u3361 3632  
                      u3281 2E36                        u2705 269C                        u4081 2124  
                      u3441 3828                        u3601 1ADA                        u3521 183E  
                      u4161 359E                        u4401 0A4E                        u4321 0922  
                      u3290 2F1C                        u2650 1E24                        u2634 1DD8  
                      u2570 1D34                        u2554 1CE8                        u2490 1C4C  
                      u2730 271A                        u4090 212C                        u4170 2FD0  
                      u3450 3676                        u3610 1AF0                        u3530 1882  
                      u3370 34C6                        u4410 0A6A                        u4330 0956  
                      u3291 2F18                        u2651 1E20                        u2635 1DD4  
                      u2571 1D30                        u2555 1CE4                        u2491 1C48  
                      u2731 2716                        u4171 2FCC                        u3451 3672  
                      u3611 1AEC                        u3531 187E                        u3371 34C2  
                      u4411 0A66                        u4331 0952                        u4260 2AB8  
                      u4244 2A7A                        u3380 3314                        u2660 1E3E  
                      u2644 1DF8                        u2580 1D4E                        u2564 1D08  
                      u2724 26E8                        u4180 2FF2                        u3460 3688  
                      u3620 1B1E                        u3540 1894                        u3700 2936  
                      u4500 0B82                        u4420 0A8C                        u4340 0988  
                      u4261 2AB4                        u4245 2A76                        u3381 3310  
                      u2661 1E3A                        u2645 1DF4                        u2581 1D4A  
                      u2565 1D04                        u2725 26E4                        u4181 2FEE  
                      u3461 3684                        u3621 1B1A                        u3541 1890  
                      u4501 0B7E                        u4421 0A88                        u4341 0984  
                      u2910 1FFA                        u2830 1F0A                        u2814 1EBE  
                      u4270 2ACA                        u4254 2A9A                        u3390 3324  
                      u2750 2762                        u4190 3010                        u3470 36B2  
                      u3630 1B34                        u3550 18A4                        u3710 2964  
                      u4510 0B9A                        u4430 0AA4                        u4350 09A0  
                      u2911 1FF6                        u2831 1F06                        u2815 1EBA  
                      u4271 2AC6                        u4255 2A96                        u3391 3320  
                      u2751 275E                        u4191 300C                        u3471 36AE  
                      u3631 1B30                        u3551 18A0                        u3711 2960  
                      u4511 0B96                        u4431 0AA0                        u4351 099C  
                      u2920 200C                        u2904 1FCE                        u2840 1F1C  
                      u2824 1EDE                        u4280 2AE8                        u2744 2730  
                      u3480 364A                        u3640 1B48                        u3560 18DA  
                      u3720 2978                        u3800 25DA                        u4600 0CFC  
                      u4520 0BBA                        u4440 0ABC                        u4360 09B8  
                      u2921 2008                        u2905 1FCA                        u2841 1F18  
                      u2825 1EDA                        u4281 2AE4                        u2745 272C  
                      u3481 3646                        u3641 1B44                        u3561 18D6  
                      u3721 2974                        u3705 292C                        u3801 25D6  
                      u4601 0CF8                        u4521 0BB6                        u4441 0AB8  
                      u4361 09B4                        u4290 3068                        u2674 1E50  
                      u2594 1D60                        u2770 27AA                        u2690 268E  
                      u3490 32B0                        u3650 1B62                        u3570 18EA  
                      u3730 29A0                        u3810 25F8                        u4610 0D14  
                      u4530 0BE4                        u4450 0AD8                        u4370 09D8  
                      u4291 3064                        u2675 1E4C                        u2595 1D5C  
                      u2771 27A6                        u2691 268A                        u3491 32AC  
                      u3651 1B5E                        u3571 18E6                        u3731 299C  
                      u3811 25F4                        u4611 0D10                        u4531 0BE0  
                      u4451 0AD4                        u4371 09D4                        u2684 1E70  
                      u2764 2778                        u3900 2384                        u3660 1BAA  
                      u3580 1A64                        u3740 29C0                        u3820 2608  
                      u4700 0E5C                        u4620 0D2C                        u4540 0C10  
                      u4460 0AF4                        u4380 0A08                        u2685 1E6C  
                      u2765 2774                        u3901 2380                        u3661 1BA6  
                      u3741 29BC                        u3821 2604                        u4701 0E58  
                      u4621 0D28                        u4541 0C0C                        u4461 0AF0  
                      u4381 0A04                        u2950 2072                        u2934 2022  
                      u2870 1F82                        u2854 1F32                        u2790 1E9A  
                      u3910 239A                        u3670 1BD8                        u3590 1ABE  
                      u3750 29D0                        u3830 2616                        u4710 0ECC  
                      u4630 0D46                        u4550 0C28                        u4470 0B14  
                      u4390 0A3A                        u2951 206E                        u2935 201E  
                      u2871 1F7E                        u2855 1F2E                        u2791 1E96  
                      u3911 2396                        u3671 1BD4                        u3591 1ABA  
                      u3751 29CC                        u3831 2612                        u4711 0EC8  
                      u4631 0D42                        u4551 0C24                        u4471 0B10  
                      u4391 0A36                        u2960 2084                        u2944 2046  
                      u2880 1F94                        u2864 1F56                        u2784 27C0  
                      u3920 23C6                        u3680 1C12                        u3840 2650  
                      u3760 24D0                        u4720 1092                        u4640 0D70  
                      u4560 0C40                        u4480 0B3E                        u2961 2080  
                      u2945 2042                        u2881 1F90                        u2865 1F52  
                      u2785 27BC                        u3921 23C2                        u3681 1C0E  
                      u3585 1A5A                        u3841 264C                        u3761 24CC  
                      u4721 108E                        u4641 0D6C                        u4561 0C3C  
                      u4481 0B3A                        u3930 23E2                        u3690 2902  
                      u3850 265E                        u3770 24DE                        u4730 110E  
                      u4650 0D9C                        u4570 0C5A                        u4490 0B6A  
                      u3931 23DE                        u3691 28FE                        u3851 265A  
                      u3771 24DA                        u4731 110A                        u4651 0D98  
                      u4571 0C56                        u4491 0B66                        u3940 24B2  
                      u3860 2334                        u3780 253A                        u4740 1176  
                      u4660 0DB4                        u4580 0C90                        u3941 24AE  
                      u3861 2330                        u3781 2536                        u4741 1172  
                      u4661 0DB0                        u4581 0C8C                        u2974 209A  
                      u2894 1FAA                        u2990 34AE                        u3870 2342  
                      u3950 120A                        u3790 2590                        u4750 11A0  
                      u4670 0DCC                        u4590 0CC6                        u2975 2096  
                      u2895 1FA6                        u2991 34A8                        u3871 233E  
                      u3951 1206                        u3791 258C                        u4751 119C  
                      u4671 0DC8                        u4591 0CC2                        u2984 20BE  
                      u3880 2358                        u3960 129C                        u4760 11CA  
                      u4680 0DE8                        u2985 20BA                        u3881 2354  
                      u3961 1298                        u4761 11C6                        u4681 0DE4  
                      u3890 236E                        u3970 132E                        u4690 0E00  
                      u3891 236A                        u3971 132A                        u4691 0DFC  
                      u3980 1380                        u3981 137C                        u3990 141C  
                      u3991 1418                 _outputPrint 11F6                        _date 00AD  
                      _main 354E                        _msgs 00C8                        _temp 00AF  
                      _time 00B1                        _prot 00C2                        fsr2h 0FDA  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
                      _volt 00BE               ?_i2c_read_bit 0001                        prodh 0FF4  
                      prodl 0FF3                        start 0000                ___param_bank 0000  
           __end_of_i2cInit 3738              _alarmLevelHigh 0053             __end_of_bcd2dec 3442  
             ___fltol@sign1 0034                       ?_main 0001             __end_of_dec2bcd 3194  
           __end_of_adcInit 3842             __end_of_adcRead 34E8             __end_of___awdiv 2E4C  
          ?_lcdCommand4bits 0001                       STR_10 0893                       STR_11 08A3  
                     STR_12 08A3                       STR_20 0811                       STR_21 08AB  
                     STR_13 08A3                       STR_14 08A3                       STR_22 0883  
                     STR_15 08AB                       STR_23 0883                       STR_16 08A3  
                     STR_17 08AB                       STR_18 08A3                       STR_19 0822  
           __end_of___awmod 2FBA             __end_of___flmul 1C30             __end_of___fltol 29F2  
           ___awdiv@divisor 0003             __end_of___llmod 3042             ___awdiv@counter 0005  
                     _PORTA 0F80                       _PORTB 0F81                       _PORTC 0F82  
                     _PORTD 0F83                       _PORTE 0F84                       _TRISA 0F92  
                     _TRISB 0F93                       _TRISC 0F94                       _TRISD 0F95  
                     _TRISE 0F96             __end_of_lcdData 379E             __end_of_getDate 3872  
           __end_of_lcdInit 30BA              ??_i2cWriteByte 000A             __end_of_getTemp 3868  
           __end_of_getTime 28EC             __end_of_getProt 388C         __end_of_i2cReadByte 32A0  
        outputPrint@numTela 0024                       _index 0051              setProt@newChar 0001  
           __end_of_pinMode 20CC                       _valor 005F             __end_of_setDate 2F0A  
                     _state 00BF             __end_of_varInit 2306                dec2bcd@value 000F  
           __end_of_setTime 2BDE             __end_of_setProt 36BA                       tablat 0FF5  
         __end_of_I2C_delay 3892               _i2c_write_bit 31F4                       plusw1 0FE3  
                     plusw2 0FDB                       status 0FD8              ??_i2c_read_bit 0007  
          __end_of_Delay2ms 3638        __end_of_digitalWrite 1E7E             __initialization 33BE  
              __end_of_main 357E             i2cWriteByte@bit 000B            __end_of_i2c_stop 360A  
              ?_setLanguage 0001                      ??_main 0050               __activetblptr 0002  
               eventRead@ev 001B            ___llmod@dividend 0001            ___awdiv@dividend 0001  
            ?_i2c_write_bit 0001              getAlarmLevel@l 0003                   ??_i2cInit 0007  
          __end_of___xxtofl 2672       __end_of_getAlarmLevel 3664          dsWriteData@address 0015  
          __end_of_getState 3878                   ??_bcd2dec 0015                      _dTimer 00B5  
                 ??_dec2bcd 0011                      ___wmul 3738                   ??_adcInit 0001  
                 ??_adcRead 0003                   ??___awdiv 0005                   ??___awmod 000D  
                 ??___flmul 001B                   ??___fltol 0030                      _dsInit 387E  
                 ??___llmod 0009                      _lcdInt 2CC0                      _kpInit 3850  
                    _kpRead 3884            __end_of_read_SDA 347A            __end_of_read_SCL 34B2  
                    _ev_ant 00BB            __end_of_readTemp 2CC0                      _smInit 375E  
                    clear_0 33E4                      clear_1 33F0                      _smLoop 08B0  
          ___awdiv@quotient 0007             ___awmod@divisor 000B                   ??_lcdData 0003  
                 ??_getDate 0003                      isa$std 0001                 _i2cReadByte 324C  
                 ??_lcdInit 0004             ___awmod@counter 000D                   ??_getTemp 0003  
                 ??_getTime 0019                   ??_getProt 0003            __end_of_setState 3850  
                 ??_pinMode 0005                   ??_setDate 001F                __mediumconst 0000  
                 ??_varInit 001B                   ??_setTime 001D                   ??_setProt 0001  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
         __end_of_Delay40us 381C                ___xxtofl@arg 000F                ___xxtofl@exp 000E  
              ___xxtofl@val 0005                  __accesstop 0060     __end_of__initialization 33F6  
             ___rparam_used 0001                  ___fltol@f1 002C            outputPrint@d_461 002A  
              ?_pulseEnable 0001                 pinMode@type 0003        __end_of_i2cWriteByte 31F4  
            __pcstackCOMRAM 0001                __pidataBANK0 379E            i2cWriteByte@byte 0009  
               smLoop@h_556 0046           __end_of_i2c_start 33BE        __end_of_i2c_read_bit 354E  
                 ?_Delay2ms 0001                 setDate@date 001D             ??_i2c_write_bit 0007  
                __pbssBANK0 0060                ?_outputPrint 0024                   ?_i2c_stop 0001  
                _dsReadData 3332            dsReadData@result 0011                outputPrint@d 0028  
            smLoop@date_552 004C                  _lcdCommand 32EA                     ?___wmul 0009  
                   ?_dsInit 0001                     ?_lcdInt 001A                     ?_kpInit 0001  
                   ?_kpRead 0001                eventRead@key 001E                     ?_smInit 0001  
                   ?_smLoop 0001                  _kpDebounce 29F2                   ?___xxtofl 0005  
                ??_Delay2ms 0001        i2cReadByte@send_stop 0008             getAlarmLevel@lh 0001  
              _digitalWrite 1C30                   ?_getState 0001           __end_of_clear_SDA 36E4  
         __end_of_clear_SCL 370E                   ?_read_SDA 0001                   ?_read_SCL 0001  
                ??_i2c_stop 0007                   ?_readTemp 0001                     _i2cInit 370E  
                 _I2C_delay 3890                     __Hparam 0000                   ?_setState 0001  
                   __Lparam 0000           __end_of_lcdString 351C             kpDebounce@tempo 005E  
                   _bcd2dec 3400                     _dec2bcd 3132                  _estado_ant 00C0  
                   _adcInit 3832                     _adcRead 34B2                     ___awdiv 2D88  
                   ___awmod 2F0A                     ___flmul 1806                     ___fltol 28EC  
                   ___llmod 2FBA                __psmallconst 0800                     __pcinit 33BE  
            serialRead@resp 0001                     _lcdData 3780                     _getDate 3868  
                   __ramtop 0800                     _lcdInit 3042                     _getTemp 385E  
                   __ptext0 354E                     __ptext1 08B0                     __ptext2 2E4C  
                   __ptext3 2AEE                     _getTime 27DC                     __ptext4 357E  
                   __ptext5 2BDE                     __ptext6 34B2                     __ptext7 24BE  
                   __ptext8 28EC                     __ptext9 1806                     _getProt 3888  
         __end_of_eventInit 3804           __end_of_eventRead 24BE                     _display 0059  
                   _maxTemp 00AB                     _key_ant 00B9                  ??___xxtofl 0009  
                   _pinMode 1E7E            ___awmod@dividend 0009                 serialSend@c 0001  
                   _setDate 2E4C                     _varInit 20CC                     _setTime 2AEE  
                   _setProt 3690                     lcdInt@i 0022                     lcdInt@j 001E  
                ??_getState 0001                   Delay2ms@j 0001                   Delay2ms@k 0002  
                   _started 005A                     _voltMin 00BD         kpDebounce@valorNovo 005D  
      end_of_initialization 33F6                  ??_read_SDA 0007                  ??_read_SCL 0007  
         __end_of_resetProt 35AE                  ??_readTemp 0036               __Lmediumconst 0000  
               ?_dsReadData 000E              digitalRead@pin 0001                     smLoop@h 0042  
                   smLoop@l 0040                     smLoop@m 0048                  ?_I2C_delay 0001  
                ??_setState 0004                  _serialInit 37BA                  _serialRead 3664  
                _serialSend 381C                     postdec1 0FE5                     postdec2 0FDD  
               ?_lcdCommand 0001                     postinc0 0FEE                     postinc2 0FDE  
             _setAlarmLevel 32A0               ??_digitalRead 0003               ??_getLanguage 0001  
               ?_kpDebounce 0001                ?_i2cReadByte 0008             i2c_read_bit@bit 0007  
            _valor@ssd$F319 0801               ___xxtofl@sign 000D                  _prot_ready 00C1  
              _i2cWriteByte 3194               ??_dsWriteData 0017                 ___flmul@grs 0020  
                 _Delay40us 3804                _i2c_read_bit 351C              ?_setAlarmLevel 0018  
             _alarmLevelLow 0052           outputPrint@idioma 0026              adcRead@ADvalor 0003  
            __end_of___wmul 375E              __end_of_dsInit 3884              __end_of_lcdInt 2D88  
            __end_of_kpInit 385E              __end_of_kpRead 3888      __end_of_valor@ssd$F319 0811  
            __end_of_smInit 3780              __end_of_smLoop 11F6         start_initialization 33BE  
       __end_of_digitalRead 27DC         __end_of_getLanguage 3890                   _i2c_start 3378  
                ?_Delay40us 0001             ___llmod@divisor 0005                smLoop@evento 004F  
           ___llmod@counter 0009           ??_lcdCommand4bits 0002                 ??_I2C_delay 0001  
       __end_of_dsWriteData 35DC                 ?_serialInit 0001                 ?_serialRead 0001  
               ?_serialSend 0001                    ??___wmul 000D                    ??_dsInit 0007  
                  ??_lcdInt 001D                    ??_kpInit 0001                    ??_kpRead 0001  
               __pdataBANK0 00C8                    ??_smInit 0023                    ??_smLoop 003B  
         dsReadData@address 000E                   _dTimerMax 00B3                   ___flmul@a 0017  
                 ___flmul@b 0013                 __pbssCOMRAM 0050                  pinMode@pin 0001  
                ?_i2c_start 0001            setState@newState 0004                  smLoop@date 004A  
     __end_of_i2c_write_bit 324C                  smLoop@temp 0044                  smLoop@prot 004E  
                  ?_i2cInit 0001               _getAlarmLevel 3638             ??_setAlarmLevel 001B  
                 _clear_SDA 36BA                   _clear_SCL 36E4                    ?_bcd2dec 0013  
                  ?_dec2bcd 000F                    ?_adcInit 0001                    ?_adcRead 0001  
                  ?___awdiv 0001                    ?___awmod 0009                    ?___flmul 0013  
                  ?___fltol 002C                    ?___llmod 0001                   _lcdString 34E8  
               _digitalRead 2672                 _getLanguage 388C                    ?_lcdData 0001  
                  ?_getDate 0001               ??_setLanguage 0018                    ?_lcdInit 0001  
                  ?_getTemp 0001                    ?_getTime 0017                    ?_getProt 0001  
             lcdCommand@cmd 0003               eventRead@data 001D                 __smallconst 0800  
             eventRead@prot 001A                    ?_pinMode 0001                    ?_setDate 001D  
                  ?_varInit 0001                    ?_setTime 001A                    ?_setProt 0001  
            kpDebounce@bits 0004                   _eventInit 37EC                   _eventRead 2306  
                resetProt@i 0001                 _dsWriteData 35AE  setAlarmLevel@newAlarmLevel 0018  
               ??_Delay40us 0001              ___wmul@product 000D                ??_dsReadData 0010  
            ?_getAlarmLevel 0001               lcdInt@divisor 0020                  ?_clear_SDA 0001  
                ?_clear_SCL 0001                   _resetProt 357E                   lcdInt@val 001A  
              ??_lcdCommand 0003                  ?_lcdString 0004                ??_kpDebounce 0001  
              setTime@index 001C           ___wmul@multiplier 0009       kpDebounce@valorAntigo 005C  
                  _Delay2ms 360A          __end_of_dsReadData 3378                  ?_eventInit 0001  
                ?_eventRead 0001                 ??_i2c_start 0007         __end_of_setLanguage 37EC  
                 copy_data0 33D2          __end_of_lcdCommand 3332                lcdData@valor 0003  
                  _i2c_stop 35DC          __end_of_kpDebounce 2AEE                    __Hrparam 0000  
                ?_resetProt 0001               ??_pulseEnable 0001                    __Lrparam 0000  
                 readTemp@j 003A            dsWriteData@value 0017            kpDebounce@portes 0009  
                  ___xxtofl 24BE               readTemp@tempT 0038             _lcdCommand4bits 30BA  
                  __ptext10 11F6                    __ptext11 34E8                    __ptext20 3690  
                  __ptext12 2CC0                    __ptext21 37D4                    __ptext13 3780  
                  __ptext30 32A0                    __ptext22 381C                    __ptext14 27DC  
                  __ptext31 35AE                    __ptext23 3664                    __ptext15 385E  
                  __ptext40 3442                    __ptext32 3332                    __ptext24 3884  
                  __ptext16 3638                    __ptext41 347A                    __ptext33 3194  
                  __ptext25 3888                    __ptext17 3872                    __ptext50 2D88  
                  __ptext42 2672                    __ptext34 3378                    __ptext26 388C  
                  __ptext18 3868                    __ptext51 3842                    __ptext43 36E4  
                  __ptext35 324C                    __ptext27 2FBA                    __ptext19 2306  
                  __ptext60 360A                    __ptext52 37EC                    __ptext44 1C30  
                  __ptext36 31F4                    __ptext28 375E                    __ptext61 29F2  
                  __ptext53 3850                    __ptext45 3890                    __ptext37 35DC  
                  __ptext29 20CC                    __ptext62 387E                    __ptext54 37BA  
                  __ptext46 3132                    __ptext38 36BA                    __ptext63 370E  
                  __ptext55 3042                    __ptext47 2F0A                    __ptext39 351C  
                  __ptext64 1E7E                    __ptext56 32EA                    __ptext48 3400  
                  __ptext65 3832                    __ptext57 30BA                    __ptext49 3738  
                  __ptext58 3878                    __ptext59 3804                    _getState 3872  
               _smLoop$1509 003E               kpDebounce@F13 00A2               kpDebounce@F15 00DC  
             ??_outputPrint 0028                    _language 0054             ??_getAlarmLevel 0003  
                  _read_SDA 3442                    _read_SCL 347A                    _readTemp 2BDE  
              lcdInt@digNum 001C                 ??_clear_SDA 0007                 ??_clear_SCL 0007  
              ??_serialInit 0001                ??_serialRead 0001                ??_serialSend 0001  
                  _setState 3842                  Delay40us@j 0001             setAlarmLevel@lh 001A  
                  lcdInit@i 0004                    isa$xinst 0000                 ??_lcdString 0005  
       __end_of_pulseEnable 387E                 _setLanguage 37D4      setLanguage@newLanguage 0018  
               _varInit$595 001D                 _varInit$596 001F                 _varInit$597 0021  
               ??_eventInit 0001                 ??_eventRead 0019               ?_digitalWrite 0001  
        __end_of_serialInit 37D4          __end_of_serialRead 3690          __end_of_serialSend 3832  
         digitalWrite@value 0003                 ??_resetProt 0001         __end_of_outputPrint 1806  
              bcd2dec@value 0013                getTime@index 0019                ?_digitalRead 0001  
              ?_getLanguage 0001     __end_of_lcdCommand4bits 3132                 kpDebounce@j 000E  
            ??_digitalWrite 0005             digitalWrite@pin 0001                ?_dsWriteData 0015  
       lcdCommand4bits@data 0001          lcdCommand4bits@cmd 0002                 _pulseEnable 3878  
