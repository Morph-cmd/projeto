

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Jul 01 17:01:43 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Generated 17/10/2023 GMT
    75                           ; 
    76                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution. Publication is not required when
    90                           ;        this file is used in an embedded application.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4550 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108   000000                     
   109                           	psect	idataCOMRAM
   110   0028D6                     __pidataCOMRAM:
   111                           	callstack 0
   112                           
   113                           ;initializer for kpDebounce@F15
   114   0028D6  02                 	db	2
   115   0028D7  03                 	db	3
   116   0028D8  05                 	db	5
   117   0028D9  04                 	db	4
   118   0028DA  01                 	db	1
   119                           
   120                           ;initializer for _ev
   121   0028DB  0062               	dw	98
   122                           
   123                           	psect	idataBANK0
   124   0028CA                     __pidataBANK0:
   125                           	callstack 0
   126                           
   127                           ;initializer for _msgs
   128   0028CA  73                 	db	low STR_1
   129   0028CB  43                 	db	low STR_2
   130   0028CC  73                 	db	low STR_1
   131   0028CD  43                 	db	low STR_2
   132   0028CE  53                 	db	low STR_5
   133   0028CF  33                 	db	low STR_6
   134   0028D0  53                 	db	low STR_5
   135   0028D1  33                 	db	low STR_6
   136   0028D2  63                 	db	low STR_9
   137   0028D3  83                 	db	low STR_10
   138   0028D4  00                 	db	0
   139   0028D5  00                 	db	0
   140                           
   141                           	psect	smallconst
   142   000800                     __psmallconst:
   143                           	callstack 0
   144   000800  00                 	db	0
   145   000801                     _valor@ssd$F320:
   146                           	callstack 0
   147   000801  3F                 	db	63
   148   000802  06                 	db	6
   149   000803  5B                 	db	91
   150   000804  4F                 	db	79
   151   000805  66                 	db	102
   152   000806  6D                 	db	109
   153   000807  7D                 	db	125
   154   000808  07                 	db	7
   155   000809  7F                 	db	127
   156   00080A  6F                 	db	111
   157   00080B  77                 	db	119
   158   00080C  7C                 	db	124
   159   00080D  39                 	db	57
   160   00080E  5E                 	db	94
   161   00080F  79                 	db	121
   162   000810  71                 	db	113
   163   000811                     __end_of_valor@ssd$F320:
   164                           	callstack 0
   165   000000                     _PORTA	set	3968
   166   000000                     _LATA	set	3977
   167   000000                     _TRISA	set	3986
   168   000000                     _PORTE	set	3972
   169   000000                     _PORTD	set	3971
   170   000000                     _PORTC	set	3970
   171   000000                     _PORTB	set	3969
   172   000000                     _TRISE	set	3990
   173   000000                     _TRISD	set	3989
   174   000000                     _TRISC	set	3988
   175   000000                     _TRISB	set	3987
   176   000811                     STR_18:
   177   000811  45                 	db	69	;'E'
   178   000812  6E                 	db	110	;'n'
   179   000813  67                 	db	103	;'g'
   180   000814  6C                 	db	108	;'l'
   181   000815  69                 	db	105	;'i'
   182   000816  73                 	db	115	;'s'
   183   000817  68                 	db	104	;'h'
   184   000818  20                 	db	32
   185   000819  20                 	db	32
   186   00081A  20                 	db	32
   187   00081B  20                 	db	32
   188   00081C  20                 	db	32
   189   00081D  20                 	db	32
   190   00081E  20                 	db	32
   191   00081F  20                 	db	32
   192   000820  20                 	db	32
   193   000821  00                 	db	0
   194   000822                     STR_17:
   195   000822  50                 	db	80	;'P'
   196   000823  6F                 	db	111	;'o'
   197   000824  72                 	db	114	;'r'
   198   000825  74                 	db	116	;'t'
   199   000826  75                 	db	117	;'u'
   200   000827  67                 	db	103	;'g'
   201   000828  75                 	db	117	;'u'
   202   000829  65                 	db	101	;'e'
   203   00082A  73                 	db	115	;'s'
   204   00082B  20                 	db	32
   205   00082C  20                 	db	32
   206   00082D  20                 	db	32
   207   00082E  20                 	db	32
   208   00082F  20                 	db	32
   209   000830  20                 	db	32
   210   000831  20                 	db	32
   211   000832  00                 	db	0
   212   000833                     STR_6:
   213   000833  43                 	db	67	;'C'
   214   000834  68                 	db	104	;'h'
   215   000835  61                 	db	97	;'a'
   216   000836  6E                 	db	110	;'n'
   217   000837  67                 	db	103	;'g'
   218   000838  65                 	db	101	;'e'
   219   000839  20                 	db	32
   220   00083A  74                 	db	116	;'t'
   221   00083B  69                 	db	105	;'i'
   222   00083C  6D                 	db	109	;'m'
   223   00083D  65                 	db	101	;'e'
   224   00083E  20                 	db	32
   225   00083F  20                 	db	32
   226   000840  20                 	db	32
   227   000841  20                 	db	32
   228   000842  00                 	db	0
   229   000843                     STR_2:
   230   000843  43                 	db	67	;'C'
   231   000844  68                 	db	104	;'h'
   232   000845  61                 	db	97	;'a'
   233   000846  6E                 	db	110	;'n'
   234   000847  67                 	db	103	;'g'
   235   000848  65                 	db	101	;'e'
   236   000849  20                 	db	32
   237   00084A  61                 	db	97	;'a'
   238   00084B  6C                 	db	108	;'l'
   239   00084C  61                 	db	97	;'a'
   240   00084D  72                 	db	114	;'r'
   241   00084E  6D                 	db	109	;'m'
   242   00084F  20                 	db	32
   243   000850  20                 	db	32
   244   000851  20                 	db	32
   245   000852  00                 	db	0
   246   000853                     STR_5:
   247   000853  41                 	db	65	;'A'
   248   000854  6C                 	db	108	;'l'
   249   000855  74                 	db	116	;'t'
   250   000856  65                 	db	101	;'e'
   251   000857  72                 	db	114	;'r'
   252   000858  61                 	db	97	;'a'
   253   000859  72                 	db	114	;'r'
   254   00085A  20                 	db	32
   255   00085B  74                 	db	116	;'t'
   256   00085C  65                 	db	101	;'e'
   257   00085D  6D                 	db	109	;'m'
   258   00085E  70                 	db	112	;'p'
   259   00085F  6F                 	db	111	;'o'
   260   000860  20                 	db	32
   261   000861  20                 	db	32
   262   000862  00                 	db	0
   263   000863                     STR_9:
   264   000863  41                 	db	65	;'A'
   265   000864  6C                 	db	108	;'l'
   266   000865  74                 	db	116	;'t'
   267   000866  65                 	db	101	;'e'
   268   000867  72                 	db	114	;'r'
   269   000868  61                 	db	97	;'a'
   270   000869  72                 	db	114	;'r'
   271   00086A  20                 	db	32
   272   00086B  69                 	db	105	;'i'
   273   00086C  64                 	db	100	;'d'
   274   00086D  69                 	db	105	;'i'
   275   00086E  6F                 	db	111	;'o'
   276   00086F  6D                 	db	109	;'m'
   277   000870  61                 	db	97	;'a'
   278   000871  20                 	db	32
   279   000872  00                 	db	0
   280   000873                     STR_1:
   281   000873  41                 	db	65	;'A'
   282   000874  6C                 	db	108	;'l'
   283   000875  74                 	db	116	;'t'
   284   000876  65                 	db	101	;'e'
   285   000877  72                 	db	114	;'r'
   286   000878  61                 	db	97	;'a'
   287   000879  72                 	db	114	;'r'
   288   00087A  20                 	db	32
   289   00087B  61                 	db	97	;'a'
   290   00087C  6C                 	db	108	;'l'
   291   00087D  61                 	db	97	;'a'
   292   00087E  72                 	db	114	;'r'
   293   00087F  6D                 	db	109	;'m'
   294   000880  65                 	db	101	;'e'
   295   000881  20                 	db	32
   296   000882  00                 	db	0
   297   000883                     STR_10:
   298   000883  43                 	db	67	;'C'
   299   000884  68                 	db	104	;'h'
   300   000885  61                 	db	97	;'a'
   301   000886  6E                 	db	110	;'n'
   302   000887  67                 	db	103	;'g'
   303   000888  65                 	db	101	;'e'
   304   000889  20                 	db	32
   305   00088A  6C                 	db	108	;'l'
   306   00088B  61                 	db	97	;'a'
   307   00088C  6E                 	db	110	;'n'
   308   00088D  67                 	db	103	;'g'
   309   00088E  75                 	db	117	;'u'
   310   00088F  61                 	db	97	;'a'
   311   000890  67                 	db	103	;'g'
   312   000891  65                 	db	101	;'e'
   313   000892  00                 	db	0
   314   000893                     STR_11:
   315   000893  20                 	db	32
   316   000894  20                 	db	32
   317   000895  20                 	db	32
   318   000896  20                 	db	32
   319   000897  20                 	db	32
   320   000898  20                 	db	32
   321   000899  20                 	db	32
   322   00089A  20                 	db	32
   323   00089B  20                 	db	32
   324   00089C  20                 	db	32
   325   00089D  20                 	db	32
   326   00089E  00                 	db	0
   327   00089F  00                 	db	0	; dummy byte at the end
   328   000000                     
   329                           ; #config settings
   330                           
   331                           	psect	cinit
   332   0021AE                     __pcinit:
   333                           	callstack 0
   334   0021AE                     start_initialization:
   335                           	callstack 0
   336   0021AE                     __initialization:
   337                           	callstack 0
   338                           
   339                           ; Initialize objects allocated to BANK0 (12 bytes)
   340                           ; load TBLPTR registers with __pidataBANK0
   341   0021AE  0ECA               	movlw	low __pidataBANK0
   342   0021B0  6EF6               	movwf	tblptrl,c
   343   0021B2  0E28               	movlw	high __pidataBANK0
   344   0021B4  6EF7               	movwf	tblptrh,c
   345   0021B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   346   0021B8  6EF8               	movwf	tblptru,c
   347   0021BA  EE00  F060         	lfsr	0,__pdataBANK0
   348   0021BE  EE10 F00C          	lfsr	1,12
   349   0021C2                     copy_data0:
   350   0021C2  0009               	tblrd		*+
   351   0021C4  CFF5 FFEE          	movff	tablat,postinc0
   352   0021C8  50E5               	movf	postdec1,w,c
   353   0021CA  50E1               	movf	fsr1l,w,c
   354   0021CC  E1FA               	bnz	copy_data0
   355                           
   356                           ; Initialize objects allocated to COMRAM (7 bytes)
   357                           ; load TBLPTR registers with __pidataCOMRAM
   358   0021CE  0ED6               	movlw	low __pidataCOMRAM
   359   0021D0  6EF6               	movwf	tblptrl,c
   360   0021D2  0E28               	movlw	high __pidataCOMRAM
   361   0021D4  6EF7               	movwf	tblptrh,c
   362   0021D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   363   0021D8  6EF8               	movwf	tblptru,c
   364   0021DA  EE00  F059         	lfsr	0,__pdataCOMRAM
   365   0021DE  EE10 F007          	lfsr	1,7
   366   0021E2                     copy_data1:
   367   0021E2  0009               	tblrd		*+
   368   0021E4  CFF5 FFEE          	movff	tablat,postinc0
   369   0021E8  50E5               	movf	postdec1,w,c
   370   0021EA  50E1               	movf	fsr1l,w,c
   371   0021EC  E1FA               	bnz	copy_data1
   372                           
   373                           ; Clear objects allocated to BANK0 (11 bytes)
   374   0021EE  EE00  F06C         	lfsr	0,__pbssBANK0
   375   0021F2  0E0B               	movlw	11
   376   0021F4                     clear_0:
   377   0021F4  6AEE               	clrf	postinc0,c
   378   0021F6  06E8               	decf	wreg,f,c
   379   0021F8  E1FD               	bnz	clear_0
   380                           
   381                           ; Clear objects allocated to COMRAM (34 bytes)
   382   0021FA  EE00  F037         	lfsr	0,__pbssCOMRAM
   383   0021FE  0E22               	movlw	34
   384   002200                     clear_1:
   385   002200  6AEE               	clrf	postinc0,c
   386   002202  06E8               	decf	wreg,f,c
   387   002204  E1FD               	bnz	clear_1
   388   002206                     end_of_initialization:
   389                           	callstack 0
   390   002206                     __end_of__initialization:
   391                           	callstack 0
   392   002206  0E00               	movlw	low (__Lmediumconst shr (0+16))
   393   002208  6EF8               	movwf	tblptru,c
   394   00220A  0100               	movlb	0
   395   00220C  EFA7  F012         	goto	_main	;jump to C main() function
   396                           
   397                           	psect	bssCOMRAM
   398   000037                     __pbssCOMRAM:
   399                           	callstack 0
   400   000037                     _t:
   401                           	callstack 0
   402   000037                     	ds	4
   403   00003B                     _time:
   404                           	callstack 0
   405   00003B                     	ds	2
   406   00003D                     	ds	2
   407   00003F                     	ds	2
   408   000041                     _key:
   409                           	callstack 0
   410   000041                     	ds	2
   411   000043                     _key_ant:
   412                           	callstack 0
   413   000043                     	ds	2
   414   000045                     _ev_ant:
   415                           	callstack 0
   416   000045                     	ds	2
   417   000047                     _index:
   418                           	callstack 0
   419   000047                     	ds	1
   420   000048                     _alarmLevelLow:
   421                           	callstack 0
   422   000048                     	ds	1
   423   000049                     _alarmLevelHigh:
   424                           	callstack 0
   425   000049                     	ds	1
   426   00004A                     _language:
   427                           	callstack 0
   428   00004A                     	ds	1
   429   00004B                     _state:
   430                           	callstack 0
   431   00004B                     	ds	1
   432   00004C                     _estado_ant:
   433                           	callstack 0
   434   00004C                     	ds	1
   435   00004D                     _prot_ready:
   436                           	callstack 0
   437   00004D                     	ds	1
   438   00004E                     _v3:
   439                           	callstack 0
   440   00004E                     	ds	1
   441   00004F                     _v2:
   442                           	callstack 0
   443   00004F                     	ds	1
   444   000050                     _v1:
   445                           	callstack 0
   446   000050                     	ds	1
   447   000051                     _v0:
   448                           	callstack 0
   449   000051                     	ds	1
   450   000052                     _display:
   451                           	callstack 0
   452   000052                     	ds	1
   453   000053                     _started:
   454                           	callstack 0
   455   000053                     	ds	1
   456   000054                     _de:
   457                           	callstack 0
   458   000054                     	ds	1
   459   000055                     kpDebounce@valorAntigo:
   460                           	callstack 0
   461   000055                     	ds	1
   462   000056                     kpDebounce@valorNovo:
   463                           	callstack 0
   464   000056                     	ds	1
   465   000057                     kpDebounce@tempo:
   466                           	callstack 0
   467   000057                     	ds	1
   468   000058                     _valor:
   469                           	callstack 0
   470   000058                     	ds	1
   471                           
   472                           	psect	dataCOMRAM
   473   000059                     __pdataCOMRAM:
   474                           	callstack 0
   475   000059                     kpDebounce@F15:
   476                           	callstack 0
   477   000059                     	ds	5
   478   00005E                     	ds	2
   479                           
   480                           	psect	bssBANK0
   481   00006C                     __pbssBANK0:
   482                           	callstack 0
   483   00006C                     	ds	5
   484   000071                     _prot:
   485                           	callstack 0
   486   000071                     	ds	6
   487                           
   488                           	psect	dataBANK0
   489   000060                     __pdataBANK0:
   490                           	callstack 0
   491   000060                     _msgs:
   492                           	callstack 0
   493   000060                     	ds	12
   494                           
   495                           	psect	cstackCOMRAM
   496   000001                     __pcstackCOMRAM:
   497                           	callstack 0
   498   000001                     ??_kpDebounce:
   499   000001                     ?_getAlarmLevel:
   500                           	callstack 0
   501   000001                     ?_digitalRead:
   502                           	callstack 0
   503   000001                     ?___awdiv:
   504                           	callstack 0
   505   000001                     Delay40us@j:
   506                           	callstack 0
   507   000001                     Delay2ms@j:
   508                           	callstack 0
   509   000001                     lcdCommand4bits@data:
   510                           	callstack 0
   511   000001                     serialSend@c:
   512                           	callstack 0
   513   000001                     serialRead@resp:
   514                           	callstack 0
   515   000001                     setProt@newChar:
   516                           	callstack 0
   517   000001                     resetProt@i:
   518                           	callstack 0
   519   000001                     adcRead@ADvalor:
   520                           	callstack 0
   521   000001                     digitalWrite@pin:
   522                           	callstack 0
   523   000001                     digitalRead@pin:
   524                           	callstack 0
   525   000001                     pinMode@pin:
   526                           	callstack 0
   527   000001                     getAlarmLevel@lh:
   528                           	callstack 0
   529   000001                     ___awdiv@dividend:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x0
   533   000001                     	ds	1
   534   000002                     Delay2ms@k:
   535                           	callstack 0
   536   000002                     lcdCommand4bits@cmd:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x1
   540   000002                     	ds	1
   541   000003                     ??_digitalRead:
   542   000003                     lcdCommand@cmd:
   543                           	callstack 0
   544   000003                     lcdData@valor:
   545                           	callstack 0
   546   000003                     digitalWrite@value:
   547                           	callstack 0
   548   000003                     pinMode@type:
   549                           	callstack 0
   550   000003                     getAlarmLevel@l:
   551                           	callstack 0
   552   000003                     ___awdiv@divisor:
   553                           	callstack 0
   554                           
   555                           ; 2 bytes @ 0x2
   556   000003                     	ds	1
   557   000004                     lcdInit@i:
   558                           	callstack 0
   559   000004                     lcdString@str:
   560                           	callstack 0
   561   000004                     setState@newState:
   562                           	callstack 0
   563   000004                     kpDebounce@bits:
   564                           	callstack 0
   565                           
   566                           ; 5 bytes @ 0x3
   567   000004                     	ds	1
   568   000005                     ??_digitalWrite:
   569   000005                     ??_pinMode:
   570   000005                     ___awdiv@counter:
   571                           	callstack 0
   572                           
   573                           ; 1 bytes @ 0x4
   574   000005                     	ds	1
   575   000006                     ___awdiv@sign:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x5
   579   000006                     	ds	1
   580   000007                     i2c_write_bit@bit:
   581                           	callstack 0
   582   000007                     i2c_read_bit@bit:
   583                           	callstack 0
   584   000007                     ___awdiv@quotient:
   585                           	callstack 0
   586                           
   587                           ; 2 bytes @ 0x6
   588   000007                     	ds	1
   589   000008                     i2cWriteByte@send_stop:
   590                           	callstack 0
   591   000008                     i2cReadByte@send_stop:
   592                           	callstack 0
   593                           
   594                           ; 1 bytes @ 0x7
   595   000008                     	ds	1
   596   000009                     ??_i2cReadByte:
   597   000009                     ?___wmul:
   598                           	callstack 0
   599   000009                     ?___awmod:
   600                           	callstack 0
   601   000009                     i2cWriteByte@byte:
   602                           	callstack 0
   603   000009                     ___wmul@multiplier:
   604                           	callstack 0
   605   000009                     ___awmod@dividend:
   606                           	callstack 0
   607   000009                     kpDebounce@portes:
   608                           	callstack 0
   609                           
   610                           ; 5 bytes @ 0x8
   611   000009                     	ds	1
   612   00000A                     i2cWriteByte@send_start:
   613                           	callstack 0
   614   00000A                     i2cReadByte@nack:
   615                           	callstack 0
   616                           
   617                           ; 1 bytes @ 0x9
   618   00000A                     	ds	1
   619   00000B                     i2cWriteByte@bit:
   620                           	callstack 0
   621   00000B                     i2cReadByte@bit:
   622                           	callstack 0
   623   00000B                     ___wmul@multiplicand:
   624                           	callstack 0
   625   00000B                     ___awmod@divisor:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0xA
   629   00000B                     	ds	2
   630   00000D                     i2cReadByte@byte:
   631                           	callstack 0
   632   00000D                     ___awmod@counter:
   633                           	callstack 0
   634   00000D                     ___wmul@product:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0xC
   638   00000D                     	ds	1
   639   00000E                     ?_dsReadData:
   640                           	callstack 0
   641   00000E                     kpDebounce@j:
   642                           	callstack 0
   643   00000E                     ___awmod@sign:
   644                           	callstack 0
   645   00000E                     dsReadData@address:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0xD
   649   00000E                     	ds	2
   650   000010                     ??_dsReadData:
   651                           
   652                           ; 1 bytes @ 0xF
   653   000010                     	ds	1
   654   000011                     dsReadData@result:
   655                           	callstack 0
   656                           
   657                           ; 2 bytes @ 0x10
   658   000011                     	ds	2
   659   000013                     ?_bcd2dec:
   660                           	callstack 0
   661   000013                     bcd2dec@value:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x12
   665   000013                     	ds	2
   666   000015                     ??_bcd2dec:
   667                           
   668                           ; 1 bytes @ 0x14
   669   000015                     	ds	2
   670   000017                     ?_dec2bcd:
   671                           	callstack 0
   672   000017                     dec2bcd@value:
   673                           	callstack 0
   674   000017                     lcdInt@val:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x16
   678   000017                     	ds	2
   679   000019                     ??_dec2bcd:
   680   000019                     lcdInt@digNum:
   681                           	callstack 0
   682                           
   683                           ; 1 bytes @ 0x18
   684   000019                     	ds	1
   685   00001A                     ??_lcdInt:
   686                           
   687                           ; 1 bytes @ 0x19
   688   00001A                     	ds	1
   689   00001B                     lcdInt@j:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x1A
   693   00001B                     	ds	2
   694   00001D                     dsWriteData@address:
   695                           	callstack 0
   696   00001D                     lcdInt@divisor:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x1C
   700   00001D                     	ds	2
   701   00001F                     dsWriteData@value:
   702                           	callstack 0
   703   00001F                     lcdInt@i:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x1E
   707   00001F                     	ds	1
   708   000020                     setLanguage@newLanguage:
   709                           	callstack 0
   710   000020                     setAlarmLevel@newAlarmLevel:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x1F
   714   000020                     	ds	1
   715   000021                     ??_eventRead:
   716   000021                     outputPrint@numTela:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x20
   720   000021                     	ds	1
   721   000022                     eventRead@prot:
   722                           	callstack 0
   723   000022                     setAlarmLevel@lh:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x21
   727   000022                     	ds	1
   728   000023                     ??_varInit:
   729   000023                     eventRead@ev:
   730                           	callstack 0
   731   000023                     outputPrint@idioma:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x22
   735   000023                     	ds	2
   736   000025                     eventRead@data:
   737                           	callstack 0
   738   000025                     _varInit$522:
   739                           	callstack 0
   740                           
   741                           ; 2 bytes @ 0x24
   742   000025                     	ds	1
   743   000026                     eventRead@key:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x25
   747   000026                     	ds	1
   748   000027                     _varInit$523:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x26
   752   000027                     	ds	1
   753   000028                     ??_smLoop:
   754                           
   755                           ; 1 bytes @ 0x27
   756   000028                     	ds	1
   757   000029                     _varInit$524:
   758                           	callstack 0
   759                           
   760                           ; 2 bytes @ 0x28
   761   000029                     	ds	2
   762   00002B                     _smLoop$1429:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x2A
   766   00002B                     	ds	2
   767   00002D                     smLoop@l:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x2C
   771   00002D                     	ds	2
   772   00002F                     smLoop@h:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x2E
   776   00002F                     	ds	2
   777   000031                     smLoop@h_500:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x30
   781   000031                     	ds	2
   782   000033                     smLoop@m:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x32
   786   000033                     	ds	2
   787   000035                     smLoop@prot:
   788                           	callstack 0
   789                           
   790                           ; 1 bytes @ 0x34
   791   000035                     	ds	1
   792   000036                     smLoop@evento:
   793                           	callstack 0
   794                           
   795                           ; 1 bytes @ 0x35
   796   000036                     	ds	1
   797   000037                     
   798                           ; 1 bytes @ 0x36
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 24 in file "main.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   818 ;;      Params:         0       0       0       0       0       0       0       0       0
   819 ;;      Locals:         0       0       0       0       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0
   821 ;;      Totals:         0       0       0       0       0       0       0       0       0
   822 ;;Total ram usage:        0 bytes
   823 ;; Hardware stack levels required when called: 8
   824 ;; This function calls:
   825 ;;		_adcInit
   826 ;;		_adcRead
   827 ;;		_dsInit
   828 ;;		_kpDebounce
   829 ;;		_kpInit
   830 ;;		_lcdInit
   831 ;;		_serialInit
   832 ;;		_smInit
   833 ;;		_smLoop
   834 ;; This function is called by:
   835 ;;		Startup code after reset
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text0
   840   00254E                     __ptext0:
   841                           	callstack 0
   842   00254E                     _main:
   843                           	callstack 23
   844   00254E                     
   845                           ;main.c: 28:     kpInit();
   846   00254E  EC5E  F014         	call	_kpInit	;wreg free
   847                           
   848                           ;main.c: 29:     lcdInit();
   849   002552  EC5F  F010         	call	_lcdInit	;wreg free
   850                           
   851                           ;main.c: 30:     dsInit();
   852   002556  EC72  F014         	call	_dsInit	;wreg free
   853   00255A                     
   854                           ;main.c: 31:     smInit();
   855   00255A  ECF5  F013         	call	_smInit	;wreg free
   856   00255E                     
   857                           ;main.c: 32:     serialInit();
   858   00255E  EC14  F014         	call	_serialInit	;wreg free
   859   002562                     
   860                           ;main.c: 33:     adcInit();
   861   002562  EC4F  F014         	call	_adcInit	;wreg free
   862   002566                     
   863                           ;main.c: 34:     TRISA = 0x00;
   864   002566  0E00               	movlw	0
   865   002568  6E92               	movwf	146,c	;volatile
   866   00256A                     
   867                           ;main.c: 35:     LATA = 0x00;
   868   00256A  0E00               	movlw	0
   869   00256C  6E89               	movwf	137,c	;volatile
   870   00256E                     l3890:
   871                           
   872                           ;main.c: 41:         kpDebounce();
   873   00256E  ECC3  F00E         	call	_kpDebounce	;wreg free
   874   002572                     
   875                           ;main.c: 42:         adcRead();
   876   002572  ECE2  F013         	call	_adcRead	;wreg free
   877   002576                     
   878                           ;main.c: 43:         smLoop();
   879   002576  EC50  F004         	call	_smLoop	;wreg free
   880   00257A  EFB7  F012         	goto	l3890
   881   00257E  EF00  F000         	goto	start
   882   002582                     __end_of_main:
   883                           	callstack 0
   884                           
   885 ;; *************** function _smLoop *****************
   886 ;; Defined at:
   887 ;;		line 19 in file "stateMachine.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  h               2   46[COMRAM] int 
   892 ;;  l               2   44[COMRAM] int 
   893 ;;  m               2   50[COMRAM] int 
   894 ;;  h               2   48[COMRAM] int 
   895 ;;  prot            1   52[COMRAM] PTR unsigned char 
   896 ;;		 -> prot(6), 
   897 ;;  evento          1   53[COMRAM] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   907 ;;      Params:         0       0       0       0       0       0       0       0       0
   908 ;;      Locals:        12       0       0       0       0       0       0       0       0
   909 ;;      Temps:          3       0       0       0       0       0       0       0       0
   910 ;;      Totals:        15       0       0       0       0       0       0       0       0
   911 ;;Total ram usage:       15 bytes
   912 ;; Hardware stack levels used: 1
   913 ;; Hardware stack levels required when called: 7
   914 ;; This function calls:
   915 ;;		___wmul
   916 ;;		_bcd2dec
   917 ;;		_dec2bcd
   918 ;;		_dsReadData
   919 ;;		_dsWriteData
   920 ;;		_eventRead
   921 ;;		_getAlarmLevel
   922 ;;		_getLanguage
   923 ;;		_getProt
   924 ;;		_getState
   925 ;;		_outputPrint
   926 ;;		_resetProt
   927 ;;		_setAlarmLevel
   928 ;;		_setLanguage
   929 ;;		_setState
   930 ;; This function is called by:
   931 ;;		_main
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text1
   936   0008A0                     __ptext1:
   937                           	callstack 0
   938   0008A0                     _smLoop:
   939                           	callstack 23
   940   0008A0                     
   941                           ;stateMachine.c: 20:     unsigned char evento;;stateMachine.c: 24:     evento = eventRea
      +                          d();
   942   0008A0  EC34  F00D         	call	_eventRead	;wreg free
   943   0008A4  6E36               	movwf	smLoop@evento^0,c
   944   0008A6                     
   945                           ;stateMachine.c: 25:     if (evento == EV_NOEVENT) {
   946   0008A6  0E06               	movlw	6
   947   0008A8  1836               	xorwf	smLoop@evento^0,w,c
   948   0008AA  A4D8               	btfss	status,2,c
   949   0008AC  EF5A  F004         	goto	u3221
   950   0008B0  EF5C  F004         	goto	u3220
   951   0008B4                     u3221:
   952   0008B4  EF64  F004         	goto	l3696
   953   0008B8                     u3220:
   954   0008B8                     
   955                           ;stateMachine.c: 26:         t++;
   956   0008B8  0E01               	movlw	1
   957   0008BA  2637               	addwf	_t^0,f,c
   958   0008BC  0E00               	movlw	0
   959   0008BE  2238               	addwfc	(_t+1)^0,f,c
   960   0008C0  2239               	addwfc	(_t+2)^0,f,c
   961   0008C2  223A               	addwfc	(_t+3)^0,f,c
   962                           
   963                           ;stateMachine.c: 27:     } else {
   964   0008C4  EF6C  F004         	goto	l3698
   965   0008C8                     l3696:
   966                           
   967                           ;stateMachine.c: 28:         t = 0;
   968   0008C8  0E00               	movlw	0
   969   0008CA  6E37               	movwf	_t^0,c
   970   0008CC  0E00               	movlw	0
   971   0008CE  6E38               	movwf	(_t+1)^0,c
   972   0008D0  0E00               	movlw	0
   973   0008D2  6E39               	movwf	(_t+2)^0,c
   974   0008D4  0E00               	movlw	0
   975   0008D6  6E3A               	movwf	(_t+3)^0,c
   976   0008D8                     l3698:
   977                           
   978                           ;stateMachine.c: 30:     if (t == 3000) {
   979   0008D8  0EB8               	movlw	184
   980   0008DA  1837               	xorwf	_t^0,w,c
   981   0008DC  E109               	bnz	u3231
   982   0008DE  0E0B               	movlw	11
   983   0008E0  1838               	xorwf	(_t+1)^0,w,c
   984   0008E2  1039               	iorwf	(_t+2)^0,w,c
   985   0008E4  103A               	iorwf	(_t+3)^0,w,c
   986   0008E6  A4D8               	btfss	status,2,c
   987   0008E8  EF78  F004         	goto	u3231
   988   0008EC  EF7A  F004         	goto	u3230
   989   0008F0                     u3231:
   990   0008F0  EF7E  F006         	goto	l3824
   991   0008F4                     u3230:
   992   0008F4                     
   993                           ;stateMachine.c: 31:         setState(STATE_MAIN);
   994   0008F4  0E05               	movlw	5
   995   0008F6  EC57  F014         	call	_setState
   996   0008FA  EF7E  F006         	goto	l3824
   997   0008FE                     l3702:
   998                           
   999                           ;stateMachine.c: 37:             if (evento == EV_B_0) {
  1000   0008FE  5036               	movf	smLoop@evento^0,w,c
  1001   000900  A4D8               	btfss	status,2,c
  1002   000902  EF85  F004         	goto	u3241
  1003   000906  EF87  F004         	goto	u3240
  1004   00090A                     u3241:
  1005   00090A  EF97  F004         	goto	l3706
  1006   00090E                     u3240:
  1007   00090E                     
  1008                           ;stateMachine.c: 38:                 setAlarmLevel(getAlarmLevel(0) - 1, 0);
  1009   00090E  0E00               	movlw	0
  1010   000910  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1011   000912  0E00               	movlw	0
  1012   000914  6E01               	movwf	getAlarmLevel@lh^0,c
  1013   000916  EC50  F013         	call	_getAlarmLevel	;wreg free
  1014   00091A  0EFF               	movlw	255
  1015   00091C  2401               	addwf	?_getAlarmLevel^0,w,c
  1016   00091E  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1017   000920  0EFF               	movlw	255
  1018   000922  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1019   000924  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1020   000926  0E00               	movlw	0
  1021   000928  6E22               	movwf	setAlarmLevel@lh^0,c
  1022   00092A  ECBF  F011         	call	_setAlarmLevel	;wreg free
  1023   00092E                     l3706:
  1024                           
  1025                           ;stateMachine.c: 41:             if (evento == EV_B_1) {
  1026   00092E  0436               	decf	smLoop@evento^0,w,c
  1027   000930  A4D8               	btfss	status,2,c
  1028   000932  EF9D  F004         	goto	u3251
  1029   000936  EF9F  F004         	goto	u3250
  1030   00093A                     u3251:
  1031   00093A  EFAF  F004         	goto	l3710
  1032   00093E                     u3250:
  1033   00093E                     
  1034                           ;stateMachine.c: 42:                 setAlarmLevel(getAlarmLevel(0) + 1, 0);
  1035   00093E  0E00               	movlw	0
  1036   000940  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1037   000942  0E00               	movlw	0
  1038   000944  6E01               	movwf	getAlarmLevel@lh^0,c
  1039   000946  EC50  F013         	call	_getAlarmLevel	;wreg free
  1040   00094A  0E01               	movlw	1
  1041   00094C  2401               	addwf	?_getAlarmLevel^0,w,c
  1042   00094E  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1043   000950  0E00               	movlw	0
  1044   000952  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1045   000954  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1046   000956  0E00               	movlw	0
  1047   000958  6E22               	movwf	setAlarmLevel@lh^0,c
  1048   00095A  ECBF  F011         	call	_setAlarmLevel	;wreg free
  1049   00095E                     l3710:
  1050                           
  1051                           ;stateMachine.c: 45:             if (evento == EV_B_2) {
  1052   00095E  0E02               	movlw	2
  1053   000960  1836               	xorwf	smLoop@evento^0,w,c
  1054   000962  A4D8               	btfss	status,2,c
  1055   000964  EFB6  F004         	goto	u3261
  1056   000968  EFB8  F004         	goto	u3260
  1057   00096C                     u3261:
  1058   00096C  EFBB  F004         	goto	l3714
  1059   000970                     u3260:
  1060   000970                     
  1061                           ;stateMachine.c: 46:                 setState(STATE_TEMPOM);
  1062   000970  0E03               	movlw	3
  1063   000972  EC57  F014         	call	_setState
  1064   000976                     l3714:
  1065                           
  1066                           ;stateMachine.c: 49:             if (evento == EV_B_3) {
  1067   000976  0E03               	movlw	3
  1068   000978  1836               	xorwf	smLoop@evento^0,w,c
  1069   00097A  A4D8               	btfss	status,2,c
  1070   00097C  EFC2  F004         	goto	u3271
  1071   000980  EFC4  F004         	goto	u3270
  1072   000984                     u3271:
  1073   000984  EFC7  F004         	goto	l3718
  1074   000988                     u3270:
  1075   000988                     
  1076                           ;stateMachine.c: 50:                 setState(STATE_ALARMEH);
  1077   000988  0E01               	movlw	1
  1078   00098A  EC57  F014         	call	_setState
  1079   00098E                     l3718:
  1080                           
  1081                           ;stateMachine.c: 53:             if (evento == EV_B_4) {
  1082   00098E  0E04               	movlw	4
  1083   000990  1836               	xorwf	smLoop@evento^0,w,c
  1084   000992  A4D8               	btfss	status,2,c
  1085   000994  EFCE  F004         	goto	u3281
  1086   000998  EFD0  F004         	goto	u3280
  1087   00099C                     u3281:
  1088   00099C  EF9A  F006         	goto	l3826
  1089   0009A0                     u3280:
  1090   0009A0                     
  1091                           ;stateMachine.c: 54:                 setState(STATE_MAIN);
  1092   0009A0  0E05               	movlw	5
  1093   0009A2  EC57  F014         	call	_setState
  1094   0009A6                     
  1095                           ;stateMachine.c: 55:                 estado_ant = STATE_ALARMEL;
  1096   0009A6  0E00               	movlw	0
  1097   0009A8  6E4C               	movwf	_estado_ant^0,c
  1098   0009AA  EF9A  F006         	goto	l3826
  1099   0009AE                     l3724:
  1100                           
  1101                           ;stateMachine.c: 60:             if (evento == EV_B_0) {
  1102   0009AE  5036               	movf	smLoop@evento^0,w,c
  1103   0009B0  A4D8               	btfss	status,2,c
  1104   0009B2  EFDD  F004         	goto	u3291
  1105   0009B6  EFDF  F004         	goto	u3290
  1106   0009BA                     u3291:
  1107   0009BA  EFEF  F004         	goto	l3728
  1108   0009BE                     u3290:
  1109   0009BE                     
  1110                           ;stateMachine.c: 61:                 setAlarmLevel(getAlarmLevel(1) - 1, 1);
  1111   0009BE  0E00               	movlw	0
  1112   0009C0  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1113   0009C2  0E01               	movlw	1
  1114   0009C4  6E01               	movwf	getAlarmLevel@lh^0,c
  1115   0009C6  EC50  F013         	call	_getAlarmLevel	;wreg free
  1116   0009CA  0EFF               	movlw	255
  1117   0009CC  2401               	addwf	?_getAlarmLevel^0,w,c
  1118   0009CE  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1119   0009D0  0EFF               	movlw	255
  1120   0009D2  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1121   0009D4  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1122   0009D6  0E01               	movlw	1
  1123   0009D8  6E22               	movwf	setAlarmLevel@lh^0,c
  1124   0009DA  ECBF  F011         	call	_setAlarmLevel	;wreg free
  1125   0009DE                     l3728:
  1126                           
  1127                           ;stateMachine.c: 64:             if (evento == EV_B_1) {
  1128   0009DE  0436               	decf	smLoop@evento^0,w,c
  1129   0009E0  A4D8               	btfss	status,2,c
  1130   0009E2  EFF5  F004         	goto	u3301
  1131   0009E6  EFF7  F004         	goto	u3300
  1132   0009EA                     u3301:
  1133   0009EA  EF07  F005         	goto	l3732
  1134   0009EE                     u3300:
  1135   0009EE                     
  1136                           ;stateMachine.c: 65:                 setAlarmLevel(getAlarmLevel(1) + 1, 1);
  1137   0009EE  0E00               	movlw	0
  1138   0009F0  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1139   0009F2  0E01               	movlw	1
  1140   0009F4  6E01               	movwf	getAlarmLevel@lh^0,c
  1141   0009F6  EC50  F013         	call	_getAlarmLevel	;wreg free
  1142   0009FA  0E01               	movlw	1
  1143   0009FC  2401               	addwf	?_getAlarmLevel^0,w,c
  1144   0009FE  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1145   000A00  0E00               	movlw	0
  1146   000A02  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1147   000A04  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1148   000A06  0E01               	movlw	1
  1149   000A08  6E22               	movwf	setAlarmLevel@lh^0,c
  1150   000A0A  ECBF  F011         	call	_setAlarmLevel	;wreg free
  1151   000A0E                     l3732:
  1152                           
  1153                           ;stateMachine.c: 68:             if (evento == EV_B_2) {
  1154   000A0E  0E02               	movlw	2
  1155   000A10  1836               	xorwf	smLoop@evento^0,w,c
  1156   000A12  A4D8               	btfss	status,2,c
  1157   000A14  EF0E  F005         	goto	u3311
  1158   000A18  EF10  F005         	goto	u3310
  1159   000A1C                     u3311:
  1160   000A1C  EF13  F005         	goto	l3736
  1161   000A20                     u3310:
  1162   000A20                     
  1163                           ;stateMachine.c: 69:                 setState(STATE_ALARMEL);
  1164   000A20  0E00               	movlw	0
  1165   000A22  EC57  F014         	call	_setState
  1166   000A26                     l3736:
  1167                           
  1168                           ;stateMachine.c: 72:             if (evento == EV_B_3) {
  1169   000A26  0E03               	movlw	3
  1170   000A28  1836               	xorwf	smLoop@evento^0,w,c
  1171   000A2A  A4D8               	btfss	status,2,c
  1172   000A2C  EF1A  F005         	goto	u3321
  1173   000A30  EF1C  F005         	goto	u3320
  1174   000A34                     u3321:
  1175   000A34  EF1F  F005         	goto	l3740
  1176   000A38                     u3320:
  1177   000A38                     
  1178                           ;stateMachine.c: 73:                 setState(STATE_IDIOMA);
  1179   000A38  0E04               	movlw	4
  1180   000A3A  EC57  F014         	call	_setState
  1181   000A3E                     l3740:
  1182                           
  1183                           ;stateMachine.c: 76:             if (evento == EV_B_4) {
  1184   000A3E  0E04               	movlw	4
  1185   000A40  1836               	xorwf	smLoop@evento^0,w,c
  1186   000A42  A4D8               	btfss	status,2,c
  1187   000A44  EF26  F005         	goto	u3331
  1188   000A48  EF28  F005         	goto	u3330
  1189   000A4C                     u3331:
  1190   000A4C  EF9A  F006         	goto	l3826
  1191   000A50                     u3330:
  1192   000A50                     
  1193                           ;stateMachine.c: 77:                 setState(STATE_MAIN);
  1194   000A50  0E05               	movlw	5
  1195   000A52  EC57  F014         	call	_setState
  1196   000A56                     
  1197                           ;stateMachine.c: 78:                 estado_ant = STATE_ALARMEH;
  1198   000A56  0E01               	movlw	1
  1199   000A58  6E4C               	movwf	_estado_ant^0,c
  1200   000A5A  EF9A  F006         	goto	l3826
  1201   000A5E                     l3746:
  1202                           
  1203                           ;stateMachine.c: 86:             if (evento == EV_B_2) {
  1204   000A5E  0E02               	movlw	2
  1205   000A60  1836               	xorwf	smLoop@evento^0,w,c
  1206   000A62  A4D8               	btfss	status,2,c
  1207   000A64  EF36  F005         	goto	u3341
  1208   000A68  EF38  F005         	goto	u3340
  1209   000A6C                     u3341:
  1210   000A6C  EF3B  F005         	goto	l3750
  1211   000A70                     u3340:
  1212   000A70                     
  1213                           ;stateMachine.c: 87:                 setState(STATE_ALARMEH);
  1214   000A70  0E01               	movlw	1
  1215   000A72  EC57  F014         	call	_setState
  1216   000A76                     l3750:
  1217                           
  1218                           ;stateMachine.c: 90:             if (evento == EV_B_3) {
  1219   000A76  0E03               	movlw	3
  1220   000A78  1836               	xorwf	smLoop@evento^0,w,c
  1221   000A7A  A4D8               	btfss	status,2,c
  1222   000A7C  EF42  F005         	goto	u3351
  1223   000A80  EF44  F005         	goto	u3350
  1224   000A84                     u3351:
  1225   000A84  EF47  F005         	goto	l3754
  1226   000A88                     u3350:
  1227   000A88                     
  1228                           ;stateMachine.c: 91:                 setState(STATE_TEMPO);
  1229   000A88  0E02               	movlw	2
  1230   000A8A  EC57  F014         	call	_setState
  1231   000A8E                     l3754:
  1232                           
  1233                           ;stateMachine.c: 94:             if (evento == EV_B_4) {
  1234   000A8E  0E04               	movlw	4
  1235   000A90  1836               	xorwf	smLoop@evento^0,w,c
  1236   000A92  A4D8               	btfss	status,2,c
  1237   000A94  EF4E  F005         	goto	u3361
  1238   000A98  EF50  F005         	goto	u3360
  1239   000A9C                     u3361:
  1240   000A9C  EF55  F005         	goto	l3760
  1241   000AA0                     u3360:
  1242   000AA0                     
  1243                           ;stateMachine.c: 95:                 setState(STATE_MAIN);
  1244   000AA0  0E05               	movlw	5
  1245   000AA2  EC57  F014         	call	_setState
  1246   000AA6                     
  1247                           ;stateMachine.c: 96:                 estado_ant = STATE_IDIOMA;
  1248   000AA6  0E04               	movlw	4
  1249   000AA8  6E4C               	movwf	_estado_ant^0,c
  1250   000AAA                     l3760:
  1251                           
  1252                           ;stateMachine.c: 99:             if (evento == EV_B_0) {
  1253   000AAA  5036               	movf	smLoop@evento^0,w,c
  1254   000AAC  A4D8               	btfss	status,2,c
  1255   000AAE  EF5B  F005         	goto	u3371
  1256   000AB2  EF5D  F005         	goto	u3370
  1257   000AB6                     u3371:
  1258   000AB6  EF63  F005         	goto	l3764
  1259   000ABA                     u3370:
  1260   000ABA                     
  1261                           ;stateMachine.c: 101:                 setLanguage(getLanguage() + 1);
  1262   000ABA  EC7B  F014         	call	_getLanguage	;wreg free
  1263   000ABE  6E28               	movwf	??_smLoop^0,c
  1264   000AC0  2828               	incf	??_smLoop^0,w,c
  1265   000AC2  EC21  F014         	call	_setLanguage
  1266   000AC6                     l3764:
  1267                           
  1268                           ;stateMachine.c: 105:             if (evento == EV_B_1) {
  1269   000AC6  0436               	decf	smLoop@evento^0,w,c
  1270   000AC8  A4D8               	btfss	status,2,c
  1271   000ACA  EF69  F005         	goto	u3381
  1272   000ACE  EF6B  F005         	goto	u3380
  1273   000AD2                     u3381:
  1274   000AD2  EF9A  F006         	goto	l3826
  1275   000AD6                     u3380:
  1276   000AD6                     
  1277                           ;stateMachine.c: 106:                 setLanguage(getLanguage() - 1);
  1278   000AD6  EC7B  F014         	call	_getLanguage	;wreg free
  1279   000ADA  6E28               	movwf	??_smLoop^0,c
  1280   000ADC  0428               	decf	??_smLoop^0,w,c
  1281   000ADE  EC21  F014         	call	_setLanguage
  1282   000AE2  EF9A  F006         	goto	l3826
  1283   000AE6                     l3768:
  1284                           
  1285                           ;stateMachine.c: 114:             if (evento == EV_B_0) {
  1286   000AE6  5036               	movf	smLoop@evento^0,w,c
  1287   000AE8  A4D8               	btfss	status,2,c
  1288   000AEA  EF79  F005         	goto	u3391
  1289   000AEE  EF7B  F005         	goto	u3390
  1290   000AF2                     u3391:
  1291   000AF2  EF96  F005         	goto	l3772
  1292   000AF6                     u3390:
  1293   000AF6                     
  1294                           ;stateMachine.c: 116:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x
      +                          7f)) - 1),0x02));
  1295   000AF6  0E00               	movlw	0
  1296   000AF8  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1297   000AFA  0E02               	movlw	2
  1298   000AFC  6E1D               	movwf	dsWriteData@address^0,c
  1299   000AFE  0E00               	movlw	0
  1300   000B00  6E0F               	movwf	(dsReadData@address+1)^0,c
  1301   000B02  0E02               	movlw	2
  1302   000B04  6E0E               	movwf	dsReadData@address^0,c
  1303   000B06  EC08  F012         	call	_dsReadData	;wreg free
  1304   000B0A  0E7F               	movlw	127
  1305   000B0C  140E               	andwf	?_dsReadData^0,w,c
  1306   000B0E  6E13               	movwf	bcd2dec@value^0,c
  1307   000B10  6A14               	clrf	(bcd2dec@value+1)^0,c
  1308   000B12  EC4E  F012         	call	_bcd2dec	;wreg free
  1309   000B16  0EFF               	movlw	255
  1310   000B18  2413               	addwf	?_bcd2dec^0,w,c
  1311   000B1A  6E17               	movwf	dec2bcd@value^0,c
  1312   000B1C  0EFF               	movlw	255
  1313   000B1E  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1314   000B20  6E18               	movwf	(dec2bcd@value+1)^0,c
  1315   000B22  EC08  F011         	call	_dec2bcd	;wreg free
  1316   000B26  5017               	movf	?_dec2bcd^0,w,c
  1317   000B28  EC0B  F013         	call	_dsWriteData
  1318   000B2C                     l3772:
  1319                           
  1320                           ;stateMachine.c: 118:             if (evento == EV_B_1) {
  1321   000B2C  0436               	decf	smLoop@evento^0,w,c
  1322   000B2E  A4D8               	btfss	status,2,c
  1323   000B30  EF9C  F005         	goto	u3401
  1324   000B34  EF9E  F005         	goto	u3400
  1325   000B38                     u3401:
  1326   000B38  EFB9  F005         	goto	l3776
  1327   000B3C                     u3400:
  1328   000B3C                     
  1329                           ;stateMachine.c: 119:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x
      +                          7f)) + 1),0x02));
  1330   000B3C  0E00               	movlw	0
  1331   000B3E  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1332   000B40  0E02               	movlw	2
  1333   000B42  6E1D               	movwf	dsWriteData@address^0,c
  1334   000B44  0E00               	movlw	0
  1335   000B46  6E0F               	movwf	(dsReadData@address+1)^0,c
  1336   000B48  0E02               	movlw	2
  1337   000B4A  6E0E               	movwf	dsReadData@address^0,c
  1338   000B4C  EC08  F012         	call	_dsReadData	;wreg free
  1339   000B50  0E7F               	movlw	127
  1340   000B52  140E               	andwf	?_dsReadData^0,w,c
  1341   000B54  6E13               	movwf	bcd2dec@value^0,c
  1342   000B56  6A14               	clrf	(bcd2dec@value+1)^0,c
  1343   000B58  EC4E  F012         	call	_bcd2dec	;wreg free
  1344   000B5C  0E01               	movlw	1
  1345   000B5E  2413               	addwf	?_bcd2dec^0,w,c
  1346   000B60  6E17               	movwf	dec2bcd@value^0,c
  1347   000B62  0E00               	movlw	0
  1348   000B64  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1349   000B66  6E18               	movwf	(dec2bcd@value+1)^0,c
  1350   000B68  EC08  F011         	call	_dec2bcd	;wreg free
  1351   000B6C  5017               	movf	?_dec2bcd^0,w,c
  1352   000B6E  EC0B  F013         	call	_dsWriteData
  1353   000B72                     l3776:
  1354                           
  1355                           ;stateMachine.c: 121:             if (evento == EV_B_2) {
  1356   000B72  0E02               	movlw	2
  1357   000B74  1836               	xorwf	smLoop@evento^0,w,c
  1358   000B76  A4D8               	btfss	status,2,c
  1359   000B78  EFC0  F005         	goto	u3411
  1360   000B7C  EFC2  F005         	goto	u3410
  1361   000B80                     u3411:
  1362   000B80  EFC5  F005         	goto	l3780
  1363   000B84                     u3410:
  1364   000B84                     
  1365                           ;stateMachine.c: 122:                 setState(STATE_IDIOMA);
  1366   000B84  0E04               	movlw	4
  1367   000B86  EC57  F014         	call	_setState
  1368   000B8A                     l3780:
  1369                           
  1370                           ;stateMachine.c: 125:             if (evento == EV_B_3) {
  1371   000B8A  0E03               	movlw	3
  1372   000B8C  1836               	xorwf	smLoop@evento^0,w,c
  1373   000B8E  A4D8               	btfss	status,2,c
  1374   000B90  EFCC  F005         	goto	u3421
  1375   000B94  EFCE  F005         	goto	u3420
  1376   000B98                     u3421:
  1377   000B98  EFD1  F005         	goto	l3784
  1378   000B9C                     u3420:
  1379   000B9C                     
  1380                           ;stateMachine.c: 126:                 setState(STATE_TEMPOM);
  1381   000B9C  0E03               	movlw	3
  1382   000B9E  EC57  F014         	call	_setState
  1383   000BA2                     l3784:
  1384                           
  1385                           ;stateMachine.c: 129:             if (evento == EV_B_4) {
  1386   000BA2  0E04               	movlw	4
  1387   000BA4  1836               	xorwf	smLoop@evento^0,w,c
  1388   000BA6  A4D8               	btfss	status,2,c
  1389   000BA8  EFD8  F005         	goto	u3431
  1390   000BAC  EFDA  F005         	goto	u3430
  1391   000BB0                     u3431:
  1392   000BB0  EF9A  F006         	goto	l3826
  1393   000BB4                     u3430:
  1394   000BB4                     
  1395                           ;stateMachine.c: 130:                 setState(STATE_MAIN);
  1396   000BB4  0E05               	movlw	5
  1397   000BB6  EC57  F014         	call	_setState
  1398   000BBA                     l3788:
  1399                           
  1400                           ;stateMachine.c: 131:                 estado_ant = STATE_TEMPO;
  1401   000BBA  0E02               	movlw	2
  1402   000BBC  6E4C               	movwf	_estado_ant^0,c
  1403   000BBE  EF9A  F006         	goto	l3826
  1404   000BC2                     l3790:
  1405                           
  1406                           ;stateMachine.c: 139:             if (evento == EV_B_0) {
  1407   000BC2  5036               	movf	smLoop@evento^0,w,c
  1408   000BC4  A4D8               	btfss	status,2,c
  1409   000BC6  EFE7  F005         	goto	u3441
  1410   000BCA  EFE9  F005         	goto	u3440
  1411   000BCE                     u3441:
  1412   000BCE  EF04  F006         	goto	l3794
  1413   000BD2                     u3440:
  1414   000BD2                     
  1415                           ;stateMachine.c: 141:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) - 1),0x01));
  1416   000BD2  0E00               	movlw	0
  1417   000BD4  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1418   000BD6  0E01               	movlw	1
  1419   000BD8  6E1D               	movwf	dsWriteData@address^0,c
  1420   000BDA  0E00               	movlw	0
  1421   000BDC  6E0F               	movwf	(dsReadData@address+1)^0,c
  1422   000BDE  0E01               	movlw	1
  1423   000BE0  6E0E               	movwf	dsReadData@address^0,c
  1424   000BE2  EC08  F012         	call	_dsReadData	;wreg free
  1425   000BE6  0E7F               	movlw	127
  1426   000BE8  140E               	andwf	?_dsReadData^0,w,c
  1427   000BEA  6E13               	movwf	bcd2dec@value^0,c
  1428   000BEC  6A14               	clrf	(bcd2dec@value+1)^0,c
  1429   000BEE  EC4E  F012         	call	_bcd2dec	;wreg free
  1430   000BF2  0EFF               	movlw	255
  1431   000BF4  2413               	addwf	?_bcd2dec^0,w,c
  1432   000BF6  6E17               	movwf	dec2bcd@value^0,c
  1433   000BF8  0EFF               	movlw	255
  1434   000BFA  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1435   000BFC  6E18               	movwf	(dec2bcd@value+1)^0,c
  1436   000BFE  EC08  F011         	call	_dec2bcd	;wreg free
  1437   000C02  5017               	movf	?_dec2bcd^0,w,c
  1438   000C04  EC0B  F013         	call	_dsWriteData
  1439   000C08                     l3794:
  1440                           
  1441                           ;stateMachine.c: 143:             if (evento == EV_B_1) {
  1442   000C08  0436               	decf	smLoop@evento^0,w,c
  1443   000C0A  A4D8               	btfss	status,2,c
  1444   000C0C  EF0A  F006         	goto	u3451
  1445   000C10  EF0C  F006         	goto	u3450
  1446   000C14                     u3451:
  1447   000C14  EF27  F006         	goto	l3798
  1448   000C18                     u3450:
  1449   000C18                     
  1450                           ;stateMachine.c: 144:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) + 1),0x01));
  1451   000C18  0E00               	movlw	0
  1452   000C1A  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1453   000C1C  0E01               	movlw	1
  1454   000C1E  6E1D               	movwf	dsWriteData@address^0,c
  1455   000C20  0E00               	movlw	0
  1456   000C22  6E0F               	movwf	(dsReadData@address+1)^0,c
  1457   000C24  0E01               	movlw	1
  1458   000C26  6E0E               	movwf	dsReadData@address^0,c
  1459   000C28  EC08  F012         	call	_dsReadData	;wreg free
  1460   000C2C  0E7F               	movlw	127
  1461   000C2E  140E               	andwf	?_dsReadData^0,w,c
  1462   000C30  6E13               	movwf	bcd2dec@value^0,c
  1463   000C32  6A14               	clrf	(bcd2dec@value+1)^0,c
  1464   000C34  EC4E  F012         	call	_bcd2dec	;wreg free
  1465   000C38  0E01               	movlw	1
  1466   000C3A  2413               	addwf	?_bcd2dec^0,w,c
  1467   000C3C  6E17               	movwf	dec2bcd@value^0,c
  1468   000C3E  0E00               	movlw	0
  1469   000C40  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1470   000C42  6E18               	movwf	(dec2bcd@value+1)^0,c
  1471   000C44  EC08  F011         	call	_dec2bcd	;wreg free
  1472   000C48  5017               	movf	?_dec2bcd^0,w,c
  1473   000C4A  EC0B  F013         	call	_dsWriteData
  1474   000C4E                     l3798:
  1475                           
  1476                           ;stateMachine.c: 146:             if (evento == EV_B_2) {
  1477   000C4E  0E02               	movlw	2
  1478   000C50  1836               	xorwf	smLoop@evento^0,w,c
  1479   000C52  A4D8               	btfss	status,2,c
  1480   000C54  EF2E  F006         	goto	u3461
  1481   000C58  EF30  F006         	goto	u3460
  1482   000C5C                     u3461:
  1483   000C5C  EF33  F006         	goto	l3802
  1484   000C60                     u3460:
  1485   000C60                     
  1486                           ;stateMachine.c: 147:                 setState(STATE_TEMPO);
  1487   000C60  0E02               	movlw	2
  1488   000C62  EC57  F014         	call	_setState
  1489   000C66                     l3802:
  1490                           
  1491                           ;stateMachine.c: 150:             if (evento == EV_B_3) {
  1492   000C66  0E03               	movlw	3
  1493   000C68  1836               	xorwf	smLoop@evento^0,w,c
  1494   000C6A  A4D8               	btfss	status,2,c
  1495   000C6C  EF3A  F006         	goto	u3471
  1496   000C70  EF3C  F006         	goto	u3470
  1497   000C74                     u3471:
  1498   000C74  EF3F  F006         	goto	l3806
  1499   000C78                     u3470:
  1500   000C78                     
  1501                           ;stateMachine.c: 151:                 setState(STATE_ALARMEL);
  1502   000C78  0E00               	movlw	0
  1503   000C7A  EC57  F014         	call	_setState
  1504   000C7E                     l3806:
  1505                           
  1506                           ;stateMachine.c: 154:             if (evento == EV_B_4) {
  1507   000C7E  0E04               	movlw	4
  1508   000C80  1836               	xorwf	smLoop@evento^0,w,c
  1509   000C82  A4D8               	btfss	status,2,c
  1510   000C84  EF46  F006         	goto	u3481
  1511   000C88  EF48  F006         	goto	u3480
  1512   000C8C                     u3481:
  1513   000C8C  EF9A  F006         	goto	l3826
  1514   000C90                     u3480:
  1515   000C90                     
  1516                           ;stateMachine.c: 155:                 setState(STATE_MAIN);
  1517   000C90  0E05               	movlw	5
  1518   000C92  EC57  F014         	call	_setState
  1519   000C96  EFDD  F005         	goto	l3788
  1520   000C9A                     l3812:
  1521                           
  1522                           ;stateMachine.c: 162:             if (evento == EV_B_4)
  1523   000C9A  0E04               	movlw	4
  1524   000C9C  1836               	xorwf	smLoop@evento^0,w,c
  1525   000C9E  A4D8               	btfss	status,2,c
  1526   000CA0  EF54  F006         	goto	u3491
  1527   000CA4  EF56  F006         	goto	u3490
  1528   000CA8                     u3491:
  1529   000CA8  EF59  F006         	goto	l3816
  1530   000CAC                     u3490:
  1531   000CAC                     
  1532                           ;stateMachine.c: 163:                 setState(estado_ant);
  1533   000CAC  504C               	movf	_estado_ant^0,w,c
  1534   000CAE  EC57  F014         	call	_setState
  1535   000CB2                     l3816:
  1536                           
  1537                           ;stateMachine.c: 165:             if (evento == EV_B_0)
  1538   000CB2  5036               	movf	smLoop@evento^0,w,c
  1539   000CB4  A4D8               	btfss	status,2,c
  1540   000CB6  EF5F  F006         	goto	u3501
  1541   000CBA  EF61  F006         	goto	u3500
  1542   000CBE                     u3501:
  1543   000CBE  EF9A  F006         	goto	l3826
  1544   000CC2                     u3500:
  1545   000CC2                     
  1546                           ;stateMachine.c: 166:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) + 1),0x01));
  1547   000CC2  0E00               	movlw	0
  1548   000CC4  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1549   000CC6  0E01               	movlw	1
  1550   000CC8  6E1D               	movwf	dsWriteData@address^0,c
  1551   000CCA  0E00               	movlw	0
  1552   000CCC  6E0F               	movwf	(dsReadData@address+1)^0,c
  1553   000CCE  0E01               	movlw	1
  1554   000CD0  6E0E               	movwf	dsReadData@address^0,c
  1555   000CD2  EC08  F012         	call	_dsReadData	;wreg free
  1556   000CD6  0E7F               	movlw	127
  1557   000CD8  140E               	andwf	?_dsReadData^0,w,c
  1558   000CDA  6E13               	movwf	bcd2dec@value^0,c
  1559   000CDC  6A14               	clrf	(bcd2dec@value+1)^0,c
  1560   000CDE  EC4E  F012         	call	_bcd2dec	;wreg free
  1561   000CE2  0E01               	movlw	1
  1562   000CE4  2413               	addwf	?_bcd2dec^0,w,c
  1563   000CE6  6E17               	movwf	dec2bcd@value^0,c
  1564   000CE8  0E00               	movlw	0
  1565   000CEA  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1566   000CEC  6E18               	movwf	(dec2bcd@value+1)^0,c
  1567   000CEE  EC08  F011         	call	_dec2bcd	;wreg free
  1568   000CF2  5017               	movf	?_dec2bcd^0,w,c
  1569   000CF4  EC0B  F013         	call	_dsWriteData
  1570   000CF8  EF9A  F006         	goto	l3826
  1571   000CFC                     l3824:
  1572   000CFC  EC75  F014         	call	_getState	;wreg free
  1573                           
  1574                           ; Switch size 1, requested type "simple"
  1575                           ; Number of cases is 6, Range of values is 0 to 5
  1576                           ; switch strategies available:
  1577                           ; Name         Instructions Cycles
  1578                           ; simple_byte           19    10 (average)
  1579                           ;	Chosen strategy is simple_byte
  1580   000D00  0A00               	xorlw	0	; case 0
  1581   000D02  B4D8               	btfsc	status,2,c
  1582   000D04  EF7F  F004         	goto	l3702
  1583   000D08  0A01               	xorlw	1	; case 1
  1584   000D0A  B4D8               	btfsc	status,2,c
  1585   000D0C  EFD7  F004         	goto	l3724
  1586   000D10  0A03               	xorlw	3	; case 2
  1587   000D12  B4D8               	btfsc	status,2,c
  1588   000D14  EF73  F005         	goto	l3768
  1589   000D18  0A01               	xorlw	1	; case 3
  1590   000D1A  B4D8               	btfsc	status,2,c
  1591   000D1C  EFE1  F005         	goto	l3790
  1592   000D20  0A07               	xorlw	7	; case 4
  1593   000D22  B4D8               	btfsc	status,2,c
  1594   000D24  EF2F  F005         	goto	l3746
  1595   000D28  0A01               	xorlw	1	; case 5
  1596   000D2A  B4D8               	btfsc	status,2,c
  1597   000D2C  EF4D  F006         	goto	l3812
  1598   000D30  EF9A  F006         	goto	l3826
  1599   000D34                     l3826:
  1600                           
  1601                           ;stateMachine.c: 174:     if (evento == EV_PROT_SERIAL) {
  1602   000D34  0E05               	movlw	5
  1603   000D36  1836               	xorwf	smLoop@evento^0,w,c
  1604   000D38  A4D8               	btfss	status,2,c
  1605   000D3A  EFA1  F006         	goto	u3511
  1606   000D3E  EFA3  F006         	goto	u3510
  1607   000D42                     u3511:
  1608   000D42  EFF2  F007         	goto	l3870
  1609   000D46                     u3510:
  1610   000D46                     
  1611                           ;stateMachine.c: 175:         unsigned char* prot;;stateMachine.c: 176:         prot = g
      +                          etProt();
  1612   000D46  EC79  F014         	call	_getProt	;wreg free
  1613   000D4A  6E35               	movwf	smLoop@prot^0,c
  1614                           
  1615                           ;stateMachine.c: 178:         switch (prot[1]) {
  1616   000D4C  EFD8  F007         	goto	l3866
  1617   000D50                     l3830:
  1618                           
  1619                           ;stateMachine.c: 182:                     {;stateMachine.c: 183:                        
      +                           int l = (prot[3] - '0') * 100;
  1620   000D50  5035               	movf	smLoop@prot^0,w,c
  1621   000D52  6ED9               	movwf	fsr2l,c
  1622   000D54  6ADA               	clrf	fsr2h,c
  1623   000D56  0E03               	movlw	3
  1624   000D58  26D9               	addwf	fsr2l,f,c
  1625   000D5A  50DF               	movf	indf2,w,c
  1626   000D5C  6E28               	movwf	??_smLoop^0,c
  1627   000D5E  0ED0               	movlw	208
  1628   000D60  2428               	addwf	??_smLoop^0,w,c
  1629   000D62  6E09               	movwf	___wmul@multiplier^0,c
  1630   000D64  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1631   000D66  0EFF               	movlw	255
  1632   000D68  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1633   000D6A  0E00               	movlw	0
  1634   000D6C  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1635   000D6E  0E64               	movlw	100
  1636   000D70  6E0B               	movwf	___wmul@multiplicand^0,c
  1637   000D72  ECCF  F013         	call	___wmul	;wreg free
  1638   000D76  C009  F02D         	movff	?___wmul,smLoop@l
  1639   000D7A  C00A  F02E         	movff	?___wmul+1,smLoop@l+1
  1640                           
  1641                           ;stateMachine.c: 184:                         l += (prot[4] - '0') * 10;
  1642   000D7E  5035               	movf	smLoop@prot^0,w,c
  1643   000D80  6ED9               	movwf	fsr2l,c
  1644   000D82  6ADA               	clrf	fsr2h,c
  1645   000D84  0E04               	movlw	4
  1646   000D86  26D9               	addwf	fsr2l,f,c
  1647   000D88  50DF               	movf	indf2,w,c
  1648   000D8A  6E28               	movwf	??_smLoop^0,c
  1649   000D8C  0ED0               	movlw	208
  1650   000D8E  2428               	addwf	??_smLoop^0,w,c
  1651   000D90  6E09               	movwf	___wmul@multiplier^0,c
  1652   000D92  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1653   000D94  0EFF               	movlw	255
  1654   000D96  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1655   000D98  0E00               	movlw	0
  1656   000D9A  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1657   000D9C  0E0A               	movlw	10
  1658   000D9E  6E0B               	movwf	___wmul@multiplicand^0,c
  1659   000DA0  ECCF  F013         	call	___wmul	;wreg free
  1660   000DA4  5009               	movf	?___wmul^0,w,c
  1661   000DA6  262D               	addwf	smLoop@l^0,f,c
  1662   000DA8  500A               	movf	(?___wmul+1)^0,w,c
  1663   000DAA  222E               	addwfc	(smLoop@l+1)^0,f,c
  1664   000DAC                     
  1665                           ;stateMachine.c: 185:                         l += (prot[5] - '0') * 1;
  1666   000DAC  5035               	movf	smLoop@prot^0,w,c
  1667   000DAE  6ED9               	movwf	fsr2l,c
  1668   000DB0  6ADA               	clrf	fsr2h,c
  1669   000DB2  0E05               	movlw	5
  1670   000DB4  26D9               	addwf	fsr2l,f,c
  1671   000DB6  50DF               	movf	indf2,w,c
  1672   000DB8  6E28               	movwf	??_smLoop^0,c
  1673   000DBA  0ED0               	movlw	208
  1674   000DBC  2428               	addwf	??_smLoop^0,w,c
  1675   000DBE  6E29               	movwf	(??_smLoop+1)^0,c
  1676   000DC0  6A2A               	clrf	(??_smLoop+2)^0,c
  1677   000DC2  0EFF               	movlw	255
  1678   000DC4  222A               	addwfc	(??_smLoop+2)^0,f,c
  1679   000DC6  5029               	movf	(??_smLoop+1)^0,w,c
  1680   000DC8  262D               	addwf	smLoop@l^0,f,c
  1681   000DCA  502A               	movf	(??_smLoop+2)^0,w,c
  1682   000DCC  222E               	addwfc	(smLoop@l+1)^0,f,c
  1683   000DCE                     
  1684                           ;stateMachine.c: 186:                         setAlarmLevel(l, 0);
  1685   000DCE  C02D  F020         	movff	smLoop@l,setAlarmLevel@newAlarmLevel
  1686   000DD2  C02E  F021         	movff	smLoop@l+1,setAlarmLevel@newAlarmLevel+1
  1687   000DD6  0E00               	movlw	0
  1688   000DD8  6E22               	movwf	setAlarmLevel@lh^0,c
  1689   000DDA  ECBF  F011         	call	_setAlarmLevel	;wreg free
  1690   000DDE                     l3836:
  1691                           
  1692                           ;stateMachine.c: 189:                     {;stateMachine.c: 190:                        
      +                           int h = (prot[3] - '0') * 100;
  1693   000DDE  5035               	movf	smLoop@prot^0,w,c
  1694   000DE0  6ED9               	movwf	fsr2l,c
  1695   000DE2  6ADA               	clrf	fsr2h,c
  1696   000DE4  0E03               	movlw	3
  1697   000DE6  26D9               	addwf	fsr2l,f,c
  1698   000DE8  50DF               	movf	indf2,w,c
  1699   000DEA  6E28               	movwf	??_smLoop^0,c
  1700   000DEC  0ED0               	movlw	208
  1701   000DEE  2428               	addwf	??_smLoop^0,w,c
  1702   000DF0  6E09               	movwf	___wmul@multiplier^0,c
  1703   000DF2  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1704   000DF4  0EFF               	movlw	255
  1705   000DF6  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1706   000DF8  0E00               	movlw	0
  1707   000DFA  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1708   000DFC  0E64               	movlw	100
  1709   000DFE  6E0B               	movwf	___wmul@multiplicand^0,c
  1710   000E00  ECCF  F013         	call	___wmul	;wreg free
  1711   000E04  C009  F02F         	movff	?___wmul,smLoop@h
  1712   000E08  C00A  F030         	movff	?___wmul+1,smLoop@h+1
  1713   000E0C                     
  1714                           ;stateMachine.c: 191:                         h += (prot[4] - '0') * 10;
  1715   000E0C  5035               	movf	smLoop@prot^0,w,c
  1716   000E0E  6ED9               	movwf	fsr2l,c
  1717   000E10  6ADA               	clrf	fsr2h,c
  1718   000E12  0E04               	movlw	4
  1719   000E14  26D9               	addwf	fsr2l,f,c
  1720   000E16  50DF               	movf	indf2,w,c
  1721   000E18  6E28               	movwf	??_smLoop^0,c
  1722   000E1A  0ED0               	movlw	208
  1723   000E1C  2428               	addwf	??_smLoop^0,w,c
  1724   000E1E  6E09               	movwf	___wmul@multiplier^0,c
  1725   000E20  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1726   000E22  0EFF               	movlw	255
  1727   000E24  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1728   000E26  0E00               	movlw	0
  1729   000E28  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1730   000E2A  0E0A               	movlw	10
  1731   000E2C  6E0B               	movwf	___wmul@multiplicand^0,c
  1732   000E2E  ECCF  F013         	call	___wmul	;wreg free
  1733   000E32  5009               	movf	?___wmul^0,w,c
  1734   000E34  262F               	addwf	smLoop@h^0,f,c
  1735   000E36  500A               	movf	(?___wmul+1)^0,w,c
  1736   000E38  2230               	addwfc	(smLoop@h+1)^0,f,c
  1737   000E3A                     
  1738                           ;stateMachine.c: 192:                         h += (prot[5] - '0') * 1;
  1739   000E3A  5035               	movf	smLoop@prot^0,w,c
  1740   000E3C  6ED9               	movwf	fsr2l,c
  1741   000E3E  6ADA               	clrf	fsr2h,c
  1742   000E40  0E05               	movlw	5
  1743   000E42  26D9               	addwf	fsr2l,f,c
  1744   000E44  50DF               	movf	indf2,w,c
  1745   000E46  6E28               	movwf	??_smLoop^0,c
  1746   000E48  0ED0               	movlw	208
  1747   000E4A  2428               	addwf	??_smLoop^0,w,c
  1748   000E4C  6E29               	movwf	(??_smLoop+1)^0,c
  1749   000E4E  6A2A               	clrf	(??_smLoop+2)^0,c
  1750   000E50  0EFF               	movlw	255
  1751   000E52  222A               	addwfc	(??_smLoop+2)^0,f,c
  1752   000E54  5029               	movf	(??_smLoop+1)^0,w,c
  1753   000E56  262F               	addwf	smLoop@h^0,f,c
  1754   000E58  502A               	movf	(??_smLoop+2)^0,w,c
  1755   000E5A  2230               	addwfc	(smLoop@h+1)^0,f,c
  1756   000E5C                     
  1757                           ;stateMachine.c: 193:                         setAlarmLevel(h, 1);
  1758   000E5C  C02F  F020         	movff	smLoop@h,setAlarmLevel@newAlarmLevel
  1759   000E60  C030  F021         	movff	smLoop@h+1,setAlarmLevel@newAlarmLevel+1
  1760   000E64  0E01               	movlw	1
  1761   000E66  6E22               	movwf	setAlarmLevel@lh^0,c
  1762   000E68  ECBF  F011         	call	_setAlarmLevel	;wreg free
  1763                           
  1764                           ;stateMachine.c: 194:                     };stateMachine.c: 195:                        
      +                           break;
  1765   000E6C  EF50  F007         	goto	l3848
  1766   000E70                     l3846:
  1767   000E70  5035               	movf	smLoop@prot^0,w,c
  1768   000E72  6ED9               	movwf	fsr2l,c
  1769   000E74  6ADA               	clrf	fsr2h,c
  1770   000E76  0E02               	movlw	2
  1771   000E78  26D9               	addwf	fsr2l,f,c
  1772   000E7A  50DF               	movf	indf2,w,c
  1773                           
  1774                           ; Switch size 1, requested type "simple"
  1775                           ; Number of cases is 4, Range of values is 72 to 108
  1776                           ; switch strategies available:
  1777                           ; Name         Instructions Cycles
  1778                           ; simple_byte           13     7 (average)
  1779                           ;	Chosen strategy is simple_byte
  1780   000E7C  0A48               	xorlw	72	; case 72
  1781   000E7E  B4D8               	btfsc	status,2,c
  1782   000E80  EFEF  F006         	goto	l3836
  1783   000E84  0A04               	xorlw	4	; case 76
  1784   000E86  B4D8               	btfsc	status,2,c
  1785   000E88  EFA8  F006         	goto	l3830
  1786   000E8C  0A24               	xorlw	36	; case 104
  1787   000E8E  B4D8               	btfsc	status,2,c
  1788   000E90  EFEF  F006         	goto	l3836
  1789   000E94  0A04               	xorlw	4	; case 108
  1790   000E96  B4D8               	btfsc	status,2,c
  1791   000E98  EFA8  F006         	goto	l3830
  1792   000E9C  EF50  F007         	goto	l3848
  1793   000EA0                     l3848:
  1794                           
  1795                           ;stateMachine.c: 198:             {;stateMachine.c: 199:                 int h = (prot[2
      +                          ] - '0') * 10;
  1796   000EA0  5035               	movf	smLoop@prot^0,w,c
  1797   000EA2  6ED9               	movwf	fsr2l,c
  1798   000EA4  6ADA               	clrf	fsr2h,c
  1799   000EA6  0E02               	movlw	2
  1800   000EA8  26D9               	addwf	fsr2l,f,c
  1801   000EAA  50DF               	movf	indf2,w,c
  1802   000EAC  6E28               	movwf	??_smLoop^0,c
  1803   000EAE  0ED0               	movlw	208
  1804   000EB0  2428               	addwf	??_smLoop^0,w,c
  1805   000EB2  6E09               	movwf	___wmul@multiplier^0,c
  1806   000EB4  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1807   000EB6  0EFF               	movlw	255
  1808   000EB8  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1809   000EBA  0E00               	movlw	0
  1810   000EBC  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1811   000EBE  0E0A               	movlw	10
  1812   000EC0  6E0B               	movwf	___wmul@multiplicand^0,c
  1813   000EC2  ECCF  F013         	call	___wmul	;wreg free
  1814   000EC6  C009  F031         	movff	?___wmul,smLoop@h_500
  1815   000ECA  C00A  F032         	movff	?___wmul+1,smLoop@h_500+1
  1816   000ECE                     
  1817                           ;stateMachine.c: 200:                 h += (prot[3] - '0') * 1;
  1818   000ECE  5035               	movf	smLoop@prot^0,w,c
  1819   000ED0  6ED9               	movwf	fsr2l,c
  1820   000ED2  6ADA               	clrf	fsr2h,c
  1821   000ED4  0E03               	movlw	3
  1822   000ED6  26D9               	addwf	fsr2l,f,c
  1823   000ED8  50DF               	movf	indf2,w,c
  1824   000EDA  6E28               	movwf	??_smLoop^0,c
  1825   000EDC  0ED0               	movlw	208
  1826   000EDE  2428               	addwf	??_smLoop^0,w,c
  1827   000EE0  6E29               	movwf	(??_smLoop+1)^0,c
  1828   000EE2  6A2A               	clrf	(??_smLoop+2)^0,c
  1829   000EE4  0EFF               	movlw	255
  1830   000EE6  222A               	addwfc	(??_smLoop+2)^0,f,c
  1831   000EE8  5029               	movf	(??_smLoop+1)^0,w,c
  1832   000EEA  2631               	addwf	smLoop@h_500^0,f,c
  1833   000EEC  502A               	movf	(??_smLoop+2)^0,w,c
  1834   000EEE  2232               	addwfc	(smLoop@h_500+1)^0,f,c
  1835   000EF0                     
  1836                           ;stateMachine.c: 202:                 if (h <= 23)
  1837   000EF0  BE32               	btfsc	(smLoop@h_500+1)^0,7,c
  1838   000EF2  EF86  F007         	goto	u3520
  1839   000EF6  5032               	movf	(smLoop@h_500+1)^0,w,c
  1840   000EF8  E107               	bnz	u3521
  1841   000EFA  0E18               	movlw	24
  1842   000EFC  5C31               	subwf	smLoop@h_500^0,w,c
  1843   000EFE  B0D8               	btfsc	status,0,c
  1844   000F00  EF84  F007         	goto	u3521
  1845   000F04  EF86  F007         	goto	u3520
  1846   000F08                     u3521:
  1847   000F08  EF93  F007         	goto	l3856
  1848   000F0C                     u3520:
  1849   000F0C                     
  1850                           ;stateMachine.c: 203:                     (dsWriteData(dec2bcd(h),0x02));
  1851   000F0C  0E00               	movlw	0
  1852   000F0E  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1853   000F10  0E02               	movlw	2
  1854   000F12  6E1D               	movwf	dsWriteData@address^0,c
  1855   000F14  C031  F017         	movff	smLoop@h_500,dec2bcd@value
  1856   000F18  C032  F018         	movff	smLoop@h_500+1,dec2bcd@value+1
  1857   000F1C  EC08  F011         	call	_dec2bcd	;wreg free
  1858   000F20  5017               	movf	?_dec2bcd^0,w,c
  1859   000F22  EC0B  F013         	call	_dsWriteData
  1860   000F26                     l3856:
  1861                           
  1862                           ;stateMachine.c: 205:                 int m = (prot[4] - '0') * 10;
  1863   000F26  5035               	movf	smLoop@prot^0,w,c
  1864   000F28  6ED9               	movwf	fsr2l,c
  1865   000F2A  6ADA               	clrf	fsr2h,c
  1866   000F2C  0E04               	movlw	4
  1867   000F2E  26D9               	addwf	fsr2l,f,c
  1868   000F30  50DF               	movf	indf2,w,c
  1869   000F32  6E28               	movwf	??_smLoop^0,c
  1870   000F34  0ED0               	movlw	208
  1871   000F36  2428               	addwf	??_smLoop^0,w,c
  1872   000F38  6E09               	movwf	___wmul@multiplier^0,c
  1873   000F3A  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  1874   000F3C  0EFF               	movlw	255
  1875   000F3E  220A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1876   000F40  0E00               	movlw	0
  1877   000F42  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  1878   000F44  0E0A               	movlw	10
  1879   000F46  6E0B               	movwf	___wmul@multiplicand^0,c
  1880   000F48  ECCF  F013         	call	___wmul	;wreg free
  1881   000F4C  C009  F033         	movff	?___wmul,smLoop@m
  1882   000F50  C00A  F034         	movff	?___wmul+1,smLoop@m+1
  1883   000F54                     
  1884                           ;stateMachine.c: 206:                 m += (prot[5] - '0') * 1;
  1885   000F54  5035               	movf	smLoop@prot^0,w,c
  1886   000F56  6ED9               	movwf	fsr2l,c
  1887   000F58  6ADA               	clrf	fsr2h,c
  1888   000F5A  0E05               	movlw	5
  1889   000F5C  26D9               	addwf	fsr2l,f,c
  1890   000F5E  50DF               	movf	indf2,w,c
  1891   000F60  6E28               	movwf	??_smLoop^0,c
  1892   000F62  0ED0               	movlw	208
  1893   000F64  2428               	addwf	??_smLoop^0,w,c
  1894   000F66  6E29               	movwf	(??_smLoop+1)^0,c
  1895   000F68  6A2A               	clrf	(??_smLoop+2)^0,c
  1896   000F6A  0EFF               	movlw	255
  1897   000F6C  222A               	addwfc	(??_smLoop+2)^0,f,c
  1898   000F6E  5029               	movf	(??_smLoop+1)^0,w,c
  1899   000F70  2633               	addwf	smLoop@m^0,f,c
  1900   000F72  502A               	movf	(??_smLoop+2)^0,w,c
  1901   000F74  2234               	addwfc	(smLoop@m+1)^0,f,c
  1902   000F76                     
  1903                           ;stateMachine.c: 208:                 if (m <= 59)
  1904   000F76  BE34               	btfsc	(smLoop@m+1)^0,7,c
  1905   000F78  EFC9  F007         	goto	u3530
  1906   000F7C  5034               	movf	(smLoop@m+1)^0,w,c
  1907   000F7E  E107               	bnz	u3531
  1908   000F80  0E3C               	movlw	60
  1909   000F82  5C33               	subwf	smLoop@m^0,w,c
  1910   000F84  B0D8               	btfsc	status,0,c
  1911   000F86  EFC7  F007         	goto	u3531
  1912   000F8A  EFC9  F007         	goto	u3530
  1913   000F8E                     u3531:
  1914   000F8E  EFF0  F007         	goto	l3868
  1915   000F92                     u3530:
  1916   000F92                     
  1917                           ;stateMachine.c: 209:                     (dsWriteData(dec2bcd(m),0x01));
  1918   000F92  0E00               	movlw	0
  1919   000F94  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1920   000F96  0E01               	movlw	1
  1921   000F98  6E1D               	movwf	dsWriteData@address^0,c
  1922   000F9A  C033  F017         	movff	smLoop@m,dec2bcd@value
  1923   000F9E  C034  F018         	movff	smLoop@m+1,dec2bcd@value+1
  1924   000FA2  EC08  F011         	call	_dec2bcd	;wreg free
  1925   000FA6  5017               	movf	?_dec2bcd^0,w,c
  1926   000FA8  EC0B  F013         	call	_dsWriteData
  1927   000FAC  EFF0  F007         	goto	l3868
  1928   000FB0                     l3866:
  1929   000FB0  5035               	movf	smLoop@prot^0,w,c
  1930   000FB2  6ED9               	movwf	fsr2l,c
  1931   000FB4  6ADA               	clrf	fsr2h,c
  1932   000FB6  0E01               	movlw	1
  1933   000FB8  26D9               	addwf	fsr2l,f,c
  1934   000FBA  50DF               	movf	indf2,w,c
  1935                           
  1936                           ; Switch size 1, requested type "simple"
  1937                           ; Number of cases is 4, Range of values is 72 to 116
  1938                           ; switch strategies available:
  1939                           ; Name         Instructions Cycles
  1940                           ; simple_byte           13     7 (average)
  1941                           ;	Chosen strategy is simple_byte
  1942   000FBC  0A48               	xorlw	72	; case 72
  1943   000FBE  B4D8               	btfsc	status,2,c
  1944   000FC0  EF50  F007         	goto	l3848
  1945   000FC4  0A1C               	xorlw	28	; case 84
  1946   000FC6  B4D8               	btfsc	status,2,c
  1947   000FC8  EF38  F007         	goto	l3846
  1948   000FCC  0A3C               	xorlw	60	; case 104
  1949   000FCE  B4D8               	btfsc	status,2,c
  1950   000FD0  EF50  F007         	goto	l3848
  1951   000FD4  0A1C               	xorlw	28	; case 116
  1952   000FD6  B4D8               	btfsc	status,2,c
  1953   000FD8  EF38  F007         	goto	l3846
  1954   000FDC  EFF0  F007         	goto	l3868
  1955   000FE0                     l3868:
  1956                           
  1957                           ;stateMachine.c: 215:         resetProt();
  1958   000FE0  ECF4  F012         	call	_resetProt	;wreg free
  1959   000FE4                     l3870:
  1960                           
  1961                           ;stateMachine.c: 220:     outputPrint(getState(), getLanguage());
  1962   000FE4  EC7B  F014         	call	_getLanguage	;wreg free
  1963   000FE8  6E28               	movwf	??_smLoop^0,c
  1964   000FEA  5028               	movf	??_smLoop^0,w,c
  1965   000FEC  6E2B               	movwf	_smLoop$1429^0,c
  1966   000FEE  6A2C               	clrf	(_smLoop$1429+1)^0,c
  1967   000FF0                     
  1968                           ;stateMachine.c: 220:     outputPrint(getState(), getLanguage());
  1969   000FF0  EC75  F014         	call	_getState	;wreg free
  1970   000FF4  6E28               	movwf	??_smLoop^0,c
  1971   000FF6  5028               	movf	??_smLoop^0,w,c
  1972   000FF8  6E21               	movwf	outputPrint@numTela^0,c
  1973   000FFA  6A22               	clrf	(outputPrint@numTela+1)^0,c
  1974   000FFC  C02B  F023         	movff	_smLoop$1429,outputPrint@idioma
  1975   001000  C02C  F024         	movff	_smLoop$1429+1,outputPrint@idioma+1
  1976   001004  EC05  F008         	call	_outputPrint	;wreg free
  1977   001008  0012               	return		;funcret
  1978   00100A                     __end_of_smLoop:
  1979                           	callstack 0
  1980                           
  1981 ;; *************** function _resetProt *****************
  1982 ;; Defined at:
  1983 ;;		line 102 in file "var.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  i               1    0[COMRAM] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1997 ;;      Params:         0       0       0       0       0       0       0       0       0
  1998 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2000 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2001 ;;Total ram usage:        1 bytes
  2002 ;; Hardware stack levels used: 1
  2003 ;; This function calls:
  2004 ;;		Nothing
  2005 ;; This function is called by:
  2006 ;;		_smLoop
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text2
  2011   0025E8                     __ptext2:
  2012                           	callstack 0
  2013   0025E8                     _resetProt:
  2014                           	callstack 29
  2015   0025E8                     
  2016                           ;var.c: 104:     char i = 0;
  2017   0025E8  0E00               	movlw	0
  2018   0025EA  6E01               	movwf	resetProt@i^0,c
  2019                           
  2020                           ;var.c: 105:     while (i < 6)
  2021   0025EC  EFFE  F012         	goto	l3620
  2022   0025F0                     l3616:
  2023                           
  2024                           ;var.c: 106:     {;var.c: 107:         prot[i] = 0;
  2025   0025F0  5001               	movf	resetProt@i^0,w,c
  2026   0025F2  0F71               	addlw	low _prot
  2027   0025F4  6ED9               	movwf	fsr2l,c
  2028   0025F6  6ADA               	clrf	fsr2h,c
  2029   0025F8  6ADF               	clrf	indf2,c
  2030   0025FA                     
  2031                           ;var.c: 108:         i++;
  2032   0025FA  2A01               	incf	resetProt@i^0,f,c
  2033   0025FC                     l3620:
  2034                           
  2035                           ;var.c: 105:     while (i < 6)
  2036   0025FC  0E05               	movlw	5
  2037   0025FE  6401               	cpfsgt	resetProt@i^0,c
  2038   002600  EF04  F013         	goto	u3111
  2039   002604  EF06  F013         	goto	u3110
  2040   002608                     u3111:
  2041   002608  EFF8  F012         	goto	l3616
  2042   00260C                     u3110:
  2043   00260C                     
  2044                           ;var.c: 110:     prot_ready = 0;
  2045   00260C  0E00               	movlw	0
  2046   00260E  6E4D               	movwf	_prot_ready^0,c
  2047                           
  2048                           ;var.c: 111:     index = 0;
  2049   002610  0E00               	movlw	0
  2050   002612  6E47               	movwf	_index^0,c
  2051   002614  0012               	return		;funcret
  2052   002616                     __end_of_resetProt:
  2053                           	callstack 0
  2054                           
  2055 ;; *************** function _outputPrint *****************
  2056 ;; Defined at:
  2057 ;;		line 23 in file "output.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  numTela         2   32[COMRAM] int 
  2060 ;;  idioma          2   34[COMRAM] int 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;		None
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2072 ;;      Params:         4       0       0       0       0       0       0       0       0
  2073 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2075 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2076 ;;Total ram usage:        4 bytes
  2077 ;; Hardware stack levels used: 1
  2078 ;; Hardware stack levels required when called: 5
  2079 ;; This function calls:
  2080 ;;		_bcd2dec
  2081 ;;		_dsReadData
  2082 ;;		_getAlarmLevel
  2083 ;;		_getLanguage
  2084 ;;		_lcdCommand
  2085 ;;		_lcdData
  2086 ;;		_lcdInt
  2087 ;;		_lcdString
  2088 ;; This function is called by:
  2089 ;;		_smLoop
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text3
  2094   00100A                     __ptext3:
  2095                           	callstack 0
  2096   00100A                     _outputPrint:
  2097                           	callstack 24
  2098   00100A                     
  2099                           ;output.c: 25:     if (numTela == STATE_TEMPO) {
  2100   00100A  0E02               	movlw	2
  2101   00100C  1821               	xorwf	outputPrint@numTela^0,w,c
  2102   00100E  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2103   001010  A4D8               	btfss	status,2,c
  2104   001012  EF0D  F008         	goto	u2971
  2105   001016  EF0F  F008         	goto	u2970
  2106   00101A                     u2971:
  2107   00101A  EF69  F008         	goto	l3470
  2108   00101E                     u2970:
  2109   00101E                     
  2110                           ;output.c: 26:         lcdCommand(0x80);
  2111   00101E  0E80               	movlw	128
  2112   001020  ECE4  F011         	call	_lcdCommand
  2113   001024                     
  2114                           ;output.c: 27:         lcdString(msgs[numTela][idioma]);
  2115   001024  5021               	movf	outputPrint@numTela^0,w,c
  2116   001026  0D02               	mullw	2
  2117   001028  50F3               	movf	243,w,c
  2118   00102A  0F60               	addlw	low _msgs
  2119   00102C  2423               	addwf	outputPrint@idioma^0,w,c
  2120   00102E  6ED9               	movwf	fsr2l,c
  2121   001030  6ADA               	clrf	fsr2h,c
  2122   001032  50DF               	movf	indf2,w,c
  2123   001034  6E04               	movwf	lcdString@str^0,c
  2124   001036  ECC1  F012         	call	_lcdString	;wreg free
  2125   00103A                     
  2126                           ;output.c: 28:         lcdCommand(0xC0);
  2127   00103A  0EC0               	movlw	192
  2128   00103C  ECE4  F011         	call	_lcdCommand
  2129   001040                     
  2130                           ;output.c: 30:         lcdData('>');
  2131   001040  0E3E               	movlw	62
  2132   001042  EC05  F014         	call	_lcdData
  2133   001046                     
  2134                           ;output.c: 31:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  2135   001046  0E00               	movlw	0
  2136   001048  6E0F               	movwf	(dsReadData@address+1)^0,c
  2137   00104A  0E02               	movlw	2
  2138   00104C  6E0E               	movwf	dsReadData@address^0,c
  2139   00104E  EC08  F012         	call	_dsReadData	;wreg free
  2140   001052  0E7F               	movlw	127
  2141   001054  140E               	andwf	?_dsReadData^0,w,c
  2142   001056  6E13               	movwf	bcd2dec@value^0,c
  2143   001058  6A14               	clrf	(bcd2dec@value+1)^0,c
  2144   00105A  EC4E  F012         	call	_bcd2dec	;wreg free
  2145   00105E  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2146   001062  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2147   001066  0E02               	movlw	2
  2148   001068  6E19               	movwf	lcdInt@digNum^0,c
  2149   00106A  EC41  F00F         	call	_lcdInt	;wreg free
  2150   00106E                     
  2151                           ;output.c: 32:         lcdData(':');
  2152   00106E  0E3A               	movlw	58
  2153   001070  EC05  F014         	call	_lcdData
  2154   001074                     
  2155                           ;output.c: 33:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  2156   001074  0E00               	movlw	0
  2157   001076  6E0F               	movwf	(dsReadData@address+1)^0,c
  2158   001078  0E01               	movlw	1
  2159   00107A  6E0E               	movwf	dsReadData@address^0,c
  2160   00107C  EC08  F012         	call	_dsReadData	;wreg free
  2161   001080  0E7F               	movlw	127
  2162   001082  140E               	andwf	?_dsReadData^0,w,c
  2163   001084  6E13               	movwf	bcd2dec@value^0,c
  2164   001086  6A14               	clrf	(bcd2dec@value+1)^0,c
  2165   001088  EC4E  F012         	call	_bcd2dec	;wreg free
  2166   00108C  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2167   001090  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2168   001094  0E02               	movlw	2
  2169   001096  6E19               	movwf	lcdInt@digNum^0,c
  2170   001098  EC41  F00F         	call	_lcdInt	;wreg free
  2171   00109C                     
  2172                           ;output.c: 34:         lcdData(':');
  2173   00109C  0E3A               	movlw	58
  2174   00109E  EC05  F014         	call	_lcdData
  2175   0010A2                     
  2176                           ;output.c: 35:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  2177   0010A2  0E00               	movlw	0
  2178   0010A4  6E0F               	movwf	(dsReadData@address+1)^0,c
  2179   0010A6  0E00               	movlw	0
  2180   0010A8  6E0E               	movwf	dsReadData@address^0,c
  2181   0010AA  EC08  F012         	call	_dsReadData	;wreg free
  2182   0010AE  0E7F               	movlw	127
  2183   0010B0  140E               	andwf	?_dsReadData^0,w,c
  2184   0010B2  6E13               	movwf	bcd2dec@value^0,c
  2185   0010B4  6A14               	clrf	(bcd2dec@value+1)^0,c
  2186   0010B6  EC4E  F012         	call	_bcd2dec	;wreg free
  2187   0010BA  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2188   0010BE  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2189   0010C2  0E02               	movlw	2
  2190   0010C4  6E19               	movwf	lcdInt@digNum^0,c
  2191   0010C6  EC41  F00F         	call	_lcdInt	;wreg free
  2192   0010CA                     
  2193                           ;output.c: 36:         lcdString("           ");
  2194   0010CA  0E93               	movlw	low STR_11
  2195   0010CC  6E04               	movwf	lcdString@str^0,c
  2196   0010CE  ECC1  F012         	call	_lcdString	;wreg free
  2197   0010D2                     l3470:
  2198                           
  2199                           ;output.c: 38:     if (numTela == STATE_TEMPOM) {
  2200   0010D2  0E03               	movlw	3
  2201   0010D4  1821               	xorwf	outputPrint@numTela^0,w,c
  2202   0010D6  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2203   0010D8  A4D8               	btfss	status,2,c
  2204   0010DA  EF71  F008         	goto	u2981
  2205   0010DE  EF73  F008         	goto	u2980
  2206   0010E2                     u2981:
  2207   0010E2  EFCD  F008         	goto	l3492
  2208   0010E6                     u2980:
  2209   0010E6                     
  2210                           ;output.c: 39:         lcdCommand(0x80);
  2211   0010E6  0E80               	movlw	128
  2212   0010E8  ECE4  F011         	call	_lcdCommand
  2213   0010EC                     
  2214                           ;output.c: 40:         lcdString(msgs[numTela][idioma]);
  2215   0010EC  5021               	movf	outputPrint@numTela^0,w,c
  2216   0010EE  0D02               	mullw	2
  2217   0010F0  50F3               	movf	243,w,c
  2218   0010F2  0F60               	addlw	low _msgs
  2219   0010F4  2423               	addwf	outputPrint@idioma^0,w,c
  2220   0010F6  6ED9               	movwf	fsr2l,c
  2221   0010F8  6ADA               	clrf	fsr2h,c
  2222   0010FA  50DF               	movf	indf2,w,c
  2223   0010FC  6E04               	movwf	lcdString@str^0,c
  2224   0010FE  ECC1  F012         	call	_lcdString	;wreg free
  2225   001102                     
  2226                           ;output.c: 41:         lcdCommand(0xC0);
  2227   001102  0EC0               	movlw	192
  2228   001104  ECE4  F011         	call	_lcdCommand
  2229   001108                     
  2230                           ;output.c: 43:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  2231   001108  0E00               	movlw	0
  2232   00110A  6E0F               	movwf	(dsReadData@address+1)^0,c
  2233   00110C  0E02               	movlw	2
  2234   00110E  6E0E               	movwf	dsReadData@address^0,c
  2235   001110  EC08  F012         	call	_dsReadData	;wreg free
  2236   001114  0E7F               	movlw	127
  2237   001116  140E               	andwf	?_dsReadData^0,w,c
  2238   001118  6E13               	movwf	bcd2dec@value^0,c
  2239   00111A  6A14               	clrf	(bcd2dec@value+1)^0,c
  2240   00111C  EC4E  F012         	call	_bcd2dec	;wreg free
  2241   001120  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2242   001124  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2243   001128  0E02               	movlw	2
  2244   00112A  6E19               	movwf	lcdInt@digNum^0,c
  2245   00112C  EC41  F00F         	call	_lcdInt	;wreg free
  2246   001130                     
  2247                           ;output.c: 44:         lcdData(':');
  2248   001130  0E3A               	movlw	58
  2249   001132  EC05  F014         	call	_lcdData
  2250   001136                     
  2251                           ;output.c: 45:         lcdData('>');
  2252   001136  0E3E               	movlw	62
  2253   001138  EC05  F014         	call	_lcdData
  2254   00113C                     
  2255                           ;output.c: 46:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  2256   00113C  0E00               	movlw	0
  2257   00113E  6E0F               	movwf	(dsReadData@address+1)^0,c
  2258   001140  0E01               	movlw	1
  2259   001142  6E0E               	movwf	dsReadData@address^0,c
  2260   001144  EC08  F012         	call	_dsReadData	;wreg free
  2261   001148  0E7F               	movlw	127
  2262   00114A  140E               	andwf	?_dsReadData^0,w,c
  2263   00114C  6E13               	movwf	bcd2dec@value^0,c
  2264   00114E  6A14               	clrf	(bcd2dec@value+1)^0,c
  2265   001150  EC4E  F012         	call	_bcd2dec	;wreg free
  2266   001154  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2267   001158  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2268   00115C  0E02               	movlw	2
  2269   00115E  6E19               	movwf	lcdInt@digNum^0,c
  2270   001160  EC41  F00F         	call	_lcdInt	;wreg free
  2271   001164                     
  2272                           ;output.c: 47:         lcdData(':');
  2273   001164  0E3A               	movlw	58
  2274   001166  EC05  F014         	call	_lcdData
  2275   00116A                     
  2276                           ;output.c: 48:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  2277   00116A  0E00               	movlw	0
  2278   00116C  6E0F               	movwf	(dsReadData@address+1)^0,c
  2279   00116E  0E00               	movlw	0
  2280   001170  6E0E               	movwf	dsReadData@address^0,c
  2281   001172  EC08  F012         	call	_dsReadData	;wreg free
  2282   001176  0E7F               	movlw	127
  2283   001178  140E               	andwf	?_dsReadData^0,w,c
  2284   00117A  6E13               	movwf	bcd2dec@value^0,c
  2285   00117C  6A14               	clrf	(bcd2dec@value+1)^0,c
  2286   00117E  EC4E  F012         	call	_bcd2dec	;wreg free
  2287   001182  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2288   001186  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2289   00118A  0E02               	movlw	2
  2290   00118C  6E19               	movwf	lcdInt@digNum^0,c
  2291   00118E  EC41  F00F         	call	_lcdInt	;wreg free
  2292   001192                     
  2293                           ;output.c: 49:         lcdString("           ");
  2294   001192  0E93               	movlw	low STR_11
  2295   001194  6E04               	movwf	lcdString@str^0,c
  2296   001196  ECC1  F012         	call	_lcdString	;wreg free
  2297   00119A                     l3492:
  2298                           
  2299                           ;output.c: 51:     if (numTela == STATE_ALARMEL) {
  2300   00119A  5021               	movf	outputPrint@numTela^0,w,c
  2301   00119C  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2302   00119E  A4D8               	btfss	status,2,c
  2303   0011A0  EFD4  F008         	goto	u2991
  2304   0011A4  EFD6  F008         	goto	u2990
  2305   0011A8                     u2991:
  2306   0011A8  EF17  F009         	goto	l3516
  2307   0011AC                     u2990:
  2308   0011AC                     
  2309                           ;output.c: 52:         lcdCommand(0x80);
  2310   0011AC  0E80               	movlw	128
  2311   0011AE  ECE4  F011         	call	_lcdCommand
  2312   0011B2                     
  2313                           ;output.c: 53:         lcdString(msgs[numTela][idioma]);
  2314   0011B2  5021               	movf	outputPrint@numTela^0,w,c
  2315   0011B4  0D02               	mullw	2
  2316   0011B6  50F3               	movf	243,w,c
  2317   0011B8  0F60               	addlw	low _msgs
  2318   0011BA  2423               	addwf	outputPrint@idioma^0,w,c
  2319   0011BC  6ED9               	movwf	fsr2l,c
  2320   0011BE  6ADA               	clrf	fsr2h,c
  2321   0011C0  50DF               	movf	indf2,w,c
  2322   0011C2  6E04               	movwf	lcdString@str^0,c
  2323   0011C4  ECC1  F012         	call	_lcdString	;wreg free
  2324   0011C8                     
  2325                           ;output.c: 54:         lcdCommand(0xC0);
  2326   0011C8  0EC0               	movlw	192
  2327   0011CA  ECE4  F011         	call	_lcdCommand
  2328   0011CE                     
  2329                           ;output.c: 55:         lcdData('>');
  2330   0011CE  0E3E               	movlw	62
  2331   0011D0  EC05  F014         	call	_lcdData
  2332   0011D4                     
  2333                           ;output.c: 56:         lcdInt(getAlarmLevel(0), 3);
  2334   0011D4  0E00               	movlw	0
  2335   0011D6  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2336   0011D8  0E00               	movlw	0
  2337   0011DA  6E01               	movwf	getAlarmLevel@lh^0,c
  2338   0011DC  EC50  F013         	call	_getAlarmLevel	;wreg free
  2339   0011E0  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  2340   0011E4  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2341   0011E8  0E03               	movlw	3
  2342   0011EA  6E19               	movwf	lcdInt@digNum^0,c
  2343   0011EC  EC41  F00F         	call	_lcdInt	;wreg free
  2344   0011F0                     
  2345                           ;output.c: 57:         lcdData('L');
  2346   0011F0  0E4C               	movlw	76
  2347   0011F2  EC05  F014         	call	_lcdData
  2348   0011F6                     
  2349                           ;output.c: 58:         lcdString("   ");
  2350   0011F6  0E9B               	movlw	low (STR_11+8)
  2351   0011F8  6E04               	movwf	lcdString@str^0,c
  2352   0011FA  ECC1  F012         	call	_lcdString	;wreg free
  2353   0011FE                     
  2354                           ;output.c: 59:         lcdData(' ');
  2355   0011FE  0E20               	movlw	32
  2356   001200  EC05  F014         	call	_lcdData
  2357   001204                     
  2358                           ;output.c: 60:         lcdInt(getAlarmLevel(1), 3);
  2359   001204  0E00               	movlw	0
  2360   001206  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2361   001208  0E01               	movlw	1
  2362   00120A  6E01               	movwf	getAlarmLevel@lh^0,c
  2363   00120C  EC50  F013         	call	_getAlarmLevel	;wreg free
  2364   001210  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  2365   001214  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2366   001218  0E03               	movlw	3
  2367   00121A  6E19               	movwf	lcdInt@digNum^0,c
  2368   00121C  EC41  F00F         	call	_lcdInt	;wreg free
  2369   001220                     
  2370                           ;output.c: 61:         lcdData('H');
  2371   001220  0E48               	movlw	72
  2372   001222  EC05  F014         	call	_lcdData
  2373   001226                     
  2374                           ;output.c: 63:         lcdString("           ");
  2375   001226  0E93               	movlw	low STR_11
  2376   001228  6E04               	movwf	lcdString@str^0,c
  2377   00122A  ECC1  F012         	call	_lcdString	;wreg free
  2378   00122E                     l3516:
  2379                           
  2380                           ;output.c: 65:     if (numTela == STATE_ALARMEH) {
  2381   00122E  0421               	decf	outputPrint@numTela^0,w,c
  2382   001230  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2383   001232  A4D8               	btfss	status,2,c
  2384   001234  EF1E  F009         	goto	u3001
  2385   001238  EF20  F009         	goto	u3000
  2386   00123C                     u3001:
  2387   00123C  EF61  F009         	goto	l3540
  2388   001240                     u3000:
  2389   001240                     
  2390                           ;output.c: 66:         lcdCommand(0x80);
  2391   001240  0E80               	movlw	128
  2392   001242  ECE4  F011         	call	_lcdCommand
  2393   001246                     
  2394                           ;output.c: 67:         lcdString(msgs[numTela][idioma]);
  2395   001246  5021               	movf	outputPrint@numTela^0,w,c
  2396   001248  0D02               	mullw	2
  2397   00124A  50F3               	movf	243,w,c
  2398   00124C  0F60               	addlw	low _msgs
  2399   00124E  2423               	addwf	outputPrint@idioma^0,w,c
  2400   001250  6ED9               	movwf	fsr2l,c
  2401   001252  6ADA               	clrf	fsr2h,c
  2402   001254  50DF               	movf	indf2,w,c
  2403   001256  6E04               	movwf	lcdString@str^0,c
  2404   001258  ECC1  F012         	call	_lcdString	;wreg free
  2405   00125C                     
  2406                           ;output.c: 68:         lcdCommand(0xC0);
  2407   00125C  0EC0               	movlw	192
  2408   00125E  ECE4  F011         	call	_lcdCommand
  2409   001262                     
  2410                           ;output.c: 69:         lcdData(' ');
  2411   001262  0E20               	movlw	32
  2412   001264  EC05  F014         	call	_lcdData
  2413   001268                     
  2414                           ;output.c: 70:         lcdInt(getAlarmLevel(0), 3);
  2415   001268  0E00               	movlw	0
  2416   00126A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2417   00126C  0E00               	movlw	0
  2418   00126E  6E01               	movwf	getAlarmLevel@lh^0,c
  2419   001270  EC50  F013         	call	_getAlarmLevel	;wreg free
  2420   001274  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  2421   001278  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2422   00127C  0E03               	movlw	3
  2423   00127E  6E19               	movwf	lcdInt@digNum^0,c
  2424   001280  EC41  F00F         	call	_lcdInt	;wreg free
  2425   001284                     
  2426                           ;output.c: 71:         lcdData('L');
  2427   001284  0E4C               	movlw	76
  2428   001286  EC05  F014         	call	_lcdData
  2429   00128A                     
  2430                           ;output.c: 72:         lcdString("   ");
  2431   00128A  0E9B               	movlw	low (STR_11+8)
  2432   00128C  6E04               	movwf	lcdString@str^0,c
  2433   00128E  ECC1  F012         	call	_lcdString	;wreg free
  2434   001292                     
  2435                           ;output.c: 73:         lcdData('>');
  2436   001292  0E3E               	movlw	62
  2437   001294  EC05  F014         	call	_lcdData
  2438   001298                     
  2439                           ;output.c: 74:         lcdInt(getAlarmLevel(1), 3);
  2440   001298  0E00               	movlw	0
  2441   00129A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  2442   00129C  0E01               	movlw	1
  2443   00129E  6E01               	movwf	getAlarmLevel@lh^0,c
  2444   0012A0  EC50  F013         	call	_getAlarmLevel	;wreg free
  2445   0012A4  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  2446   0012A8  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2447   0012AC  0E03               	movlw	3
  2448   0012AE  6E19               	movwf	lcdInt@digNum^0,c
  2449   0012B0  EC41  F00F         	call	_lcdInt	;wreg free
  2450   0012B4                     
  2451                           ;output.c: 75:         lcdData('H');
  2452   0012B4  0E48               	movlw	72
  2453   0012B6  EC05  F014         	call	_lcdData
  2454   0012BA                     
  2455                           ;output.c: 76:         lcdString("           ");
  2456   0012BA  0E93               	movlw	low STR_11
  2457   0012BC  6E04               	movwf	lcdString@str^0,c
  2458   0012BE  ECC1  F012         	call	_lcdString	;wreg free
  2459   0012C2                     l3540:
  2460                           
  2461                           ;output.c: 78:     if (numTela == STATE_IDIOMA) {
  2462   0012C2  0E04               	movlw	4
  2463   0012C4  1821               	xorwf	outputPrint@numTela^0,w,c
  2464   0012C6  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2465   0012C8  A4D8               	btfss	status,2,c
  2466   0012CA  EF69  F009         	goto	u3011
  2467   0012CE  EF6B  F009         	goto	u3010
  2468   0012D2                     u3011:
  2469   0012D2  EF98  F009         	goto	l3556
  2470   0012D6                     u3010:
  2471   0012D6                     
  2472                           ;output.c: 79:         lcdCommand(0x80);
  2473   0012D6  0E80               	movlw	128
  2474   0012D8  ECE4  F011         	call	_lcdCommand
  2475   0012DC                     
  2476                           ;output.c: 80:         lcdString(msgs[numTela][idioma]);
  2477   0012DC  5021               	movf	outputPrint@numTela^0,w,c
  2478   0012DE  0D02               	mullw	2
  2479   0012E0  50F3               	movf	243,w,c
  2480   0012E2  0F60               	addlw	low _msgs
  2481   0012E4  2423               	addwf	outputPrint@idioma^0,w,c
  2482   0012E6  6ED9               	movwf	fsr2l,c
  2483   0012E8  6ADA               	clrf	fsr2h,c
  2484   0012EA  50DF               	movf	indf2,w,c
  2485   0012EC  6E04               	movwf	lcdString@str^0,c
  2486   0012EE  ECC1  F012         	call	_lcdString	;wreg free
  2487   0012F2                     
  2488                           ;output.c: 81:         lcdCommand(0xC0);
  2489   0012F2  0EC0               	movlw	192
  2490   0012F4  ECE4  F011         	call	_lcdCommand
  2491   0012F8                     
  2492                           ;output.c: 82:         if (getLanguage() == 0) {
  2493   0012F8  EC7B  F014         	call	_getLanguage	;wreg free
  2494   0012FC  0900               	iorlw	0
  2495   0012FE  A4D8               	btfss	status,2,c
  2496   001300  EF84  F009         	goto	u3021
  2497   001304  EF86  F009         	goto	u3020
  2498   001308                     u3021:
  2499   001308  EF8A  F009         	goto	l3552
  2500   00130C                     u3020:
  2501   00130C                     
  2502                           ;output.c: 83:             lcdString("Portugues       ");
  2503   00130C  0E22               	movlw	low STR_17
  2504   00130E  6E04               	movwf	lcdString@str^0,c
  2505   001310  ECC1  F012         	call	_lcdString	;wreg free
  2506   001314                     l3552:
  2507                           
  2508                           ;output.c: 85:         if (getLanguage() == 1) {
  2509   001314  EC7B  F014         	call	_getLanguage	;wreg free
  2510   001318  06E8               	decf	wreg,f,c
  2511   00131A  A4D8               	btfss	status,2,c
  2512   00131C  EF92  F009         	goto	u3031
  2513   001320  EF94  F009         	goto	u3030
  2514   001324                     u3031:
  2515   001324  EF98  F009         	goto	l3556
  2516   001328                     u3030:
  2517   001328                     
  2518                           ;output.c: 86:             lcdString("English         ");
  2519   001328  0E11               	movlw	low STR_18
  2520   00132A  6E04               	movwf	lcdString@str^0,c
  2521   00132C  ECC1  F012         	call	_lcdString	;wreg free
  2522   001330                     l3556:
  2523                           
  2524                           ;output.c: 91:     if (numTela == STATE_MAIN) {
  2525   001330  0E05               	movlw	5
  2526   001332  1821               	xorwf	outputPrint@numTela^0,w,c
  2527   001334  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  2528   001336  A4D8               	btfss	status,2,c
  2529   001338  EFA0  F009         	goto	u3041
  2530   00133C  EFA2  F009         	goto	u3040
  2531   001340                     u3041:
  2532   001340  EFEB  F009         	goto	l572
  2533   001344                     u3040:
  2534   001344                     
  2535                           ;output.c: 92:         lcdCommand(0x80);
  2536   001344  0E80               	movlw	128
  2537   001346  ECE4  F011         	call	_lcdCommand
  2538   00134A                     
  2539                           ;output.c: 93:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  2540   00134A  0E00               	movlw	0
  2541   00134C  6E0F               	movwf	(dsReadData@address+1)^0,c
  2542   00134E  0E02               	movlw	2
  2543   001350  6E0E               	movwf	dsReadData@address^0,c
  2544   001352  EC08  F012         	call	_dsReadData	;wreg free
  2545   001356  0E7F               	movlw	127
  2546   001358  140E               	andwf	?_dsReadData^0,w,c
  2547   00135A  6E13               	movwf	bcd2dec@value^0,c
  2548   00135C  6A14               	clrf	(bcd2dec@value+1)^0,c
  2549   00135E  EC4E  F012         	call	_bcd2dec	;wreg free
  2550   001362  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2551   001366  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2552   00136A  0E02               	movlw	2
  2553   00136C  6E19               	movwf	lcdInt@digNum^0,c
  2554   00136E  EC41  F00F         	call	_lcdInt	;wreg free
  2555   001372                     
  2556                           ;output.c: 94:         lcdData(':');
  2557   001372  0E3A               	movlw	58
  2558   001374  EC05  F014         	call	_lcdData
  2559                           
  2560                           ;output.c: 95:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  2561   001378  0E00               	movlw	0
  2562   00137A  6E0F               	movwf	(dsReadData@address+1)^0,c
  2563   00137C  0E01               	movlw	1
  2564   00137E  6E0E               	movwf	dsReadData@address^0,c
  2565   001380  EC08  F012         	call	_dsReadData	;wreg free
  2566   001384  0E7F               	movlw	127
  2567   001386  140E               	andwf	?_dsReadData^0,w,c
  2568   001388  6E13               	movwf	bcd2dec@value^0,c
  2569   00138A  6A14               	clrf	(bcd2dec@value+1)^0,c
  2570   00138C  EC4E  F012         	call	_bcd2dec	;wreg free
  2571   001390  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2572   001394  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2573   001398  0E02               	movlw	2
  2574   00139A  6E19               	movwf	lcdInt@digNum^0,c
  2575   00139C  EC41  F00F         	call	_lcdInt	;wreg free
  2576   0013A0                     
  2577                           ;output.c: 96:         lcdData(':');
  2578   0013A0  0E3A               	movlw	58
  2579   0013A2  EC05  F014         	call	_lcdData
  2580   0013A6                     
  2581                           ;output.c: 97:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  2582   0013A6  0E00               	movlw	0
  2583   0013A8  6E0F               	movwf	(dsReadData@address+1)^0,c
  2584   0013AA  0E00               	movlw	0
  2585   0013AC  6E0E               	movwf	dsReadData@address^0,c
  2586   0013AE  EC08  F012         	call	_dsReadData	;wreg free
  2587   0013B2  0E7F               	movlw	127
  2588   0013B4  140E               	andwf	?_dsReadData^0,w,c
  2589   0013B6  6E13               	movwf	bcd2dec@value^0,c
  2590   0013B8  6A14               	clrf	(bcd2dec@value+1)^0,c
  2591   0013BA  EC4E  F012         	call	_bcd2dec	;wreg free
  2592   0013BE  C013  F017         	movff	?_bcd2dec,lcdInt@val
  2593   0013C2  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  2594   0013C6  0E02               	movlw	2
  2595   0013C8  6E19               	movwf	lcdInt@digNum^0,c
  2596   0013CA  EC41  F00F         	call	_lcdInt	;wreg free
  2597   0013CE                     
  2598                           ;output.c: 98:         lcdString("           ");
  2599   0013CE  0E93               	movlw	low STR_11
  2600   0013D0  6E04               	movwf	lcdString@str^0,c
  2601   0013D2  ECC1  F012         	call	_lcdString	;wreg free
  2602   0013D6                     l572:
  2603   0013D6  0012               	return		;funcret
  2604   0013D8                     __end_of_outputPrint:
  2605                           	callstack 0
  2606                           
  2607 ;; *************** function _lcdString *****************
  2608 ;; Defined at:
  2609 ;;		line 168 in file "lcd.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  str             1    3[COMRAM] PTR const unsigned char 
  2612 ;;		 -> STR_19(12), STR_18(17), STR_17(17), STR_16(12), 
  2613 ;;		 -> STR_15(4), STR_14(12), STR_13(4), STR_12(12), 
  2614 ;;		 -> STR_11(12), STR_10(16), STR_9(16), STR_8(16), 
  2615 ;;		 -> STR_7(16), STR_6(16), STR_5(16), STR_4(16), 
  2616 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2628 ;;      Params:         1       0       0       0       0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2631 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2632 ;;Total ram usage:        1 bytes
  2633 ;; Hardware stack levels used: 1
  2634 ;; Hardware stack levels required when called: 3
  2635 ;; This function calls:
  2636 ;;		_lcdData
  2637 ;; This function is called by:
  2638 ;;		_outputPrint
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text4
  2643   002582                     __ptext4:
  2644                           	callstack 0
  2645   002582                     _lcdString:
  2646                           	callstack 25
  2647   002582                     
  2648                           ;lcd.c: 169:     while (*str) {
  2649   002582  EFCC  F012         	goto	l3298
  2650   002586                     l3294:
  2651                           
  2652                           ;lcd.c: 170:         lcdData(*str++);
  2653   002586  C004  FFF6         	movff	lcdString@str,tblptrl
  2654   00258A                     	if	1	;There is more than 1 active tblptr byte
  2655   00258A  0E08               	movlw	high __smallconst
  2656   00258C  6EF7               	movwf	tblptrh,c
  2657   00258E                     	endif
  2658   00258E                     	if	0	;tblptru may be non-zero
  2659   00258E                     	endif
  2660   00258E                     	if	0	;tblptru may be non-zero
  2661   00258E                     	endif
  2662   00258E  0008               	tblrd		*
  2663   002590  50F5               	movf	tablat,w,c
  2664   002592  EC05  F014         	call	_lcdData
  2665   002596  2A04               	incf	lcdString@str^0,f,c
  2666   002598                     l3298:
  2667                           
  2668                           ;lcd.c: 169:     while (*str) {
  2669   002598  C004  FFF6         	movff	lcdString@str,tblptrl
  2670   00259C                     	if	1	;There is more than 1 active tblptr byte
  2671   00259C  0E08               	movlw	high __smallconst
  2672   00259E  6EF7               	movwf	tblptrh,c
  2673   0025A0                     	endif
  2674   0025A0                     	if	0	;tblptru may be non-zero
  2675   0025A0                     	endif
  2676   0025A0                     	if	0	;tblptru may be non-zero
  2677   0025A0                     	endif
  2678   0025A0  0008               	tblrd		*
  2679   0025A2  50F5               	movf	tablat,w,c
  2680   0025A4  0900               	iorlw	0
  2681   0025A6  A4D8               	btfss	status,2,c
  2682   0025A8  EFD8  F012         	goto	u2781
  2683   0025AC  EFDA  F012         	goto	u2780
  2684   0025B0                     u2781:
  2685   0025B0  EFC3  F012         	goto	l3294
  2686   0025B4                     u2780:
  2687   0025B4  0012               	return		;funcret
  2688   0025B6                     __end_of_lcdString:
  2689                           	callstack 0
  2690                           
  2691 ;; *************** function _lcdInt *****************
  2692 ;; Defined at:
  2693 ;;		line 174 in file "lcd.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  val             2   22[COMRAM] int 
  2696 ;;  digNum          1   24[COMRAM] unsigned char 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  j               2   26[COMRAM] int 
  2699 ;;  divisor         2   28[COMRAM] int 
  2700 ;;  i               2   30[COMRAM] int 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2710 ;;      Params:         3       0       0       0       0       0       0       0       0
  2711 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2712 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2713 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2714 ;;Total ram usage:       10 bytes
  2715 ;; Hardware stack levels used: 1
  2716 ;; Hardware stack levels required when called: 3
  2717 ;; This function calls:
  2718 ;;		___awdiv
  2719 ;;		___awmod
  2720 ;;		___wmul
  2721 ;;		_lcdData
  2722 ;; This function is called by:
  2723 ;;		_outputPrint
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text5
  2728   001E82                     __ptext5:
  2729                           	callstack 0
  2730   001E82                     _lcdInt:
  2731                           	callstack 25
  2732   001E82                     
  2733                           ;lcd.c: 175:     if (val < 0) {
  2734   001E82  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  2735   001E84  EF48  F00F         	goto	u2790
  2736   001E88  EF46  F00F         	goto	u2791
  2737   001E8C                     u2791:
  2738   001E8C  EF4F  F00F         	goto	l3306
  2739   001E90                     u2790:
  2740   001E90                     
  2741                           ;lcd.c: 176:         val = val * (-1);
  2742   001E90  6C17               	negf	lcdInt@val^0,c
  2743   001E92  1E18               	comf	(lcdInt@val+1)^0,f,c
  2744   001E94  B0D8               	btfsc	status,0,c
  2745   001E96  2A18               	incf	(lcdInt@val+1)^0,f,c
  2746   001E98                     
  2747                           ;lcd.c: 177:         lcdData('-');
  2748   001E98  0E2D               	movlw	45
  2749   001E9A  EC05  F014         	call	_lcdData
  2750   001E9E                     l3306:
  2751                           
  2752                           ;lcd.c: 188:     for (int i = digNum - 1; i >= 0; i--) {
  2753   001E9E  0EFF               	movlw	255
  2754   001EA0  2419               	addwf	lcdInt@digNum^0,w,c
  2755   001EA2  6E1F               	movwf	lcdInt@i^0,c
  2756   001EA4  6A20               	clrf	(lcdInt@i+1)^0,c
  2757   001EA6  0EFF               	movlw	255
  2758   001EA8  2220               	addwfc	(lcdInt@i+1)^0,f,c
  2759   001EAA                     l3308:
  2760   001EAA  BE20               	btfsc	(lcdInt@i+1)^0,7,c
  2761   001EAC  EF5C  F00F         	goto	u2800
  2762   001EB0  EF5A  F00F         	goto	u2801
  2763   001EB4                     u2801:
  2764   001EB4  EF5E  F00F         	goto	l3312
  2765   001EB8                     u2800:
  2766   001EB8  EFA4  F00F         	goto	l203
  2767   001EBC                     l3312:
  2768                           
  2769                           ;lcd.c: 189:         int divisor = 1;
  2770   001EBC  0E00               	movlw	0
  2771   001EBE  6E1E               	movwf	(lcdInt@divisor+1)^0,c
  2772   001EC0  0E01               	movlw	1
  2773   001EC2  6E1D               	movwf	lcdInt@divisor^0,c
  2774                           
  2775                           ;lcd.c: 190:         for (int j = 0; j < i; j++) {
  2776   001EC4  0E00               	movlw	0
  2777   001EC6  6E1C               	movwf	(lcdInt@j+1)^0,c
  2778   001EC8  0E00               	movlw	0
  2779   001ECA  6E1B               	movwf	lcdInt@j^0,c
  2780   001ECC  EF78  F00F         	goto	l3318
  2781   001ED0                     l3314:
  2782                           
  2783                           ;lcd.c: 191:             divisor *= 10;
  2784   001ED0  C01D  F009         	movff	lcdInt@divisor,___wmul@multiplier
  2785   001ED4  C01E  F00A         	movff	lcdInt@divisor+1,___wmul@multiplier+1
  2786   001ED8  0E00               	movlw	0
  2787   001EDA  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2788   001EDC  0E0A               	movlw	10
  2789   001EDE  6E0B               	movwf	___wmul@multiplicand^0,c
  2790   001EE0  ECCF  F013         	call	___wmul	;wreg free
  2791   001EE4  C009  F01D         	movff	?___wmul,lcdInt@divisor
  2792   001EE8  C00A  F01E         	movff	?___wmul+1,lcdInt@divisor+1
  2793   001EEC                     
  2794                           ;lcd.c: 192:         }
  2795   001EEC  4A1B               	infsnz	lcdInt@j^0,f,c
  2796   001EEE  2A1C               	incf	(lcdInt@j+1)^0,f,c
  2797   001EF0                     l3318:
  2798   001EF0  501F               	movf	lcdInt@i^0,w,c
  2799   001EF2  5C1B               	subwf	lcdInt@j^0,w,c
  2800   001EF4  501C               	movf	(lcdInt@j+1)^0,w,c
  2801   001EF6  0A80               	xorlw	128
  2802   001EF8  6E1A               	movwf	??_lcdInt^0,c
  2803   001EFA  5020               	movf	(lcdInt@i+1)^0,w,c
  2804   001EFC  0A80               	xorlw	128
  2805   001EFE  581A               	subwfb	??_lcdInt^0,w,c
  2806   001F00  A0D8               	btfss	status,0,c
  2807   001F02  EF85  F00F         	goto	u2811
  2808   001F06  EF87  F00F         	goto	u2810
  2809   001F0A                     u2811:
  2810   001F0A  EF68  F00F         	goto	l3314
  2811   001F0E                     u2810:
  2812   001F0E                     
  2813                           ;lcd.c: 193:         lcdData((val / divisor) % 10 + 48);
  2814   001F0E  C01D  F003         	movff	lcdInt@divisor,___awdiv@divisor
  2815   001F12  C01E  F004         	movff	lcdInt@divisor+1,___awdiv@divisor+1
  2816   001F16  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  2817   001F1A  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  2818   001F1E  ECA5  F00F         	call	___awdiv	;wreg free
  2819   001F22  C001  F009         	movff	?___awdiv,___awmod@dividend
  2820   001F26  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2821   001F2A  0E00               	movlw	0
  2822   001F2C  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2823   001F2E  0E0A               	movlw	10
  2824   001F30  6E0B               	movwf	___awmod@divisor^0,c
  2825   001F32  EC07  F010         	call	___awmod	;wreg free
  2826   001F36  5009               	movf	?___awmod^0,w,c
  2827   001F38  0F30               	addlw	48
  2828   001F3A  EC05  F014         	call	_lcdData
  2829   001F3E                     
  2830                           ;lcd.c: 194:     }
  2831   001F3E  061F               	decf	lcdInt@i^0,f,c
  2832   001F40  A0D8               	btfss	status,0,c
  2833   001F42  0620               	decf	(lcdInt@i+1)^0,f,c
  2834   001F44  EF55  F00F         	goto	l3308
  2835   001F48                     l203:
  2836   001F48  0012               	return		;funcret
  2837   001F4A                     __end_of_lcdInt:
  2838                           	callstack 0
  2839                           
  2840 ;; *************** function _lcdData *****************
  2841 ;; Defined at:
  2842 ;;		line 108 in file "lcd.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  valor           1    wreg     unsigned char 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  valor           1    2[COMRAM] unsigned char 
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      void 
  2849 ;; Registers used:
  2850 ;;		wreg, status,2, status,0, cstack
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2856 ;;      Params:         0       0       0       0       0       0       0       0       0
  2857 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2859 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2860 ;;Total ram usage:        1 bytes
  2861 ;; Hardware stack levels used: 1
  2862 ;; Hardware stack levels required when called: 2
  2863 ;; This function calls:
  2864 ;;		_Delay40us
  2865 ;;		_lcdCommand4bits
  2866 ;; This function is called by:
  2867 ;;		_lcdString
  2868 ;;		_lcdInt
  2869 ;;		_outputPrint
  2870 ;;		_printf
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text6
  2875   00280A                     __ptext6:
  2876                           	callstack 0
  2877   00280A                     _lcdData:
  2878                           	callstack 25
  2879                           
  2880                           ;incstack = 0
  2881                           ;lcdData@valor stored from wreg
  2882   00280A  6E03               	movwf	lcdData@valor^0,c
  2883   00280C                     
  2884                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  2885   00280C  0E01               	movlw	1
  2886   00280E  6E01               	movwf	lcdCommand4bits@data^0,c
  2887   002810  5003               	movf	lcdData@valor^0,w,c
  2888   002812  EC9B  F010         	call	_lcdCommand4bits
  2889                           
  2890                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  2891   002816  0E01               	movlw	1
  2892   002818  6E01               	movwf	lcdCommand4bits@data^0,c
  2893   00281A  3803               	swapf	lcdData@valor^0,w,c
  2894   00281C  0BF0               	andlw	240
  2895   00281E  EC9B  F010         	call	_lcdCommand4bits
  2896                           
  2897                           ;lcd.c: 113:     Delay40us();
  2898   002822  EC2D  F014         	call	_Delay40us	;wreg free
  2899   002826  0012               	return		;funcret
  2900   002828                     __end_of_lcdData:
  2901                           	callstack 0
  2902                           
  2903 ;; *************** function _getAlarmLevel *****************
  2904 ;; Defined at:
  2905 ;;		line 51 in file "var.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  lh              2    0[COMRAM] int 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  l               2    2[COMRAM] int 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  2    0[COMRAM] int 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2919 ;;      Params:         2       0       0       0       0       0       0       0       0
  2920 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2922 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2923 ;;Total ram usage:        4 bytes
  2924 ;; Hardware stack levels used: 1
  2925 ;; This function calls:
  2926 ;;		Nothing
  2927 ;; This function is called by:
  2928 ;;		_outputPrint
  2929 ;;		_smLoop
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text7
  2934   0026A0                     __ptext7:
  2935                           	callstack 0
  2936   0026A0                     _getAlarmLevel:
  2937                           	callstack 28
  2938   0026A0                     
  2939                           ;var.c: 52:     int l;;var.c: 53:     if(lh == 0){
  2940   0026A0  5001               	movf	getAlarmLevel@lh^0,w,c
  2941   0026A2  1002               	iorwf	(getAlarmLevel@lh+1)^0,w,c
  2942   0026A4  A4D8               	btfss	status,2,c
  2943   0026A6  EF57  F013         	goto	u2861
  2944   0026AA  EF59  F013         	goto	u2860
  2945   0026AE                     u2861:
  2946   0026AE  EF5E  F013         	goto	l736
  2947   0026B2                     u2860:
  2948   0026B2                     
  2949                           ;var.c: 54:         l = alarmLevelLow;
  2950   0026B2  C048  F003         	movff	_alarmLevelLow,getAlarmLevel@l
  2951   0026B6  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2952                           
  2953                           ;var.c: 55:     }
  2954   0026B8  EF61  F013         	goto	l737
  2955   0026BC                     l736:
  2956                           
  2957                           ;var.c: 57:     {;var.c: 58:         l = alarmLevelHigh;
  2958   0026BC  C049  F003         	movff	_alarmLevelHigh,getAlarmLevel@l
  2959   0026C0  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2960   0026C2                     l737:
  2961                           
  2962                           ;var.c: 60:     return l;
  2963   0026C2  C003  F001         	movff	getAlarmLevel@l,?_getAlarmLevel
  2964   0026C6  C004  F002         	movff	getAlarmLevel@l+1,?_getAlarmLevel+1
  2965   0026CA  0012               	return		;funcret
  2966   0026CC                     __end_of_getAlarmLevel:
  2967                           	callstack 0
  2968                           
  2969 ;; *************** function _getState *****************
  2970 ;; Defined at:
  2971 ;;		line 34 in file "var.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      unsigned char 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0
  2986 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2988 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2989 ;;Total ram usage:        0 bytes
  2990 ;; Hardware stack levels used: 1
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_smLoop
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text8
  2999   0028EA                     __ptext8:
  3000                           	callstack 0
  3001   0028EA                     _getState:
  3002                           	callstack 29
  3003   0028EA                     
  3004                           ;var.c: 35:     return state;
  3005   0028EA  504B               	movf	_state^0,w,c
  3006   0028EC  0012               	return		;funcret
  3007   0028EE                     __end_of_getState:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function _eventRead *****************
  3011 ;; Defined at:
  3012 ;;		line 25 in file "event.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  key             2   37[COMRAM] int 
  3017 ;;  ev              2   34[COMRAM] int 
  3018 ;;  data            1   36[COMRAM] unsigned char 
  3019 ;;  prot            1   33[COMRAM] PTR unsigned char 
  3020 ;;		 -> prot(6), 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      unsigned char 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0
  3031 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3032 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3033 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3034 ;;Total ram usage:        7 bytes
  3035 ;; Hardware stack levels used: 1
  3036 ;; Hardware stack levels required when called: 6
  3037 ;; This function calls:
  3038 ;;		_getLanguage
  3039 ;;		_getProt
  3040 ;;		_kpRead
  3041 ;;		_serialRead
  3042 ;;		_serialSend
  3043 ;;		_setLanguage
  3044 ;;		_setProt
  3045 ;; This function is called by:
  3046 ;;		_smLoop
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text9
  3051   001A68                     __ptext9:
  3052                           	callstack 0
  3053   001A68                     _eventRead:
  3054                           	callstack 23
  3055   001A68                     
  3056                           ;event.c: 26:     int key;;event.c: 27:     int ev = EV_NOEVENT;
  3057   001A68  0E00               	movlw	0
  3058   001A6A  6E24               	movwf	(eventRead@ev+1)^0,c
  3059   001A6C  0E06               	movlw	6
  3060   001A6E  6E23               	movwf	eventRead@ev^0,c
  3061   001A70                     
  3062                           ;event.c: 28:     key = kpRead();
  3063   001A70  EC77  F014         	call	_kpRead	;wreg free
  3064   001A74  6E21               	movwf	??_eventRead^0,c
  3065   001A76  5021               	movf	??_eventRead^0,w,c
  3066   001A78  6E26               	movwf	eventRead@key^0,c
  3067   001A7A  6A27               	clrf	(eventRead@key+1)^0,c
  3068   001A7C                     
  3069                           ;event.c: 29:     if (key != key_ant) {
  3070   001A7C  5043               	movf	_key_ant^0,w,c
  3071   001A7E  1826               	xorwf	eventRead@key^0,w,c
  3072   001A80  E109               	bnz	u2880
  3073   001A82  5044               	movf	(_key_ant+1)^0,w,c
  3074   001A84  1827               	xorwf	(eventRead@key+1)^0,w,c
  3075   001A86  B4D8               	btfsc	status,2,c
  3076   001A88  EF48  F00D         	goto	u2881
  3077   001A8C  EF4A  F00D         	goto	u2880
  3078   001A90                     u2881:
  3079   001A90  EF81  F00D         	goto	l3404
  3080   001A94                     u2880:
  3081   001A94                     
  3082                           ;event.c: 30:         if (((key) & (1<<0))) {
  3083   001A94  A026               	btfss	eventRead@key^0,0,c
  3084   001A96  EF4F  F00D         	goto	u2891
  3085   001A9A  EF51  F00D         	goto	u2890
  3086   001A9E                     u2891:
  3087   001A9E  EF55  F00D         	goto	l3388
  3088   001AA2                     u2890:
  3089   001AA2                     
  3090                           ;event.c: 31:             ev = EV_B_0;
  3091   001AA2  0E00               	movlw	0
  3092   001AA4  6E24               	movwf	(eventRead@ev+1)^0,c
  3093   001AA6  0E00               	movlw	0
  3094   001AA8  6E23               	movwf	eventRead@ev^0,c
  3095   001AAA                     l3388:
  3096                           
  3097                           ;event.c: 34:         if (((key) & (1<<1))) {
  3098   001AAA  A226               	btfss	eventRead@key^0,1,c
  3099   001AAC  EF5A  F00D         	goto	u2901
  3100   001AB0  EF5C  F00D         	goto	u2900
  3101   001AB4                     u2901:
  3102   001AB4  EF60  F00D         	goto	l3392
  3103   001AB8                     u2900:
  3104   001AB8                     
  3105                           ;event.c: 35:             ev = EV_B_1;
  3106   001AB8  0E00               	movlw	0
  3107   001ABA  6E24               	movwf	(eventRead@ev+1)^0,c
  3108   001ABC  0E01               	movlw	1
  3109   001ABE  6E23               	movwf	eventRead@ev^0,c
  3110   001AC0                     l3392:
  3111                           
  3112                           ;event.c: 38:         if (((key) & (1<<2))) {
  3113   001AC0  A426               	btfss	eventRead@key^0,2,c
  3114   001AC2  EF65  F00D         	goto	u2911
  3115   001AC6  EF67  F00D         	goto	u2910
  3116   001ACA                     u2911:
  3117   001ACA  EF6B  F00D         	goto	l3396
  3118   001ACE                     u2910:
  3119   001ACE                     
  3120                           ;event.c: 39:             ev = EV_B_2;
  3121   001ACE  0E00               	movlw	0
  3122   001AD0  6E24               	movwf	(eventRead@ev+1)^0,c
  3123   001AD2  0E02               	movlw	2
  3124   001AD4  6E23               	movwf	eventRead@ev^0,c
  3125   001AD6                     l3396:
  3126                           
  3127                           ;event.c: 42:         if (((key) & (1<<3))) {
  3128   001AD6  A626               	btfss	eventRead@key^0,3,c
  3129   001AD8  EF70  F00D         	goto	u2921
  3130   001ADC  EF72  F00D         	goto	u2920
  3131   001AE0                     u2921:
  3132   001AE0  EF76  F00D         	goto	l3400
  3133   001AE4                     u2920:
  3134   001AE4                     
  3135                           ;event.c: 43:             ev = EV_B_3;
  3136   001AE4  0E00               	movlw	0
  3137   001AE6  6E24               	movwf	(eventRead@ev+1)^0,c
  3138   001AE8  0E03               	movlw	3
  3139   001AEA  6E23               	movwf	eventRead@ev^0,c
  3140   001AEC                     l3400:
  3141                           
  3142                           ;event.c: 46:         if (((key) & (1<<4))) {
  3143   001AEC  A826               	btfss	eventRead@key^0,4,c
  3144   001AEE  EF7B  F00D         	goto	u2931
  3145   001AF2  EF7D  F00D         	goto	u2930
  3146   001AF6                     u2931:
  3147   001AF6  EF81  F00D         	goto	l3404
  3148   001AFA                     u2930:
  3149   001AFA                     
  3150                           ;event.c: 47:             ev = EV_B_4;
  3151   001AFA  0E00               	movlw	0
  3152   001AFC  6E24               	movwf	(eventRead@ev+1)^0,c
  3153   001AFE  0E04               	movlw	4
  3154   001B00  6E23               	movwf	eventRead@ev^0,c
  3155   001B02                     l3404:
  3156                           
  3157                           ;event.c: 51:     key_ant = key;
  3158   001B02  C026  F043         	movff	eventRead@key,_key_ant
  3159   001B06  C027  F044         	movff	eventRead@key+1,_key_ant+1
  3160   001B0A                     
  3161                           ;event.c: 54:     unsigned char data = serialRead();
  3162   001B0A  EC66  F013         	call	_serialRead	;wreg free
  3163   001B0E  6E25               	movwf	eventRead@data^0,c
  3164   001B10                     
  3165                           ;event.c: 55:     serialSend(data);
  3166   001B10  5025               	movf	eventRead@data^0,w,c
  3167   001B12  EC39  F014         	call	_serialSend
  3168   001B16                     
  3169                           ;event.c: 56:     unsigned char* prot;;event.c: 57:     if (data != 0) {
  3170   001B16  5025               	movf	eventRead@data^0,w,c
  3171   001B18  B4D8               	btfsc	status,2,c
  3172   001B1A  EF91  F00D         	goto	u2941
  3173   001B1E  EF93  F00D         	goto	u2940
  3174   001B22                     u2941:
  3175   001B22  EF0C  F00E         	goto	l511
  3176   001B26                     u2940:
  3177   001B26                     
  3178                           ;event.c: 58:         prot = getProt();
  3179   001B26  EC79  F014         	call	_getProt	;wreg free
  3180   001B2A  6E22               	movwf	eventRead@prot^0,c
  3181   001B2C                     
  3182                           ;event.c: 59:         if (prot[0] == 0) {
  3183   001B2C  5022               	movf	eventRead@prot^0,w,c
  3184   001B2E  6ED9               	movwf	fsr2l,c
  3185   001B30  6ADA               	clrf	fsr2h,c
  3186   001B32  50DF               	movf	indf2,w,c
  3187   001B34  A4D8               	btfss	status,2,c
  3188   001B36  EF9F  F00D         	goto	u2951
  3189   001B3A  EFA1  F00D         	goto	u2950
  3190   001B3E                     u2951:
  3191   001B3E  EFFD  F00D         	goto	l3440
  3192   001B42                     u2950:
  3193   001B42  EFD6  F00D         	goto	l3438
  3194   001B46                     l3418:
  3195                           
  3196                           ;event.c: 62:                     ev = EV_B_0;
  3197   001B46  0E00               	movlw	0
  3198   001B48  6E24               	movwf	(eventRead@ev+1)^0,c
  3199   001B4A  0E00               	movlw	0
  3200   001B4C  6E23               	movwf	eventRead@ev^0,c
  3201                           
  3202                           ;event.c: 63:                     break;
  3203   001B4E  EF0C  F00E         	goto	l511
  3204   001B52                     l3420:
  3205                           
  3206                           ;event.c: 65:                     ev = EV_B_1;
  3207   001B52  0E00               	movlw	0
  3208   001B54  6E24               	movwf	(eventRead@ev+1)^0,c
  3209   001B56  0E01               	movlw	1
  3210   001B58  6E23               	movwf	eventRead@ev^0,c
  3211                           
  3212                           ;event.c: 66:                     break;
  3213   001B5A  EF0C  F00E         	goto	l511
  3214   001B5E                     l3422:
  3215                           
  3216                           ;event.c: 68:                     ev = EV_B_2;
  3217   001B5E  0E00               	movlw	0
  3218   001B60  6E24               	movwf	(eventRead@ev+1)^0,c
  3219   001B62  0E02               	movlw	2
  3220   001B64  6E23               	movwf	eventRead@ev^0,c
  3221                           
  3222                           ;event.c: 69:                     break;
  3223   001B66  EF0C  F00E         	goto	l511
  3224   001B6A                     l3424:
  3225                           
  3226                           ;event.c: 71:                     ev = EV_B_3;
  3227   001B6A  0E00               	movlw	0
  3228   001B6C  6E24               	movwf	(eventRead@ev+1)^0,c
  3229   001B6E  0E03               	movlw	3
  3230   001B70  6E23               	movwf	eventRead@ev^0,c
  3231                           
  3232                           ;event.c: 72:                     break;
  3233   001B72  EF0C  F00E         	goto	l511
  3234   001B76                     l3426:
  3235                           
  3236                           ;event.c: 74:                     ev = EV_B_4;
  3237   001B76  0E00               	movlw	0
  3238   001B78  6E24               	movwf	(eventRead@ev+1)^0,c
  3239   001B7A  0E04               	movlw	4
  3240   001B7C  6E23               	movwf	eventRead@ev^0,c
  3241                           
  3242                           ;event.c: 75:                     break;
  3243   001B7E  EF0C  F00E         	goto	l511
  3244   001B82                     l3428:
  3245                           
  3246                           ;event.c: 77:                     ev = EV_NOEVENT;
  3247   001B82  0E00               	movlw	0
  3248   001B84  6E24               	movwf	(eventRead@ev+1)^0,c
  3249   001B86  0E06               	movlw	6
  3250   001B88  6E23               	movwf	eventRead@ev^0,c
  3251   001B8A                     
  3252                           ;event.c: 78:                     setProt('p');
  3253   001B8A  0E70               	movlw	112
  3254   001B8C  ECBB  F013         	call	_setProt
  3255                           
  3256                           ;event.c: 79:                     break;
  3257   001B90  EF0C  F00E         	goto	l511
  3258   001B94                     l3432:
  3259                           
  3260                           ;event.c: 81:                     ev = EV_NOEVENT;
  3261   001B94  0E00               	movlw	0
  3262   001B96  6E24               	movwf	(eventRead@ev+1)^0,c
  3263   001B98  0E06               	movlw	6
  3264   001B9A  6E23               	movwf	eventRead@ev^0,c
  3265   001B9C                     
  3266                           ;event.c: 82:                     setLanguage(getLanguage() + 1);
  3267   001B9C  EC7B  F014         	call	_getLanguage	;wreg free
  3268   001BA0  6E21               	movwf	??_eventRead^0,c
  3269   001BA2  2821               	incf	??_eventRead^0,w,c
  3270   001BA4  EC21  F014         	call	_setLanguage
  3271                           
  3272                           ;event.c: 83:                     break;
  3273   001BA8  EF0C  F00E         	goto	l511
  3274   001BAC                     l3438:
  3275   001BAC  5025               	movf	eventRead@data^0,w,c
  3276                           
  3277                           ; Switch size 1, requested type "simple"
  3278                           ; Number of cases is 9, Range of values is 50 to 112
  3279                           ; switch strategies available:
  3280                           ; Name         Instructions Cycles
  3281                           ; simple_byte           28    15 (average)
  3282                           ;	Chosen strategy is simple_byte
  3283   001BAE  0A32               	xorlw	50	; case 50
  3284   001BB0  B4D8               	btfsc	status,2,c
  3285   001BB2  EFA3  F00D         	goto	l3418
  3286   001BB6  0A06               	xorlw	6	; case 52
  3287   001BB8  B4D8               	btfsc	status,2,c
  3288   001BBA  EFAF  F00D         	goto	l3422
  3289   001BBE  0A01               	xorlw	1	; case 53
  3290   001BC0  B4D8               	btfsc	status,2,c
  3291   001BC2  EFBB  F00D         	goto	l3426
  3292   001BC6  0A03               	xorlw	3	; case 54
  3293   001BC8  B4D8               	btfsc	status,2,c
  3294   001BCA  EFB5  F00D         	goto	l3424
  3295   001BCE  0A0E               	xorlw	14	; case 56
  3296   001BD0  B4D8               	btfsc	status,2,c
  3297   001BD2  EFA9  F00D         	goto	l3420
  3298   001BD6  0A74               	xorlw	116	; case 76
  3299   001BD8  B4D8               	btfsc	status,2,c
  3300   001BDA  EFCA  F00D         	goto	l3432
  3301   001BDE  0A1C               	xorlw	28	; case 80
  3302   001BE0  B4D8               	btfsc	status,2,c
  3303   001BE2  EFC1  F00D         	goto	l3428
  3304   001BE6  0A3C               	xorlw	60	; case 108
  3305   001BE8  B4D8               	btfsc	status,2,c
  3306   001BEA  EFCA  F00D         	goto	l3432
  3307   001BEE  0A1C               	xorlw	28	; case 112
  3308   001BF0  B4D8               	btfsc	status,2,c
  3309   001BF2  EFC1  F00D         	goto	l3428
  3310   001BF6  EF0C  F00E         	goto	l511
  3311   001BFA                     l3440:
  3312                           
  3313                           ;event.c: 88:             setProt(data);
  3314   001BFA  5025               	movf	eventRead@data^0,w,c
  3315   001BFC  ECBB  F013         	call	_setProt
  3316   001C00                     
  3317                           ;event.c: 90:             if (prot_ready) {
  3318   001C00  504D               	movf	_prot_ready^0,w,c
  3319   001C02  B4D8               	btfsc	status,2,c
  3320   001C04  EF06  F00E         	goto	u2961
  3321   001C08  EF08  F00E         	goto	u2960
  3322   001C0C                     u2961:
  3323   001C0C  EF0C  F00E         	goto	l511
  3324   001C10                     u2960:
  3325   001C10                     
  3326                           ;event.c: 91:                 ev = EV_PROT_SERIAL;
  3327   001C10  0E00               	movlw	0
  3328   001C12  6E24               	movwf	(eventRead@ev+1)^0,c
  3329   001C14  0E05               	movlw	5
  3330   001C16  6E23               	movwf	eventRead@ev^0,c
  3331   001C18                     l511:
  3332                           
  3333                           ;event.c: 97:     return ev;
  3334   001C18  5023               	movf	eventRead@ev^0,w,c
  3335   001C1A  0012               	return		;funcret
  3336   001C1C                     __end_of_eventRead:
  3337                           	callstack 0
  3338                           
  3339 ;; *************** function _setProt *****************
  3340 ;; Defined at:
  3341 ;;		line 95 in file "var.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  newChar         1    wreg     unsigned char 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  newChar         1    0[COMRAM] unsigned char 
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      void 
  3348 ;; Registers used:
  3349 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3355 ;;      Params:         0       0       0       0       0       0       0       0       0
  3356 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3358 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3359 ;;Total ram usage:        1 bytes
  3360 ;; Hardware stack levels used: 1
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_eventRead
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text10
  3369   002776                     __ptext10:
  3370                           	callstack 0
  3371   002776                     _setProt:
  3372                           	callstack 28
  3373                           
  3374                           ;incstack = 0
  3375                           ;setProt@newChar stored from wreg
  3376   002776  6E01               	movwf	setProt@newChar^0,c
  3377   002778                     
  3378                           ;var.c: 97:     prot[index++] = newChar;
  3379   002778  5047               	movf	_index^0,w,c
  3380   00277A  0F71               	addlw	low _prot
  3381   00277C  6ED9               	movwf	fsr2l,c
  3382   00277E  6ADA               	clrf	fsr2h,c
  3383   002780  C001  FFDF         	movff	setProt@newChar,indf2
  3384   002784  2A47               	incf	_index^0,f,c
  3385   002786                     
  3386                           ;var.c: 99:     if(index == 6) prot_ready = 1;
  3387   002786  0E06               	movlw	6
  3388   002788  1847               	xorwf	_index^0,w,c
  3389   00278A  A4D8               	btfss	status,2,c
  3390   00278C  EFCA  F013         	goto	u2851
  3391   002790  EFCC  F013         	goto	u2850
  3392   002794                     u2851:
  3393   002794  EFCE  F013         	goto	l756
  3394   002798                     u2850:
  3395   002798  0E01               	movlw	1
  3396   00279A  6E4D               	movwf	_prot_ready^0,c
  3397   00279C                     l756:
  3398   00279C  0012               	return		;funcret
  3399   00279E                     __end_of_setProt:
  3400                           	callstack 0
  3401                           
  3402 ;; *************** function _setLanguage *****************
  3403 ;; Defined at:
  3404 ;;		line 83 in file "var.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  newLanguage     1    wreg     unsigned char 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  newLanguage     1   31[COMRAM] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3418 ;;      Params:         0       0       0       0       0       0       0       0       0
  3419 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3421 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3422 ;;Total ram usage:        1 bytes
  3423 ;; Hardware stack levels used: 1
  3424 ;; Hardware stack levels required when called: 5
  3425 ;; This function calls:
  3426 ;;		_dsWriteData
  3427 ;; This function is called by:
  3428 ;;		_eventRead
  3429 ;;		_smLoop
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text11
  3434   002842                     __ptext11:
  3435                           	callstack 0
  3436   002842                     _setLanguage:
  3437                           	callstack 24
  3438                           
  3439                           ;incstack = 0
  3440                           ;setLanguage@newLanguage stored from wreg
  3441   002842  6E20               	movwf	setLanguage@newLanguage^0,c
  3442   002844                     
  3443                           ;var.c: 86:     language = newLanguage % 2;
  3444   002844  5020               	movf	setLanguage@newLanguage^0,w,c
  3445   002846  0B01               	andlw	1
  3446   002848  6E4A               	movwf	_language^0,c
  3447   00284A                     
  3448                           ;var.c: 87:     dsWriteData(language, 0x23);
  3449   00284A  0E00               	movlw	0
  3450   00284C  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3451   00284E  0E23               	movlw	35
  3452   002850  6E1D               	movwf	dsWriteData@address^0,c
  3453   002852  504A               	movf	_language^0,w,c
  3454   002854  EC0B  F013         	call	_dsWriteData
  3455   002858  0012               	return		;funcret
  3456   00285A                     __end_of_setLanguage:
  3457                           	callstack 0
  3458                           
  3459 ;; *************** function _serialSend *****************
  3460 ;; Defined at:
  3461 ;;		line 25 in file "serial.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  c               1    wreg     unsigned char 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  c               1    0[COMRAM] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3475 ;;      Params:         0       0       0       0       0       0       0       0       0
  3476 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3478 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3479 ;;Total ram usage:        1 bytes
  3480 ;; Hardware stack levels used: 1
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_eventRead
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text12
  3489   002872                     __ptext12:
  3490                           	callstack 0
  3491   002872                     _serialSend:
  3492                           	callstack 28
  3493                           
  3494                           ;incstack = 0
  3495                           ;serialSend@c stored from wreg
  3496   002872  6E01               	movwf	serialSend@c^0,c
  3497   002874                     l342:
  3498   002874  A89E               	btfss	158,4,c	;volatile
  3499   002876  EF3F  F014         	goto	u2821
  3500   00287A  EF41  F014         	goto	u2820
  3501   00287E                     u2821:
  3502   00287E  EF3A  F014         	goto	l342
  3503   002882                     u2820:
  3504   002882                     
  3505                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  3506   002882  C001  FFAD         	movff	serialSend@c,4013	;volatile
  3507   002886  0012               	return		;funcret
  3508   002888                     __end_of_serialSend:
  3509                           	callstack 0
  3510                           
  3511 ;; *************** function _serialRead *****************
  3512 ;; Defined at:
  3513 ;;		line 30 in file "serial.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  resp            1    0[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      unsigned char 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3527 ;;      Params:         0       0       0       0       0       0       0       0       0
  3528 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3530 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3531 ;;Total ram usage:        1 bytes
  3532 ;; Hardware stack levels used: 1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_eventRead
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text13
  3541   0026CC                     __ptext13:
  3542                           	callstack 0
  3543   0026CC                     _serialRead:
  3544                           	callstack 28
  3545   0026CC                     
  3546                           ;serial.c: 31:     char resp = 0;
  3547   0026CC  0E00               	movlw	0
  3548   0026CE  6E01               	movwf	serialRead@resp^0,c
  3549   0026D0                     
  3550                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  3551   0026D0  A2AB               	btfss	171,1,c	;volatile
  3552   0026D2  EF6D  F013         	goto	u2831
  3553   0026D6  EF6F  F013         	goto	u2830
  3554   0026DA                     u2831:
  3555   0026DA  EF71  F013         	goto	l3336
  3556   0026DE                     u2830:
  3557   0026DE                     
  3558                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  3559   0026DE  98AB               	bcf	171,4,c	;volatile
  3560                           
  3561                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  3562   0026E0  88AB               	bsf	171,4,c	;volatile
  3563   0026E2                     l3336:
  3564                           
  3565                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  3566   0026E2  AA9E               	btfss	158,5,c	;volatile
  3567   0026E4  EF76  F013         	goto	u2841
  3568   0026E8  EF78  F013         	goto	u2840
  3569   0026EC                     u2841:
  3570   0026EC  EF7A  F013         	goto	l3340
  3571   0026F0                     u2840:
  3572   0026F0                     
  3573                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  3574   0026F0  CFAE F001          	movff	4014,serialRead@resp	;volatile
  3575   0026F4                     l3340:
  3576                           
  3577                           ;serial.c: 43:     return resp;
  3578   0026F4  5001               	movf	serialRead@resp^0,w,c
  3579   0026F6  0012               	return		;funcret
  3580   0026F8                     __end_of_serialRead:
  3581                           	callstack 0
  3582                           
  3583 ;; *************** function _kpRead *****************
  3584 ;; Defined at:
  3585 ;;		line 29 in file "keypad.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;		None
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;		None
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      unsigned char 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3599 ;;      Params:         0       0       0       0       0       0       0       0       0
  3600 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3602 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3603 ;;Total ram usage:        0 bytes
  3604 ;; Hardware stack levels used: 1
  3605 ;; This function calls:
  3606 ;;		Nothing
  3607 ;; This function is called by:
  3608 ;;		_eventRead
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text14
  3613   0028EE                     __ptext14:
  3614                           	callstack 0
  3615   0028EE                     _kpRead:
  3616                           	callstack 28
  3617   0028EE                     
  3618                           ;keypad.c: 30:     return valor;
  3619   0028EE  5058               	movf	_valor^0,w,c
  3620   0028F0  0012               	return		;funcret
  3621   0028F2                     __end_of_kpRead:
  3622                           	callstack 0
  3623                           
  3624 ;; *************** function _getProt *****************
  3625 ;; Defined at:
  3626 ;;		line 90 in file "var.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;		None
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      PTR unsigned char 
  3633 ;; Registers used:
  3634 ;;		wreg
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3640 ;;      Params:         2       0       0       0       0       0       0       0       0
  3641 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3643 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3644 ;;Total ram usage:        2 bytes
  3645 ;; Hardware stack levels used: 1
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_eventRead
  3650 ;;		_smLoop
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text15
  3655   0028F2                     __ptext15:
  3656                           	callstack 0
  3657   0028F2                     _getProt:
  3658                           	callstack 29
  3659   0028F2                     
  3660                           ;var.c: 92:     return prot;
  3661   0028F2  0E71               	movlw	_prot& (0+255)
  3662   0028F4  0012               	return		;funcret
  3663   0028F6                     __end_of_getProt:
  3664                           	callstack 0
  3665                           
  3666 ;; *************** function _getLanguage *****************
  3667 ;; Defined at:
  3668 ;;		line 79 in file "var.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      unsigned char 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3682 ;;      Params:         0       0       0       0       0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3685 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used: 1
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_eventRead
  3692 ;;		_outputPrint
  3693 ;;		_smLoop
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text16
  3698   0028F6                     __ptext16:
  3699                           	callstack 0
  3700   0028F6                     _getLanguage:
  3701                           	callstack 28
  3702   0028F6                     
  3703                           ;var.c: 80:     return language;
  3704   0028F6  504A               	movf	_language^0,w,c
  3705   0028F8  0012               	return		;funcret
  3706   0028FA                     __end_of_getLanguage:
  3707                           	callstack 0
  3708                           
  3709 ;; *************** function _smInit *****************
  3710 ;; Defined at:
  3711 ;;		line 12 in file "stateMachine.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;		None
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      void 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3725 ;;      Params:         0       0       0       0       0       0       0       0       0
  3726 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3728 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3729 ;;Total ram usage:        0 bytes
  3730 ;; Hardware stack levels used: 1
  3731 ;; Hardware stack levels required when called: 7
  3732 ;; This function calls:
  3733 ;;		_eventInit
  3734 ;;		_setState
  3735 ;;		_varInit
  3736 ;; This function is called by:
  3737 ;;		_main
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text17
  3742   0027EA                     __ptext17:
  3743                           	callstack 0
  3744   0027EA                     _smInit:
  3745                           	callstack 23
  3746   0027EA                     
  3747                           ;stateMachine.c: 13:     varInit();
  3748   0027EA  EC3A  F00C         	call	_varInit	;wreg free
  3749   0027EE                     
  3750                           ;stateMachine.c: 14:     setState(STATE_MAIN);
  3751   0027EE  0E05               	movlw	5
  3752   0027F0  EC57  F014         	call	_setState
  3753   0027F4                     
  3754                           ;stateMachine.c: 15:     eventInit();
  3755   0027F4  EC44  F014         	call	_eventInit	;wreg free
  3756   0027F8                     
  3757                           ;stateMachine.c: 16:     t = 0;
  3758   0027F8  0E00               	movlw	0
  3759   0027FA  6E37               	movwf	_t^0,c
  3760   0027FC  0E00               	movlw	0
  3761   0027FE  6E38               	movwf	(_t+1)^0,c
  3762   002800  0E00               	movlw	0
  3763   002802  6E39               	movwf	(_t+2)^0,c
  3764   002804  0E00               	movlw	0
  3765   002806  6E3A               	movwf	(_t+3)^0,c
  3766   002808  0012               	return		;funcret
  3767   00280A                     __end_of_smInit:
  3768                           	callstack 0
  3769                           
  3770 ;; *************** function _varInit *****************
  3771 ;; Defined at:
  3772 ;;		line 16 in file "var.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3786 ;;      Params:         0       0       0       0       0       0       0       0       0
  3787 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3788 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3789 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3790 ;;Total ram usage:        8 bytes
  3791 ;; Hardware stack levels used: 1
  3792 ;; Hardware stack levels required when called: 6
  3793 ;; This function calls:
  3794 ;;		_bcd2dec
  3795 ;;		_dec2bcd
  3796 ;;		_dsReadData
  3797 ;;		_dsWriteData
  3798 ;;		_setAlarmLevel
  3799 ;; This function is called by:
  3800 ;;		_smInit
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text18
  3805   001874                     __ptext18:
  3806                           	callstack 0
  3807   001874                     _varInit:
  3808                           	callstack 23
  3809   001874                     
  3810                           ;var.c: 17:     state = 0;
  3811   001874  0E00               	movlw	0
  3812   001876  6E4B               	movwf	_state^0,c
  3813                           
  3814                           ;var.c: 18:     time = 1000;
  3815   001878  0E03               	movlw	3
  3816   00187A  6E3C               	movwf	(_time+1)^0,c
  3817   00187C  0EE8               	movlw	232
  3818   00187E  6E3B               	movwf	_time^0,c
  3819   001880                     
  3820                           ;var.c: 20:     alarmLevelHigh = dsReadData(0x20);
  3821   001880  0E00               	movlw	0
  3822   001882  6E0F               	movwf	(dsReadData@address+1)^0,c
  3823   001884  0E20               	movlw	32
  3824   001886  6E0E               	movwf	dsReadData@address^0,c
  3825   001888  EC08  F012         	call	_dsReadData	;wreg free
  3826   00188C  500E               	movf	?_dsReadData^0,w,c
  3827   00188E  6E49               	movwf	_alarmLevelHigh^0,c
  3828   001890                     
  3829                           ;var.c: 21:     alarmLevelLow = dsReadData(0x21);
  3830   001890  0E00               	movlw	0
  3831   001892  6E0F               	movwf	(dsReadData@address+1)^0,c
  3832   001894  0E21               	movlw	33
  3833   001896  6E0E               	movwf	dsReadData@address^0,c
  3834   001898  EC08  F012         	call	_dsReadData	;wreg free
  3835   00189C  500E               	movf	?_dsReadData^0,w,c
  3836   00189E  6E48               	movwf	_alarmLevelLow^0,c
  3837   0018A0                     
  3838                           ;var.c: 22:     language = dsReadData(0x23) != 1 ? 0 : 1;
  3839   0018A0  0E00               	movlw	0
  3840   0018A2  6E0F               	movwf	(dsReadData@address+1)^0,c
  3841   0018A4  0E23               	movlw	35
  3842   0018A6  6E0E               	movwf	dsReadData@address^0,c
  3843   0018A8  EC08  F012         	call	_dsReadData	;wreg free
  3844   0018AC  040E               	decf	?_dsReadData^0,w,c
  3845   0018AE  100F               	iorwf	(?_dsReadData+1)^0,w,c
  3846   0018B0  B4D8               	btfsc	status,2,c
  3847   0018B2  EF5D  F00C         	goto	u3051
  3848   0018B6  EF60  F00C         	goto	u3050
  3849   0018BA                     u3051:
  3850   0018BA  0E01               	movlw	1
  3851   0018BC  EF61  F00C         	goto	u3060
  3852   0018C0                     u3050:
  3853   0018C0  0E00               	movlw	0
  3854   0018C2                     u3060:
  3855   0018C2  6E4A               	movwf	_language^0,c
  3856   0018C4                     
  3857                           ;var.c: 23:     if(alarmLevelHigh + alarmLevelLow != dsReadData(0x22)){
  3858   0018C4  0E00               	movlw	0
  3859   0018C6  6E0F               	movwf	(dsReadData@address+1)^0,c
  3860   0018C8  0E22               	movlw	34
  3861   0018CA  6E0E               	movwf	dsReadData@address^0,c
  3862   0018CC  EC08  F012         	call	_dsReadData	;wreg free
  3863   0018D0  5048               	movf	_alarmLevelLow^0,w,c
  3864   0018D2  C049  F023         	movff	_alarmLevelHigh,??_varInit
  3865   0018D6  6A24               	clrf	(??_varInit+1)^0,c
  3866   0018D8  2623               	addwf	??_varInit^0,f,c
  3867   0018DA  0E00               	movlw	0
  3868   0018DC  2224               	addwfc	(??_varInit+1)^0,f,c
  3869   0018DE  500E               	movf	?_dsReadData^0,w,c
  3870   0018E0  1823               	xorwf	??_varInit^0,w,c
  3871   0018E2  E109               	bnz	u3070
  3872   0018E4  500F               	movf	(?_dsReadData+1)^0,w,c
  3873   0018E6  1824               	xorwf	(??_varInit+1)^0,w,c
  3874   0018E8  B4D8               	btfsc	status,2,c
  3875   0018EA  EF79  F00C         	goto	u3071
  3876   0018EE  EF7B  F00C         	goto	u3070
  3877   0018F2                     u3071:
  3878   0018F2  EF8B  F00C         	goto	l3582
  3879   0018F6                     u3070:
  3880   0018F6                     
  3881                           ;var.c: 24:         setAlarmLevel(50, 0);
  3882   0018F6  0E00               	movlw	0
  3883   0018F8  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  3884   0018FA  0E32               	movlw	50
  3885   0018FC  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  3886   0018FE  0E00               	movlw	0
  3887   001900  6E22               	movwf	setAlarmLevel@lh^0,c
  3888   001902  ECBF  F011         	call	_setAlarmLevel	;wreg free
  3889                           
  3890                           ;var.c: 25:         setAlarmLevel(100, 1);
  3891   001906  0E00               	movlw	0
  3892   001908  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  3893   00190A  0E64               	movlw	100
  3894   00190C  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  3895   00190E  0E01               	movlw	1
  3896   001910  6E22               	movwf	setAlarmLevel@lh^0,c
  3897   001912  ECBF  F011         	call	_setAlarmLevel	;wreg free
  3898   001916                     l3582:
  3899                           
  3900                           ;var.c: 28:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x00)& 0x7f)) == 0 ? 0 : (bcd2d
      +                          ec(dsReadData(0x00)& 0x7f))),0x00));
  3901   001916  0E00               	movlw	0
  3902   001918  6E0F               	movwf	(dsReadData@address+1)^0,c
  3903   00191A  0E00               	movlw	0
  3904   00191C  6E0E               	movwf	dsReadData@address^0,c
  3905   00191E  EC08  F012         	call	_dsReadData	;wreg free
  3906   001922  0E7F               	movlw	127
  3907   001924  140E               	andwf	?_dsReadData^0,w,c
  3908   001926  6E13               	movwf	bcd2dec@value^0,c
  3909   001928  6A14               	clrf	(bcd2dec@value+1)^0,c
  3910   00192A  EC4E  F012         	call	_bcd2dec	;wreg free
  3911   00192E  5013               	movf	?_bcd2dec^0,w,c
  3912   001930  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  3913   001932  B4D8               	btfsc	status,2,c
  3914   001934  EF9E  F00C         	goto	u3081
  3915   001938  EFA0  F00C         	goto	u3080
  3916   00193C                     u3081:
  3917   00193C  EFB2  F00C         	goto	l3586
  3918   001940                     u3080:
  3919   001940  0E00               	movlw	0
  3920   001942  6E0F               	movwf	(dsReadData@address+1)^0,c
  3921   001944  0E00               	movlw	0
  3922   001946  6E0E               	movwf	dsReadData@address^0,c
  3923   001948  EC08  F012         	call	_dsReadData	;wreg free
  3924   00194C  0E7F               	movlw	127
  3925   00194E  140E               	andwf	?_dsReadData^0,w,c
  3926   001950  6E13               	movwf	bcd2dec@value^0,c
  3927   001952  6A14               	clrf	(bcd2dec@value+1)^0,c
  3928   001954  EC4E  F012         	call	_bcd2dec	;wreg free
  3929   001958  C013  F025         	movff	?_bcd2dec,_varInit$522
  3930   00195C  C014  F026         	movff	?_bcd2dec+1,_varInit$522+1
  3931   001960  EFB6  F00C         	goto	l3588
  3932   001964                     l3586:
  3933   001964  0E00               	movlw	0
  3934   001966  6E26               	movwf	(_varInit$522+1)^0,c
  3935   001968  0E00               	movlw	0
  3936   00196A  6E25               	movwf	_varInit$522^0,c
  3937   00196C                     l3588:
  3938   00196C  0E00               	movlw	0
  3939   00196E  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3940   001970  0E00               	movlw	0
  3941   001972  6E1D               	movwf	dsWriteData@address^0,c
  3942   001974  C025  F017         	movff	_varInit$522,dec2bcd@value
  3943   001978  C026  F018         	movff	_varInit$522+1,dec2bcd@value+1
  3944   00197C  EC08  F011         	call	_dec2bcd	;wreg free
  3945   001980  5017               	movf	?_dec2bcd^0,w,c
  3946   001982  EC0B  F013         	call	_dsWriteData
  3947   001986                     
  3948                           ;var.c: 29:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x7f)) == 0 ? 45 : (bcd2
      +                          dec(dsReadData(0x01)& 0x7f))),0x01));
  3949   001986  0E00               	movlw	0
  3950   001988  6E0F               	movwf	(dsReadData@address+1)^0,c
  3951   00198A  0E01               	movlw	1
  3952   00198C  6E0E               	movwf	dsReadData@address^0,c
  3953   00198E  EC08  F012         	call	_dsReadData	;wreg free
  3954   001992  0E7F               	movlw	127
  3955   001994  140E               	andwf	?_dsReadData^0,w,c
  3956   001996  6E13               	movwf	bcd2dec@value^0,c
  3957   001998  6A14               	clrf	(bcd2dec@value+1)^0,c
  3958   00199A  EC4E  F012         	call	_bcd2dec	;wreg free
  3959   00199E  5013               	movf	?_bcd2dec^0,w,c
  3960   0019A0  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  3961   0019A2  B4D8               	btfsc	status,2,c
  3962   0019A4  EFD6  F00C         	goto	u3091
  3963   0019A8  EFD8  F00C         	goto	u3090
  3964   0019AC                     u3091:
  3965   0019AC  EFEA  F00C         	goto	l3594
  3966   0019B0                     u3090:
  3967   0019B0  0E00               	movlw	0
  3968   0019B2  6E0F               	movwf	(dsReadData@address+1)^0,c
  3969   0019B4  0E01               	movlw	1
  3970   0019B6  6E0E               	movwf	dsReadData@address^0,c
  3971   0019B8  EC08  F012         	call	_dsReadData	;wreg free
  3972   0019BC  0E7F               	movlw	127
  3973   0019BE  140E               	andwf	?_dsReadData^0,w,c
  3974   0019C0  6E13               	movwf	bcd2dec@value^0,c
  3975   0019C2  6A14               	clrf	(bcd2dec@value+1)^0,c
  3976   0019C4  EC4E  F012         	call	_bcd2dec	;wreg free
  3977   0019C8  C013  F027         	movff	?_bcd2dec,_varInit$523
  3978   0019CC  C014  F028         	movff	?_bcd2dec+1,_varInit$523+1
  3979   0019D0  EFEE  F00C         	goto	l3596
  3980   0019D4                     l3594:
  3981   0019D4  0E00               	movlw	0
  3982   0019D6  6E28               	movwf	(_varInit$523+1)^0,c
  3983   0019D8  0E2D               	movlw	45
  3984   0019DA  6E27               	movwf	_varInit$523^0,c
  3985   0019DC                     l3596:
  3986   0019DC  0E00               	movlw	0
  3987   0019DE  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3988   0019E0  0E01               	movlw	1
  3989   0019E2  6E1D               	movwf	dsWriteData@address^0,c
  3990   0019E4  C027  F017         	movff	_varInit$523,dec2bcd@value
  3991   0019E8  C028  F018         	movff	_varInit$523+1,dec2bcd@value+1
  3992   0019EC  EC08  F011         	call	_dec2bcd	;wreg free
  3993   0019F0  5017               	movf	?_dec2bcd^0,w,c
  3994   0019F2  EC0B  F013         	call	_dsWriteData
  3995   0019F6                     
  3996                           ;var.c: 30:     (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x02)& 0x7f)) == 0 ? 15 : (bcd2
      +                          dec(dsReadData(0x02)& 0x7f))),0x02));
  3997   0019F6  0E00               	movlw	0
  3998   0019F8  6E0F               	movwf	(dsReadData@address+1)^0,c
  3999   0019FA  0E02               	movlw	2
  4000   0019FC  6E0E               	movwf	dsReadData@address^0,c
  4001   0019FE  EC08  F012         	call	_dsReadData	;wreg free
  4002   001A02  0E7F               	movlw	127
  4003   001A04  140E               	andwf	?_dsReadData^0,w,c
  4004   001A06  6E13               	movwf	bcd2dec@value^0,c
  4005   001A08  6A14               	clrf	(bcd2dec@value+1)^0,c
  4006   001A0A  EC4E  F012         	call	_bcd2dec	;wreg free
  4007   001A0E  5013               	movf	?_bcd2dec^0,w,c
  4008   001A10  1014               	iorwf	(?_bcd2dec+1)^0,w,c
  4009   001A12  B4D8               	btfsc	status,2,c
  4010   001A14  EF0E  F00D         	goto	u3101
  4011   001A18  EF10  F00D         	goto	u3100
  4012   001A1C                     u3101:
  4013   001A1C  EF22  F00D         	goto	l3602
  4014   001A20                     u3100:
  4015   001A20  0E00               	movlw	0
  4016   001A22  6E0F               	movwf	(dsReadData@address+1)^0,c
  4017   001A24  0E02               	movlw	2
  4018   001A26  6E0E               	movwf	dsReadData@address^0,c
  4019   001A28  EC08  F012         	call	_dsReadData	;wreg free
  4020   001A2C  0E7F               	movlw	127
  4021   001A2E  140E               	andwf	?_dsReadData^0,w,c
  4022   001A30  6E13               	movwf	bcd2dec@value^0,c
  4023   001A32  6A14               	clrf	(bcd2dec@value+1)^0,c
  4024   001A34  EC4E  F012         	call	_bcd2dec	;wreg free
  4025   001A38  C013  F029         	movff	?_bcd2dec,_varInit$524
  4026   001A3C  C014  F02A         	movff	?_bcd2dec+1,_varInit$524+1
  4027   001A40  EF26  F00D         	goto	l3604
  4028   001A44                     l3602:
  4029   001A44  0E00               	movlw	0
  4030   001A46  6E2A               	movwf	(_varInit$524+1)^0,c
  4031   001A48  0E0F               	movlw	15
  4032   001A4A  6E29               	movwf	_varInit$524^0,c
  4033   001A4C                     l3604:
  4034   001A4C  0E00               	movlw	0
  4035   001A4E  6E1E               	movwf	(dsWriteData@address+1)^0,c
  4036   001A50  0E02               	movlw	2
  4037   001A52  6E1D               	movwf	dsWriteData@address^0,c
  4038   001A54  C029  F017         	movff	_varInit$524,dec2bcd@value
  4039   001A58  C02A  F018         	movff	_varInit$524+1,dec2bcd@value+1
  4040   001A5C  EC08  F011         	call	_dec2bcd	;wreg free
  4041   001A60  5017               	movf	?_dec2bcd^0,w,c
  4042   001A62  EC0B  F013         	call	_dsWriteData
  4043   001A66  0012               	return		;funcret
  4044   001A68                     __end_of_varInit:
  4045                           	callstack 0
  4046                           
  4047 ;; *************** function _setAlarmLevel *****************
  4048 ;; Defined at:
  4049 ;;		line 63 in file "var.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  newAlarmLeve    2   31[COMRAM] int 
  4052 ;;  lh              1   33[COMRAM] unsigned char 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;		None
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4064 ;;      Params:         3       0       0       0       0       0       0       0       0
  4065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4067 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4068 ;;Total ram usage:        3 bytes
  4069 ;; Hardware stack levels used: 1
  4070 ;; Hardware stack levels required when called: 5
  4071 ;; This function calls:
  4072 ;;		_dsWriteData
  4073 ;; This function is called by:
  4074 ;;		_smLoop
  4075 ;;		_varInit
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text19
  4080   00237E                     __ptext19:
  4081                           	callstack 0
  4082   00237E                     _setAlarmLevel:
  4083                           	callstack 24
  4084   00237E                     
  4085                           ;var.c: 64:     if(lh == 1){
  4086   00237E  0422               	decf	setAlarmLevel@lh^0,w,c
  4087   002380  A4D8               	btfss	status,2,c
  4088   002382  EFC5  F011         	goto	u2871
  4089   002386  EFC7  F011         	goto	u2870
  4090   00238A                     u2871:
  4091   00238A  EFD2  F011         	goto	l741
  4092   00238E                     u2870:
  4093   00238E                     
  4094                           ;var.c: 65:         alarmLevelHigh = newAlarmLevel;
  4095   00238E  C020  F049         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelHigh
  4096   002392                     
  4097                           ;var.c: 67:         dsWriteData(alarmLevelHigh, 0x20);
  4098   002392  0E00               	movlw	0
  4099   002394  6E1E               	movwf	(dsWriteData@address+1)^0,c
  4100   002396  0E20               	movlw	32
  4101   002398  6E1D               	movwf	dsWriteData@address^0,c
  4102   00239A  5049               	movf	_alarmLevelHigh^0,w,c
  4103   00239C  EC0B  F013         	call	_dsWriteData
  4104                           
  4105                           ;var.c: 68:     }
  4106   0023A0  EFDB  F011         	goto	l742
  4107   0023A4                     l741:
  4108                           
  4109                           ;var.c: 70:     {;var.c: 71:         alarmLevelLow = newAlarmLevel;
  4110   0023A4  C020  F048         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelLow
  4111   0023A8                     
  4112                           ;var.c: 73:         dsWriteData(alarmLevelLow, 0x21);
  4113   0023A8  0E00               	movlw	0
  4114   0023AA  6E1E               	movwf	(dsWriteData@address+1)^0,c
  4115   0023AC  0E21               	movlw	33
  4116   0023AE  6E1D               	movwf	dsWriteData@address^0,c
  4117   0023B0  5048               	movf	_alarmLevelLow^0,w,c
  4118   0023B2  EC0B  F013         	call	_dsWriteData
  4119   0023B6                     l742:
  4120                           
  4121                           ;var.c: 75:     dsWriteData(alarmLevelHigh + alarmLevelLow, 0x22);
  4122   0023B6  0E00               	movlw	0
  4123   0023B8  6E1E               	movwf	(dsWriteData@address+1)^0,c
  4124   0023BA  0E22               	movlw	34
  4125   0023BC  6E1D               	movwf	dsWriteData@address^0,c
  4126   0023BE  5049               	movf	_alarmLevelHigh^0,w,c
  4127   0023C0  2448               	addwf	_alarmLevelLow^0,w,c
  4128   0023C2  EC0B  F013         	call	_dsWriteData
  4129   0023C6  0012               	return		;funcret
  4130   0023C8                     __end_of_setAlarmLevel:
  4131                           	callstack 0
  4132                           
  4133 ;; *************** function _dsWriteData *****************
  4134 ;; Defined at:
  4135 ;;		line 26 in file "ds1307.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  value           1    wreg     unsigned char 
  4138 ;;  address         2   28[COMRAM] int 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  value           1   30[COMRAM] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4150 ;;      Params:         2       0       0       0       0       0       0       0       0
  4151 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4153 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4154 ;;Total ram usage:        3 bytes
  4155 ;; Hardware stack levels used: 1
  4156 ;; Hardware stack levels required when called: 4
  4157 ;; This function calls:
  4158 ;;		_i2cWriteByte
  4159 ;; This function is called by:
  4160 ;;		_smLoop
  4161 ;;		_varInit
  4162 ;;		_setAlarmLevel
  4163 ;;		_setLanguage
  4164 ;;		_dsStartClock
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text20
  4169   002616                     __ptext20:
  4170                           	callstack 0
  4171   002616                     _dsWriteData:
  4172                           	callstack 24
  4173                           
  4174                           ;incstack = 0
  4175                           ;dsWriteData@value stored from wreg
  4176   002616  6E1F               	movwf	dsWriteData@value^0,c
  4177   002618                     
  4178                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  4179   002618  0E00               	movlw	0
  4180   00261A  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4181   00261C  0EDE               	movlw	222
  4182   00261E  6E09               	movwf	i2cWriteByte@byte^0,c
  4183   002620  0E01               	movlw	1
  4184   002622  EC39  F011         	call	_i2cWriteByte
  4185                           
  4186                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  4187   002626  0E00               	movlw	0
  4188   002628  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4189   00262A  C01D  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  4190   00262E  0E00               	movlw	0
  4191   002630  EC39  F011         	call	_i2cWriteByte
  4192                           
  4193                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  4194   002634  0E01               	movlw	1
  4195   002636  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4196   002638  C01F  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  4197   00263C  0E00               	movlw	0
  4198   00263E  EC39  F011         	call	_i2cWriteByte
  4199   002642  0012               	return		;funcret
  4200   002644                     __end_of_dsWriteData:
  4201                           	callstack 0
  4202                           
  4203 ;; *************** function _dsReadData *****************
  4204 ;; Defined at:
  4205 ;;		line 31 in file "ds1307.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  address         2   13[COMRAM] int 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  result          2   16[COMRAM] int 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  2   13[COMRAM] int 
  4212 ;; Registers used:
  4213 ;;		wreg, status,2, status,0, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4219 ;;      Params:         2       0       0       0       0       0       0       0       0
  4220 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4221 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4222 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4223 ;;Total ram usage:        5 bytes
  4224 ;; Hardware stack levels used: 1
  4225 ;; Hardware stack levels required when called: 4
  4226 ;; This function calls:
  4227 ;;		_i2cReadByte
  4228 ;;		_i2cWriteByte
  4229 ;; This function is called by:
  4230 ;;		_outputPrint
  4231 ;;		_smLoop
  4232 ;;		_varInit
  4233 ;;		_dsStartClock
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text21
  4238   002410                     __ptext21:
  4239                           	callstack 0
  4240   002410                     _dsReadData:
  4241                           	callstack 24
  4242   002410                     
  4243                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  4244   002410  0E00               	movlw	0
  4245   002412  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4246   002414  0EDE               	movlw	222
  4247   002416  6E09               	movwf	i2cWriteByte@byte^0,c
  4248   002418  0E01               	movlw	1
  4249   00241A  EC39  F011         	call	_i2cWriteByte
  4250                           
  4251                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  4252   00241E  0E00               	movlw	0
  4253   002420  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4254   002422  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  4255   002426  0E00               	movlw	0
  4256   002428  EC39  F011         	call	_i2cWriteByte
  4257                           
  4258                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  4259   00242C  0E00               	movlw	0
  4260   00242E  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4261   002430  0EDF               	movlw	223
  4262   002432  6E09               	movwf	i2cWriteByte@byte^0,c
  4263   002434  0E01               	movlw	1
  4264   002436  EC39  F011         	call	_i2cWriteByte
  4265                           
  4266                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  4267   00243A  0E01               	movlw	1
  4268   00243C  6E08               	movwf	i2cReadByte@send_stop^0,c
  4269   00243E  0E01               	movlw	1
  4270   002440  EC95  F011         	call	_i2cReadByte
  4271   002444  6E10               	movwf	??_dsReadData^0,c
  4272   002446  5010               	movf	??_dsReadData^0,w,c
  4273   002448  6E11               	movwf	dsReadData@result^0,c
  4274   00244A  6A12               	clrf	(dsReadData@result+1)^0,c
  4275   00244C                     
  4276                           ;ds1307.c: 37:  return result;
  4277   00244C  C011  F00E         	movff	dsReadData@result,?_dsReadData
  4278   002450  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  4279   002454  0012               	return		;funcret
  4280   002456                     __end_of_dsReadData:
  4281                           	callstack 0
  4282                           
  4283 ;; *************** function _i2cWriteByte *****************
  4284 ;; Defined at:
  4285 ;;		line 113 in file "soft_i2c.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  send_start      1    wreg     unsigned char 
  4288 ;;  send_stop       1    7[COMRAM] unsigned char 
  4289 ;;  byte            1    8[COMRAM] unsigned char 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  send_start      1    9[COMRAM] unsigned char 
  4292 ;;  bit             1   10[COMRAM] unsigned char 
  4293 ;;  nack            1    0        unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      unsigned char 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         2       0       0       0       0       0       0       0       0
  4304 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4306 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4307 ;;Total ram usage:        4 bytes
  4308 ;; Hardware stack levels used: 1
  4309 ;; Hardware stack levels required when called: 3
  4310 ;; This function calls:
  4311 ;;		_i2c_read_bit
  4312 ;;		_i2c_start
  4313 ;;		_i2c_stop
  4314 ;;		_i2c_write_bit
  4315 ;; This function is called by:
  4316 ;;		_dsWriteData
  4317 ;;		_dsReadData
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text22
  4322   002272                     __ptext22:
  4323                           	callstack 0
  4324   002272                     _i2cWriteByte:
  4325                           	callstack 24
  4326                           
  4327                           ;incstack = 0
  4328                           ;i2cWriteByte@send_start stored from wreg
  4329   002272  6E0A               	movwf	i2cWriteByte@send_start^0,c
  4330   002274                     
  4331                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  4332   002274  500A               	movf	i2cWriteByte@send_start^0,w,c
  4333   002276  B4D8               	btfsc	status,2,c
  4334   002278  EF40  F011         	goto	u2491
  4335   00227C  EF42  F011         	goto	u2490
  4336   002280                     u2491:
  4337   002280  EF44  F011         	goto	l3066
  4338   002284                     u2490:
  4339   002284                     
  4340                           ;soft_i2c.c: 117:   i2c_start();
  4341   002284  EC2B  F012         	call	_i2c_start	;wreg free
  4342   002288                     l3066:
  4343                           
  4344                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  4345   002288  0E00               	movlw	0
  4346   00228A  6E0B               	movwf	i2cWriteByte@bit^0,c
  4347   00228C                     l3072:
  4348                           
  4349                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  4350   00228C  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  4351   00228E  EF4B  F011         	goto	u2501
  4352   002292  EF4E  F011         	goto	u2500
  4353   002296                     u2501:
  4354   002296  0E01               	movlw	1
  4355   002298  EF4F  F011         	goto	u2510
  4356   00229C                     u2500:
  4357   00229C  0E00               	movlw	0
  4358   00229E                     u2510:
  4359   00229E  EC69  F011         	call	_i2c_write_bit
  4360   0022A2                     
  4361                           ;soft_i2c.c: 121:   byte <<= 1;
  4362   0022A2  90D8               	bcf	status,0,c
  4363   0022A4  3609               	rlcf	i2cWriteByte@byte^0,f,c
  4364   0022A6                     
  4365                           ;soft_i2c.c: 122:  }
  4366   0022A6  2A0B               	incf	i2cWriteByte@bit^0,f,c
  4367   0022A8  0E07               	movlw	7
  4368   0022AA  640B               	cpfsgt	i2cWriteByte@bit^0,c
  4369   0022AC  EF5A  F011         	goto	u2521
  4370   0022B0  EF5C  F011         	goto	u2520
  4371   0022B4                     u2521:
  4372   0022B4  EF46  F011         	goto	l3072
  4373   0022B8                     u2520:
  4374   0022B8  ECDB  F012         	call	_i2c_read_bit	;wreg free
  4375   0022BC                     
  4376                           ;soft_i2c.c: 124:  if (send_stop) {
  4377   0022BC  5008               	movf	i2cWriteByte@send_stop^0,w,c
  4378   0022BE  B4D8               	btfsc	status,2,c
  4379   0022C0  EF64  F011         	goto	u2531
  4380   0022C4  EF66  F011         	goto	u2530
  4381   0022C8                     u2531:
  4382   0022C8  EF68  F011         	goto	l416
  4383   0022CC                     u2530:
  4384   0022CC                     
  4385                           ;soft_i2c.c: 125:   i2c_stop();
  4386   0022CC  EC22  F013         	call	_i2c_stop	;wreg free
  4387   0022D0                     l416:
  4388   0022D0  0012               	return		;funcret
  4389   0022D2                     __end_of_i2cWriteByte:
  4390                           	callstack 0
  4391                           
  4392 ;; *************** function _i2c_start *****************
  4393 ;; Defined at:
  4394 ;;		line 52 in file "soft_i2c.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;		None
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4408 ;;      Params:         0       0       0       0       0       0       0       0       0
  4409 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4411 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4412 ;;Total ram usage:        0 bytes
  4413 ;; Hardware stack levels used: 1
  4414 ;; Hardware stack levels required when called: 2
  4415 ;; This function calls:
  4416 ;;		_I2C_delay
  4417 ;;		_clear_SCL
  4418 ;;		_clear_SDA
  4419 ;;		_read_SCL
  4420 ;;		_read_SDA
  4421 ;; This function is called by:
  4422 ;;		_i2cWriteByte
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text23
  4427   002456                     __ptext23:
  4428                           	callstack 0
  4429   002456                     _i2c_start:
  4430                           	callstack 24
  4431   002456                     
  4432                           ;soft_i2c.c: 54:  if (started) {
  4433   002456  5053               	movf	_started^0,w,c
  4434   002458  B4D8               	btfsc	status,2,c
  4435   00245A  EF31  F012         	goto	u2421
  4436   00245E  EF33  F012         	goto	u2420
  4437   002462                     u2421:
  4438   002462  EF43  F012         	goto	l3002
  4439   002466                     u2420:
  4440   002466                     
  4441                           ;soft_i2c.c: 55:   read_SDA();
  4442   002466  EC6F  F012         	call	_read_SDA	;wreg free
  4443   00246A                     
  4444                           ;soft_i2c.c: 56:   I2C_delay();
  4445   00246A  EC7D  F014         	call	_I2C_delay	;wreg free
  4446   00246E                     l2998:
  4447   00246E  EC8B  F012         	call	_read_SCL	;wreg free
  4448   002472  0900               	iorlw	0
  4449   002474  B4D8               	btfsc	status,2,c
  4450   002476  EF3F  F012         	goto	u2431
  4451   00247A  EF41  F012         	goto	u2430
  4452   00247E                     u2431:
  4453   00247E  EF37  F012         	goto	l2998
  4454   002482                     u2430:
  4455   002482                     
  4456                           ;soft_i2c.c: 59:   I2C_delay();
  4457   002482  EC7D  F014         	call	_I2C_delay	;wreg free
  4458   002486                     l3002:
  4459                           
  4460                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  4461   002486  EC6F  F012         	call	_read_SDA	;wreg free
  4462   00248A                     
  4463                           ;soft_i2c.c: 65:  clear_SDA();
  4464   00248A  EC7C  F013         	call	_clear_SDA	;wreg free
  4465   00248E                     
  4466                           ;soft_i2c.c: 66:  I2C_delay();
  4467   00248E  EC7D  F014         	call	_I2C_delay	;wreg free
  4468   002492                     
  4469                           ;soft_i2c.c: 67:  clear_SCL();
  4470   002492  EC91  F013         	call	_clear_SCL	;wreg free
  4471   002496                     
  4472                           ;soft_i2c.c: 68:  started = 1;
  4473   002496  0E01               	movlw	1
  4474   002498  6E53               	movwf	_started^0,c
  4475   00249A  0012               	return		;funcret
  4476   00249C                     __end_of_i2c_start:
  4477                           	callstack 0
  4478                           
  4479 ;; *************** function _i2cReadByte *****************
  4480 ;; Defined at:
  4481 ;;		line 131 in file "soft_i2c.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  nack            1    wreg     unsigned char 
  4484 ;;  send_stop       1    7[COMRAM] unsigned char 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  nack            1    9[COMRAM] unsigned char 
  4487 ;;  bit             2   10[COMRAM] unsigned int 
  4488 ;;  byte            1   12[COMRAM] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      unsigned char 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4498 ;;      Params:         1       0       0       0       0       0       0       0       0
  4499 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4500 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4501 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4502 ;;Total ram usage:        6 bytes
  4503 ;; Hardware stack levels used: 1
  4504 ;; Hardware stack levels required when called: 3
  4505 ;; This function calls:
  4506 ;;		_i2c_read_bit
  4507 ;;		_i2c_stop
  4508 ;;		_i2c_write_bit
  4509 ;; This function is called by:
  4510 ;;		_dsReadData
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text24
  4515   00232A                     __ptext24:
  4516                           	callstack 0
  4517   00232A                     _i2cReadByte:
  4518                           	callstack 24
  4519                           
  4520                           ;incstack = 0
  4521                           ;i2cReadByte@nack stored from wreg
  4522   00232A  6E0A               	movwf	i2cReadByte@nack^0,c
  4523   00232C                     
  4524                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  4525   00232C  0E00               	movlw	0
  4526   00232E  6E0D               	movwf	i2cReadByte@byte^0,c
  4527                           
  4528                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  4529   002330  0E00               	movlw	0
  4530   002332  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  4531   002334  0E00               	movlw	0
  4532   002336  6E0B               	movwf	i2cReadByte@bit^0,c
  4533   002338                     l3138:
  4534                           
  4535                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  4536   002338  ECDB  F012         	call	_i2c_read_bit	;wreg free
  4537   00233C  6E09               	movwf	??_i2cReadByte^0,c
  4538   00233E  500D               	movf	i2cReadByte@byte^0,w,c
  4539   002340  240D               	addwf	i2cReadByte@byte^0,w,c
  4540   002342  1009               	iorwf	??_i2cReadByte^0,w,c
  4541   002344  6E0D               	movwf	i2cReadByte@byte^0,c
  4542   002346                     
  4543                           ;soft_i2c.c: 136:  }
  4544   002346  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  4545   002348  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  4546   00234A  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  4547   00234C  E109               	bnz	u2600
  4548   00234E  0E08               	movlw	8
  4549   002350  5C0B               	subwf	i2cReadByte@bit^0,w,c
  4550   002352  A0D8               	btfss	status,0,c
  4551   002354  EFAE  F011         	goto	u2601
  4552   002358  EFB0  F011         	goto	u2600
  4553   00235C                     u2601:
  4554   00235C  EF9C  F011         	goto	l3138
  4555   002360                     u2600:
  4556   002360                     
  4557                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  4558   002360  500A               	movf	i2cReadByte@nack^0,w,c
  4559   002362  EC69  F011         	call	_i2c_write_bit
  4560   002366                     
  4561                           ;soft_i2c.c: 138:  if (send_stop) {
  4562   002366  5008               	movf	i2cReadByte@send_stop^0,w,c
  4563   002368  B4D8               	btfsc	status,2,c
  4564   00236A  EFB9  F011         	goto	u2611
  4565   00236E  EFBB  F011         	goto	u2610
  4566   002372                     u2611:
  4567   002372  EFBD  F011         	goto	l3150
  4568   002376                     u2610:
  4569   002376                     
  4570                           ;soft_i2c.c: 139:   i2c_stop();
  4571   002376  EC22  F013         	call	_i2c_stop	;wreg free
  4572   00237A                     l3150:
  4573                           
  4574                           ;soft_i2c.c: 141:  return byte;
  4575   00237A  500D               	movf	i2cReadByte@byte^0,w,c
  4576   00237C  0012               	return		;funcret
  4577   00237E                     __end_of_i2cReadByte:
  4578                           	callstack 0
  4579                           
  4580 ;; *************** function _i2c_write_bit *****************
  4581 ;; Defined at:
  4582 ;;		line 84 in file "soft_i2c.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  bit             1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  bit             1    6[COMRAM] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  1    wreg      void 
  4589 ;; Registers used:
  4590 ;;		wreg, status,2, status,0, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4596 ;;      Params:         0       0       0       0       0       0       0       0       0
  4597 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4599 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4600 ;;Total ram usage:        1 bytes
  4601 ;; Hardware stack levels used: 1
  4602 ;; Hardware stack levels required when called: 2
  4603 ;; This function calls:
  4604 ;;		_I2C_delay
  4605 ;;		_clear_SCL
  4606 ;;		_clear_SDA
  4607 ;;		_read_SCL
  4608 ;;		_read_SDA
  4609 ;; This function is called by:
  4610 ;;		_i2cWriteByte
  4611 ;;		_i2cReadByte
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text25
  4616   0022D2                     __ptext25:
  4617                           	callstack 0
  4618   0022D2                     _i2c_write_bit:
  4619                           	callstack 24
  4620                           
  4621                           ;incstack = 0
  4622                           ;i2c_write_bit@bit stored from wreg
  4623   0022D2  6E07               	movwf	i2c_write_bit@bit^0,c
  4624   0022D4                     
  4625                           ;soft_i2c.c: 85:  if (bit) {
  4626   0022D4  5007               	movf	i2c_write_bit@bit^0,w,c
  4627   0022D6  B4D8               	btfsc	status,2,c
  4628   0022D8  EF70  F011         	goto	u2451
  4629   0022DC  EF72  F011         	goto	u2450
  4630   0022E0                     u2451:
  4631   0022E0  EF76  F011         	goto	l3030
  4632   0022E4                     u2450:
  4633   0022E4                     
  4634                           ;soft_i2c.c: 86:   read_SDA();
  4635   0022E4  EC6F  F012         	call	_read_SDA	;wreg free
  4636                           
  4637                           ;soft_i2c.c: 87:  } else {
  4638   0022E8  EF78  F011         	goto	l3032
  4639   0022EC                     l3030:
  4640                           
  4641                           ;soft_i2c.c: 88:   clear_SDA();
  4642   0022EC  EC7C  F013         	call	_clear_SDA	;wreg free
  4643   0022F0                     l3032:
  4644                           
  4645                           ;soft_i2c.c: 90:  I2C_delay();
  4646   0022F0  EC7D  F014         	call	_I2C_delay	;wreg free
  4647   0022F4                     l3034:
  4648   0022F4  EC8B  F012         	call	_read_SCL	;wreg free
  4649   0022F8  0900               	iorlw	0
  4650   0022FA  B4D8               	btfsc	status,2,c
  4651   0022FC  EF82  F011         	goto	u2461
  4652   002300  EF84  F011         	goto	u2460
  4653   002304                     u2461:
  4654   002304  EF7A  F011         	goto	l3034
  4655   002308                     u2460:
  4656   002308                     
  4657                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  4658   002308  5007               	movf	i2c_write_bit@bit^0,w,c
  4659   00230A  B4D8               	btfsc	status,2,c
  4660   00230C  EF8A  F011         	goto	u2471
  4661   002310  EF8C  F011         	goto	u2470
  4662   002314                     u2471:
  4663   002314  EF8E  F011         	goto	l3040
  4664   002318                     u2470:
  4665   002318  EC6F  F012         	call	_read_SDA	;wreg free
  4666   00231C                     l3040:
  4667                           
  4668                           ;soft_i2c.c: 95:  I2C_delay();
  4669   00231C  EC7D  F014         	call	_I2C_delay	;wreg free
  4670   002320                     
  4671                           ;soft_i2c.c: 96:  clear_SCL();
  4672   002320  EC91  F013         	call	_clear_SCL	;wreg free
  4673   002324                     
  4674                           ;soft_i2c.c: 97:  I2C_delay();
  4675   002324  EC7D  F014         	call	_I2C_delay	;wreg free
  4676   002328  0012               	return		;funcret
  4677   00232A                     __end_of_i2c_write_bit:
  4678                           	callstack 0
  4679                           
  4680 ;; *************** function _i2c_stop *****************
  4681 ;; Defined at:
  4682 ;;		line 71 in file "soft_i2c.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4696 ;;      Params:         0       0       0       0       0       0       0       0       0
  4697 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4699 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4700 ;;Total ram usage:        0 bytes
  4701 ;; Hardware stack levels used: 1
  4702 ;; Hardware stack levels required when called: 2
  4703 ;; This function calls:
  4704 ;;		_I2C_delay
  4705 ;;		_clear_SDA
  4706 ;;		_read_SCL
  4707 ;;		_read_SDA
  4708 ;; This function is called by:
  4709 ;;		_i2cWriteByte
  4710 ;;		_i2cReadByte
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           	psect	text26
  4715   002644                     __ptext26:
  4716                           	callstack 0
  4717   002644                     _i2c_stop:
  4718                           	callstack 24
  4719   002644                     
  4720                           ;soft_i2c.c: 73:  clear_SDA();
  4721   002644  EC7C  F013         	call	_clear_SDA	;wreg free
  4722   002648                     
  4723                           ;soft_i2c.c: 74:  I2C_delay();
  4724   002648  EC7D  F014         	call	_I2C_delay	;wreg free
  4725   00264C                     l3016:
  4726   00264C  EC8B  F012         	call	_read_SCL	;wreg free
  4727   002650  0900               	iorlw	0
  4728   002652  B4D8               	btfsc	status,2,c
  4729   002654  EF2E  F013         	goto	u2441
  4730   002658  EF30  F013         	goto	u2440
  4731   00265C                     u2441:
  4732   00265C  EF26  F013         	goto	l3016
  4733   002660                     u2440:
  4734   002660                     
  4735                           ;soft_i2c.c: 76:  I2C_delay();
  4736   002660  EC7D  F014         	call	_I2C_delay	;wreg free
  4737   002664                     
  4738                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  4739   002664  EC6F  F012         	call	_read_SDA	;wreg free
  4740   002668                     
  4741                           ;soft_i2c.c: 80:  I2C_delay();
  4742   002668  EC7D  F014         	call	_I2C_delay	;wreg free
  4743   00266C                     
  4744                           ;soft_i2c.c: 81:  started = 0;
  4745   00266C  0E00               	movlw	0
  4746   00266E  6E53               	movwf	_started^0,c
  4747   002670  0012               	return		;funcret
  4748   002672                     __end_of_i2c_stop:
  4749                           	callstack 0
  4750                           
  4751 ;; *************** function _clear_SDA *****************
  4752 ;; Defined at:
  4753 ;;		line 45 in file "soft_i2c.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;		None
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;		None
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4767 ;;      Params:         0       0       0       0       0       0       0       0       0
  4768 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4769 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4770 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4771 ;;Total ram usage:        0 bytes
  4772 ;; Hardware stack levels used: 1
  4773 ;; Hardware stack levels required when called: 1
  4774 ;; This function calls:
  4775 ;;		_digitalWrite
  4776 ;;		_pinMode
  4777 ;; This function is called by:
  4778 ;;		_i2c_start
  4779 ;;		_i2c_stop
  4780 ;;		_i2c_write_bit
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text27
  4785   0026F8                     __ptext27:
  4786                           	callstack 0
  4787   0026F8                     _clear_SDA:
  4788                           	callstack 24
  4789   0026F8                     
  4790                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  4791   0026F8  0E00               	movlw	0
  4792   0026FA  6E02               	movwf	(pinMode@pin+1)^0,c
  4793   0026FC  0E08               	movlw	8
  4794   0026FE  6E01               	movwf	pinMode@pin^0,c
  4795   002700  0E00               	movlw	0
  4796   002702  6E04               	movwf	(pinMode@type+1)^0,c
  4797   002704  0E00               	movlw	0
  4798   002706  6E03               	movwf	pinMode@type^0,c
  4799   002708  EC13  F00B         	call	_pinMode	;wreg free
  4800                           
  4801                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  4802   00270C  0E00               	movlw	0
  4803   00270E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4804   002710  0E08               	movlw	8
  4805   002712  6E01               	movwf	digitalWrite@pin^0,c
  4806   002714  0E00               	movlw	0
  4807   002716  6E04               	movwf	(digitalWrite@value+1)^0,c
  4808   002718  0E00               	movlw	0
  4809   00271A  6E03               	movwf	digitalWrite@value^0,c
  4810   00271C  ECEC  F009         	call	_digitalWrite	;wreg free
  4811   002720  0012               	return		;funcret
  4812   002722                     __end_of_clear_SDA:
  4813                           	callstack 0
  4814                           
  4815 ;; *************** function _i2c_read_bit *****************
  4816 ;; Defined at:
  4817 ;;		line 100 in file "soft_i2c.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;		None
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  bit             1    6[COMRAM] unsigned char 
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  1    wreg      unsigned char 
  4824 ;; Registers used:
  4825 ;;		wreg, status,2, status,0, cstack
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4831 ;;      Params:         0       0       0       0       0       0       0       0       0
  4832 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4834 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4835 ;;Total ram usage:        1 bytes
  4836 ;; Hardware stack levels used: 1
  4837 ;; Hardware stack levels required when called: 2
  4838 ;; This function calls:
  4839 ;;		_I2C_delay
  4840 ;;		_clear_SCL
  4841 ;;		_read_SCL
  4842 ;;		_read_SDA
  4843 ;; This function is called by:
  4844 ;;		_i2cWriteByte
  4845 ;;		_i2cReadByte
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text28
  4850   0025B6                     __ptext28:
  4851                           	callstack 0
  4852   0025B6                     _i2c_read_bit:
  4853                           	callstack 24
  4854   0025B6                     
  4855                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  4856   0025B6  EC6F  F012         	call	_read_SDA	;wreg free
  4857   0025BA                     
  4858                           ;soft_i2c.c: 103:  I2C_delay();
  4859   0025BA  EC7D  F014         	call	_I2C_delay	;wreg free
  4860   0025BE                     l3050:
  4861   0025BE  EC8B  F012         	call	_read_SCL	;wreg free
  4862   0025C2  0900               	iorlw	0
  4863   0025C4  B4D8               	btfsc	status,2,c
  4864   0025C6  EFE7  F012         	goto	u2481
  4865   0025CA  EFE9  F012         	goto	u2480
  4866   0025CE                     u2481:
  4867   0025CE  EFDF  F012         	goto	l3050
  4868   0025D2                     u2480:
  4869   0025D2                     
  4870                           ;soft_i2c.c: 105:  bit = read_SDA();
  4871   0025D2  EC6F  F012         	call	_read_SDA	;wreg free
  4872   0025D6  6E07               	movwf	i2c_read_bit@bit^0,c
  4873   0025D8                     
  4874                           ;soft_i2c.c: 106:  I2C_delay();
  4875   0025D8  EC7D  F014         	call	_I2C_delay	;wreg free
  4876   0025DC                     
  4877                           ;soft_i2c.c: 107:  clear_SCL();
  4878   0025DC  EC91  F013         	call	_clear_SCL	;wreg free
  4879                           
  4880                           ;soft_i2c.c: 108:  I2C_delay();
  4881   0025E0  EC7D  F014         	call	_I2C_delay	;wreg free
  4882   0025E4                     
  4883                           ;soft_i2c.c: 109:  return bit;
  4884   0025E4  5007               	movf	i2c_read_bit@bit^0,w,c
  4885   0025E6  0012               	return		;funcret
  4886   0025E8                     __end_of_i2c_read_bit:
  4887                           	callstack 0
  4888                           
  4889 ;; *************** function _read_SDA *****************
  4890 ;; Defined at:
  4891 ;;		line 34 in file "soft_i2c.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      unsigned char 
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0
  4906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4908 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used: 1
  4911 ;; Hardware stack levels required when called: 1
  4912 ;; This function calls:
  4913 ;;		_digitalRead
  4914 ;;		_pinMode
  4915 ;; This function is called by:
  4916 ;;		_i2c_start
  4917 ;;		_i2c_stop
  4918 ;;		_i2c_write_bit
  4919 ;;		_i2c_read_bit
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text29
  4924   0024DE                     __ptext29:
  4925                           	callstack 0
  4926   0024DE                     _read_SDA:
  4927                           	callstack 24
  4928   0024DE                     
  4929                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  4930   0024DE  0E00               	movlw	0
  4931   0024E0  6E02               	movwf	(pinMode@pin+1)^0,c
  4932   0024E2  0E08               	movlw	8
  4933   0024E4  6E01               	movwf	pinMode@pin^0,c
  4934   0024E6  0E00               	movlw	0
  4935   0024E8  6E04               	movwf	(pinMode@type+1)^0,c
  4936   0024EA  0E01               	movlw	1
  4937   0024EC  6E03               	movwf	pinMode@type^0,c
  4938   0024EE  EC13  F00B         	call	_pinMode	;wreg free
  4939                           
  4940                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  4941   0024F2  0E00               	movlw	0
  4942   0024F4  6E02               	movwf	(digitalRead@pin+1)^0,c
  4943   0024F6  0E08               	movlw	8
  4944   0024F8  6E01               	movwf	digitalRead@pin^0,c
  4945   0024FA  EC0E  F00E         	call	_digitalRead	;wreg free
  4946   0024FE  5001               	movf	?_digitalRead^0,w,c
  4947   002500  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4948   002502  A4D8               	btfss	status,2,c
  4949   002504  EF86  F012         	goto	u2401
  4950   002508  EF89  F012         	goto	u2400
  4951   00250C                     u2401:
  4952   00250C  0E01               	movlw	1
  4953   00250E  EF8A  F012         	goto	u2410
  4954   002512                     u2400:
  4955   002512  0E00               	movlw	0
  4956   002514                     u2410:
  4957   002514  0012               	return		;funcret
  4958   002516                     __end_of_read_SDA:
  4959                           	callstack 0
  4960                           
  4961 ;; *************** function _read_SCL *****************
  4962 ;; Defined at:
  4963 ;;		line 29 in file "soft_i2c.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      unsigned char 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4977 ;;      Params:         0       0       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4980 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used: 1
  4983 ;; Hardware stack levels required when called: 1
  4984 ;; This function calls:
  4985 ;;		_digitalRead
  4986 ;;		_pinMode
  4987 ;; This function is called by:
  4988 ;;		_i2c_start
  4989 ;;		_i2c_stop
  4990 ;;		_i2c_write_bit
  4991 ;;		_i2c_read_bit
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text30
  4996   002516                     __ptext30:
  4997                           	callstack 0
  4998   002516                     _read_SCL:
  4999                           	callstack 24
  5000   002516                     
  5001                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  5002   002516  0E00               	movlw	0
  5003   002518  6E02               	movwf	(pinMode@pin+1)^0,c
  5004   00251A  0E09               	movlw	9
  5005   00251C  6E01               	movwf	pinMode@pin^0,c
  5006   00251E  0E00               	movlw	0
  5007   002520  6E04               	movwf	(pinMode@type+1)^0,c
  5008   002522  0E01               	movlw	1
  5009   002524  6E03               	movwf	pinMode@type^0,c
  5010   002526  EC13  F00B         	call	_pinMode	;wreg free
  5011                           
  5012                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  5013   00252A  0E00               	movlw	0
  5014   00252C  6E02               	movwf	(digitalRead@pin+1)^0,c
  5015   00252E  0E09               	movlw	9
  5016   002530  6E01               	movwf	digitalRead@pin^0,c
  5017   002532  EC0E  F00E         	call	_digitalRead	;wreg free
  5018   002536  5001               	movf	?_digitalRead^0,w,c
  5019   002538  1002               	iorwf	(?_digitalRead+1)^0,w,c
  5020   00253A  A4D8               	btfss	status,2,c
  5021   00253C  EFA2  F012         	goto	u2381
  5022   002540  EFA5  F012         	goto	u2380
  5023   002544                     u2381:
  5024   002544  0E01               	movlw	1
  5025   002546  EFA6  F012         	goto	u2390
  5026   00254A                     u2380:
  5027   00254A  0E00               	movlw	0
  5028   00254C                     u2390:
  5029   00254C  0012               	return		;funcret
  5030   00254E                     __end_of_read_SCL:
  5031                           	callstack 0
  5032                           
  5033 ;; *************** function _digitalRead *****************
  5034 ;; Defined at:
  5035 ;;		line 39 in file "io.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  pin             2    0[COMRAM] int 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  2    0[COMRAM] int 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5049 ;;      Params:         2       0       0       0       0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5051 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5052 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5053 ;;Total ram usage:        5 bytes
  5054 ;; Hardware stack levels used: 1
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_read_SCL
  5059 ;;		_read_SDA
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text31
  5064   001C1C                     __ptext31:
  5065                           	callstack 0
  5066   001C1C                     _digitalRead:
  5067                           	callstack 24
  5068   001C1C                     
  5069                           ;io.c: 40:     if(pin <8){
  5070   001C1C  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5071   001C1E  EF1C  F00E         	goto	u2080
  5072   001C22  5002               	movf	(digitalRead@pin+1)^0,w,c
  5073   001C24  E107               	bnz	u2081
  5074   001C26  0E08               	movlw	8
  5075   001C28  5C01               	subwf	digitalRead@pin^0,w,c
  5076   001C2A  B0D8               	btfsc	status,0,c
  5077   001C2C  EF1A  F00E         	goto	u2081
  5078   001C30  EF1C  F00E         	goto	u2080
  5079   001C34                     u2081:
  5080   001C34  EF30  F00E         	goto	l2908
  5081   001C38                     u2080:
  5082   001C38                     
  5083                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  5084   001C38  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5085   001C3C  0E01               	movlw	1
  5086   001C3E  6E04               	movwf	(??_digitalRead+1)^0,c
  5087   001C40  2A03               	incf	??_digitalRead^0,f,c
  5088   001C42  EF25  F00E         	goto	u2094
  5089   001C46                     u2095:
  5090   001C46  90D8               	bcf	status,0,c
  5091   001C48  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5092   001C4A                     u2094:
  5093   001C4A  2E03               	decfsz	??_digitalRead^0,f,c
  5094   001C4C  EF23  F00E         	goto	u2095
  5095   001C50  5004               	movf	(??_digitalRead+1)^0,w,c
  5096   001C52  1480               	andwf	128,w,c	;volatile
  5097   001C54  6E05               	movwf	(??_digitalRead+2)^0,c
  5098   001C56  5005               	movf	(??_digitalRead+2)^0,w,c
  5099   001C58  6E01               	movwf	?_digitalRead^0,c
  5100   001C5A  6A02               	clrf	(?_digitalRead+1)^0,c
  5101   001C5C  EFC2  F00E         	goto	l83
  5102   001C60                     l2908:
  5103   001C60  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5104   001C62  EF3E  F00E         	goto	u2100
  5105   001C66  5002               	movf	(digitalRead@pin+1)^0,w,c
  5106   001C68  E107               	bnz	u2101
  5107   001C6A  0E10               	movlw	16
  5108   001C6C  5C01               	subwf	digitalRead@pin^0,w,c
  5109   001C6E  B0D8               	btfsc	status,0,c
  5110   001C70  EF3C  F00E         	goto	u2101
  5111   001C74  EF3E  F00E         	goto	u2100
  5112   001C78                     u2101:
  5113   001C78  EF54  F00E         	goto	l2916
  5114   001C7C                     u2100:
  5115   001C7C                     
  5116                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  5117   001C7C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5118   001C80  0EF8               	movlw	-8
  5119   001C82  2603               	addwf	??_digitalRead^0,f,c
  5120   001C84  0E01               	movlw	1
  5121   001C86  6E04               	movwf	(??_digitalRead+1)^0,c
  5122   001C88  2A03               	incf	??_digitalRead^0,f,c
  5123   001C8A  EF49  F00E         	goto	u2114
  5124   001C8E                     u2115:
  5125   001C8E  90D8               	bcf	status,0,c
  5126   001C90  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5127   001C92                     u2114:
  5128   001C92  2E03               	decfsz	??_digitalRead^0,f,c
  5129   001C94  EF47  F00E         	goto	u2115
  5130   001C98  5004               	movf	(??_digitalRead+1)^0,w,c
  5131   001C9A  1481               	andwf	129,w,c	;volatile
  5132   001C9C  6E05               	movwf	(??_digitalRead+2)^0,c
  5133   001C9E  5005               	movf	(??_digitalRead+2)^0,w,c
  5134   001CA0  6E01               	movwf	?_digitalRead^0,c
  5135   001CA2  6A02               	clrf	(?_digitalRead+1)^0,c
  5136   001CA4  EFC2  F00E         	goto	l83
  5137   001CA8                     l2916:
  5138   001CA8  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5139   001CAA  EF62  F00E         	goto	u2120
  5140   001CAE  5002               	movf	(digitalRead@pin+1)^0,w,c
  5141   001CB0  E107               	bnz	u2121
  5142   001CB2  0E18               	movlw	24
  5143   001CB4  5C01               	subwf	digitalRead@pin^0,w,c
  5144   001CB6  B0D8               	btfsc	status,0,c
  5145   001CB8  EF60  F00E         	goto	u2121
  5146   001CBC  EF62  F00E         	goto	u2120
  5147   001CC0                     u2121:
  5148   001CC0  EF78  F00E         	goto	l2924
  5149   001CC4                     u2120:
  5150   001CC4                     
  5151                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  5152   001CC4  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5153   001CC8  0EF0               	movlw	-16
  5154   001CCA  2603               	addwf	??_digitalRead^0,f,c
  5155   001CCC  0E01               	movlw	1
  5156   001CCE  6E04               	movwf	(??_digitalRead+1)^0,c
  5157   001CD0  2A03               	incf	??_digitalRead^0,f,c
  5158   001CD2  EF6D  F00E         	goto	u2134
  5159   001CD6                     u2135:
  5160   001CD6  90D8               	bcf	status,0,c
  5161   001CD8  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5162   001CDA                     u2134:
  5163   001CDA  2E03               	decfsz	??_digitalRead^0,f,c
  5164   001CDC  EF6B  F00E         	goto	u2135
  5165   001CE0  5004               	movf	(??_digitalRead+1)^0,w,c
  5166   001CE2  1482               	andwf	130,w,c	;volatile
  5167   001CE4  6E05               	movwf	(??_digitalRead+2)^0,c
  5168   001CE6  5005               	movf	(??_digitalRead+2)^0,w,c
  5169   001CE8  6E01               	movwf	?_digitalRead^0,c
  5170   001CEA  6A02               	clrf	(?_digitalRead+1)^0,c
  5171   001CEC  EFC2  F00E         	goto	l83
  5172   001CF0                     l2924:
  5173   001CF0  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5174   001CF2  EF86  F00E         	goto	u2140
  5175   001CF6  5002               	movf	(digitalRead@pin+1)^0,w,c
  5176   001CF8  E107               	bnz	u2141
  5177   001CFA  0E20               	movlw	32
  5178   001CFC  5C01               	subwf	digitalRead@pin^0,w,c
  5179   001CFE  B0D8               	btfsc	status,0,c
  5180   001D00  EF84  F00E         	goto	u2141
  5181   001D04  EF86  F00E         	goto	u2140
  5182   001D08                     u2141:
  5183   001D08  EF9C  F00E         	goto	l2932
  5184   001D0C                     u2140:
  5185   001D0C                     
  5186                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  5187   001D0C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5188   001D10  0EE8               	movlw	-24
  5189   001D12  2603               	addwf	??_digitalRead^0,f,c
  5190   001D14  0E01               	movlw	1
  5191   001D16  6E04               	movwf	(??_digitalRead+1)^0,c
  5192   001D18  2A03               	incf	??_digitalRead^0,f,c
  5193   001D1A  EF91  F00E         	goto	u2154
  5194   001D1E                     u2155:
  5195   001D1E  90D8               	bcf	status,0,c
  5196   001D20  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5197   001D22                     u2154:
  5198   001D22  2E03               	decfsz	??_digitalRead^0,f,c
  5199   001D24  EF8F  F00E         	goto	u2155
  5200   001D28  5004               	movf	(??_digitalRead+1)^0,w,c
  5201   001D2A  1483               	andwf	131,w,c	;volatile
  5202   001D2C  6E05               	movwf	(??_digitalRead+2)^0,c
  5203   001D2E  5005               	movf	(??_digitalRead+2)^0,w,c
  5204   001D30  6E01               	movwf	?_digitalRead^0,c
  5205   001D32  6A02               	clrf	(?_digitalRead+1)^0,c
  5206   001D34  EFC2  F00E         	goto	l83
  5207   001D38                     l2932:
  5208   001D38  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5209   001D3A  EFAA  F00E         	goto	u2160
  5210   001D3E  5002               	movf	(digitalRead@pin+1)^0,w,c
  5211   001D40  E107               	bnz	u2161
  5212   001D42  0E28               	movlw	40
  5213   001D44  5C01               	subwf	digitalRead@pin^0,w,c
  5214   001D46  B0D8               	btfsc	status,0,c
  5215   001D48  EFA8  F00E         	goto	u2161
  5216   001D4C  EFAA  F00E         	goto	u2160
  5217   001D50                     u2161:
  5218   001D50  EFC0  F00E         	goto	l88
  5219   001D54                     u2160:
  5220   001D54                     
  5221                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  5222   001D54  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5223   001D58  0EE0               	movlw	-32
  5224   001D5A  2603               	addwf	??_digitalRead^0,f,c
  5225   001D5C  0E01               	movlw	1
  5226   001D5E  6E04               	movwf	(??_digitalRead+1)^0,c
  5227   001D60  2A03               	incf	??_digitalRead^0,f,c
  5228   001D62  EFB5  F00E         	goto	u2174
  5229   001D66                     u2175:
  5230   001D66  90D8               	bcf	status,0,c
  5231   001D68  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5232   001D6A                     u2174:
  5233   001D6A  2E03               	decfsz	??_digitalRead^0,f,c
  5234   001D6C  EFB3  F00E         	goto	u2175
  5235   001D70  5004               	movf	(??_digitalRead+1)^0,w,c
  5236   001D72  1484               	andwf	132,w,c	;volatile
  5237   001D74  6E05               	movwf	(??_digitalRead+2)^0,c
  5238   001D76  5005               	movf	(??_digitalRead+2)^0,w,c
  5239   001D78  6E01               	movwf	?_digitalRead^0,c
  5240   001D7A  6A02               	clrf	(?_digitalRead+1)^0,c
  5241   001D7C  EFC2  F00E         	goto	l83
  5242   001D80                     l88:
  5243   001D80                     
  5244                           ;io.c: 51:     return -1;
  5245   001D80  6801               	setf	?_digitalRead^0,c
  5246   001D82  6802               	setf	(?_digitalRead+1)^0,c
  5247   001D84                     l83:
  5248   001D84  0012               	return		;funcret
  5249   001D86                     __end_of_digitalRead:
  5250                           	callstack 0
  5251                           
  5252 ;; *************** function _clear_SCL *****************
  5253 ;; Defined at:
  5254 ;;		line 39 in file "soft_i2c.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, status,2, status,0, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used: 1
  5274 ;; Hardware stack levels required when called: 1
  5275 ;; This function calls:
  5276 ;;		_digitalWrite
  5277 ;;		_pinMode
  5278 ;; This function is called by:
  5279 ;;		_i2c_start
  5280 ;;		_i2c_write_bit
  5281 ;;		_i2c_read_bit
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text32
  5286   002722                     __ptext32:
  5287                           	callstack 0
  5288   002722                     _clear_SCL:
  5289                           	callstack 24
  5290   002722                     
  5291                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  5292   002722  0E00               	movlw	0
  5293   002724  6E02               	movwf	(pinMode@pin+1)^0,c
  5294   002726  0E09               	movlw	9
  5295   002728  6E01               	movwf	pinMode@pin^0,c
  5296   00272A  0E00               	movlw	0
  5297   00272C  6E04               	movwf	(pinMode@type+1)^0,c
  5298   00272E  0E00               	movlw	0
  5299   002730  6E03               	movwf	pinMode@type^0,c
  5300   002732  EC13  F00B         	call	_pinMode	;wreg free
  5301                           
  5302                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  5303   002736  0E00               	movlw	0
  5304   002738  6E02               	movwf	(digitalWrite@pin+1)^0,c
  5305   00273A  0E09               	movlw	9
  5306   00273C  6E01               	movwf	digitalWrite@pin^0,c
  5307   00273E  0E00               	movlw	0
  5308   002740  6E04               	movwf	(digitalWrite@value+1)^0,c
  5309   002742  0E00               	movlw	0
  5310   002744  6E03               	movwf	digitalWrite@value^0,c
  5311   002746  ECEC  F009         	call	_digitalWrite	;wreg free
  5312   00274A  0012               	return		;funcret
  5313   00274C                     __end_of_clear_SCL:
  5314                           	callstack 0
  5315                           
  5316 ;; *************** function _digitalWrite *****************
  5317 ;; Defined at:
  5318 ;;		line 14 in file "io.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  pin             2    0[COMRAM] int 
  5321 ;;  value           2    2[COMRAM] int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      void 
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5333 ;;      Params:         4       0       0       0       0       0       0       0       0
  5334 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5335 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5336 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5337 ;;Total ram usage:        6 bytes
  5338 ;; Hardware stack levels used: 1
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_clear_SCL
  5343 ;;		_clear_SDA
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           	psect	text33
  5348   0013D8                     __ptext33:
  5349                           	callstack 0
  5350   0013D8                     _digitalWrite:
  5351                           	callstack 24
  5352   0013D8                     
  5353                           ;io.c: 16:     if(pin <8){
  5354   0013D8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5355   0013DA  EFFA  F009         	goto	u1880
  5356   0013DE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5357   0013E0  E107               	bnz	u1881
  5358   0013E2  0E08               	movlw	8
  5359   0013E4  5C01               	subwf	digitalWrite@pin^0,w,c
  5360   0013E6  B0D8               	btfsc	status,0,c
  5361   0013E8  EFF8  F009         	goto	u1881
  5362   0013EC  EFFA  F009         	goto	u1880
  5363   0013F0                     u1881:
  5364   0013F0  EF24  F00A         	goto	l2868
  5365   0013F4                     u1880:
  5366   0013F4                     
  5367                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  5368   0013F4  5003               	movf	digitalWrite@value^0,w,c
  5369   0013F6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5370   0013F8  B4D8               	btfsc	status,2,c
  5371   0013FA  EF01  F00A         	goto	u1891
  5372   0013FE  EF03  F00A         	goto	u1890
  5373   001402                     u1891:
  5374   001402  EF13  F00A         	goto	l2866
  5375   001406                     u1890:
  5376   001406  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5377   00140A  0E01               	movlw	1
  5378   00140C  6E06               	movwf	(??_digitalWrite+1)^0,c
  5379   00140E  2A05               	incf	??_digitalWrite^0,f,c
  5380   001410  EF0C  F00A         	goto	u1904
  5381   001414                     u1905:
  5382   001414  90D8               	bcf	status,0,c
  5383   001416  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5384   001418                     u1904:
  5385   001418  2E05               	decfsz	??_digitalWrite^0,f,c
  5386   00141A  EF0A  F00A         	goto	u1905
  5387   00141E  5006               	movf	(??_digitalWrite+1)^0,w,c
  5388   001420  1280               	iorwf	128,f,c	;volatile
  5389   001422  EF12  F00B         	goto	l79
  5390   001426                     l2866:
  5391   001426  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5392   00142A  0E01               	movlw	1
  5393   00142C  6E06               	movwf	(??_digitalWrite+1)^0,c
  5394   00142E  2A05               	incf	??_digitalWrite^0,f,c
  5395   001430  EF1C  F00A         	goto	u1914
  5396   001434                     u1915:
  5397   001434  90D8               	bcf	status,0,c
  5398   001436  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5399   001438                     u1914:
  5400   001438  2E05               	decfsz	??_digitalWrite^0,f,c
  5401   00143A  EF1A  F00A         	goto	u1915
  5402   00143E  5006               	movf	(??_digitalWrite+1)^0,w,c
  5403   001440  0AFF               	xorlw	255
  5404   001442  1680               	andwf	128,f,c	;volatile
  5405   001444  EF12  F00B         	goto	l79
  5406   001448                     l2868:
  5407   001448  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5408   00144A  EF32  F00A         	goto	u1920
  5409   00144E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5410   001450  E107               	bnz	u1921
  5411   001452  0E10               	movlw	16
  5412   001454  5C01               	subwf	digitalWrite@pin^0,w,c
  5413   001456  B0D8               	btfsc	status,0,c
  5414   001458  EF30  F00A         	goto	u1921
  5415   00145C  EF32  F00A         	goto	u1920
  5416   001460                     u1921:
  5417   001460  EF60  F00A         	goto	l2876
  5418   001464                     u1920:
  5419   001464                     
  5420                           ;io.c: 20:         pin -=8;
  5421   001464  0EF8               	movlw	248
  5422   001466  2601               	addwf	digitalWrite@pin^0,f,c
  5423   001468  0EFF               	movlw	255
  5424   00146A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5425                           
  5426                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  5427   00146C  5003               	movf	digitalWrite@value^0,w,c
  5428   00146E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5429   001470  B4D8               	btfsc	status,2,c
  5430   001472  EF3D  F00A         	goto	u1931
  5431   001476  EF3F  F00A         	goto	u1930
  5432   00147A                     u1931:
  5433   00147A  EF4F  F00A         	goto	l2874
  5434   00147E                     u1930:
  5435   00147E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5436   001482  0E01               	movlw	1
  5437   001484  6E06               	movwf	(??_digitalWrite+1)^0,c
  5438   001486  2A05               	incf	??_digitalWrite^0,f,c
  5439   001488  EF48  F00A         	goto	u1944
  5440   00148C                     u1945:
  5441   00148C  90D8               	bcf	status,0,c
  5442   00148E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5443   001490                     u1944:
  5444   001490  2E05               	decfsz	??_digitalWrite^0,f,c
  5445   001492  EF46  F00A         	goto	u1945
  5446   001496  5006               	movf	(??_digitalWrite+1)^0,w,c
  5447   001498  1281               	iorwf	129,f,c	;volatile
  5448   00149A  EF12  F00B         	goto	l79
  5449   00149E                     l2874:
  5450   00149E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5451   0014A2  0E01               	movlw	1
  5452   0014A4  6E06               	movwf	(??_digitalWrite+1)^0,c
  5453   0014A6  2A05               	incf	??_digitalWrite^0,f,c
  5454   0014A8  EF58  F00A         	goto	u1954
  5455   0014AC                     u1955:
  5456   0014AC  90D8               	bcf	status,0,c
  5457   0014AE  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5458   0014B0                     u1954:
  5459   0014B0  2E05               	decfsz	??_digitalWrite^0,f,c
  5460   0014B2  EF56  F00A         	goto	u1955
  5461   0014B6  5006               	movf	(??_digitalWrite+1)^0,w,c
  5462   0014B8  0AFF               	xorlw	255
  5463   0014BA  1681               	andwf	129,f,c	;volatile
  5464   0014BC  EF12  F00B         	goto	l79
  5465   0014C0                     l2876:
  5466   0014C0  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5467   0014C2  EF6E  F00A         	goto	u1960
  5468   0014C6  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5469   0014C8  E107               	bnz	u1961
  5470   0014CA  0E18               	movlw	24
  5471   0014CC  5C01               	subwf	digitalWrite@pin^0,w,c
  5472   0014CE  B0D8               	btfsc	status,0,c
  5473   0014D0  EF6C  F00A         	goto	u1961
  5474   0014D4  EF6E  F00A         	goto	u1960
  5475   0014D8                     u1961:
  5476   0014D8  EF9C  F00A         	goto	l2884
  5477   0014DC                     u1960:
  5478   0014DC                     
  5479                           ;io.c: 24:         pin -=16;
  5480   0014DC  0EF0               	movlw	240
  5481   0014DE  2601               	addwf	digitalWrite@pin^0,f,c
  5482   0014E0  0EFF               	movlw	255
  5483   0014E2  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5484                           
  5485                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  5486   0014E4  5003               	movf	digitalWrite@value^0,w,c
  5487   0014E6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5488   0014E8  B4D8               	btfsc	status,2,c
  5489   0014EA  EF79  F00A         	goto	u1971
  5490   0014EE  EF7B  F00A         	goto	u1970
  5491   0014F2                     u1971:
  5492   0014F2  EF8B  F00A         	goto	l2882
  5493   0014F6                     u1970:
  5494   0014F6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5495   0014FA  0E01               	movlw	1
  5496   0014FC  6E06               	movwf	(??_digitalWrite+1)^0,c
  5497   0014FE  2A05               	incf	??_digitalWrite^0,f,c
  5498   001500  EF84  F00A         	goto	u1984
  5499   001504                     u1985:
  5500   001504  90D8               	bcf	status,0,c
  5501   001506  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5502   001508                     u1984:
  5503   001508  2E05               	decfsz	??_digitalWrite^0,f,c
  5504   00150A  EF82  F00A         	goto	u1985
  5505   00150E  5006               	movf	(??_digitalWrite+1)^0,w,c
  5506   001510  1282               	iorwf	130,f,c	;volatile
  5507   001512  EF12  F00B         	goto	l79
  5508   001516                     l2882:
  5509   001516  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5510   00151A  0E01               	movlw	1
  5511   00151C  6E06               	movwf	(??_digitalWrite+1)^0,c
  5512   00151E  2A05               	incf	??_digitalWrite^0,f,c
  5513   001520  EF94  F00A         	goto	u1994
  5514   001524                     u1995:
  5515   001524  90D8               	bcf	status,0,c
  5516   001526  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5517   001528                     u1994:
  5518   001528  2E05               	decfsz	??_digitalWrite^0,f,c
  5519   00152A  EF92  F00A         	goto	u1995
  5520   00152E  5006               	movf	(??_digitalWrite+1)^0,w,c
  5521   001530  0AFF               	xorlw	255
  5522   001532  1682               	andwf	130,f,c	;volatile
  5523   001534  EF12  F00B         	goto	l79
  5524   001538                     l2884:
  5525   001538  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5526   00153A  EFAA  F00A         	goto	u2000
  5527   00153E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5528   001540  E107               	bnz	u2001
  5529   001542  0E20               	movlw	32
  5530   001544  5C01               	subwf	digitalWrite@pin^0,w,c
  5531   001546  B0D8               	btfsc	status,0,c
  5532   001548  EFA8  F00A         	goto	u2001
  5533   00154C  EFAA  F00A         	goto	u2000
  5534   001550                     u2001:
  5535   001550  EFD8  F00A         	goto	l2892
  5536   001554                     u2000:
  5537   001554                     
  5538                           ;io.c: 28:         pin -=24;
  5539   001554  0EE8               	movlw	232
  5540   001556  2601               	addwf	digitalWrite@pin^0,f,c
  5541   001558  0EFF               	movlw	255
  5542   00155A  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5543                           
  5544                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  5545   00155C  5003               	movf	digitalWrite@value^0,w,c
  5546   00155E  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5547   001560  B4D8               	btfsc	status,2,c
  5548   001562  EFB5  F00A         	goto	u2011
  5549   001566  EFB7  F00A         	goto	u2010
  5550   00156A                     u2011:
  5551   00156A  EFC7  F00A         	goto	l2890
  5552   00156E                     u2010:
  5553   00156E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5554   001572  0E01               	movlw	1
  5555   001574  6E06               	movwf	(??_digitalWrite+1)^0,c
  5556   001576  2A05               	incf	??_digitalWrite^0,f,c
  5557   001578  EFC0  F00A         	goto	u2024
  5558   00157C                     u2025:
  5559   00157C  90D8               	bcf	status,0,c
  5560   00157E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5561   001580                     u2024:
  5562   001580  2E05               	decfsz	??_digitalWrite^0,f,c
  5563   001582  EFBE  F00A         	goto	u2025
  5564   001586  5006               	movf	(??_digitalWrite+1)^0,w,c
  5565   001588  1283               	iorwf	131,f,c	;volatile
  5566   00158A  EF12  F00B         	goto	l79
  5567   00158E                     l2890:
  5568   00158E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5569   001592  0E01               	movlw	1
  5570   001594  6E06               	movwf	(??_digitalWrite+1)^0,c
  5571   001596  2A05               	incf	??_digitalWrite^0,f,c
  5572   001598  EFD0  F00A         	goto	u2034
  5573   00159C                     u2035:
  5574   00159C  90D8               	bcf	status,0,c
  5575   00159E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5576   0015A0                     u2034:
  5577   0015A0  2E05               	decfsz	??_digitalWrite^0,f,c
  5578   0015A2  EFCE  F00A         	goto	u2035
  5579   0015A6  5006               	movf	(??_digitalWrite+1)^0,w,c
  5580   0015A8  0AFF               	xorlw	255
  5581   0015AA  1683               	andwf	131,f,c	;volatile
  5582   0015AC  EF12  F00B         	goto	l79
  5583   0015B0                     l2892:
  5584   0015B0  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5585   0015B2  EFE6  F00A         	goto	u2040
  5586   0015B6  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5587   0015B8  E107               	bnz	u2041
  5588   0015BA  0E28               	movlw	40
  5589   0015BC  5C01               	subwf	digitalWrite@pin^0,w,c
  5590   0015BE  B0D8               	btfsc	status,0,c
  5591   0015C0  EFE4  F00A         	goto	u2041
  5592   0015C4  EFE6  F00A         	goto	u2040
  5593   0015C8                     u2041:
  5594   0015C8  EF12  F00B         	goto	l79
  5595   0015CC                     u2040:
  5596   0015CC                     
  5597                           ;io.c: 32:         pin -=32;
  5598   0015CC  0EE0               	movlw	224
  5599   0015CE  2601               	addwf	digitalWrite@pin^0,f,c
  5600   0015D0  0EFF               	movlw	255
  5601   0015D2  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5602                           
  5603                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  5604   0015D4  5003               	movf	digitalWrite@value^0,w,c
  5605   0015D6  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5606   0015D8  B4D8               	btfsc	status,2,c
  5607   0015DA  EFF1  F00A         	goto	u2051
  5608   0015DE  EFF3  F00A         	goto	u2050
  5609   0015E2                     u2051:
  5610   0015E2  EF03  F00B         	goto	l2898
  5611   0015E6                     u2050:
  5612   0015E6  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5613   0015EA  0E01               	movlw	1
  5614   0015EC  6E06               	movwf	(??_digitalWrite+1)^0,c
  5615   0015EE  2A05               	incf	??_digitalWrite^0,f,c
  5616   0015F0  EFFC  F00A         	goto	u2064
  5617   0015F4                     u2065:
  5618   0015F4  90D8               	bcf	status,0,c
  5619   0015F6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5620   0015F8                     u2064:
  5621   0015F8  2E05               	decfsz	??_digitalWrite^0,f,c
  5622   0015FA  EFFA  F00A         	goto	u2065
  5623   0015FE  5006               	movf	(??_digitalWrite+1)^0,w,c
  5624   001600  1284               	iorwf	132,f,c	;volatile
  5625   001602  EF12  F00B         	goto	l79
  5626   001606                     l2898:
  5627   001606  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5628   00160A  0E01               	movlw	1
  5629   00160C  6E06               	movwf	(??_digitalWrite+1)^0,c
  5630   00160E  2A05               	incf	??_digitalWrite^0,f,c
  5631   001610  EF0C  F00B         	goto	u2074
  5632   001614                     u2075:
  5633   001614  90D8               	bcf	status,0,c
  5634   001616  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5635   001618                     u2074:
  5636   001618  2E05               	decfsz	??_digitalWrite^0,f,c
  5637   00161A  EF0A  F00B         	goto	u2075
  5638   00161E  5006               	movf	(??_digitalWrite+1)^0,w,c
  5639   001620  0AFF               	xorlw	255
  5640   001622  1684               	andwf	132,f,c	;volatile
  5641   001624                     l79:
  5642   001624  0012               	return		;funcret
  5643   001626                     __end_of_digitalWrite:
  5644                           	callstack 0
  5645                           
  5646 ;; *************** function _I2C_delay *****************
  5647 ;; Defined at:
  5648 ;;		line 22 in file "soft_i2c.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;		None
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  i               2    0        int 
  5653 ;;  v               2    0        volatile int 
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  1    wreg      void 
  5656 ;; Registers used:
  5657 ;;		None
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5663 ;;      Params:         0       0       0       0       0       0       0       0       0
  5664 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5666 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5667 ;;Total ram usage:        0 bytes
  5668 ;; Hardware stack levels used: 1
  5669 ;; This function calls:
  5670 ;;		Nothing
  5671 ;; This function is called by:
  5672 ;;		_i2c_start
  5673 ;;		_i2c_stop
  5674 ;;		_i2c_write_bit
  5675 ;;		_i2c_read_bit
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text34
  5680   0028FA                     __ptext34:
  5681                           	callstack 0
  5682   0028FA                     _I2C_delay:
  5683                           	callstack 25
  5684   0028FA  0012               	return		;funcret
  5685   0028FC                     __end_of_I2C_delay:
  5686                           	callstack 0
  5687                           
  5688 ;; *************** function _dec2bcd *****************
  5689 ;; Defined at:
  5690 ;;		line 9 in file "ds1307.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  value           2   22[COMRAM] int 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  2   22[COMRAM] int 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2, status,0, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5704 ;;      Params:         2       0       0       0       0       0       0       0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5706 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5707 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5708 ;;Total ram usage:        6 bytes
  5709 ;; Hardware stack levels used: 1
  5710 ;; Hardware stack levels required when called: 1
  5711 ;; This function calls:
  5712 ;;		___awdiv
  5713 ;;		___awmod
  5714 ;; This function is called by:
  5715 ;;		_smLoop
  5716 ;;		_varInit
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text35
  5721   002210                     __ptext35:
  5722                           	callstack 0
  5723   002210                     _dec2bcd:
  5724                           	callstack 28
  5725   002210                     
  5726                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  5727   002210  C017  F001         	movff	dec2bcd@value,___awdiv@dividend
  5728   002214  C018  F002         	movff	dec2bcd@value+1,___awdiv@dividend+1
  5729   002218  0E00               	movlw	0
  5730   00221A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  5731   00221C  0E0A               	movlw	10
  5732   00221E  6E03               	movwf	___awdiv@divisor^0,c
  5733   002220  ECA5  F00F         	call	___awdiv	;wreg free
  5734   002224  C001  F019         	movff	?___awdiv,??_dec2bcd
  5735   002228  C002  F01A         	movff	?___awdiv+1,??_dec2bcd+1
  5736   00222C  3A19               	swapf	??_dec2bcd^0,f,c
  5737   00222E  3A1A               	swapf	(??_dec2bcd+1)^0,f,c
  5738   002230  0EF0               	movlw	240
  5739   002232  161A               	andwf	(??_dec2bcd+1)^0,f,c
  5740   002234  5019               	movf	??_dec2bcd^0,w,c
  5741   002236  0B0F               	andlw	15
  5742   002238  121A               	iorwf	(??_dec2bcd+1)^0,f,c
  5743   00223A  0EF0               	movlw	240
  5744   00223C  1619               	andwf	??_dec2bcd^0,f,c
  5745   00223E  C017  F009         	movff	dec2bcd@value,___awmod@dividend
  5746   002242  C018  F00A         	movff	dec2bcd@value+1,___awmod@dividend+1
  5747   002246  0E00               	movlw	0
  5748   002248  6E0C               	movwf	(___awmod@divisor+1)^0,c
  5749   00224A  0E0A               	movlw	10
  5750   00224C  6E0B               	movwf	___awmod@divisor^0,c
  5751   00224E  EC07  F010         	call	___awmod	;wreg free
  5752   002252  5009               	movf	?___awmod^0,w,c
  5753   002254  2419               	addwf	??_dec2bcd^0,w,c
  5754   002256  6E1B               	movwf	(??_dec2bcd+2)^0,c
  5755   002258  500A               	movf	(?___awmod+1)^0,w,c
  5756   00225A  201A               	addwfc	(??_dec2bcd+1)^0,w,c
  5757   00225C  6E1C               	movwf	(??_dec2bcd+3)^0,c
  5758   00225E  0E80               	movlw	128
  5759   002260  101B               	iorwf	(??_dec2bcd+2)^0,w,c
  5760   002262  6E17               	movwf	dec2bcd@value^0,c
  5761   002264  501C               	movf	(??_dec2bcd+3)^0,w,c
  5762   002266  6E18               	movwf	(dec2bcd@value+1)^0,c
  5763   002268                     
  5764                           ;ds1307.c: 11:     return value;
  5765   002268  C017  F017         	movff	dec2bcd@value,?_dec2bcd
  5766   00226C  C018  F018         	movff	dec2bcd@value+1,?_dec2bcd+1
  5767   002270  0012               	return		;funcret
  5768   002272                     __end_of_dec2bcd:
  5769                           	callstack 0
  5770                           
  5771 ;; *************** function ___awmod *****************
  5772 ;; Defined at:
  5773 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  dividend        2    8[COMRAM] int 
  5776 ;;  divisor         2   10[COMRAM] int 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  sign            1   13[COMRAM] unsigned char 
  5779 ;;  counter         1   12[COMRAM] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  2    8[COMRAM] int 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5789 ;;      Params:         4       0       0       0       0       0       0       0       0
  5790 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5792 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5793 ;;Total ram usage:        6 bytes
  5794 ;; Hardware stack levels used: 1
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_dec2bcd
  5799 ;;		_lcdInt
  5800 ;;		_rtcPutSeconds
  5801 ;;		_rtcPutMinutes
  5802 ;;		_rtcPutHours
  5803 ;;		_rtcPutDate
  5804 ;;		_rtcPutMonth
  5805 ;;		_rtcPutYear
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text36
  5810   00200E                     __ptext36:
  5811                           	callstack 0
  5812   00200E                     ___awmod:
  5813                           	callstack 27
  5814   00200E  0E00               	movlw	0
  5815   002010  6E0E               	movwf	___awmod@sign^0,c
  5816   002012  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  5817   002014  EF10  F010         	goto	u2700
  5818   002018  EF0E  F010         	goto	u2701
  5819   00201C                     u2701:
  5820   00201C  EF16  F010         	goto	l3234
  5821   002020                     u2700:
  5822   002020  6C09               	negf	___awmod@dividend^0,c
  5823   002022  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  5824   002024  B0D8               	btfsc	status,0,c
  5825   002026  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  5826   002028  0E01               	movlw	1
  5827   00202A  6E0E               	movwf	___awmod@sign^0,c
  5828   00202C                     l3234:
  5829   00202C  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  5830   00202E  EF1D  F010         	goto	u2710
  5831   002032  EF1B  F010         	goto	u2711
  5832   002036                     u2711:
  5833   002036  EF21  F010         	goto	l3238
  5834   00203A                     u2710:
  5835   00203A  6C0B               	negf	___awmod@divisor^0,c
  5836   00203C  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  5837   00203E  B0D8               	btfsc	status,0,c
  5838   002040  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  5839   002042                     l3238:
  5840   002042  500B               	movf	___awmod@divisor^0,w,c
  5841   002044  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  5842   002046  B4D8               	btfsc	status,2,c
  5843   002048  EF28  F010         	goto	u2721
  5844   00204C  EF2A  F010         	goto	u2720
  5845   002050                     u2721:
  5846   002050  EF4E  F010         	goto	l3254
  5847   002054                     u2720:
  5848   002054  0E01               	movlw	1
  5849   002056  6E0D               	movwf	___awmod@counter^0,c
  5850   002058  EF32  F010         	goto	l3244
  5851   00205C                     l3242:
  5852   00205C  90D8               	bcf	status,0,c
  5853   00205E  360B               	rlcf	___awmod@divisor^0,f,c
  5854   002060  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  5855   002062  2A0D               	incf	___awmod@counter^0,f,c
  5856   002064                     l3244:
  5857   002064  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  5858   002066  EF37  F010         	goto	u2731
  5859   00206A  EF39  F010         	goto	u2730
  5860   00206E                     u2731:
  5861   00206E  EF2E  F010         	goto	l3242
  5862   002072                     u2730:
  5863   002072                     l3246:
  5864   002072  500B               	movf	___awmod@divisor^0,w,c
  5865   002074  5C09               	subwf	___awmod@dividend^0,w,c
  5866   002076  500C               	movf	(___awmod@divisor+1)^0,w,c
  5867   002078  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  5868   00207A  A0D8               	btfss	status,0,c
  5869   00207C  EF42  F010         	goto	u2741
  5870   002080  EF44  F010         	goto	u2740
  5871   002084                     u2741:
  5872   002084  EF48  F010         	goto	l3250
  5873   002088                     u2740:
  5874   002088  500B               	movf	___awmod@divisor^0,w,c
  5875   00208A  5E09               	subwf	___awmod@dividend^0,f,c
  5876   00208C  500C               	movf	(___awmod@divisor+1)^0,w,c
  5877   00208E  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  5878   002090                     l3250:
  5879   002090  90D8               	bcf	status,0,c
  5880   002092  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  5881   002094  320B               	rrcf	___awmod@divisor^0,f,c
  5882   002096  2E0D               	decfsz	___awmod@counter^0,f,c
  5883   002098  EF39  F010         	goto	l3246
  5884   00209C                     l3254:
  5885   00209C  500E               	movf	___awmod@sign^0,w,c
  5886   00209E  B4D8               	btfsc	status,2,c
  5887   0020A0  EF54  F010         	goto	u2751
  5888   0020A4  EF56  F010         	goto	u2750
  5889   0020A8                     u2751:
  5890   0020A8  EF5A  F010         	goto	l3258
  5891   0020AC                     u2750:
  5892   0020AC  6C09               	negf	___awmod@dividend^0,c
  5893   0020AE  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  5894   0020B0  B0D8               	btfsc	status,0,c
  5895   0020B2  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  5896   0020B4                     l3258:
  5897   0020B4  C009  F009         	movff	___awmod@dividend,?___awmod
  5898   0020B8  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  5899   0020BC  0012               	return		;funcret
  5900   0020BE                     __end_of___awmod:
  5901                           	callstack 0
  5902                           
  5903 ;; *************** function _bcd2dec *****************
  5904 ;; Defined at:
  5905 ;;		line 14 in file "ds1307.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  value           2   18[COMRAM] int 
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  2   18[COMRAM] int 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5919 ;;      Params:         2       0       0       0       0       0       0       0       0
  5920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5921 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5922 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5923 ;;Total ram usage:        4 bytes
  5924 ;; Hardware stack levels used: 1
  5925 ;; Hardware stack levels required when called: 1
  5926 ;; This function calls:
  5927 ;;		___awdiv
  5928 ;;		___wmul
  5929 ;; This function is called by:
  5930 ;;		_outputPrint
  5931 ;;		_smLoop
  5932 ;;		_varInit
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text37
  5937   00249C                     __ptext37:
  5938                           	callstack 0
  5939   00249C                     _bcd2dec:
  5940                           	callstack 27
  5941   00249C                     
  5942                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  5943   00249C  0E0F               	movlw	15
  5944   00249E  1413               	andwf	bcd2dec@value^0,w,c
  5945   0024A0  6E15               	movwf	??_bcd2dec^0,c
  5946   0024A2  0E00               	movlw	0
  5947   0024A4  1414               	andwf	(bcd2dec@value+1)^0,w,c
  5948   0024A6  6E16               	movwf	(??_bcd2dec+1)^0,c
  5949   0024A8  0E00               	movlw	0
  5950   0024AA  6E04               	movwf	(___awdiv@divisor+1)^0,c
  5951   0024AC  0E10               	movlw	16
  5952   0024AE  6E03               	movwf	___awdiv@divisor^0,c
  5953   0024B0  C013  F001         	movff	bcd2dec@value,___awdiv@dividend
  5954   0024B4  C014  F002         	movff	bcd2dec@value+1,___awdiv@dividend+1
  5955   0024B8  ECA5  F00F         	call	___awdiv	;wreg free
  5956   0024BC  C001  F009         	movff	?___awdiv,___wmul@multiplier
  5957   0024C0  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  5958   0024C4  0E00               	movlw	0
  5959   0024C6  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  5960   0024C8  0E0A               	movlw	10
  5961   0024CA  6E0B               	movwf	___wmul@multiplicand^0,c
  5962   0024CC  ECCF  F013         	call	___wmul	;wreg free
  5963   0024D0  5015               	movf	??_bcd2dec^0,w,c
  5964   0024D2  2409               	addwf	?___wmul^0,w,c
  5965   0024D4  6E13               	movwf	?_bcd2dec^0,c
  5966   0024D6  5016               	movf	(??_bcd2dec+1)^0,w,c
  5967   0024D8  200A               	addwfc	(?___wmul+1)^0,w,c
  5968   0024DA  6E14               	movwf	(?_bcd2dec+1)^0,c
  5969   0024DC  0012               	return		;funcret
  5970   0024DE                     __end_of_bcd2dec:
  5971                           	callstack 0
  5972                           
  5973 ;; *************** function ___wmul *****************
  5974 ;; Defined at:
  5975 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;  multiplier      2    8[COMRAM] unsigned int 
  5978 ;;  multiplicand    2   10[COMRAM] unsigned int 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  product         2   12[COMRAM] unsigned int 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  2    8[COMRAM] unsigned int 
  5983 ;; Registers used:
  5984 ;;		wreg, status,2, status,0, prodl, prodh
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5990 ;;      Params:         4       0       0       0       0       0       0       0       0
  5991 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5993 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5994 ;;Total ram usage:        6 bytes
  5995 ;; Hardware stack levels used: 1
  5996 ;; This function calls:
  5997 ;;		Nothing
  5998 ;; This function is called by:
  5999 ;;		_bcd2dec
  6000 ;;		_lcdInt
  6001 ;;		_smLoop
  6002 ;;		_pwmSet1
  6003 ;;		_pwmSet2
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text38
  6008   00279E                     __ptext38:
  6009                           	callstack 0
  6010   00279E                     ___wmul:
  6011                           	callstack 27
  6012   00279E  5009               	movf	___wmul@multiplier^0,w,c
  6013   0027A0  020B               	mulwf	___wmul@multiplicand^0,c
  6014   0027A2  CFF3 F00D          	movff	prodl,___wmul@product
  6015   0027A6  CFF4 F00E          	movff	prodh,___wmul@product+1
  6016   0027AA  5009               	movf	___wmul@multiplier^0,w,c
  6017   0027AC  020C               	mulwf	(___wmul@multiplicand+1)^0,c
  6018   0027AE  50F3               	movf	243,w,c
  6019   0027B0  260E               	addwf	(___wmul@product+1)^0,f,c
  6020   0027B2  500A               	movf	(___wmul@multiplier+1)^0,w,c
  6021   0027B4  020B               	mulwf	___wmul@multiplicand^0,c
  6022   0027B6  50F3               	movf	243,w,c
  6023   0027B8  260E               	addwf	(___wmul@product+1)^0,f,c
  6024   0027BA  C00D  F009         	movff	___wmul@product,?___wmul
  6025   0027BE  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  6026   0027C2  0012               	return		;funcret
  6027   0027C4                     __end_of___wmul:
  6028                           	callstack 0
  6029                           
  6030 ;; *************** function ___awdiv *****************
  6031 ;; Defined at:
  6032 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  dividend        2    0[COMRAM] int 
  6035 ;;  divisor         2    2[COMRAM] int 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  quotient        2    6[COMRAM] int 
  6038 ;;  sign            1    5[COMRAM] unsigned char 
  6039 ;;  counter         1    4[COMRAM] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  2    0[COMRAM] int 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2, status,0
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6049 ;;      Params:         4       0       0       0       0       0       0       0       0
  6050 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6052 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6053 ;;Total ram usage:        8 bytes
  6054 ;; Hardware stack levels used: 1
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_dec2bcd
  6059 ;;		_bcd2dec
  6060 ;;		_lcdInt
  6061 ;;		_rtcPutSeconds
  6062 ;;		_rtcPutMinutes
  6063 ;;		_rtcPutHours
  6064 ;;		_rtcPutDate
  6065 ;;		_rtcPutMonth
  6066 ;;		_rtcPutYear
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text39
  6071   001F4A                     __ptext39:
  6072                           	callstack 0
  6073   001F4A                     ___awdiv:
  6074                           	callstack 27
  6075   001F4A  0E00               	movlw	0
  6076   001F4C  6E06               	movwf	___awdiv@sign^0,c
  6077   001F4E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  6078   001F50  EFAE  F00F         	goto	u2640
  6079   001F54  EFAC  F00F         	goto	u2641
  6080   001F58                     u2641:
  6081   001F58  EFB4  F00F         	goto	l3190
  6082   001F5C                     u2640:
  6083   001F5C  6C03               	negf	___awdiv@divisor^0,c
  6084   001F5E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  6085   001F60  B0D8               	btfsc	status,0,c
  6086   001F62  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  6087   001F64  0E01               	movlw	1
  6088   001F66  6E06               	movwf	___awdiv@sign^0,c
  6089   001F68                     l3190:
  6090   001F68  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  6091   001F6A  EFBB  F00F         	goto	u2650
  6092   001F6E  EFB9  F00F         	goto	u2651
  6093   001F72                     u2651:
  6094   001F72  EFC1  F00F         	goto	l3196
  6095   001F76                     u2650:
  6096   001F76  6C01               	negf	___awdiv@dividend^0,c
  6097   001F78  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  6098   001F7A  B0D8               	btfsc	status,0,c
  6099   001F7C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  6100   001F7E  0E01               	movlw	1
  6101   001F80  1A06               	xorwf	___awdiv@sign^0,f,c
  6102   001F82                     l3196:
  6103   001F82  0E00               	movlw	0
  6104   001F84  6E08               	movwf	(___awdiv@quotient+1)^0,c
  6105   001F86  0E00               	movlw	0
  6106   001F88  6E07               	movwf	___awdiv@quotient^0,c
  6107   001F8A  5003               	movf	___awdiv@divisor^0,w,c
  6108   001F8C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  6109   001F8E  B4D8               	btfsc	status,2,c
  6110   001F90  EFCC  F00F         	goto	u2661
  6111   001F94  EFCE  F00F         	goto	u2660
  6112   001F98                     u2661:
  6113   001F98  EFF6  F00F         	goto	l3218
  6114   001F9C                     u2660:
  6115   001F9C  0E01               	movlw	1
  6116   001F9E  6E05               	movwf	___awdiv@counter^0,c
  6117   001FA0  EFD6  F00F         	goto	l3204
  6118   001FA4                     l3202:
  6119   001FA4  90D8               	bcf	status,0,c
  6120   001FA6  3603               	rlcf	___awdiv@divisor^0,f,c
  6121   001FA8  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  6122   001FAA  2A05               	incf	___awdiv@counter^0,f,c
  6123   001FAC                     l3204:
  6124   001FAC  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  6125   001FAE  EFDB  F00F         	goto	u2671
  6126   001FB2  EFDD  F00F         	goto	u2670
  6127   001FB6                     u2671:
  6128   001FB6  EFD2  F00F         	goto	l3202
  6129   001FBA                     u2670:
  6130   001FBA                     l3206:
  6131   001FBA  90D8               	bcf	status,0,c
  6132   001FBC  3607               	rlcf	___awdiv@quotient^0,f,c
  6133   001FBE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  6134   001FC0  5003               	movf	___awdiv@divisor^0,w,c
  6135   001FC2  5C01               	subwf	___awdiv@dividend^0,w,c
  6136   001FC4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  6137   001FC6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  6138   001FC8  A0D8               	btfss	status,0,c
  6139   001FCA  EFE9  F00F         	goto	u2681
  6140   001FCE  EFEB  F00F         	goto	u2680
  6141   001FD2                     u2681:
  6142   001FD2  EFF0  F00F         	goto	l3214
  6143   001FD6                     u2680:
  6144   001FD6  5003               	movf	___awdiv@divisor^0,w,c
  6145   001FD8  5E01               	subwf	___awdiv@dividend^0,f,c
  6146   001FDA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  6147   001FDC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  6148   001FDE  8007               	bsf	___awdiv@quotient^0,0,c
  6149   001FE0                     l3214:
  6150   001FE0  90D8               	bcf	status,0,c
  6151   001FE2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  6152   001FE4  3203               	rrcf	___awdiv@divisor^0,f,c
  6153   001FE6  2E05               	decfsz	___awdiv@counter^0,f,c
  6154   001FE8  EFDD  F00F         	goto	l3206
  6155   001FEC                     l3218:
  6156   001FEC  5006               	movf	___awdiv@sign^0,w,c
  6157   001FEE  B4D8               	btfsc	status,2,c
  6158   001FF0  EFFC  F00F         	goto	u2691
  6159   001FF4  EFFE  F00F         	goto	u2690
  6160   001FF8                     u2691:
  6161   001FF8  EF02  F010         	goto	l3222
  6162   001FFC                     u2690:
  6163   001FFC  6C07               	negf	___awdiv@quotient^0,c
  6164   001FFE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  6165   002000  B0D8               	btfsc	status,0,c
  6166   002002  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  6167   002004                     l3222:
  6168   002004  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6169   002008  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6170   00200C  0012               	return		;funcret
  6171   00200E                     __end_of___awdiv:
  6172                           	callstack 0
  6173                           
  6174 ;; *************** function _setState *****************
  6175 ;; Defined at:
  6176 ;;		line 38 in file "var.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  newState        1    wreg     unsigned char 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;  newState        1    3[COMRAM] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      void 
  6183 ;; Registers used:
  6184 ;;		wreg, status,2, status,0, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6190 ;;      Params:         0       0       0       0       0       0       0       0       0
  6191 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6193 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6194 ;;Total ram usage:        1 bytes
  6195 ;; Hardware stack levels used: 1
  6196 ;; Hardware stack levels required when called: 3
  6197 ;; This function calls:
  6198 ;;		_lcdCommand
  6199 ;; This function is called by:
  6200 ;;		_smInit
  6201 ;;		_smLoop
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           	psect	text40
  6206   0028AE                     __ptext40:
  6207                           	callstack 0
  6208   0028AE                     _setState:
  6209                           	callstack 26
  6210                           
  6211                           ;incstack = 0
  6212                           ;setState@newState stored from wreg
  6213   0028AE  6E04               	movwf	setState@newState^0,c
  6214   0028B0                     
  6215                           ;var.c: 39:     state = newState;
  6216   0028B0  C004  F04B         	movff	setState@newState,_state
  6217   0028B4                     
  6218                           ;var.c: 40:     lcdCommand(0x01);
  6219   0028B4  0E01               	movlw	1
  6220   0028B6  ECE4  F011         	call	_lcdCommand
  6221   0028BA  0012               	return		;funcret
  6222   0028BC                     __end_of_setState:
  6223                           	callstack 0
  6224                           
  6225 ;; *************** function _eventInit *****************
  6226 ;; Defined at:
  6227 ;;		line 18 in file "event.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;		None
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;		None
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      void 
  6234 ;; Registers used:
  6235 ;;		wreg, status,2, status,0, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0
  6242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6244 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6245 ;;Total ram usage:        0 bytes
  6246 ;; Hardware stack levels used: 1
  6247 ;; Hardware stack levels required when called: 1
  6248 ;; This function calls:
  6249 ;;		_kpInit
  6250 ;; This function is called by:
  6251 ;;		_smInit
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text41
  6256   002888                     __ptext41:
  6257                           	callstack 0
  6258   002888                     _eventInit:
  6259                           	callstack 28
  6260   002888                     
  6261                           ;event.c: 19:     kpInit();
  6262   002888  EC5E  F014         	call	_kpInit	;wreg free
  6263   00288C                     
  6264                           ;event.c: 21:     ev_ant = 0;
  6265   00288C  0E00               	movlw	0
  6266   00288E  6E46               	movwf	(_ev_ant+1)^0,c
  6267   002890  0E00               	movlw	0
  6268   002892  6E45               	movwf	_ev_ant^0,c
  6269   002894                     
  6270                           ;event.c: 22:     key = 1;
  6271   002894  0E00               	movlw	0
  6272   002896  6E42               	movwf	(_key+1)^0,c
  6273   002898  0E01               	movlw	1
  6274   00289A  6E41               	movwf	_key^0,c
  6275   00289C  0012               	return		;funcret
  6276   00289E                     __end_of_eventInit:
  6277                           	callstack 0
  6278                           
  6279 ;; *************** function _kpInit *****************
  6280 ;; Defined at:
  6281 ;;		line 81 in file "keypad.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, status,2, status,0
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6295 ;;      Params:         0       0       0       0       0       0       0       0       0
  6296 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6298 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6299 ;;Total ram usage:        0 bytes
  6300 ;; Hardware stack levels used: 1
  6301 ;; This function calls:
  6302 ;;		Nothing
  6303 ;; This function is called by:
  6304 ;;		_main
  6305 ;;		_eventInit
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text42
  6310   0028BC                     __ptext42:
  6311                           	callstack 0
  6312   0028BC                     _kpInit:
  6313                           	callstack 28
  6314   0028BC                     
  6315                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  6316   0028BC  6893               	setf	147,c	;volatile
  6317   0028BE                     
  6318                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  6319   0028BE  9EF1               	bcf	241,7,c	;volatile
  6320   0028C0                     
  6321                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  6322   0028C0  0E0E               	movlw	14
  6323   0028C2  6EC1               	movwf	193,c	;volatile
  6324   0028C4                     
  6325                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  6326   0028C4  0E00               	movlw	0
  6327   0028C6  6E63               	movwf	99,c	;volatile
  6328   0028C8  0012               	return		;funcret
  6329   0028CA                     __end_of_kpInit:
  6330                           	callstack 0
  6331                           
  6332 ;; *************** function _serialInit *****************
  6333 ;; Defined at:
  6334 ;;		line 48 in file "serial.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6351 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6352 ;;Total ram usage:        0 bytes
  6353 ;; Hardware stack levels used: 1
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_main
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text43
  6362   002828                     __ptext43:
  6363                           	callstack 0
  6364   002828                     _serialInit:
  6365                           	callstack 30
  6366   002828                     
  6367                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  6368   002828  0E2C               	movlw	44
  6369   00282A  6EAC               	movwf	172,c	;volatile
  6370                           
  6371                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  6372   00282C  0E90               	movlw	144
  6373   00282E  6EAB               	movwf	171,c	;volatile
  6374                           
  6375                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  6376   002830  0E08               	movlw	8
  6377   002832  6EB8               	movwf	184,c	;volatile
  6378                           
  6379                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  6380   002834  0E00               	movlw	0
  6381   002836  6EB0               	movwf	176,c	;volatile
  6382                           
  6383                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  6384   002838  0E22               	movlw	34
  6385   00283A  6EAF               	movwf	175,c	;volatile
  6386   00283C                     
  6387                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  6388   00283C  8C94               	bsf	148,6,c	;volatile
  6389   00283E                     
  6390                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  6391   00283E  8E94               	bsf	148,7,c	;volatile
  6392   002840  0012               	return		;funcret
  6393   002842                     __end_of_serialInit:
  6394                           	callstack 0
  6395                           
  6396 ;; *************** function _lcdInit *****************
  6397 ;; Defined at:
  6398 ;;		line 117 in file "lcd.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  i               1    3[COMRAM] unsigned char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6412 ;;      Params:         0       0       0       0       0       0       0       0       0
  6413 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6415 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6416 ;;Total ram usage:        1 bytes
  6417 ;; Hardware stack levels used: 1
  6418 ;; Hardware stack levels required when called: 3
  6419 ;; This function calls:
  6420 ;;		_Delay2ms
  6421 ;;		_lcdCommand
  6422 ;;		_lcdCommand4bits
  6423 ;; This function is called by:
  6424 ;;		_main
  6425 ;;		_outputInit
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text44
  6430   0020BE                     __ptext44:
  6431                           	callstack 0
  6432   0020BE                     _lcdInit:
  6433                           	callstack 27
  6434   0020BE                     
  6435                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  6436   0020BE  9095               	bcf	149,0,c	;volatile
  6437                           
  6438                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  6439   0020C0  9E95               	bcf	149,7,c	;volatile
  6440                           
  6441                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  6442   0020C2  9C95               	bcf	149,6,c	;volatile
  6443                           
  6444                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  6445   0020C4  9A95               	bcf	149,5,c	;volatile
  6446                           
  6447                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  6448   0020C6  9895               	bcf	149,4,c	;volatile
  6449                           
  6450                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  6451   0020C8  9495               	bcf	149,2,c	;volatile
  6452   0020CA                     
  6453                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  6454   0020CA  0E00               	movlw	0
  6455   0020CC  6E04               	movwf	lcdInit@i^0,c
  6456   0020CE                     l3674:
  6457                           
  6458                           ;lcd.c: 133:         Delay2ms();
  6459   0020CE  EC39  F013         	call	_Delay2ms	;wreg free
  6460   0020D2  2A04               	incf	lcdInit@i^0,f,c
  6461   0020D4  0E06               	movlw	6
  6462   0020D6  6404               	cpfsgt	lcdInit@i^0,c
  6463   0020D8  EF70  F010         	goto	u3211
  6464   0020DC  EF72  F010         	goto	u3210
  6465   0020E0                     u3211:
  6466   0020E0  EF67  F010         	goto	l3674
  6467   0020E4                     u3210:
  6468   0020E4                     
  6469                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  6470   0020E4  0E00               	movlw	0
  6471   0020E6  6E01               	movwf	lcdCommand4bits@data^0,c
  6472   0020E8  0E30               	movlw	48
  6473   0020EA  EC9B  F010         	call	_lcdCommand4bits
  6474                           
  6475                           ;lcd.c: 138:     Delay2ms();
  6476   0020EE  EC39  F013         	call	_Delay2ms	;wreg free
  6477                           
  6478                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  6479   0020F2  0E00               	movlw	0
  6480   0020F4  6E01               	movwf	lcdCommand4bits@data^0,c
  6481   0020F6  0E30               	movlw	48
  6482   0020F8  EC9B  F010         	call	_lcdCommand4bits
  6483                           
  6484                           ;lcd.c: 142:     Delay2ms();
  6485   0020FC  EC39  F013         	call	_Delay2ms	;wreg free
  6486                           
  6487                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  6488   002100  0E00               	movlw	0
  6489   002102  6E01               	movwf	lcdCommand4bits@data^0,c
  6490   002104  0E30               	movlw	48
  6491   002106  EC9B  F010         	call	_lcdCommand4bits
  6492                           
  6493                           ;lcd.c: 146:     Delay2ms();
  6494   00210A  EC39  F013         	call	_Delay2ms	;wreg free
  6495                           
  6496                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  6497   00210E  0E00               	movlw	0
  6498   002110  6E01               	movwf	lcdCommand4bits@data^0,c
  6499   002112  0E20               	movlw	32
  6500   002114  EC9B  F010         	call	_lcdCommand4bits
  6501                           
  6502                           ;lcd.c: 150:     Delay2ms();
  6503   002118  EC39  F013         	call	_Delay2ms	;wreg free
  6504                           
  6505                           ;lcd.c: 153:     lcdCommand(0x28);
  6506   00211C  0E28               	movlw	40
  6507   00211E  ECE4  F011         	call	_lcdCommand
  6508                           
  6509                           ;lcd.c: 154:     lcdCommand(0x06);
  6510   002122  0E06               	movlw	6
  6511   002124  ECE4  F011         	call	_lcdCommand
  6512                           
  6513                           ;lcd.c: 156:     lcdCommand(0x0C);
  6514   002128  0E0C               	movlw	12
  6515   00212A  ECE4  F011         	call	_lcdCommand
  6516                           
  6517                           ;lcd.c: 157:     lcdCommand(0x01);
  6518   00212E  0E01               	movlw	1
  6519   002130  ECE4  F011         	call	_lcdCommand
  6520   002134  0012               	return		;funcret
  6521   002136                     __end_of_lcdInit:
  6522                           	callstack 0
  6523                           
  6524 ;; *************** function _lcdCommand *****************
  6525 ;; Defined at:
  6526 ;;		line 93 in file "lcd.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  cmd             1    wreg     unsigned char 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  cmd             1    2[COMRAM] unsigned char 
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0
  6541 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6543 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6544 ;;Total ram usage:        1 bytes
  6545 ;; Hardware stack levels used: 1
  6546 ;; Hardware stack levels required when called: 2
  6547 ;; This function calls:
  6548 ;;		_Delay2ms
  6549 ;;		_Delay40us
  6550 ;;		_lcdCommand4bits
  6551 ;; This function is called by:
  6552 ;;		_lcdInit
  6553 ;;		_outputPrint
  6554 ;;		_setState
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           	psect	text45
  6559   0023C8                     __ptext45:
  6560                           	callstack 0
  6561   0023C8                     _lcdCommand:
  6562                           	callstack 26
  6563                           
  6564                           ;incstack = 0
  6565                           ;lcdCommand@cmd stored from wreg
  6566   0023C8  6E03               	movwf	lcdCommand@cmd^0,c
  6567   0023CA                     
  6568                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  6569   0023CA  0E00               	movlw	0
  6570   0023CC  6E01               	movwf	lcdCommand4bits@data^0,c
  6571   0023CE  5003               	movf	lcdCommand@cmd^0,w,c
  6572   0023D0  EC9B  F010         	call	_lcdCommand4bits
  6573                           
  6574                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  6575   0023D4  0E00               	movlw	0
  6576   0023D6  6E01               	movwf	lcdCommand4bits@data^0,c
  6577   0023D8  3803               	swapf	lcdCommand@cmd^0,w,c
  6578   0023DA  0BF0               	andlw	240
  6579   0023DC  EC9B  F010         	call	_lcdCommand4bits
  6580   0023E0                     
  6581                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  6582   0023E0  0E02               	movlw	2
  6583   0023E2  1803               	xorwf	lcdCommand@cmd^0,w,c
  6584   0023E4  B4D8               	btfsc	status,2,c
  6585   0023E6  EFF7  F011         	goto	u2761
  6586   0023EA  EFF9  F011         	goto	u2760
  6587   0023EE                     u2761:
  6588   0023EE  EF01  F012         	goto	l3288
  6589   0023F2                     u2760:
  6590   0023F2  0403               	decf	lcdCommand@cmd^0,w,c
  6591   0023F4  A4D8               	btfss	status,2,c
  6592   0023F6  EFFF  F011         	goto	u2771
  6593   0023FA  EF01  F012         	goto	u2770
  6594   0023FE                     u2771:
  6595   0023FE  EF05  F012         	goto	l3290
  6596   002402                     u2770:
  6597   002402                     l3288:
  6598                           
  6599                           ;lcd.c: 100:         Delay2ms();
  6600   002402  EC39  F013         	call	_Delay2ms	;wreg free
  6601                           
  6602                           ;lcd.c: 102:     } else {
  6603   002406  EF07  F012         	goto	l180
  6604   00240A                     l3290:
  6605                           
  6606                           ;lcd.c: 103:         Delay40us();
  6607   00240A  EC2D  F014         	call	_Delay40us	;wreg free
  6608   00240E                     l180:
  6609   00240E  0012               	return		;funcret
  6610   002410                     __end_of_lcdCommand:
  6611                           	callstack 0
  6612                           
  6613 ;; *************** function _lcdCommand4bits *****************
  6614 ;; Defined at:
  6615 ;;		line 52 in file "lcd.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  cmd             1    wreg     unsigned char 
  6618 ;;  data            1    0[COMRAM] unsigned char 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  cmd             1    1[COMRAM] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6630 ;;      Params:         1       0       0       0       0       0       0       0       0
  6631 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6633 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6634 ;;Total ram usage:        2 bytes
  6635 ;; Hardware stack levels used: 1
  6636 ;; Hardware stack levels required when called: 1
  6637 ;; This function calls:
  6638 ;;		_pulseEnable
  6639 ;; This function is called by:
  6640 ;;		_lcdCommand
  6641 ;;		_lcdData
  6642 ;;		_lcdInit
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text46
  6647   002136                     __ptext46:
  6648                           	callstack 0
  6649   002136                     _lcdCommand4bits:
  6650                           	callstack 26
  6651                           
  6652                           ;incstack = 0
  6653                           ;lcdCommand4bits@cmd stored from wreg
  6654   002136  6E02               	movwf	lcdCommand4bits@cmd^0,c
  6655   002138                     
  6656                           ;lcd.c: 54:     if (data) {
  6657   002138  5001               	movf	lcdCommand4bits@data^0,w,c
  6658   00213A  B4D8               	btfsc	status,2,c
  6659   00213C  EFA2  F010         	goto	u2551
  6660   002140  EFA4  F010         	goto	u2550
  6661   002144                     u2551:
  6662   002144  EFA7  F010         	goto	l3102
  6663   002148                     u2550:
  6664   002148                     
  6665                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  6666   002148  8083               	bsf	131,0,c	;volatile
  6667                           
  6668                           ;lcd.c: 56:     } else {
  6669   00214A  EFA8  F010         	goto	l3104
  6670   00214E                     l3102:
  6671                           
  6672                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  6673   00214E  9083               	bcf	131,0,c	;volatile
  6674   002150                     l3104:
  6675                           
  6676                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  6677   002150  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  6678   002152  EFAD  F010         	goto	u2561
  6679   002156  EFAF  F010         	goto	u2560
  6680   00215A                     u2561:
  6681   00215A  EFB2  F010         	goto	l3108
  6682   00215E                     u2560:
  6683   00215E                     
  6684                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  6685   00215E  8483               	bsf	131,2,c	;volatile
  6686                           
  6687                           ;lcd.c: 65:     } else {
  6688   002160  EFB3  F010         	goto	l3110
  6689   002164                     l3108:
  6690                           
  6691                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  6692   002164  9483               	bcf	131,2,c	;volatile
  6693   002166                     l3110:
  6694                           
  6695                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  6696   002166  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  6697   002168  EFB8  F010         	goto	u2571
  6698   00216C  EFBA  F010         	goto	u2570
  6699   002170                     u2571:
  6700   002170  EFBD  F010         	goto	l3114
  6701   002174                     u2570:
  6702   002174                     
  6703                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  6704   002174  8883               	bsf	131,4,c	;volatile
  6705                           
  6706                           ;lcd.c: 72:     } else {
  6707   002176  EFBE  F010         	goto	l3116
  6708   00217A                     l3114:
  6709                           
  6710                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  6711   00217A  9883               	bcf	131,4,c	;volatile
  6712   00217C                     l3116:
  6713                           
  6714                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  6715   00217C  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  6716   00217E  EFC3  F010         	goto	u2581
  6717   002182  EFC5  F010         	goto	u2580
  6718   002186                     u2581:
  6719   002186  EFC8  F010         	goto	l3120
  6720   00218A                     u2580:
  6721   00218A                     
  6722                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  6723   00218A  8A83               	bsf	131,5,c	;volatile
  6724                           
  6725                           ;lcd.c: 79:     } else {
  6726   00218C  EFC9  F010         	goto	l3122
  6727   002190                     l3120:
  6728                           
  6729                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  6730   002190  9A83               	bcf	131,5,c	;volatile
  6731   002192                     l3122:
  6732                           
  6733                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  6734   002192  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  6735   002194  EFCE  F010         	goto	u2591
  6736   002198  EFD0  F010         	goto	u2590
  6737   00219C                     u2591:
  6738   00219C  EFD3  F010         	goto	l3126
  6739   0021A0                     u2590:
  6740   0021A0                     
  6741                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  6742   0021A0  8C83               	bsf	131,6,c	;volatile
  6743                           
  6744                           ;lcd.c: 86:     } else {
  6745   0021A2  EFD4  F010         	goto	l3128
  6746   0021A6                     l3126:
  6747                           
  6748                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  6749   0021A6  9C83               	bcf	131,6,c	;volatile
  6750   0021A8                     l3128:
  6751                           
  6752                           ;lcd.c: 90:     pulseEnable();
  6753   0021A8  EC6F  F014         	call	_pulseEnable	;wreg free
  6754   0021AC  0012               	return		;funcret
  6755   0021AE                     __end_of_lcdCommand4bits:
  6756                           	callstack 0
  6757                           
  6758 ;; *************** function _pulseEnable *****************
  6759 ;; Defined at:
  6760 ;;		line 47 in file "lcd.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;		None
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;		None
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		status,2, status,0
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6774 ;;      Params:         0       0       0       0       0       0       0       0       0
  6775 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6777 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6778 ;;Total ram usage:        0 bytes
  6779 ;; Hardware stack levels used: 1
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_lcdCommand4bits
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text47
  6788   0028DE                     __ptext47:
  6789                           	callstack 0
  6790   0028DE                     _pulseEnable:
  6791                           	callstack 26
  6792   0028DE                     
  6793                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  6794   0028DE  8E83               	bsf	131,7,c	;volatile
  6795                           
  6796                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  6797   0028E0  9E83               	bcf	131,7,c	;volatile
  6798   0028E2  0012               	return		;funcret
  6799   0028E4                     __end_of_pulseEnable:
  6800                           	callstack 0
  6801                           
  6802 ;; *************** function _Delay40us *****************
  6803 ;; Defined at:
  6804 ;;		line 36 in file "lcd.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  j               1    0[COMRAM] unsigned char 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg, status,2, status,0
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0
  6819 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6821 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6822 ;;Total ram usage:        1 bytes
  6823 ;; Hardware stack levels used: 1
  6824 ;; This function calls:
  6825 ;;		Nothing
  6826 ;; This function is called by:
  6827 ;;		_lcdCommand
  6828 ;;		_lcdData
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text48
  6833   00285A                     __ptext48:
  6834                           	callstack 0
  6835   00285A                     _Delay40us:
  6836                           	callstack 27
  6837   00285A                     
  6838                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  6839   00285A  0E00               	movlw	0
  6840   00285C  6E01               	movwf	Delay40us@j^0,c
  6841   00285E                     l3094:
  6842   00285E  2A01               	incf	Delay40us@j^0,f,c
  6843   002860  0E43               	movlw	67
  6844   002862  6401               	cpfsgt	Delay40us@j^0,c
  6845   002864  EF36  F014         	goto	u2541
  6846   002868  EF38  F014         	goto	u2540
  6847   00286C                     u2541:
  6848   00286C  EF2F  F014         	goto	l3094
  6849   002870                     u2540:
  6850   002870  0012               	return		;funcret
  6851   002872                     __end_of_Delay40us:
  6852                           	callstack 0
  6853                           
  6854 ;; *************** function _Delay2ms *****************
  6855 ;; Defined at:
  6856 ;;		line 41 in file "lcd.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;		None
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  k               1    1[COMRAM] unsigned char 
  6861 ;;  j               1    0[COMRAM] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6871 ;;      Params:         0       0       0       0       0       0       0       0       0
  6872 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6874 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6875 ;;Total ram usage:        2 bytes
  6876 ;; Hardware stack levels used: 1
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_lcdCommand
  6881 ;;		_lcdInit
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text49
  6886   002672                     __ptext49:
  6887                           	callstack 0
  6888   002672                     _Delay2ms:
  6889                           	callstack 27
  6890   002672                     
  6891                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  6892   002672  0E00               	movlw	0
  6893   002674  6E01               	movwf	Delay2ms@j^0,c
  6894   002676                     l3160:
  6895                           
  6896                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  6897   002676  0E00               	movlw	0
  6898   002678  6E02               	movwf	Delay2ms@k^0,c
  6899   00267A                     l3166:
  6900   00267A  2A02               	incf	Delay2ms@k^0,f,c
  6901   00267C  0EB1               	movlw	177
  6902   00267E  6402               	cpfsgt	Delay2ms@k^0,c
  6903   002680  EF44  F013         	goto	u2621
  6904   002684  EF46  F013         	goto	u2620
  6905   002688                     u2621:
  6906   002688  EF3D  F013         	goto	l3166
  6907   00268C                     u2620:
  6908   00268C  2A01               	incf	Delay2ms@j^0,f,c
  6909   00268E  0E13               	movlw	19
  6910   002690  6401               	cpfsgt	Delay2ms@j^0,c
  6911   002692  EF4D  F013         	goto	u2631
  6912   002696  EF4F  F013         	goto	u2630
  6913   00269A                     u2631:
  6914   00269A  EF3B  F013         	goto	l3160
  6915   00269E                     u2630:
  6916   00269E  0012               	return		;funcret
  6917   0026A0                     __end_of_Delay2ms:
  6918                           	callstack 0
  6919                           
  6920 ;; *************** function _kpDebounce *****************
  6921 ;; Defined at:
  6922 ;;		line 33 in file "keypad.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  portes          5    8[COMRAM] unsigned char [5]
  6927 ;;  bits            5    3[COMRAM] unsigned char [5]
  6928 ;;  j               1   13[COMRAM] unsigned char 
  6929 ;;  i               1    0        unsigned char 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6939 ;;      Params:         0       0       0       0       0       0       0       0       0
  6940 ;;      Locals:        11       0       0       0       0       0       0       0       0
  6941 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6942 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6943 ;;Total ram usage:       14 bytes
  6944 ;; Hardware stack levels used: 1
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		_main
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	text50
  6953   001D86                     __ptext50:
  6954                           	callstack 0
  6955   001D86                     _kpDebounce:
  6956                           	callstack 30
  6957   001D86                     
  6958                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  6959   001D86  EE20  F009         	lfsr	2,kpDebounce@portes
  6960   001D8A  0E04               	movlw	4
  6961   001D8C                     u3121:
  6962   001D8C  6ADE               	clrf	postinc2,c
  6963   001D8E  06E8               	decf	wreg,f,c
  6964   001D90  E2FD               	bc	u3121
  6965   001D92  CF81 F009          	movff	3969,kpDebounce@portes	;volatile
  6966   001D96  CF81 F00A          	movff	3969,kpDebounce@portes+1	;volatile
  6967   001D9A  CF81 F00B          	movff	3969,kpDebounce@portes+2	;volatile
  6968   001D9E  CF81 F00C          	movff	3969,kpDebounce@portes+3	;volatile
  6969   001DA2  CF84 F00D          	movff	3972,kpDebounce@portes+4	;volatile
  6970   001DA6                     
  6971                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  6972   001DA6  EE20  F059         	lfsr	2,kpDebounce@F15
  6973   001DAA  EE10  F004         	lfsr	1,kpDebounce@bits
  6974   001DAE  0E04               	movlw	4
  6975   001DB0                     u3131:
  6976   001DB0  CFDB FFE3          	movff	plusw2,plusw1
  6977   001DB4  06E8               	decf	wreg,f,c
  6978   001DB6  E2FC               	bc	u3131
  6979   001DB8                     
  6980                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  6981   001DB8  0E00               	movlw	0
  6982   001DBA  6E0E               	movwf	kpDebounce@j^0,c
  6983   001DBC                     l3646:
  6984                           
  6985                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  6986   001DBC  500E               	movf	kpDebounce@j^0,w,c
  6987   001DBE  0F09               	addlw	low kpDebounce@portes
  6988   001DC0  6ED9               	movwf	fsr2l,c
  6989   001DC2  6ADA               	clrf	fsr2h,c
  6990   001DC4  50DF               	movf	indf2,w,c
  6991   001DC6  6E01               	movwf	??_kpDebounce^0,c
  6992   001DC8  500E               	movf	kpDebounce@j^0,w,c
  6993   001DCA  0F04               	addlw	low kpDebounce@bits
  6994   001DCC  6ED9               	movwf	fsr2l,c
  6995   001DCE  6ADA               	clrf	fsr2h,c
  6996   001DD0  50DF               	movf	indf2,w,c
  6997   001DD2  6E02               	movwf	(??_kpDebounce+1)^0,c
  6998   001DD4  0E01               	movlw	1
  6999   001DD6  6E03               	movwf	(??_kpDebounce+2)^0,c
  7000   001DD8  2A02               	incf	(??_kpDebounce+1)^0,f,c
  7001   001DDA  EFF1  F00E         	goto	u3144
  7002   001DDE                     u3145:
  7003   001DDE  90D8               	bcf	status,0,c
  7004   001DE0  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  7005   001DE2                     u3144:
  7006   001DE2  2E02               	decfsz	(??_kpDebounce+1)^0,f,c
  7007   001DE4  EFEF  F00E         	goto	u3145
  7008   001DE8  5003               	movf	(??_kpDebounce+2)^0,w,c
  7009   001DEA  1401               	andwf	??_kpDebounce^0,w,c
  7010   001DEC  0900               	iorlw	0
  7011   001DEE  A4D8               	btfss	status,2,c
  7012   001DF0  EFFC  F00E         	goto	u3151
  7013   001DF4  EFFE  F00E         	goto	u3150
  7014   001DF8                     u3151:
  7015   001DF8  EF0E  F00F         	goto	l3650
  7016   001DFC                     u3150:
  7017   001DFC                     
  7018                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  7019   001DFC  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  7020   001E00  0E01               	movlw	1
  7021   001E02  6E02               	movwf	(??_kpDebounce+1)^0,c
  7022   001E04  2A01               	incf	??_kpDebounce^0,f,c
  7023   001E06  EF07  F00F         	goto	u3164
  7024   001E0A                     u3165:
  7025   001E0A  90D8               	bcf	status,0,c
  7026   001E0C  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  7027   001E0E                     u3164:
  7028   001E0E  2E01               	decfsz	??_kpDebounce^0,f,c
  7029   001E10  EF05  F00F         	goto	u3165
  7030   001E14  5002               	movf	(??_kpDebounce+1)^0,w,c
  7031   001E16  1256               	iorwf	kpDebounce@valorNovo^0,f,c
  7032                           
  7033                           ;keypad.c: 65:             } else {
  7034   001E18  EF1D  F00F         	goto	l3652
  7035   001E1C                     l3650:
  7036                           
  7037                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  7038   001E1C  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  7039   001E20  0E01               	movlw	1
  7040   001E22  6E02               	movwf	(??_kpDebounce+1)^0,c
  7041   001E24  2A01               	incf	??_kpDebounce^0,f,c
  7042   001E26  EF17  F00F         	goto	u3174
  7043   001E2A                     u3175:
  7044   001E2A  90D8               	bcf	status,0,c
  7045   001E2C  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  7046   001E2E                     u3174:
  7047   001E2E  2E01               	decfsz	??_kpDebounce^0,f,c
  7048   001E30  EF15  F00F         	goto	u3175
  7049   001E34  5002               	movf	(??_kpDebounce+1)^0,w,c
  7050   001E36  0AFF               	xorlw	255
  7051   001E38  1656               	andwf	kpDebounce@valorNovo^0,f,c
  7052   001E3A                     l3652:
  7053                           
  7054                           ;keypad.c: 68:         }
  7055   001E3A  2A0E               	incf	kpDebounce@j^0,f,c
  7056   001E3C  0E04               	movlw	4
  7057   001E3E  640E               	cpfsgt	kpDebounce@j^0,c
  7058   001E40  EF24  F00F         	goto	u3181
  7059   001E44  EF26  F00F         	goto	u3180
  7060   001E48                     u3181:
  7061   001E48  EFDE  F00E         	goto	l3646
  7062   001E4C                     u3180:
  7063   001E4C                     
  7064                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  7065   001E4C  5056               	movf	kpDebounce@valorNovo^0,w,c
  7066   001E4E  1855               	xorwf	kpDebounce@valorAntigo^0,w,c
  7067   001E50  A4D8               	btfss	status,2,c
  7068   001E52  EF2D  F00F         	goto	u3191
  7069   001E56  EF2F  F00F         	goto	u3190
  7070   001E5A                     u3191:
  7071   001E5A  EF32  F00F         	goto	l3660
  7072   001E5E                     u3190:
  7073   001E5E                     
  7074                           ;keypad.c: 70:         tempo--;
  7075   001E5E  0657               	decf	kpDebounce@tempo^0,f,c
  7076                           
  7077                           ;keypad.c: 71:     } else {
  7078   001E60  EF36  F00F         	goto	l136
  7079   001E64                     l3660:
  7080                           
  7081                           ;keypad.c: 72:         tempo = 10;
  7082   001E64  0E0A               	movlw	10
  7083   001E66  6E57               	movwf	kpDebounce@tempo^0,c
  7084   001E68                     
  7085                           ;keypad.c: 73:         valorAntigo = valorNovo;
  7086   001E68  C056  F055         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  7087   001E6C                     l136:
  7088                           
  7089                           ;keypad.c: 75:     if (tempo == 0) {
  7090   001E6C  5057               	movf	kpDebounce@tempo^0,w,c
  7091   001E6E  A4D8               	btfss	status,2,c
  7092   001E70  EF3C  F00F         	goto	u3201
  7093   001E74  EF3E  F00F         	goto	u3200
  7094   001E78                     u3201:
  7095   001E78  EF40  F00F         	goto	l138
  7096   001E7C                     u3200:
  7097   001E7C                     
  7098                           ;keypad.c: 76:         valor = valorAntigo;
  7099   001E7C  C055  F058         	movff	kpDebounce@valorAntigo,_valor
  7100   001E80                     l138:
  7101   001E80  0012               	return		;funcret
  7102   001E82                     __end_of_kpDebounce:
  7103                           	callstack 0
  7104                           
  7105 ;; *************** function _dsInit *****************
  7106 ;; Defined at:
  7107 ;;		line 17 in file "ds1307.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;		None
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;		None
  7112 ;; Return value:  Size  Location     Type
  7113 ;;                  1    wreg      void 
  7114 ;; Registers used:
  7115 ;;		wreg, status,2, status,0, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7121 ;;      Params:         0       0       0       0       0       0       0       0       0
  7122 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7124 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7125 ;;Total ram usage:        0 bytes
  7126 ;; Hardware stack levels used: 1
  7127 ;; Hardware stack levels required when called: 2
  7128 ;; This function calls:
  7129 ;;		_i2cInit
  7130 ;; This function is called by:
  7131 ;;		_main
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text51
  7136   0028E4                     __ptext51:
  7137                           	callstack 0
  7138   0028E4                     _dsInit:
  7139                           	callstack 28
  7140   0028E4                     
  7141                           ;ds1307.c: 18:  i2cInit();
  7142   0028E4  ECA6  F013         	call	_i2cInit	;wreg free
  7143   0028E8  0012               	return		;funcret
  7144   0028EA                     __end_of_dsInit:
  7145                           	callstack 0
  7146                           
  7147 ;; *************** function _i2cInit *****************
  7148 ;; Defined at:
  7149 ;;		line 14 in file "soft_i2c.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;		None
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      void 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7163 ;;      Params:         0       0       0       0       0       0       0       0       0
  7164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7166 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7167 ;;Total ram usage:        0 bytes
  7168 ;; Hardware stack levels used: 1
  7169 ;; Hardware stack levels required when called: 1
  7170 ;; This function calls:
  7171 ;;		_pinMode
  7172 ;; This function is called by:
  7173 ;;		_dsInit
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           	psect	text52
  7178   00274C                     __ptext52:
  7179                           	callstack 0
  7180   00274C                     _i2cInit:
  7181                           	callstack 28
  7182   00274C                     
  7183                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  7184   00274C  0E00               	movlw	0
  7185   00274E  6E02               	movwf	(pinMode@pin+1)^0,c
  7186   002750  0E08               	movlw	8
  7187   002752  6E01               	movwf	pinMode@pin^0,c
  7188   002754  0E00               	movlw	0
  7189   002756  6E04               	movwf	(pinMode@type+1)^0,c
  7190   002758  0E01               	movlw	1
  7191   00275A  6E03               	movwf	pinMode@type^0,c
  7192   00275C  EC13  F00B         	call	_pinMode	;wreg free
  7193                           
  7194                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  7195   002760  0E00               	movlw	0
  7196   002762  6E02               	movwf	(pinMode@pin+1)^0,c
  7197   002764  0E09               	movlw	9
  7198   002766  6E01               	movwf	pinMode@pin^0,c
  7199   002768  0E00               	movlw	0
  7200   00276A  6E04               	movwf	(pinMode@type+1)^0,c
  7201   00276C  0E01               	movlw	1
  7202   00276E  6E03               	movwf	pinMode@type^0,c
  7203   002770  EC13  F00B         	call	_pinMode	;wreg free
  7204   002774  0012               	return		;funcret
  7205   002776                     __end_of_i2cInit:
  7206                           	callstack 0
  7207                           
  7208 ;; *************** function _pinMode *****************
  7209 ;; Defined at:
  7210 ;;		line 54 in file "io.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  pin             2    0[COMRAM] int 
  7213 ;;  type            2    2[COMRAM] int 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2, status,0
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7225 ;;      Params:         4       0       0       0       0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7227 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7228 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7229 ;;Total ram usage:        6 bytes
  7230 ;; Hardware stack levels used: 1
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_i2cInit
  7235 ;;		_read_SCL
  7236 ;;		_read_SDA
  7237 ;;		_clear_SCL
  7238 ;;		_clear_SDA
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text53
  7243   001626                     __ptext53:
  7244                           	callstack 0
  7245   001626                     _pinMode:
  7246                           	callstack 24
  7247   001626                     
  7248                           ;io.c: 56:     if(pin <8){
  7249   001626  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7250   001628  EF21  F00B         	goto	u2180
  7251   00162C  5002               	movf	(pinMode@pin+1)^0,w,c
  7252   00162E  E107               	bnz	u2181
  7253   001630  0E08               	movlw	8
  7254   001632  5C01               	subwf	pinMode@pin^0,w,c
  7255   001634  B0D8               	btfsc	status,0,c
  7256   001636  EF1F  F00B         	goto	u2181
  7257   00163A  EF21  F00B         	goto	u2180
  7258   00163E                     u2181:
  7259   00163E  EF4B  F00B         	goto	l2946
  7260   001642                     u2180:
  7261   001642                     
  7262                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  7263   001642  5003               	movf	pinMode@type^0,w,c
  7264   001644  1004               	iorwf	(pinMode@type+1)^0,w,c
  7265   001646  B4D8               	btfsc	status,2,c
  7266   001648  EF28  F00B         	goto	u2191
  7267   00164C  EF2A  F00B         	goto	u2190
  7268   001650                     u2191:
  7269   001650  EF3A  F00B         	goto	l2944
  7270   001654                     u2190:
  7271   001654  C001  F005         	movff	pinMode@pin,??_pinMode
  7272   001658  0E01               	movlw	1
  7273   00165A  6E06               	movwf	(??_pinMode+1)^0,c
  7274   00165C  2A05               	incf	??_pinMode^0,f,c
  7275   00165E  EF33  F00B         	goto	u2204
  7276   001662                     u2205:
  7277   001662  90D8               	bcf	status,0,c
  7278   001664  3606               	rlcf	(??_pinMode+1)^0,f,c
  7279   001666                     u2204:
  7280   001666  2E05               	decfsz	??_pinMode^0,f,c
  7281   001668  EF31  F00B         	goto	u2205
  7282   00166C  5006               	movf	(??_pinMode+1)^0,w,c
  7283   00166E  1292               	iorwf	146,f,c	;volatile
  7284   001670  EF39  F00C         	goto	l113
  7285   001674                     l2944:
  7286   001674  C001  F005         	movff	pinMode@pin,??_pinMode
  7287   001678  0E01               	movlw	1
  7288   00167A  6E06               	movwf	(??_pinMode+1)^0,c
  7289   00167C  2A05               	incf	??_pinMode^0,f,c
  7290   00167E  EF43  F00B         	goto	u2214
  7291   001682                     u2215:
  7292   001682  90D8               	bcf	status,0,c
  7293   001684  3606               	rlcf	(??_pinMode+1)^0,f,c
  7294   001686                     u2214:
  7295   001686  2E05               	decfsz	??_pinMode^0,f,c
  7296   001688  EF41  F00B         	goto	u2215
  7297   00168C  5006               	movf	(??_pinMode+1)^0,w,c
  7298   00168E  0AFF               	xorlw	255
  7299   001690  1692               	andwf	146,f,c	;volatile
  7300   001692  EF39  F00C         	goto	l113
  7301   001696                     l2946:
  7302   001696  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7303   001698  EF59  F00B         	goto	u2220
  7304   00169C  5002               	movf	(pinMode@pin+1)^0,w,c
  7305   00169E  E107               	bnz	u2221
  7306   0016A0  0E10               	movlw	16
  7307   0016A2  5C01               	subwf	pinMode@pin^0,w,c
  7308   0016A4  B0D8               	btfsc	status,0,c
  7309   0016A6  EF57  F00B         	goto	u2221
  7310   0016AA  EF59  F00B         	goto	u2220
  7311   0016AE                     u2221:
  7312   0016AE  EF87  F00B         	goto	l2954
  7313   0016B2                     u2220:
  7314   0016B2                     
  7315                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  7316   0016B2  5003               	movf	pinMode@type^0,w,c
  7317   0016B4  1004               	iorwf	(pinMode@type+1)^0,w,c
  7318   0016B6  B4D8               	btfsc	status,2,c
  7319   0016B8  EF60  F00B         	goto	u2231
  7320   0016BC  EF62  F00B         	goto	u2230
  7321   0016C0                     u2231:
  7322   0016C0  EF74  F00B         	goto	l2952
  7323   0016C4                     u2230:
  7324   0016C4  C001  F005         	movff	pinMode@pin,??_pinMode
  7325   0016C8  0EF8               	movlw	-8
  7326   0016CA  2605               	addwf	??_pinMode^0,f,c
  7327   0016CC  0E01               	movlw	1
  7328   0016CE  6E06               	movwf	(??_pinMode+1)^0,c
  7329   0016D0  2A05               	incf	??_pinMode^0,f,c
  7330   0016D2  EF6D  F00B         	goto	u2244
  7331   0016D6                     u2245:
  7332   0016D6  90D8               	bcf	status,0,c
  7333   0016D8  3606               	rlcf	(??_pinMode+1)^0,f,c
  7334   0016DA                     u2244:
  7335   0016DA  2E05               	decfsz	??_pinMode^0,f,c
  7336   0016DC  EF6B  F00B         	goto	u2245
  7337   0016E0  5006               	movf	(??_pinMode+1)^0,w,c
  7338   0016E2  1293               	iorwf	147,f,c	;volatile
  7339   0016E4  EF39  F00C         	goto	l113
  7340   0016E8                     l2952:
  7341   0016E8  C001  F005         	movff	pinMode@pin,??_pinMode
  7342   0016EC  0EF8               	movlw	-8
  7343   0016EE  2605               	addwf	??_pinMode^0,f,c
  7344   0016F0  0E01               	movlw	1
  7345   0016F2  6E06               	movwf	(??_pinMode+1)^0,c
  7346   0016F4  2A05               	incf	??_pinMode^0,f,c
  7347   0016F6  EF7F  F00B         	goto	u2254
  7348   0016FA                     u2255:
  7349   0016FA  90D8               	bcf	status,0,c
  7350   0016FC  3606               	rlcf	(??_pinMode+1)^0,f,c
  7351   0016FE                     u2254:
  7352   0016FE  2E05               	decfsz	??_pinMode^0,f,c
  7353   001700  EF7D  F00B         	goto	u2255
  7354   001704  5006               	movf	(??_pinMode+1)^0,w,c
  7355   001706  0AFF               	xorlw	255
  7356   001708  1693               	andwf	147,f,c	;volatile
  7357   00170A  EF39  F00C         	goto	l113
  7358   00170E                     l2954:
  7359   00170E  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7360   001710  EF95  F00B         	goto	u2260
  7361   001714  5002               	movf	(pinMode@pin+1)^0,w,c
  7362   001716  E107               	bnz	u2261
  7363   001718  0E18               	movlw	24
  7364   00171A  5C01               	subwf	pinMode@pin^0,w,c
  7365   00171C  B0D8               	btfsc	status,0,c
  7366   00171E  EF93  F00B         	goto	u2261
  7367   001722  EF95  F00B         	goto	u2260
  7368   001726                     u2261:
  7369   001726  EFC3  F00B         	goto	l2962
  7370   00172A                     u2260:
  7371   00172A                     
  7372                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  7373   00172A  5003               	movf	pinMode@type^0,w,c
  7374   00172C  1004               	iorwf	(pinMode@type+1)^0,w,c
  7375   00172E  B4D8               	btfsc	status,2,c
  7376   001730  EF9C  F00B         	goto	u2271
  7377   001734  EF9E  F00B         	goto	u2270
  7378   001738                     u2271:
  7379   001738  EFB0  F00B         	goto	l2960
  7380   00173C                     u2270:
  7381   00173C  C001  F005         	movff	pinMode@pin,??_pinMode
  7382   001740  0EF0               	movlw	-16
  7383   001742  2605               	addwf	??_pinMode^0,f,c
  7384   001744  0E01               	movlw	1
  7385   001746  6E06               	movwf	(??_pinMode+1)^0,c
  7386   001748  2A05               	incf	??_pinMode^0,f,c
  7387   00174A  EFA9  F00B         	goto	u2284
  7388   00174E                     u2285:
  7389   00174E  90D8               	bcf	status,0,c
  7390   001750  3606               	rlcf	(??_pinMode+1)^0,f,c
  7391   001752                     u2284:
  7392   001752  2E05               	decfsz	??_pinMode^0,f,c
  7393   001754  EFA7  F00B         	goto	u2285
  7394   001758  5006               	movf	(??_pinMode+1)^0,w,c
  7395   00175A  1294               	iorwf	148,f,c	;volatile
  7396   00175C  EF39  F00C         	goto	l113
  7397   001760                     l2960:
  7398   001760  C001  F005         	movff	pinMode@pin,??_pinMode
  7399   001764  0EF0               	movlw	-16
  7400   001766  2605               	addwf	??_pinMode^0,f,c
  7401   001768  0E01               	movlw	1
  7402   00176A  6E06               	movwf	(??_pinMode+1)^0,c
  7403   00176C  2A05               	incf	??_pinMode^0,f,c
  7404   00176E  EFBB  F00B         	goto	u2294
  7405   001772                     u2295:
  7406   001772  90D8               	bcf	status,0,c
  7407   001774  3606               	rlcf	(??_pinMode+1)^0,f,c
  7408   001776                     u2294:
  7409   001776  2E05               	decfsz	??_pinMode^0,f,c
  7410   001778  EFB9  F00B         	goto	u2295
  7411   00177C  5006               	movf	(??_pinMode+1)^0,w,c
  7412   00177E  0AFF               	xorlw	255
  7413   001780  1694               	andwf	148,f,c	;volatile
  7414   001782  EF39  F00C         	goto	l113
  7415   001786                     l2962:
  7416   001786  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7417   001788  EFD1  F00B         	goto	u2300
  7418   00178C  5002               	movf	(pinMode@pin+1)^0,w,c
  7419   00178E  E107               	bnz	u2301
  7420   001790  0E20               	movlw	32
  7421   001792  5C01               	subwf	pinMode@pin^0,w,c
  7422   001794  B0D8               	btfsc	status,0,c
  7423   001796  EFCF  F00B         	goto	u2301
  7424   00179A  EFD1  F00B         	goto	u2300
  7425   00179E                     u2301:
  7426   00179E  EFFF  F00B         	goto	l2970
  7427   0017A2                     u2300:
  7428   0017A2                     
  7429                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  7430   0017A2  5003               	movf	pinMode@type^0,w,c
  7431   0017A4  1004               	iorwf	(pinMode@type+1)^0,w,c
  7432   0017A6  B4D8               	btfsc	status,2,c
  7433   0017A8  EFD8  F00B         	goto	u2311
  7434   0017AC  EFDA  F00B         	goto	u2310
  7435   0017B0                     u2311:
  7436   0017B0  EFEC  F00B         	goto	l2968
  7437   0017B4                     u2310:
  7438   0017B4  C001  F005         	movff	pinMode@pin,??_pinMode
  7439   0017B8  0EE8               	movlw	-24
  7440   0017BA  2605               	addwf	??_pinMode^0,f,c
  7441   0017BC  0E01               	movlw	1
  7442   0017BE  6E06               	movwf	(??_pinMode+1)^0,c
  7443   0017C0  2A05               	incf	??_pinMode^0,f,c
  7444   0017C2  EFE5  F00B         	goto	u2324
  7445   0017C6                     u2325:
  7446   0017C6  90D8               	bcf	status,0,c
  7447   0017C8  3606               	rlcf	(??_pinMode+1)^0,f,c
  7448   0017CA                     u2324:
  7449   0017CA  2E05               	decfsz	??_pinMode^0,f,c
  7450   0017CC  EFE3  F00B         	goto	u2325
  7451   0017D0  5006               	movf	(??_pinMode+1)^0,w,c
  7452   0017D2  1295               	iorwf	149,f,c	;volatile
  7453   0017D4  EF39  F00C         	goto	l113
  7454   0017D8                     l2968:
  7455   0017D8  C001  F005         	movff	pinMode@pin,??_pinMode
  7456   0017DC  0EE8               	movlw	-24
  7457   0017DE  2605               	addwf	??_pinMode^0,f,c
  7458   0017E0  0E01               	movlw	1
  7459   0017E2  6E06               	movwf	(??_pinMode+1)^0,c
  7460   0017E4  2A05               	incf	??_pinMode^0,f,c
  7461   0017E6  EFF7  F00B         	goto	u2334
  7462   0017EA                     u2335:
  7463   0017EA  90D8               	bcf	status,0,c
  7464   0017EC  3606               	rlcf	(??_pinMode+1)^0,f,c
  7465   0017EE                     u2334:
  7466   0017EE  2E05               	decfsz	??_pinMode^0,f,c
  7467   0017F0  EFF5  F00B         	goto	u2335
  7468   0017F4  5006               	movf	(??_pinMode+1)^0,w,c
  7469   0017F6  0AFF               	xorlw	255
  7470   0017F8  1695               	andwf	149,f,c	;volatile
  7471   0017FA  EF39  F00C         	goto	l113
  7472   0017FE                     l2970:
  7473   0017FE  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7474   001800  EF0D  F00C         	goto	u2340
  7475   001804  5002               	movf	(pinMode@pin+1)^0,w,c
  7476   001806  E107               	bnz	u2341
  7477   001808  0E28               	movlw	40
  7478   00180A  5C01               	subwf	pinMode@pin^0,w,c
  7479   00180C  B0D8               	btfsc	status,0,c
  7480   00180E  EF0B  F00C         	goto	u2341
  7481   001812  EF0D  F00C         	goto	u2340
  7482   001816                     u2341:
  7483   001816  EF39  F00C         	goto	l113
  7484   00181A                     u2340:
  7485   00181A                     
  7486                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  7487   00181A  5003               	movf	pinMode@type^0,w,c
  7488   00181C  1004               	iorwf	(pinMode@type+1)^0,w,c
  7489   00181E  B4D8               	btfsc	status,2,c
  7490   001820  EF14  F00C         	goto	u2351
  7491   001824  EF16  F00C         	goto	u2350
  7492   001828                     u2351:
  7493   001828  EF28  F00C         	goto	l2976
  7494   00182C                     u2350:
  7495   00182C  C001  F005         	movff	pinMode@pin,??_pinMode
  7496   001830  0EE0               	movlw	-32
  7497   001832  2605               	addwf	??_pinMode^0,f,c
  7498   001834  0E01               	movlw	1
  7499   001836  6E06               	movwf	(??_pinMode+1)^0,c
  7500   001838  2A05               	incf	??_pinMode^0,f,c
  7501   00183A  EF21  F00C         	goto	u2364
  7502   00183E                     u2365:
  7503   00183E  90D8               	bcf	status,0,c
  7504   001840  3606               	rlcf	(??_pinMode+1)^0,f,c
  7505   001842                     u2364:
  7506   001842  2E05               	decfsz	??_pinMode^0,f,c
  7507   001844  EF1F  F00C         	goto	u2365
  7508   001848  5006               	movf	(??_pinMode+1)^0,w,c
  7509   00184A  1296               	iorwf	150,f,c	;volatile
  7510   00184C  EF39  F00C         	goto	l113
  7511   001850                     l2976:
  7512   001850  C001  F005         	movff	pinMode@pin,??_pinMode
  7513   001854  0EE0               	movlw	-32
  7514   001856  2605               	addwf	??_pinMode^0,f,c
  7515   001858  0E01               	movlw	1
  7516   00185A  6E06               	movwf	(??_pinMode+1)^0,c
  7517   00185C  2A05               	incf	??_pinMode^0,f,c
  7518   00185E  EF33  F00C         	goto	u2374
  7519   001862                     u2375:
  7520   001862  90D8               	bcf	status,0,c
  7521   001864  3606               	rlcf	(??_pinMode+1)^0,f,c
  7522   001866                     u2374:
  7523   001866  2E05               	decfsz	??_pinMode^0,f,c
  7524   001868  EF31  F00C         	goto	u2375
  7525   00186C  5006               	movf	(??_pinMode+1)^0,w,c
  7526   00186E  0AFF               	xorlw	255
  7527   001870  1696               	andwf	150,f,c	;volatile
  7528   001872                     l113:
  7529   001872  0012               	return		;funcret
  7530   001874                     __end_of_pinMode:
  7531                           	callstack 0
  7532                           
  7533 ;; *************** function _adcRead *****************
  7534 ;; Defined at:
  7535 ;;		line 36 in file "adc.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;		None
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  ADvalor         2    0[COMRAM] unsigned int 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  2    5[None  ] int 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2, status,0
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0
  7550 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7552 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7553 ;;Total ram usage:        2 bytes
  7554 ;; Hardware stack levels used: 1
  7555 ;; This function calls:
  7556 ;;		Nothing
  7557 ;; This function is called by:
  7558 ;;		_main
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text54
  7563   0027C4                     __ptext54:
  7564                           	callstack 0
  7565   0027C4                     _adcRead:
  7566                           	callstack 30
  7567   0027C4                     
  7568                           ;adc.c: 38:  unsigned int ADvalor;;adc.c: 39:  (*(volatile __near unsigned char*)0xFC2) 
      +                          |= 0b00000010;
  7569   0027C4  82C2               	bsf	194,1,c	;volatile
  7570   0027C6                     l6:
  7571   0027C6  B2C2               	btfsc	194,1,c	;volatile
  7572   0027C8  EFE8  F013         	goto	u1331
  7573   0027CC  EFEA  F013         	goto	u1330
  7574   0027D0                     u1331:
  7575   0027D0  EFE3  F013         	goto	l6
  7576   0027D4                     u1330:
  7577   0027D4                     
  7578                           ;adc.c: 43:  ADvalor = (*(volatile __near unsigned char*)0xFC4) ;
  7579   0027D4  CFC4 F001          	movff	4036,adcRead@ADvalor	;volatile
  7580   0027D8  6A02               	clrf	(adcRead@ADvalor+1)^0,c
  7581   0027DA                     
  7582                           ;adc.c: 44:  ADvalor <<= 8;
  7583   0027DA  5001               	movf	adcRead@ADvalor^0,w,c
  7584   0027DC  6E02               	movwf	(adcRead@ADvalor+1)^0,c
  7585   0027DE  6A01               	clrf	adcRead@ADvalor^0,c
  7586   0027E0                     
  7587                           ;adc.c: 45:  ADvalor += (*(volatile __near unsigned char*)0xFC3);
  7588   0027E0  50C3               	movf	195,w,c	;volatile
  7589   0027E2  2601               	addwf	adcRead@ADvalor^0,f,c
  7590   0027E4  0E00               	movlw	0
  7591   0027E6  2202               	addwfc	(adcRead@ADvalor+1)^0,f,c
  7592   0027E8  0012               	return		;funcret
  7593   0027EA                     __end_of_adcRead:
  7594                           	callstack 0
  7595                           
  7596 ;; *************** function _adcInit *****************
  7597 ;; Defined at:
  7598 ;;		line 27 in file "adc.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;		None
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;		None
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      void 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7612 ;;      Params:         0       0       0       0       0       0       0       0       0
  7613 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7615 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7616 ;;Total ram usage:        0 bytes
  7617 ;; Hardware stack levels used: 1
  7618 ;; This function calls:
  7619 ;;		Nothing
  7620 ;; This function is called by:
  7621 ;;		_main
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text55
  7626   00289E                     __ptext55:
  7627                           	callstack 0
  7628   00289E                     _adcInit:
  7629                           	callstack 30
  7630   00289E                     
  7631                           ;adc.c: 29:  (((*(volatile __near unsigned char*)0xF92)) |= (1<<0));
  7632   00289E  8092               	bsf	146,0,c	;volatile
  7633   0028A0                     
  7634                           ;adc.c: 31:  (*(volatile __near unsigned char*)0xFC2) = 0b00000101;
  7635   0028A0  0E05               	movlw	5
  7636   0028A2  6EC2               	movwf	194,c	;volatile
  7637   0028A4                     
  7638                           ;adc.c: 32:  (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  7639   0028A4  0E0E               	movlw	14
  7640   0028A6  6EC1               	movwf	193,c	;volatile
  7641   0028A8                     
  7642                           ;adc.c: 33:  (*(volatile __near unsigned char*)0xFC0) = 0b10101010;
  7643   0028A8  0EAA               	movlw	170
  7644   0028AA  6EC0               	movwf	192,c	;volatile
  7645   0028AC  0012               	return		;funcret
  7646   0028AE                     __end_of_adcInit:
  7647                           	callstack 0
  7648                           
  7649                           	psect	rparam
  7650   000000                     
  7651                           	psect	config
  7652                           
  7653                           ;Config register CONFIG1L @ 0x300000
  7654                           ;	unspecified, using default values
  7655                           ;	PLL Prescaler Selection bits
  7656                           ;	PLLDIV = 0x0, unprogrammed default
  7657                           ;	System Clock Postscaler Selection bits
  7658                           ;	CPUDIV = 0x0, unprogrammed default
  7659                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  7660                           ;	USBDIV = 0x0, unprogrammed default
  7661   300000                     	org	3145728
  7662   300000  00                 	db	0
  7663                           
  7664                           ;Config register CONFIG1H @ 0x300001
  7665                           ;	Oscillator Selection bits
  7666                           ;	FOSC = HS, HS oscillator (HS)
  7667                           ;	Fail-Safe Clock Monitor Enable bit
  7668                           ;	FCMEN = 0x0, unprogrammed default
  7669                           ;	Internal/External Oscillator Switchover bit
  7670                           ;	IESO = 0x0, unprogrammed default
  7671   300001                     	org	3145729
  7672   300001  0C                 	db	12
  7673                           
  7674                           ;Config register CONFIG2L @ 0x300002
  7675                           ;	unspecified, using default values
  7676                           ;	Power-up Timer Enable bit
  7677                           ;	PWRT = 0x1, unprogrammed default
  7678                           ;	Brown-out Reset Enable bits
  7679                           ;	BOR = 0x3, unprogrammed default
  7680                           ;	Brown-out Reset Voltage bits
  7681                           ;	BORV = 0x3, unprogrammed default
  7682                           ;	USB Voltage Regulator Enable bit
  7683                           ;	VREGEN = 0x0, unprogrammed default
  7684   300002                     	org	3145730
  7685   300002  1F                 	db	31
  7686                           
  7687                           ;Config register CONFIG2H @ 0x300003
  7688                           ;	Watchdog Timer Enable bit
  7689                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7690                           ;	Watchdog Timer Postscale Select bits
  7691                           ;	WDTPS = 0xF, unprogrammed default
  7692   300003                     	org	3145731
  7693   300003  1E                 	db	30
  7694                           
  7695                           ; Padding undefined space
  7696   300004                     	org	3145732
  7697   300004  FF                 	db	255
  7698                           
  7699                           ;Config register CONFIG3H @ 0x300005
  7700                           ;	CCP2 MUX bit
  7701                           ;	CCP2MX = 0x1, unprogrammed default
  7702                           ;	PORTB A/D Enable bit
  7703                           ;	PBADEN = 0x1, unprogrammed default
  7704                           ;	Low-Power Timer 1 Oscillator Enable bit
  7705                           ;	LPT1OSC = 0x0, unprogrammed default
  7706                           ;	MCLR Pin Enable bit
  7707                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7708   300005                     	org	3145733
  7709   300005  83                 	db	131
  7710                           
  7711                           ;Config register CONFIG4L @ 0x300006
  7712                           ;	Stack Full/Underflow Reset Enable bit
  7713                           ;	STVREN = 0x1, unprogrammed default
  7714                           ;	Single-Supply ICSP Enable bit
  7715                           ;	LVP = OFF, Single-Supply ICSP disabled
  7716                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  7717                           ;	ICPRT = 0x0, unprogrammed default
  7718                           ;	Extended Instruction Set Enable bit
  7719                           ;	XINST = 0x0, unprogrammed default
  7720                           ;	Background Debugger Enable bit
  7721                           ;	DEBUG = 0x1, unprogrammed default
  7722   300006                     	org	3145734
  7723   300006  81                 	db	129
  7724                           
  7725                           ; Padding undefined space
  7726   300007                     	org	3145735
  7727   300007  FF                 	db	255
  7728                           tosu	equ	0xFFF
  7729                           tosh	equ	0xFFE
  7730                           tosl	equ	0xFFD
  7731                           stkptr	equ	0xFFC
  7732                           pclatu	equ	0xFFB
  7733                           pclath	equ	0xFFA
  7734                           pcl	equ	0xFF9
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           indf0	equ	0xFEF
  7742                           postinc0	equ	0xFEE
  7743                           postdec0	equ	0xFED
  7744                           preinc0	equ	0xFEC
  7745                           plusw0	equ	0xFEB
  7746                           fsr0h	equ	0xFEA
  7747                           fsr0l	equ	0xFE9
  7748                           wreg	equ	0xFE8
  7749                           indf1	equ	0xFE7
  7750                           postinc1	equ	0xFE6
  7751                           postdec1	equ	0xFE5
  7752                           preinc1	equ	0xFE4
  7753                           plusw1	equ	0xFE3
  7754                           fsr1h	equ	0xFE2
  7755                           fsr1l	equ	0xFE1
  7756                           bsr	equ	0xFE0
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           postdec2	equ	0xFDD
  7760                           preinc2	equ	0xFDC
  7761                           plusw2	equ	0xFDB
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        19
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      95
    BANK0           160      0      23
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eventRead@prot	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 

    lcdString@str	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_11(CODE[12]), STR_12(CODE[12]), 
		 -> STR_13(CODE[4]), STR_14(CODE[12]), STR_15(CODE[4]), STR_16(CODE[12]), 
		 -> STR_17(CODE[17]), STR_18(CODE[17]), STR_19(CODE[12]), STR_2(CODE[16]), 
		 -> STR_3(CODE[16]), STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), 
		 -> STR_7(CODE[16]), STR_8(CODE[16]), STR_9(CODE[16]), 

    msgs	PTR unsigned char [2][6] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_10(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), 
		 -> STR_8(CODE[16]), STR_9(CODE[16]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 6
		 -> prot(BANK0[6]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_eventRead
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_bcd2dec
    _lcdData->_lcdCommand4bits
    _eventRead->_setLanguage
    _setLanguage->_dsWriteData
    _smInit->_varInit
    _varInit->_setAlarmLevel
    _setAlarmLevel->_dsWriteData
    _dsWriteData->_dec2bcd
    _dsReadData->_i2cReadByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _dec2bcd->_bcd2dec
    ___awmod->___awdiv
    _bcd2dec->_dsReadData
    ___wmul->___awdiv
    _setState->_lcdCommand
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  372260
                            _adcInit
                            _adcRead
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                              15    15      0  250277
                                             39 COMRAM    15    15      0
                             ___wmul
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                            _getProt
                           _getState
                        _outputPrint
                          _resetProt
                      _setAlarmLevel
                        _setLanguage
                           _setState
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          4     0      4   69067
                                             32 COMRAM     4     0      4
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            1     0      1    1917
                                              3 COMRAM     1     0      1
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                              10     7      3    9370
                                             22 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                             ___wmul
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        4     2      2     654
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            7     7      0   29068
                                             32 COMRAM     7     7      0
                        _getLanguage
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                        _setLanguage
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28697
                                             31 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0  118547
                          _eventInit
                           _setState
                            _varInit
 ---------------------------------------------------------------------------------
 (2) _varInit                                              8     8      0  117581
                                             34 COMRAM     8     8      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                      _setAlarmLevel
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        3     0      3   29957
                                             31 COMRAM     3     0      3
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28675
                                             28 COMRAM     3     1      2
                            _bcd2dec (ARG)
                            _dec2bcd (ARG)
                         _dsReadData (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   48459
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (2) _dec2bcd                                              6     4      2    4007
                                             22 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1512
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _bcd2dec                                              4     2      2    6411
                                             18 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3179
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1668
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0     966
                                              3 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (4) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (5) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     279
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _adcRead                                              2     2      0       5
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adcInit
   _adcRead
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
       _lcdCommand
     _varInit
       _bcd2dec
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _dsReadData (ARG)
           _i2cReadByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
                 _digitalWrite
                 _pinMode
               _read_SCL
                 _digitalRead
                 _pinMode
               _read_SDA
                 _digitalRead
                 _pinMode
             _i2c_stop
               _I2C_delay
               _clear_SDA
                 _digitalWrite
                 _pinMode
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
           _i2cWriteByte
             _i2c_read_bit
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_stop
             _i2c_write_bit
       _dec2bcd
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         _bcd2dec (ARG)
         _dsReadData (ARG)
       _dsReadData
       _dsWriteData
         _bcd2dec (ARG)
         _dec2bcd (ARG)
         _dsReadData (ARG)
         _i2cWriteByte (ARG)
       _setAlarmLevel
         _dsWriteData
         _getAlarmLevel (ARG)
   _smLoop
     ___wmul
     _bcd2dec
     _dec2bcd
     _dsReadData
     _dsWriteData
     _eventRead
       _getLanguage
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setLanguage
         _dsWriteData
       _setProt
     _getAlarmLevel
     _getLanguage
     _getProt
     _getState
     _outputPrint
       _bcd2dec
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         ___wmul
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _resetProt
     _setAlarmLevel
     _setLanguage
     _setState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      17       5       14.4%
BITBIGSFRhh         69      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      5F       1      100.0%
BITBIGSFRl          20      0       0      23        0.0%
BITBIGSFRhlh         8      0       0      21        0.0%
BITBIGSFRhll         4      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      76      24        0.0%
DATA                 0      0      76       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Jul 01 17:01:43 2024

     __end_of_setAlarmLevel 23C8                           l3 28AC                           l6 27C6  
                         l8 27D4                           l9 27E8                           _t 0037  
                        l22 2270                          l25 24DC                          l34 2642  
                        l28 28E8                          l37 2454                          l83 1D84  
                        l84 1D80                          l79 1624                          l88 1D80  
              lcdString@str 0004                ___awdiv@sign 0006                          _v0 0051  
                        _v1 0050                          _v2 004F                          _v3 004E  
                        _de 0054                          _ev 005E         ___wmul@multiplicand 000B  
             ??_i2cReadByte 0009       i2cWriteByte@send_stop 0008              i2cReadByte@bit 000B  
                       l113 1872                         l203 1F48                         l141 28C8  
                       l150 2870                         l118 28F0                         l136 1E6C  
                       l160 28E2                         l138 1E80                         l403 2328  
                       l180 240E                         l157 269E                         l173 21AC  
                       l502 289C                         l422 237C                         l350 26F6  
                       l342 2874                         l511 1C18                         l183 2826  
                       l416 22D0                         l353 2840                         l409 25E6  
                       l345 2886                         l362 2774                         l194 25B4  
                       l371 2514                         l188 2134                         l365 28FA  
                       l613 2808                         l374 274A                         l527 1C1A  
                       l368 254C                         l377 2720                         l721 1A66  
                       l394 2670                         l387 249A                         l724 28EC  
                       l572 13D6                         l741 23A4                         l742 23B6  
                       l670 1008                         l727 28BA                         l743 23C6  
                       l752 28F4                         l736 26BC                         l737 26C2  
                       l746 28F8                         l738 26CA                         l762 2614  
                       l756 279C                         l765 27C2                         l749 2858  
                       l996 200C                         _key 0041                ___awmod@sign 000E  
                       wreg 0FE8            i2c_write_bit@bit 0007               ?_i2cWriteByte 0008  
    i2cWriteByte@send_start 000A             i2cReadByte@nack 000A             i2cReadByte@byte 000D  
                      l1009 20BC                        l3000 2482                        l2050 2894  
                      l3010 2496                        l3002 2486                        l2300 28A0  
                      l3100 2148                        l3020 2664                        l3012 2644  
                      l3004 248A                        l2302 28A4                        l2310 27E0  
                      l3110 2166                        l3102 214E                        l2046 2888  
                      l3022 2668                        l3014 2648                        l3030 22EC  
                      l3006 248E                        l2304 28A8                        l3120 2190  
                      l3112 2174                        l3104 2150                        l2048 288C  
                      l3200 1F9C                        l3024 266C                        l3016 264C  
                      l3040 231C                        l3032 22F0                        l3008 2492  
                      l2306 27C4                        l3122 2192                        l3114 217A  
                      l3106 215E                        l3210 1FD6                        l3202 1FA4  
                      l3050 25BE                        l3018 2660                        l3042 2320  
                      l3034 22F4                        l3026 22D4                        l3130 2618  
                      l2308 27DA                        l3124 21A0                        l3116 217C  
                      l3108 2164                        l3220 1FFC                        l3212 1FDE  
                      l3204 1FAC                        l3052 25D2                        l3044 2324  
                      l3036 2308                        l3028 22E4                        l3140 2346  
                      l3132 232C                        l3300 1E82                        l3126 21A6  
                      l3118 218A                        l3222 2004                        l3214 1FE0  
                      l3206 1FBA                        l3230 2020                        l3054 25D8  
                      l3046 25B6                        l3038 2318                        l3150 237A  
                      l3142 234A                        l3062 2274                        l3302 1E90  
                      l3160 2676                        l3128 21A8                        l3216 1FE6  
                      l3208 1FC0                        l3240 2054                        l3232 2028  
                      l3056 25DC                        l3048 25BA                        l3144 2360  
                      l3080 22B8                        l3072 228C                        l3064 2284  
                      l3400 1AEC                        l3320 1F0E                        l3312 1EBC  
                      l3304 1E98                        l3170 268C                        l3154 2672  
                      l3218 1FEC                        l3250 2090                        l3242 205C  
                      l3234 202C                        l3226 200E                        l3058 25E4  
                      l3146 2366                        l3138 2338                        l3082 22BC  
                      l3074 22A2                        l3066 2288                        l3330 26CC  
                      l3410 1B16                        l3402 1AFA                        l3322 1F3E  
                      l3314 1ED0                        l3306 1E9E                        l3172 268E  
                      l2380 2828                        l3252 2096                        l3244 2064  
                      l3236 203A                        l3228 2012                        l3148 2376  
                      l3084 22CC                        l3076 22A6                        l3340 26F4  
                      l3332 26D0                        l3420 1B52                        l3412 1B26  
                      l3404 1B02                        l3316 1EEC                        l3308 1EAA  
                      l3500 11CE                        l3166 267A                        l3094 285E  
                      l2382 283C                        l3190 1F68                        l3182 1F4A  
                      l3246 2072                        l3254 209C                        l3238 2042  
                      l3262 2210                        l3078 22A8                        l3334 26DE  
                      l3326 2874                        l3350 2784                        l3430 1B8A  
                      l3422 1B5E                        l3414 1B2C                        l3406 1B0A  
                      l3174 280C                        l3318 1EF0                        l3510 1204  
                      l3502 11D4                        l3168 267C                        l3096 2860  
                      l3088 285A                        l2384 283E                        l3192 1F76  
                      l3184 1F4E                        l3176 279E                        l3256 20AC  
                      l3248 2088                        l3264 2268                        l3272 2410  
                      l3600 1A20                        l3344 28F2                        l3336 26E2  
                      l3328 2882                        l3360 2844                        l3352 2786  
                      l3432 1B94                        l3424 1B6A                        l3440 1BFA  
                      l3408 1B10                        l3520 1246                        l3512 1220  
                      l3504 11F0                        l2298 289E                        l3098 2138  
                      l3290 240A                        l3282 23CA                        l3194 1F7E  
                      l3186 1F5C                        l3178 27BA                        l3258 20B4  
                      l3274 244C                        l3370 238E                        l3602 1A44  
                      l3338 26F0                        l3362 284A                        l3354 2798  
                      l3442 1C00                        l3434 1B9C                        l3426 1B76  
                      l3418 1B46                        l3610 28EA                        l3530 128A  
                      l3522 125C                        l3514 1226                        l3506 11F6  
                      l3450 101E                        l3284 23E0                        l1860 28BC  
                      l3196 1F82                        l3188 1F64                        l3268 249C  
                      l2900 1C1C                        l3372 2392                        l3604 1A4C  
                      l3356 28F6                        l3348 2778                        l3444 1C10  
                      l3428 1B82                        l3380 1A70                        l3364 26A0  
                      l3292 2582                        l3532 1292                        l3524 1262  
                      l3540 12C2                        l3508 11FE                        l3516 122E  
                      l3460 106E                        l3452 1024                        l3620 25FC  
                      l3700 08F4                        l3630 1D96                        l3286 23F2  
                      l1862 28BE                        l3606 28B0                        l3198 1F8A  
                      l2910 1C7C                        l2902 1C38                        l3374 23A8  
                      l3278 28EE                        l3438 1BAC                        l3390 1AB8  
                      l3382 1A7C                        l3366 26B2                        l3294 2586  
                      l3550 130C                        l3542 12D6                        l3534 1298  
                      l3526 1268                        l3518 1240                        l3462 1074  
                      l3454 103A                        l3470 10D2                        l3622 260C  
                      l3614 25E8                        l3710 095E                        l3702 08FE  
                      l3376 274C                        l3624 28E4                        l3640 1DB8  
                      l3632 1D9A                        l3288 2402                        l1864 28C0  
                      l3608 28B4                        l3368 237E                        l3392 1AC0  
                      l3384 1A94                        l3296 2596                        l3560 134A  
                      l3552 1314                        l3544 12DC                        l3536 12B4  
                      l3528 1284                        l3480 1130                        l3472 10E6  
                      l3464 109C                        l3456 1040                        l3448 100A  
                      l3616 25F0                        l3800 0C60                        l3720 09A0  
                      l3712 0970                        l3704 090E                        l3650 1E1C  
                      l3634 1D9E                        l3626 1D86                        l1866 28C4  
                      l3570 1874                        l3394 1ACE                        l3386 1AA2  
                      l3378 1A68                        l3298 2598                        l3562 1372  
                      l3554 1328                        l3546 12F2                        l3538 12BA  
                      l3490 1192                        l3482 1136                        l3474 10EC  
                      l3466 10A2                        l3458 1046                        l3618 25FA  
                      l3802 0C66                        l3730 09EE                        l3722 09A6  
                      l3714 0976                        l3706 092E                        l2940 1642  
                      l3660 1E64                        l3652 1E3A                        l3636 1DA2  
                      l3628 1D92                        l2860 13D8                        l2932 1D38  
                      l2924 1CF0                        l2916 1CA8                        l2908 1C60  
                      l3580 18F6                        l3572 1880                        l3396 1AD6  
                      l3388 1AAA                        l3564 13A0                        l3548 12F8  
                      l3556 1330                        l3484 113C                        l3476 1102  
                      l3492 119A                        l3468 10CA                        l3812 0C9A  
                      l3804 0C78                        l3740 0A3E                        l3732 0A0E  
                      l3724 09AE                        l3716 0988                        l3708 093E  
                      l2950 16C4                        l2942 1654                        l3662 1E68  
                      l3654 1E3C                        l3646 1DBC                        l3638 1DA6  
                      l2870 1464                        l2862 13F4                        l2934 1D54  
                      l2926 1D0C                        l2918 1CC4                        l3590 1986  
                      l3582 1916                        l3574 1890                        l3398 1AE4  
                      l3566 13A6                        l3558 1344                        l3494 11AC  
                      l3486 1164                        l3478 1108                        l3830 0D50  
                      l3814 0CAC                        l3806 0C7E                        l3750 0A76  
                      l3742 0A50                        l3734 0A20                        l3726 09BE  
                      l3718 098E                        l2960 1760                        l2952 16E8  
                      l2944 1674                        l3664 1E7C                        l3656 1E4C  
                      l3648 1DFC                        l3680 20E4                        l2880 14F6  
                      l2872 147E                        l2864 1406                        l3592 19B0  
                      l3584 1940                        l3576 18A0                        l3568 13CE  
                      l3496 11B2                        l3488 116A                        l3840 0E3A  
                      l3832 0DAC                        l3816 0CB2                        l3808 0C90  
                      l3760 0AAA                        l3752 0A88                        l3744 0A56  
                      l3736 0A26                        l3728 09DE                        l3824 0CFC  
                      l2970 17FE                        l2962 1786                        l2954 170E  
                      l2946 1696                        l2938 1626                        l3658 1E5E  
                      l3674 20CE                        l3666 20BE                        l2890 158E  
                      l2882 1516                        l2874 149E                        l2866 1426  
                      l3594 19D4                        l3586 1964                        l3578 18C4  
                      l3682 27EA                        l3498 11C8                        l3850 0ECE  
                      l3842 0E5C                        l3834 0DCE                        l3818 0CC2  
                      l3770 0AF6                        l3762 0ABA                        l3754 0A8E  
                      l3746 0A5E                        l3738 0A38                        l3826 0D34  
                      l3690 08A0                        l2972 181A                        l2964 17A2  
                      l2956 172A                        l2948 16B2                        l3676 20D2  
                      l3668 20CA                        l2892 15B0                        l2884 1538  
                      l2876 14C0                        l2868 1448                        l3596 19DC  
                      l3588 196C                        l3684 27EE                        l3860 0F76  
                      l3852 0EF0                        l3836 0DDE                        l3828 0D46  
                      l3780 0B8A                        l3772 0B2C                        l3764 0AC6  
                      l3756 0AA0                        l3748 0A70                        l3692 08A6  
                      l2974 182C                        l2966 17B4                        l2958 173C  
                      l2990 28DE                        l3678 20D4                        l2894 15CC  
                      l2886 1554                        l2878 14DC                        l2982 24DE  
                      l3598 19F6                        l3686 27F4                        l3862 0F92  
                      l3854 0F0C                        l3846 0E70                        l3838 0E0C  
                      l3870 0FE4                        l3790 0BC2                        l3782 0B9C  
                      l3774 0B3C                        l3766 0AD6                        l3758 0AA6  
                      l3694 08B8                        l2976 1850                        l2968 17D8  
                      l2896 15E6                        l2888 156E                        l2992 2456  
                      l3688 27F8                        l3872 0FF0                        l3856 0F26  
                      l3848 0EA0                        l3792 0BD2                        l3784 0BA2  
                      l3776 0B72                        l3768 0AE6                        l3696 08C8  
                      l3880 255A                        l2898 1606                        l2986 2722  
                      l2978 2516                        l2994 2466                        l3858 0F54  
                      l3866 0FB0                        l3794 0C08                        l3786 0BB4  
                      l3778 0B84                        l3698 08D8                        l3890 256E  
                      l3882 255E                        l2988 26F8                        l2996 246A  
                      l3868 0FE0                        l3796 0C18                        l3788 0BBA  
                      l3892 2572                        l3884 2562                        l2998 246E  
                      l3798 0C4E                        l3894 2576                        l3886 2566  
                      l3878 254E                        l3888 256A                        STR_1 0873  
                      STR_2 0843                        STR_3 0873                        STR_4 0843  
                      STR_5 0853                        STR_6 0833                        STR_7 0853  
                      STR_8 0833                        STR_9 0863                        u2000 1554  
                      u2001 1550                        u2010 156E                        u2011 156A  
                      u2100 1C7C                        u2101 1C78                        u2040 15CC  
                      u2024 1580                        u2120 1CC4                        u3000 1240  
                      u2041 15C8                        u2025 157C                        u2121 1CC0  
                      u3001 123C                        u1330 27D4                        u2050 15E6  
                      u2034 15A0                        u2114 1C92                        u3010 12D6  
                      u1331 27D0                        u2051 15E2                        u2035 159C  
                      u2115 1C8E                        u3011 12D2                        u2300 17A2  
                      u2220 16B2                        u2204 1666                        u2140 1D0C  
                      u3100 1A20                        u3020 130C                        u2301 179E  
                      u2221 16AE                        u2205 1662                        u2141 1D08  
                      u3101 1A1C                        u3021 1308                        _LATA 0F89  
                      u2310 17B4                        u2230 16C4                        u2214 1686  
                      u2134 1CDA                        u3030 1328                        u3110 260C  
                      u2311 17B0                        u2231 16C0                        u2215 1682  
                      u2135 1CD6                        u3031 1324                        u3111 2608  
                      u3200 1E7C                        u2064 15F8                        u2160 1D54  
                      u2080 1C38                        u2400 2512                        u3040 1344  
                      u3201 1E78                        u3121 1D8C                        u2065 15F4  
                      u2161 1D50                        u2081 1C34                        u2401 250C  
                      u3041 1340                        u3210 20E4                        u2074 1618  
                      u2154 1D22                        u2410 2514                        u3050 18C0  
                      u3131 1DB0                        u3211 20E0                        u2075 1614  
                      u2155 1D1E                        u3051 18BA                        u2340 181A  
                      u2324 17CA                        u2260 172A                        u2244 16DA  
                      u2180 1642                        u2420 2466                        u2500 229C  
                      u3060 18C2                        u3300 09EE                        u3220 08B8  
                      u2341 1816                        u2325 17C6                        u2261 1726  
                      u2245 16D6                        u2181 163E                        u2421 2462  
                      u2501 2296                        u3301 09EA                        u3221 08B4  
                      u2350 182C                        u2334 17EE                        u2270 173C  
                      u2254 16FE                        u2190 1654                        u3150 1DFC  
                      u2174 1D6A                        u2094 1C4A                        u2430 2482  
                      u2510 229E                        u3070 18F6                        u3310 0A20  
                      u3230 08F4                        u2351 1828                        u2335 17EA  
                      u2271 1738                        u2255 16FA                        u2191 1650  
                      u3151 1DF8                        u2175 1D66                        u2095 1C46  
                      u2431 247E                        u3071 18F2                        u3311 0A1C  
                      u3231 08F0                        u3144 1DE2                        u2440 2660  
                      u2600 2360                        u2520 22B8                        u3080 1940  
                      u3400 0B3C                        u3320 0A38                        u3240 090E  
                      u3145 1DDE                        u2441 265C                        u2601 235C  
                      u2521 22B4                        u3081 193C                        u3401 0B38  
                      u3321 0A34                        u3241 090A                        u2450 22E4  
                      u2610 2376                        u2530 22CC                        u3090 19B0  
                      u3410 0B84                        u3330 0A50                        u3250 093E  
                      u2451 22E0                        u2611 2372                        u2531 22C8  
                      u3091 19AC                        u3411 0B80                        u3331 0A4C  
                      u3251 093A                        u2364 1842                        u2284 1752  
                      u3180 1E4C                        u3164 1E0E                        u2620 268C  
                      u2540 2870                        u2700 2020                        u2380 254A  
                      u2460 2308                        u3500 0CC2                        u3420 0B9C  
                      u3340 0A70                        u3260 0970                        u2365 183E  
                      u2285 174E                        u3181 1E48                        u3165 1E0A  
                      u2621 2688                        u2541 286C                        u2701 201C  
                      u2381 2544                        u2461 2304                        u3501 0CBE  
                      u3421 0B98                        u3341 0A6C                        u3261 096C  
                      u2374 1866                        u2294 1776                        u3190 1E5E  
                      u3174 1E2E                        u2630 269E                        u2550 2148  
                      u2710 203A                        u2390 254C                        u2470 2318  
                      u3510 0D46                        u3430 0BB4                        u3350 0A88  
                      u3270 0988                        u2375 1862                        u2295 1772  
                      u3191 1E5A                        u3175 1E2A                        u2631 269A  
                      u2551 2144                        u2711 2036                        u2471 2314  
                      u3511 0D42                        u3431 0BB0                        u3351 0A84  
                      u3271 0984                        u2560 215E                        u2640 1F5C  
                      u2720 2054                        u1920 1464                        u1904 1418  
                      u2480 25D2                        u2800 1EB8                        u3520 0F0C  
                      u3440 0BD2                        u3360 0AA0                        u3280 09A0  
                      u2561 215A                        u2641 1F58                        u2721 2050  
                      u1921 1460                        u1905 1414                        u2481 25CE  
                      u2801 1EB4                        u3521 0F08                        u3441 0BCE  
                      u3361 0A9C                        u3281 099C                        u2570 2174  
                      u2650 1F76                        u2730 2072                        u1930 147E  
                      u1914 1438                        u2490 2284                        u2810 1F0E  
                      u3530 0F92                        u3450 0C18                        u3370 0ABA  
                      u3290 09BE                        u2571 2170                        u2651 1F72  
                      u2731 206E                        u1931 147A                        u1915 1434  
                      u2491 2280                        u2811 1F0A                        u3531 0F8E  
                      u3451 0C14                        u3371 0AB6                        u3291 09BA  
                      u2580 218A                        u2660 1F9C                        u2740 2088  
                      u2820 2882                        u2900 1AB8                        u3460 0C60  
                      u3380 0AD6                        u2581 2186                        u2661 1F98  
                      u2741 2084                        u2821 287E                        u2901 1AB4  
                      u3461 0C5C                        u3381 0AD2                        u2590 21A0  
                      u2670 1FBA                        u2750 20AC                        u2830 26DE  
                      u2910 1ACE                        u3470 0C78                        u3390 0AF6  
                      u2591 219C                        u2671 1FB6                        u2751 20A8  
                      u2831 26DA                        u2911 1ACA                        u3471 0C74  
                      u3391 0AF2                        u2760 23F2                        u2680 1FD6  
                      u1960 14DC                        u1944 1490                        u1880 13F4  
                      u2840 26F0                        u2920 1AE4                        u3480 0C90  
                      u2761 23EE                        u2681 1FD2                        u1961 14D8  
                      u1945 148C                        u1881 13F0                        u2841 26EC  
                      u2921 1AE0                        u3481 0C8C                        u2770 2402  
                      u2690 1FFC                        u1970 14F6                        u1954 14B0  
                      u1890 1406                        u2850 2798                        u2930 1AFA  
                      u3490 0CAC                        u2771 23FE                        u2691 1FF8  
                      u1971 14F2                        u1955 14AC                        u1891 1402  
                      u2851 2794                        u2931 1AF6                        u3491 0CA8  
                      u2940 1B26                        u2860 26B2                        u2780 25B4  
                      u2941 1B22                        u2861 26AE                        u2781 25B0  
                      u2870 238E                        u2950 1B42                        u2790 1E90  
                      u2871 238A                        u2951 1B3E                        u2791 1E8C  
                      u1984 1508                        u2960 1C10                        u2880 1A94  
                      u1985 1504                        u2961 1C0C                        u2881 1A90  
                      u1994 1528                        u2890 1AA2                        u2970 101E  
                      u1995 1524                        u2891 1A9E                        u2971 101A  
                      u2980 10E6                        u2981 10E2                        u2990 11AC  
                      u2991 11A8                 _outputPrint 100A                        _main 254E  
                      _msgs 0060                        _time 003B                        _prot 0071  
                      fsr2h 0FDA                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9               ?_i2c_read_bit 0001                        prodh 0FF4  
                      prodl 0FF3                        start 0000                ___param_bank 0000  
           __end_of_i2cInit 2776              _alarmLevelHigh 0049             __end_of_bcd2dec 24DE  
                     ?_main 0001             __end_of_dec2bcd 2272             __end_of_adcInit 28AE  
           __end_of_adcRead 27EA             __end_of___awdiv 200E            ?_lcdCommand4bits 0001  
                     STR_10 0883                       STR_11 0893                       STR_12 0893  
                     STR_13 089B                       STR_14 0893                       STR_15 089B  
                     STR_16 0893                       STR_17 0822                       STR_18 0811  
                     STR_19 0893             __end_of___awmod 20BE             ___awdiv@divisor 0003  
           ___awdiv@counter 0005                       _PORTA 0F80                       _PORTB 0F81  
                     _PORTC 0F82                       _PORTD 0F83                       _PORTE 0F84  
                     _TRISA 0F92                       _TRISB 0F93                       _TRISC 0F94  
                     _TRISD 0F95                       _TRISE 0F96             __end_of_lcdData 2828  
           __end_of_lcdInit 2136              ??_i2cWriteByte 000A             __end_of_getProt 28F6  
       __end_of_i2cReadByte 237E          outputPrint@numTela 0021                       _index 0047  
            setProt@newChar 0001             __end_of_pinMode 1874                       _valor 0058  
                     _state 004B             __end_of_varInit 1A68                dec2bcd@value 0017  
           __end_of_setProt 279E                       tablat 0FF5           __end_of_I2C_delay 28FC  
             _i2c_write_bit 22D2                       plusw1 0FE3                       plusw2 0FDB  
                     status 0FD8              ??_i2c_read_bit 0007            __end_of_Delay2ms 26A0  
      __end_of_digitalWrite 1626             __initialization 21AE                __end_of_main 2582  
           i2cWriteByte@bit 000B            __end_of_i2c_stop 2672                ?_setLanguage 0001  
                    ??_main 0037               __activetblptr 0002                 eventRead@ev 0023  
          ___awdiv@dividend 0001              ?_i2c_write_bit 0001              getAlarmLevel@l 0003  
                 ??_i2cInit 0007       __end_of_getAlarmLevel 26CC          dsWriteData@address 001D  
          __end_of_getState 28EE                   ??_bcd2dec 0015                      _dTimer 003F  
                 ??_dec2bcd 0019                      ___wmul 279E                   ??_adcInit 0001  
                 ??_adcRead 0001                   ??___awdiv 0005                   ??___awmod 000D  
                    _dsInit 28E4                      _lcdInt 1E82                      _kpInit 28BC  
                    _kpRead 28EE            __end_of_read_SDA 2516            __end_of_read_SCL 254E  
                    _ev_ant 0045                      _smInit 27EA                      clear_0 21F4  
                    clear_1 2200                      _smLoop 08A0            ___awdiv@quotient 0007  
           ___awmod@divisor 000B                   ??_lcdData 0003                      isa$std 0001  
               _i2cReadByte 232A                   ??_lcdInit 0004             ___awmod@counter 000D  
                 ??_getProt 0003            __end_of_setState 28BC                __pdataCOMRAM 0059  
                 ??_pinMode 0005                __mediumconst 0000                   ??_varInit 0023  
                 ??_setProt 0001                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8           __end_of_Delay40us 2872                  __accesstop 0060  
   __end_of__initialization 2206               ___rparam_used 0001                ?_pulseEnable 0001  
               pinMode@type 0003        __end_of_i2cWriteByte 22D2              __pcstackCOMRAM 0001  
              __pidataBANK0 28CA            i2cWriteByte@byte 0009                 smLoop@h_500 0031  
         __end_of_i2c_start 249C        __end_of_i2c_read_bit 25E8                   ?_Delay2ms 0001  
           ??_i2c_write_bit 0007                  __pbssBANK0 006C                ?_outputPrint 0021  
                 ?_i2c_stop 0001                  _dsReadData 2410            dsReadData@result 0011  
                _lcdCommand 23C8                     ?___wmul 0009                     ?_dsInit 0001  
                   ?_lcdInt 0017                     ?_kpInit 0001                     ?_kpRead 0001  
              eventRead@key 0026                     ?_smInit 0001                     ?_smLoop 0001  
                _kpDebounce 1D86                  ??_Delay2ms 0001        i2cReadByte@send_stop 0008  
           getAlarmLevel@lh 0001                _digitalWrite 13D8                   ?_getState 0001  
         __end_of_clear_SDA 2722           __end_of_clear_SCL 274C                   ?_read_SDA 0001  
                 ?_read_SCL 0001                  ??_i2c_stop 0007                     _i2cInit 274C  
                 _I2C_delay 28FA                     __Hparam 0000                   ?_setState 0001  
                   __Lparam 0000           __end_of_lcdString 25B6             kpDebounce@tempo 0057  
                   _bcd2dec 249C                     _dec2bcd 2210                  _estado_ant 004C  
                   _adcInit 289E                     _adcRead 27C4                     ___awdiv 1F4A  
                   ___awmod 200E                __psmallconst 0800                     __pcinit 21AE  
            serialRead@resp 0001                     _lcdData 280A                     __ramtop 0800  
                   _lcdInit 20BE                     __ptext0 254E                     __ptext1 08A0  
                   __ptext2 25E8                     __ptext3 100A                     __ptext4 2582  
                   __ptext5 1E82                     __ptext6 280A                     __ptext7 26A0  
                   __ptext8 28EA                     __ptext9 1A68                     _getProt 28F2  
         __end_of_eventInit 289E           __end_of_eventRead 1C1C                     _display 0052  
                   _key_ant 0043                     _pinMode 1626            ___awmod@dividend 0009  
               serialSend@c 0001                     _varInit 1874                     _setProt 2776  
                   lcdInt@i 001F                     lcdInt@j 001B                  ??_getState 0001  
                 Delay2ms@j 0001                   Delay2ms@k 0002                     _started 0053  
       kpDebounce@valorNovo 0056        end_of_initialization 2206                  ??_read_SDA 0007  
                ??_read_SCL 0007           __end_of_resetProt 2616               __Lmediumconst 0000  
               ?_dsReadData 000E              digitalRead@pin 0001                     smLoop@h 002F  
                   smLoop@l 002D                     smLoop@m 0033                  ?_I2C_delay 0001  
                ??_setState 0004                  _serialInit 2828                  _serialRead 26CC  
                _serialSend 2872                     postdec1 0FE5                 ?_lcdCommand 0001  
                   postinc0 0FEE                     postinc2 0FDE               _setAlarmLevel 237E  
             ??_digitalRead 0003               ??_getLanguage 0001                 ?_kpDebounce 0001  
              ?_i2cReadByte 0008             i2c_read_bit@bit 0007              _valor@ssd$F320 0801  
                _prot_ready 004D                _i2cWriteByte 2272               ??_dsWriteData 001F  
                 _Delay40us 285A                _i2c_read_bit 25B6              ?_setAlarmLevel 0020  
             _alarmLevelLow 0048           outputPrint@idioma 0023              adcRead@ADvalor 0001  
            __end_of___wmul 27C4              __end_of_dsInit 28EA               __pidataCOMRAM 28D6  
            __end_of_lcdInt 1F4A              __end_of_kpInit 28CA              __end_of_kpRead 28F2  
    __end_of_valor@ssd$F320 0811              __end_of_smInit 280A              __end_of_smLoop 100A  
       start_initialization 21AE         __end_of_digitalRead 1D86         __end_of_getLanguage 28FA  
                 _i2c_start 2456                  ?_Delay40us 0001                smLoop@evento 0036  
         ??_lcdCommand4bits 0002                 ??_I2C_delay 0001         __end_of_dsWriteData 2644  
               ?_serialInit 0001                 ?_serialRead 0001                 ?_serialSend 0001  
                  ??___wmul 000D                    ??_dsInit 0007                    ??_lcdInt 001A  
                  ??_kpInit 0001                    ??_kpRead 0001                 __pdataBANK0 0060  
                  ??_smInit 002B                    ??_smLoop 0028           dsReadData@address 000E  
                 _dTimerMax 003D                 __pbssCOMRAM 0037                  pinMode@pin 0001  
                ?_i2c_start 0001            setState@newState 0004       __end_of_i2c_write_bit 232A  
                smLoop@prot 0035                    ?_i2cInit 0001               _getAlarmLevel 26A0  
           ??_setAlarmLevel 0023                   _clear_SDA 26F8                   _clear_SCL 2722  
                  ?_bcd2dec 0013                    ?_dec2bcd 0017                    ?_adcInit 0001  
                  ?_adcRead 0001                    ?___awdiv 0001                    ?___awmod 0009  
                 _lcdString 2582                 _digitalRead 1C1C                 _getLanguage 28F6  
                  ?_lcdData 0001               ??_setLanguage 0020                    ?_lcdInit 0001  
                  ?_getProt 0001               lcdCommand@cmd 0003               eventRead@data 0025  
               __smallconst 0800               eventRead@prot 0022                    ?_pinMode 0001  
                  ?_varInit 0001                    ?_setProt 0001              kpDebounce@bits 0004  
                 _eventInit 2888                   _eventRead 1A68                  resetProt@i 0001  
               _dsWriteData 2616  setAlarmLevel@newAlarmLevel 0020                 ??_Delay40us 0001  
            ___wmul@product 000D                ??_dsReadData 0010              ?_getAlarmLevel 0001  
             lcdInt@divisor 001D                  ?_clear_SDA 0001                  ?_clear_SCL 0001  
                 _resetProt 25E8                   lcdInt@val 0017                ??_lcdCommand 0003  
                ?_lcdString 0004                ??_kpDebounce 0001           ___wmul@multiplier 0009  
     kpDebounce@valorAntigo 0055                    _Delay2ms 2672          __end_of_dsReadData 2456  
                ?_eventInit 0001                  ?_eventRead 0001                 ??_i2c_start 0007  
       __end_of_setLanguage 285A                   copy_data0 21C2                   copy_data1 21E2  
        __end_of_lcdCommand 2410                lcdData@valor 0003                    _i2c_stop 2644  
        __end_of_kpDebounce 1E82                    __Hrparam 0000                  ?_resetProt 0001  
             ??_pulseEnable 0001                    __Lrparam 0000            dsWriteData@value 001F  
          kpDebounce@portes 0009             _lcdCommand4bits 2136                    __ptext10 2776  
                  __ptext11 2842                    __ptext20 2616                    __ptext12 2872  
                  __ptext21 2410                    __ptext13 26CC                    __ptext30 2516  
                  __ptext22 2272                    __ptext14 28EE                    __ptext31 1C1C  
                  __ptext23 2456                    __ptext15 28F2                    __ptext40 28AE  
                  __ptext32 2722                    __ptext24 232A                    __ptext16 28F6  
                  __ptext41 2888                    __ptext33 13D8                    __ptext25 22D2  
                  __ptext17 27EA                    __ptext50 1D86                    __ptext42 28BC  
                  __ptext34 28FA                    __ptext26 2644                    __ptext18 1874  
                  __ptext51 28E4                    __ptext43 2828                    __ptext35 2210  
                  __ptext27 26F8                    __ptext19 237E                    __ptext52 274C  
                  __ptext44 20BE                    __ptext36 200E                    __ptext28 25B6  
                  __ptext53 1626                    __ptext45 23C8                    __ptext37 249C  
                  __ptext29 24DE                    __ptext54 27C4                    __ptext46 2136  
                  __ptext38 279E                    __ptext55 289E                    __ptext47 28DE  
                  __ptext39 1F4A                    __ptext48 285A                    __ptext49 2672  
                  _getState 28EA                 _smLoop$1429 002B               kpDebounce@F13 006C  
             kpDebounce@F15 0059               ??_outputPrint 0025                    _language 004A  
           ??_getAlarmLevel 0003                    _read_SDA 24DE                    _read_SCL 2516  
              lcdInt@digNum 0019                 ??_clear_SDA 0007                 ??_clear_SCL 0007  
              ??_serialInit 0001                ??_serialRead 0001                ??_serialSend 0001  
                  _setState 28AE                  Delay40us@j 0001             setAlarmLevel@lh 0022  
                  lcdInit@i 0004                    isa$xinst 0000                 ??_lcdString 0005  
       __end_of_pulseEnable 28E4                 _setLanguage 2842      setLanguage@newLanguage 0020  
               _varInit$522 0025                 _varInit$523 0027                 _varInit$524 0029  
               ??_eventInit 0001                 ??_eventRead 0021               ?_digitalWrite 0001  
        __end_of_serialInit 2842          __end_of_serialRead 26F8          __end_of_serialSend 2888  
         digitalWrite@value 0003                 ??_resetProt 0001         __end_of_outputPrint 13D8  
              bcd2dec@value 0013                ?_digitalRead 0001                ?_getLanguage 0001  
   __end_of_lcdCommand4bits 21AE                 kpDebounce@j 000E              ??_digitalWrite 0005  
           digitalWrite@pin 0001                ?_dsWriteData 001D         lcdCommand4bits@data 0001  
        lcdCommand4bits@cmd 0002                 _pulseEnable 28DE  
