

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jun 11 17:23:37 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Generated 17/10/2023 GMT
    69                           ; 
    70                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution. Publication is not required when
    84                           ;        this file is used in an embedded application.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4550 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102   000000                     
   103                           	psect	idataCOMRAM
   104   001E46                     __pidataCOMRAM:
   105                           	callstack 0
   106                           
   107                           ;initializer for _msgs
   108   001E46  73                 	db	low STR_1
   109   001E47  43                 	db	low STR_2
   110   001E48  53                 	db	low STR_3
   111   001E49  33                 	db	low STR_4
   112   001E4A  63                 	db	low STR_5
   113   001E4B  83                 	db	low STR_6
   114   001E4C  00                 	db	0
   115   001E4D  00                 	db	0
   116                           
   117                           ;initializer for kpDebounce@F15
   118   001E4E  02                 	db	2
   119   001E4F  03                 	db	3
   120   001E50  05                 	db	5
   121   001E51  04                 	db	4
   122   001E52  01                 	db	1
   123                           
   124                           ;initializer for _ev
   125   001E53  0062               	dw	98
   126                           
   127                           	psect	smallconst
   128   000800                     __psmallconst:
   129                           	callstack 0
   130   000800  00                 	db	0
   131   000801                     _valor@ssd$F315:
   132                           	callstack 0
   133   000801  3F                 	db	63
   134   000802  06                 	db	6
   135   000803  5B                 	db	91
   136   000804  4F                 	db	79
   137   000805  66                 	db	102
   138   000806  6D                 	db	109
   139   000807  7D                 	db	125
   140   000808  07                 	db	7
   141   000809  7F                 	db	127
   142   00080A  6F                 	db	111
   143   00080B  77                 	db	119
   144   00080C  7C                 	db	124
   145   00080D  39                 	db	57
   146   00080E  5E                 	db	94
   147   00080F  79                 	db	121
   148   000810  71                 	db	113
   149   000811                     __end_of_valor@ssd$F315:
   150                           	callstack 0
   151   000000                     _PORTA	set	3968
   152   000000                     _LATA	set	3977
   153   000000                     _TRISA	set	3986
   154   000000                     _PORTE	set	3972
   155   000000                     _PORTD	set	3971
   156   000000                     _PORTC	set	3970
   157   000000                     _PORTB	set	3969
   158   000000                     _TRISE	set	3990
   159   000000                     _TRISD	set	3989
   160   000000                     _TRISC	set	3988
   161   000000                     _TRISB	set	3987
   162   000811                     STR_10:
   163   000811  45                 	db	69	;'E'
   164   000812  6E                 	db	110	;'n'
   165   000813  67                 	db	103	;'g'
   166   000814  6C                 	db	108	;'l'
   167   000815  69                 	db	105	;'i'
   168   000816  73                 	db	115	;'s'
   169   000817  68                 	db	104	;'h'
   170   000818  20                 	db	32
   171   000819  20                 	db	32
   172   00081A  20                 	db	32
   173   00081B  20                 	db	32
   174   00081C  20                 	db	32
   175   00081D  20                 	db	32
   176   00081E  20                 	db	32
   177   00081F  20                 	db	32
   178   000820  20                 	db	32
   179   000821  00                 	db	0
   180   000822                     STR_9:
   181   000822  50                 	db	80	;'P'
   182   000823  6F                 	db	111	;'o'
   183   000824  72                 	db	114	;'r'
   184   000825  74                 	db	116	;'t'
   185   000826  75                 	db	117	;'u'
   186   000827  67                 	db	103	;'g'
   187   000828  75                 	db	117	;'u'
   188   000829  65                 	db	101	;'e'
   189   00082A  73                 	db	115	;'s'
   190   00082B  20                 	db	32
   191   00082C  20                 	db	32
   192   00082D  20                 	db	32
   193   00082E  20                 	db	32
   194   00082F  20                 	db	32
   195   000830  20                 	db	32
   196   000831  20                 	db	32
   197   000832  00                 	db	0
   198   000833                     STR_4:
   199   000833  43                 	db	67	;'C'
   200   000834  68                 	db	104	;'h'
   201   000835  61                 	db	97	;'a'
   202   000836  6E                 	db	110	;'n'
   203   000837  67                 	db	103	;'g'
   204   000838  65                 	db	101	;'e'
   205   000839  20                 	db	32
   206   00083A  74                 	db	116	;'t'
   207   00083B  69                 	db	105	;'i'
   208   00083C  6D                 	db	109	;'m'
   209   00083D  65                 	db	101	;'e'
   210   00083E  20                 	db	32
   211   00083F  20                 	db	32
   212   000840  20                 	db	32
   213   000841  20                 	db	32
   214   000842  00                 	db	0
   215   000843                     STR_2:
   216   000843  43                 	db	67	;'C'
   217   000844  68                 	db	104	;'h'
   218   000845  61                 	db	97	;'a'
   219   000846  6E                 	db	110	;'n'
   220   000847  67                 	db	103	;'g'
   221   000848  65                 	db	101	;'e'
   222   000849  20                 	db	32
   223   00084A  61                 	db	97	;'a'
   224   00084B  6C                 	db	108	;'l'
   225   00084C  61                 	db	97	;'a'
   226   00084D  72                 	db	114	;'r'
   227   00084E  6D                 	db	109	;'m'
   228   00084F  20                 	db	32
   229   000850  20                 	db	32
   230   000851  20                 	db	32
   231   000852  00                 	db	0
   232   000853                     STR_3:
   233   000853  41                 	db	65	;'A'
   234   000854  6C                 	db	108	;'l'
   235   000855  74                 	db	116	;'t'
   236   000856  65                 	db	101	;'e'
   237   000857  72                 	db	114	;'r'
   238   000858  61                 	db	97	;'a'
   239   000859  72                 	db	114	;'r'
   240   00085A  20                 	db	32
   241   00085B  74                 	db	116	;'t'
   242   00085C  65                 	db	101	;'e'
   243   00085D  6D                 	db	109	;'m'
   244   00085E  70                 	db	112	;'p'
   245   00085F  6F                 	db	111	;'o'
   246   000860  20                 	db	32
   247   000861  20                 	db	32
   248   000862  00                 	db	0
   249   000863                     STR_5:
   250   000863  41                 	db	65	;'A'
   251   000864  6C                 	db	108	;'l'
   252   000865  74                 	db	116	;'t'
   253   000866  65                 	db	101	;'e'
   254   000867  72                 	db	114	;'r'
   255   000868  61                 	db	97	;'a'
   256   000869  72                 	db	114	;'r'
   257   00086A  20                 	db	32
   258   00086B  69                 	db	105	;'i'
   259   00086C  64                 	db	100	;'d'
   260   00086D  69                 	db	105	;'i'
   261   00086E  6F                 	db	111	;'o'
   262   00086F  6D                 	db	109	;'m'
   263   000870  61                 	db	97	;'a'
   264   000871  20                 	db	32
   265   000872  00                 	db	0
   266   000873                     STR_1:
   267   000873  41                 	db	65	;'A'
   268   000874  6C                 	db	108	;'l'
   269   000875  74                 	db	116	;'t'
   270   000876  65                 	db	101	;'e'
   271   000877  72                 	db	114	;'r'
   272   000878  61                 	db	97	;'a'
   273   000879  72                 	db	114	;'r'
   274   00087A  20                 	db	32
   275   00087B  61                 	db	97	;'a'
   276   00087C  6C                 	db	108	;'l'
   277   00087D  61                 	db	97	;'a'
   278   00087E  72                 	db	114	;'r'
   279   00087F  6D                 	db	109	;'m'
   280   000880  65                 	db	101	;'e'
   281   000881  20                 	db	32
   282   000882  00                 	db	0
   283   000883                     STR_6:
   284   000883  43                 	db	67	;'C'
   285   000884  68                 	db	104	;'h'
   286   000885  61                 	db	97	;'a'
   287   000886  6E                 	db	110	;'n'
   288   000887  67                 	db	103	;'g'
   289   000888  65                 	db	101	;'e'
   290   000889  20                 	db	32
   291   00088A  6C                 	db	108	;'l'
   292   00088B  61                 	db	97	;'a'
   293   00088C  6E                 	db	110	;'n'
   294   00088D  67                 	db	103	;'g'
   295   00088E  75                 	db	117	;'u'
   296   00088F  61                 	db	97	;'a'
   297   000890  67                 	db	103	;'g'
   298   000891  65                 	db	101	;'e'
   299   000892  00                 	db	0
   300   000893                     STR_7:
   301   000893  20                 	db	32
   302   000894  20                 	db	32
   303   000895  20                 	db	32
   304   000896  20                 	db	32
   305   000897  20                 	db	32
   306   000898  20                 	db	32
   307   000899  20                 	db	32
   308   00089A  20                 	db	32
   309   00089B  20                 	db	32
   310   00089C  20                 	db	32
   311   00089D  20                 	db	32
   312   00089E  00                 	db	0
   313   00089F  00                 	db	0	; dummy byte at the end
   314   000000                     
   315                           ; #config settings
   316                           
   317                           	psect	cinit
   318   001B7E                     __pcinit:
   319                           	callstack 0
   320   001B7E                     start_initialization:
   321                           	callstack 0
   322   001B7E                     __initialization:
   323                           	callstack 0
   324                           
   325                           ; Initialize objects allocated to COMRAM (15 bytes)
   326                           ; load TBLPTR registers with __pidataCOMRAM
   327   001B7E  0E46               	movlw	low __pidataCOMRAM
   328   001B80  6EF6               	movwf	tblptrl,c
   329   001B82  0E1E               	movlw	high __pidataCOMRAM
   330   001B84  6EF7               	movwf	tblptrh,c
   331   001B86  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   332   001B88  6EF8               	movwf	tblptru,c
   333   001B8A  EE00  F049         	lfsr	0,__pdataCOMRAM
   334   001B8E  EE10 F00F          	lfsr	1,15
   335   001B92                     copy_data0:
   336   001B92  0009               	tblrd		*+
   337   001B94  CFF5 FFEE          	movff	tablat,postinc0
   338   001B98  50E5               	movf	postdec1,w,c
   339   001B9A  50E1               	movf	fsr1l,w,c
   340   001B9C  E1FA               	bnz	copy_data0
   341                           
   342                           ; Clear objects allocated to COMRAM (39 bytes)
   343   001B9E  EE00  F001         	lfsr	0,__pbssCOMRAM
   344   001BA2  0E27               	movlw	39
   345   001BA4                     clear_0:
   346   001BA4  6AEE               	clrf	postinc0,c
   347   001BA6  06E8               	decf	wreg,f,c
   348   001BA8  E1FD               	bnz	clear_0
   349   001BAA                     end_of_initialization:
   350                           	callstack 0
   351   001BAA                     __end_of__initialization:
   352                           	callstack 0
   353   001BAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   354   001BAC  6EF8               	movwf	tblptru,c
   355   001BAE  0100               	movlb	0
   356   001BB0  EF90  F00B         	goto	_main	;jump to C main() function
   357                           
   358                           	psect	bssCOMRAM
   359   000001                     __pbssCOMRAM:
   360                           	callstack 0
   361   000001                     	ds	5
   362   000006                     _alarmLevel:
   363                           	callstack 0
   364   000006                     	ds	2
   365   000008                     _time:
   366                           	callstack 0
   367   000008                     	ds	2
   368   00000A                     	ds	2
   369   00000C                     	ds	2
   370   00000E                     _key:
   371                           	callstack 0
   372   00000E                     	ds	2
   373   000010                     _key_ant:
   374                           	callstack 0
   375   000010                     	ds	2
   376   000012                     _ev_ant:
   377                           	callstack 0
   378   000012                     	ds	2
   379   000014                     _index:
   380                           	callstack 0
   381   000014                     	ds	1
   382   000015                     _language:
   383                           	callstack 0
   384   000015                     	ds	1
   385   000016                     _state:
   386                           	callstack 0
   387   000016                     	ds	1
   388   000017                     _estado_ant:
   389                           	callstack 0
   390   000017                     	ds	1
   391   000018                     _prot_ready:
   392                           	callstack 0
   393   000018                     	ds	1
   394   000019                     _v3:
   395                           	callstack 0
   396   000019                     	ds	1
   397   00001A                     _v2:
   398                           	callstack 0
   399   00001A                     	ds	1
   400   00001B                     _v1:
   401                           	callstack 0
   402   00001B                     	ds	1
   403   00001C                     _v0:
   404                           	callstack 0
   405   00001C                     	ds	1
   406   00001D                     _display:
   407                           	callstack 0
   408   00001D                     	ds	1
   409   00001E                     _started:
   410                           	callstack 0
   411   00001E                     	ds	1
   412   00001F                     _de:
   413                           	callstack 0
   414   00001F                     	ds	1
   415   000020                     kpDebounce@valorAntigo:
   416                           	callstack 0
   417   000020                     	ds	1
   418   000021                     kpDebounce@valorNovo:
   419                           	callstack 0
   420   000021                     	ds	1
   421   000022                     kpDebounce@tempo:
   422                           	callstack 0
   423   000022                     	ds	1
   424   000023                     _valor:
   425                           	callstack 0
   426   000023                     	ds	1
   427   000024                     _prot:
   428                           	callstack 0
   429   000024                     	ds	4
   430                           
   431                           	psect	dataCOMRAM
   432   000049                     __pdataCOMRAM:
   433                           	callstack 0
   434   000049                     _msgs:
   435                           	callstack 0
   436   000049                     	ds	8
   437   000051                     kpDebounce@F15:
   438                           	callstack 0
   439   000051                     	ds	5
   440   000056                     	ds	2
   441                           
   442                           	psect	cstackCOMRAM
   443   000028                     __pcstackCOMRAM:
   444                           	callstack 0
   445   000028                     ??_kpDebounce:
   446   000028                     ?_getTime:
   447                           	callstack 0
   448   000028                     ?_getAlarmLevel:
   449                           	callstack 0
   450   000028                     ?_digitalRead:
   451                           	callstack 0
   452   000028                     ?___awdiv:
   453                           	callstack 0
   454   000028                     Delay40us@j:
   455                           	callstack 0
   456   000028                     Delay2ms@j:
   457                           	callstack 0
   458   000028                     lcdCommand4bits@data:
   459                           	callstack 0
   460   000028                     serialSend@c:
   461                           	callstack 0
   462   000028                     serialRead@resp:
   463                           	callstack 0
   464   000028                     setState@newState:
   465                           	callstack 0
   466   000028                     setLanguage@newLanguage:
   467                           	callstack 0
   468   000028                     setProt@newChar:
   469                           	callstack 0
   470   000028                     resetProt@i:
   471                           	callstack 0
   472   000028                     digitalWrite@pin:
   473                           	callstack 0
   474   000028                     digitalRead@pin:
   475                           	callstack 0
   476   000028                     pinMode@pin:
   477                           	callstack 0
   478   000028                     ___awdiv@dividend:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x0
   482   000028                     	ds	1
   483   000029                     Delay2ms@k:
   484                           	callstack 0
   485   000029                     lcdCommand4bits@cmd:
   486                           	callstack 0
   487                           
   488                           ; 1 bytes @ 0x1
   489   000029                     	ds	1
   490   00002A                     ??_digitalRead:
   491   00002A                     ?_eventRead:
   492                           	callstack 0
   493   00002A                     lcdCommand@cmd:
   494                           	callstack 0
   495   00002A                     lcdData@valor:
   496                           	callstack 0
   497   00002A                     digitalWrite@value:
   498                           	callstack 0
   499   00002A                     pinMode@type:
   500                           	callstack 0
   501   00002A                     ___awdiv@divisor:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x2
   505   00002A                     	ds	1
   506   00002B                     lcdInit@i:
   507                           	callstack 0
   508   00002B                     lcdString@str:
   509                           	callstack 0
   510   00002B                     kpDebounce@bits:
   511                           	callstack 0
   512                           
   513                           ; 5 bytes @ 0x3
   514   00002B                     	ds	1
   515   00002C                     ??_digitalWrite:
   516   00002C                     ??_pinMode:
   517   00002C                     ??_eventRead:
   518   00002C                     ___awdiv@counter:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x4
   522   00002C                     	ds	1
   523   00002D                     eventRead@prot:
   524                           	callstack 0
   525   00002D                     ___awdiv@sign:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0x5
   529   00002D                     	ds	1
   530   00002E                     i2c_write_bit@bit:
   531                           	callstack 0
   532   00002E                     i2c_read_bit@bit:
   533                           	callstack 0
   534   00002E                     eventRead@ev:
   535                           	callstack 0
   536   00002E                     ___awdiv@quotient:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0x6
   540   00002E                     	ds	1
   541   00002F                     i2cWriteByte@send_stop:
   542                           	callstack 0
   543   00002F                     i2cReadByte@send_stop:
   544                           	callstack 0
   545                           
   546                           ; 1 bytes @ 0x7
   547   00002F                     	ds	1
   548   000030                     ??_i2cReadByte:
   549   000030                     ?___wmul:
   550                           	callstack 0
   551   000030                     ?___awmod:
   552                           	callstack 0
   553   000030                     i2cWriteByte@byte:
   554                           	callstack 0
   555   000030                     eventRead@data:
   556                           	callstack 0
   557   000030                     ___wmul@multiplier:
   558                           	callstack 0
   559   000030                     ___awmod@dividend:
   560                           	callstack 0
   561   000030                     kpDebounce@portes:
   562                           	callstack 0
   563                           
   564                           ; 5 bytes @ 0x8
   565   000030                     	ds	1
   566   000031                     i2cWriteByte@send_start:
   567                           	callstack 0
   568   000031                     i2cReadByte@nack:
   569                           	callstack 0
   570   000031                     eventRead@key:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574   000031                     	ds	1
   575   000032                     i2cWriteByte@bit:
   576                           	callstack 0
   577   000032                     i2cReadByte@bit:
   578                           	callstack 0
   579   000032                     ___wmul@multiplicand:
   580                           	callstack 0
   581   000032                     ___awmod@divisor:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0xA
   585   000032                     	ds	2
   586   000034                     i2cReadByte@byte:
   587                           	callstack 0
   588   000034                     ___awmod@counter:
   589                           	callstack 0
   590   000034                     ___wmul@product:
   591                           	callstack 0
   592                           
   593                           ; 2 bytes @ 0xC
   594   000034                     	ds	1
   595   000035                     ?_dsReadData:
   596                           	callstack 0
   597   000035                     kpDebounce@j:
   598                           	callstack 0
   599   000035                     ___awmod@sign:
   600                           	callstack 0
   601   000035                     dsReadData@address:
   602                           	callstack 0
   603                           
   604                           ; 2 bytes @ 0xD
   605   000035                     	ds	1
   606   000036                     ?_dec2bcd:
   607                           	callstack 0
   608   000036                     dec2bcd@value:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0xE
   612   000036                     	ds	1
   613   000037                     ??_dsReadData:
   614                           
   615                           ; 1 bytes @ 0xF
   616   000037                     	ds	1
   617   000038                     ??_dec2bcd:
   618   000038                     dsReadData@result:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x10
   622   000038                     	ds	2
   623   00003A                     ?_bcd2dec:
   624                           	callstack 0
   625   00003A                     bcd2dec@value:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x12
   629   00003A                     	ds	2
   630   00003C                     ??_bcd2dec:
   631   00003C                     dsWriteData@address:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x14
   635   00003C                     	ds	2
   636   00003E                     dsWriteData@value:
   637                           	callstack 0
   638   00003E                     lcdInt@val:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x16
   642   00003E                     	ds	2
   643   000040                     outputPrint@numTela:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x18
   647   000040                     	ds	2
   648   000042                     outputPrint@idioma:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x1A
   652   000042                     	ds	2
   653   000044                     ??_smLoop:
   654   000044                     
   655                           ; 1 bytes @ 0x1C
   656   000044                     	ds	1
   657   000045                     _smLoop$1389:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x1D
   661   000045                     	ds	2
   662   000047                     smLoop@prot:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x1F
   666   000047                     	ds	1
   667   000048                     smLoop@evento:
   668                           	callstack 0
   669                           
   670                           ; 1 bytes @ 0x20
   671   000048                     	ds	1
   672   000049                     
   673                           ; 1 bytes @ 0x21
   674 ;;
   675 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   676 ;;
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 23 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   693 ;;      Params:         0       0       0       0       0       0       0       0       0
   694 ;;      Locals:         0       0       0       0       0       0       0       0       0
   695 ;;      Temps:          0       0       0       0       0       0       0       0       0
   696 ;;      Totals:         0       0       0       0       0       0       0       0       0
   697 ;;Total ram usage:        0 bytes
   698 ;; Hardware stack levels required when called: 7
   699 ;; This function calls:
   700 ;;		_dec2bcd
   701 ;;		_dsInit
   702 ;;		_dsWriteData
   703 ;;		_kpDebounce
   704 ;;		_kpInit
   705 ;;		_lcdInit
   706 ;;		_serialInit
   707 ;;		_smInit
   708 ;;		_smLoop
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text0
   715   001720                     __ptext0:
   716                           	callstack 0
   717   001720                     _main:
   718                           	callstack 24
   719   001720                     
   720                           ;main.c: 26:     kpInit();
   721   001720  EC2B  F00F         	call	_kpInit	;wreg free
   722                           
   723                           ;main.c: 27:     lcdInit();
   724   001724  ECCD  F00B         	call	_lcdInit	;wreg free
   725                           
   726                           ;main.c: 28:     dsInit();
   727   001728  EC4E  F00F         	call	_dsInit	;wreg free
   728                           
   729                           ;main.c: 29:     smInit();
   730   00172C  EC32  F00F         	call	_smInit	;wreg free
   731                           
   732                           ;main.c: 30:     serialInit();
   733   001730  ECF4  F00E         	call	_serialInit	;wreg free
   734   001734                     
   735                           ;main.c: 31:     TRISA = 0x00;
   736   001734  0E00               	movlw	0
   737   001736  6E92               	movwf	146,c	;volatile
   738   001738                     
   739                           ;main.c: 32:     LATA = 0x00;
   740   001738  0E00               	movlw	0
   741   00173A  6E89               	movwf	137,c	;volatile
   742                           
   743                           ;main.c: 34:     (dsWriteData(dec2bcd(0),0x00));
   744   00173C  0E00               	movlw	0
   745   00173E  6E3D               	movwf	(dsWriteData@address+1)^0,c
   746   001740  0E00               	movlw	0
   747   001742  6E3C               	movwf	dsWriteData@address^0,c
   748   001744  0E00               	movlw	0
   749   001746  6E37               	movwf	(dec2bcd@value+1)^0,c
   750   001748  0E00               	movlw	0
   751   00174A  6E36               	movwf	dec2bcd@value^0,c
   752   00174C  EC45  F00C         	call	_dec2bcd	;wreg free
   753   001750  5036               	movf	?_dec2bcd^0,w,c
   754   001752  EC3B  F00E         	call	_dsWriteData
   755                           
   756                           ;main.c: 35:     (dsWriteData(dec2bcd(0),0x01));
   757   001756  0E00               	movlw	0
   758   001758  6E3D               	movwf	(dsWriteData@address+1)^0,c
   759   00175A  0E01               	movlw	1
   760   00175C  6E3C               	movwf	dsWriteData@address^0,c
   761   00175E  0E00               	movlw	0
   762   001760  6E37               	movwf	(dec2bcd@value+1)^0,c
   763   001762  0E00               	movlw	0
   764   001764  6E36               	movwf	dec2bcd@value^0,c
   765   001766  EC45  F00C         	call	_dec2bcd	;wreg free
   766   00176A  5036               	movf	?_dec2bcd^0,w,c
   767   00176C  EC3B  F00E         	call	_dsWriteData
   768                           
   769                           ;main.c: 36:     (dsWriteData(dec2bcd(0),0x02));
   770   001770  0E00               	movlw	0
   771   001772  6E3D               	movwf	(dsWriteData@address+1)^0,c
   772   001774  0E02               	movlw	2
   773   001776  6E3C               	movwf	dsWriteData@address^0,c
   774   001778  0E00               	movlw	0
   775   00177A  6E37               	movwf	(dec2bcd@value+1)^0,c
   776   00177C  0E00               	movlw	0
   777   00177E  6E36               	movwf	dec2bcd@value^0,c
   778   001780  EC45  F00C         	call	_dec2bcd	;wreg free
   779   001784  5036               	movf	?_dec2bcd^0,w,c
   780   001786  EC3B  F00E         	call	_dsWriteData
   781   00178A                     l3269:
   782                           
   783                           ;main.c: 40:         kpDebounce();
   784   00178A  ECDB  F009         	call	_kpDebounce	;wreg free
   785   00178E                     
   786                           ;main.c: 42:         smLoop();
   787   00178E  EC9E  F006         	call	_smLoop	;wreg free
   788   001792  EFC5  F00B         	goto	l3269
   789   001796  EF00  F000         	goto	start
   790   00179A                     __end_of_main:
   791                           	callstack 0
   792                           
   793 ;; *************** function _smLoop *****************
   794 ;; Defined at:
   795 ;;		line 15 in file "stateMachine.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  prot            1   31[COMRAM] PTR unsigned char 
   800 ;;		 -> prot(4), 
   801 ;;  evento          1   32[COMRAM] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         0       0       0       0       0       0       0       0       0
   812 ;;      Locals:         4       0       0       0       0       0       0       0       0
   813 ;;      Temps:          1       0       0       0       0       0       0       0       0
   814 ;;      Totals:         5       0       0       0       0       0       0       0       0
   815 ;;Total ram usage:        5 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; Hardware stack levels required when called: 6
   818 ;; This function calls:
   819 ;;		_eventRead
   820 ;;		_getLanguage
   821 ;;		_getProt
   822 ;;		_getState
   823 ;;		_outputPrint
   824 ;;		_resetProt
   825 ;;		_setLanguage
   826 ;;		_setState
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text1
   833   000D3C                     __ptext1:
   834                           	callstack 0
   835   000D3C                     _smLoop:
   836                           	callstack 24
   837   000D3C                     
   838                           ;stateMachine.c: 16:     unsigned char evento;;stateMachine.c: 19:     evento = eventRea
      +                          d();
   839   000D3C  EC5B  F008         	call	_eventRead	;wreg free
   840   000D40  502A               	movf	?_eventRead^0,w,c
   841   000D42  6E48               	movwf	smLoop@evento^0,c
   842                           
   843                           ;stateMachine.c: 21:     switch (getState()) {
   844   000D44  EF64  F007         	goto	l3253
   845   000D48                     l3195:
   846                           
   847                           ;stateMachine.c: 23:             if (evento == EV_B_2) {
   848   000D48  0E02               	movlw	2
   849   000D4A  1848               	xorwf	smLoop@evento^0,w,c
   850   000D4C  A4D8               	btfss	status,2,c
   851   000D4E  EFAB  F006         	goto	u2731
   852   000D52  EFAD  F006         	goto	u2730
   853   000D56                     u2731:
   854   000D56  EFB0  F006         	goto	l3199
   855   000D5A                     u2730:
   856   000D5A                     
   857                           ;stateMachine.c: 24:                 setState(STATE_IDIOMA);
   858   000D5A  0E02               	movlw	2
   859   000D5C  EC47  F00F         	call	_setState
   860   000D60                     l3199:
   861                           
   862                           ;stateMachine.c: 27:             if (evento == EV_B_3) {
   863   000D60  0E03               	movlw	3
   864   000D62  1848               	xorwf	smLoop@evento^0,w,c
   865   000D64  A4D8               	btfss	status,2,c
   866   000D66  EFB7  F006         	goto	u2741
   867   000D6A  EFB9  F006         	goto	u2740
   868   000D6E                     u2741:
   869   000D6E  EFBC  F006         	goto	l3203
   870   000D72                     u2740:
   871   000D72                     
   872                           ;stateMachine.c: 28:                 setState(STATE_TEMPO);
   873   000D72  0E01               	movlw	1
   874   000D74  EC47  F00F         	call	_setState
   875   000D78                     l3203:
   876                           
   877                           ;stateMachine.c: 31:             if(evento == EV_B_4)
   878   000D78  0E04               	movlw	4
   879   000D7A  1848               	xorwf	smLoop@evento^0,w,c
   880   000D7C  A4D8               	btfss	status,2,c
   881   000D7E  EFC3  F006         	goto	u2751
   882   000D82  EFC5  F006         	goto	u2750
   883   000D86                     u2751:
   884   000D86  EF78  F007         	goto	l3255
   885   000D8A                     u2750:
   886   000D8A                     
   887                           ;stateMachine.c: 32:             {;stateMachine.c: 33:                 setState(STATE_HO
      +                          RA);
   888   000D8A  0E03               	movlw	3
   889   000D8C  EC47  F00F         	call	_setState
   890   000D90  EF78  F007         	goto	l3255
   891   000D94                     l3207:
   892                           
   893                           ;stateMachine.c: 38:             if (evento == EV_B_2) {
   894   000D94  0E02               	movlw	2
   895   000D96  1848               	xorwf	smLoop@evento^0,w,c
   896   000D98  A4D8               	btfss	status,2,c
   897   000D9A  EFD1  F006         	goto	u2761
   898   000D9E  EFD3  F006         	goto	u2760
   899   000DA2                     u2761:
   900   000DA2  EFD6  F006         	goto	l3211
   901   000DA6                     u2760:
   902   000DA6                     
   903                           ;stateMachine.c: 39:                 setState(STATE_TEMPO);
   904   000DA6  0E01               	movlw	1
   905   000DA8  EC47  F00F         	call	_setState
   906   000DAC                     l3211:
   907                           
   908                           ;stateMachine.c: 42:             if (evento == EV_B_3) {
   909   000DAC  0E03               	movlw	3
   910   000DAE  1848               	xorwf	smLoop@evento^0,w,c
   911   000DB0  A4D8               	btfss	status,2,c
   912   000DB2  EFDD  F006         	goto	u2771
   913   000DB6  EFDF  F006         	goto	u2770
   914   000DBA                     u2771:
   915   000DBA  EFE2  F006         	goto	l3215
   916   000DBE                     u2770:
   917   000DBE                     
   918                           ;stateMachine.c: 43:                 setState(STATE_ALARME);
   919   000DBE  0E00               	movlw	0
   920   000DC0  EC47  F00F         	call	_setState
   921   000DC4                     l3215:
   922                           
   923                           ;stateMachine.c: 46:             if(evento == EV_B_4)
   924   000DC4  0E04               	movlw	4
   925   000DC6  1848               	xorwf	smLoop@evento^0,w,c
   926   000DC8  A4D8               	btfss	status,2,c
   927   000DCA  EFE9  F006         	goto	u2781
   928   000DCE  EFEB  F006         	goto	u2780
   929   000DD2                     u2781:
   930   000DD2  EFEE  F006         	goto	l3219
   931   000DD6                     u2780:
   932   000DD6                     
   933                           ;stateMachine.c: 47:             {;stateMachine.c: 48:                 setState(STATE_HO
      +                          RA);
   934   000DD6  0E03               	movlw	3
   935   000DD8  EC47  F00F         	call	_setState
   936   000DDC                     l3219:
   937                           
   938                           ;stateMachine.c: 51:             if (evento == EV_B_0) {
   939   000DDC  5048               	movf	smLoop@evento^0,w,c
   940   000DDE  A4D8               	btfss	status,2,c
   941   000DE0  EFF4  F006         	goto	u2791
   942   000DE4  EFF6  F006         	goto	u2790
   943   000DE8                     u2791:
   944   000DE8  EFFC  F006         	goto	l3223
   945   000DEC                     u2790:
   946   000DEC                     
   947                           ;stateMachine.c: 53:                 setLanguage(getLanguage() + 1);
   948   000DEC  EC51  F00F         	call	_getLanguage	;wreg free
   949   000DF0  6E44               	movwf	??_smLoop^0,c
   950   000DF2  2844               	incf	??_smLoop^0,w,c
   951   000DF4  EC38  F00F         	call	_setLanguage
   952   000DF8                     l3223:
   953                           
   954                           ;stateMachine.c: 57:             if (evento == EV_B_1) {
   955   000DF8  0448               	decf	smLoop@evento^0,w,c
   956   000DFA  A4D8               	btfss	status,2,c
   957   000DFC  EF02  F007         	goto	u2801
   958   000E00  EF04  F007         	goto	u2800
   959   000E04                     u2801:
   960   000E04  EF0A  F007         	goto	l3227
   961   000E08                     u2800:
   962   000E08                     
   963                           ;stateMachine.c: 58:                 setLanguage(getLanguage() - 1);
   964   000E08  EC51  F00F         	call	_getLanguage	;wreg free
   965   000E0C  6E44               	movwf	??_smLoop^0,c
   966   000E0E  0444               	decf	??_smLoop^0,w,c
   967   000E10  EC38  F00F         	call	_setLanguage
   968   000E14                     l3227:
   969                           
   970                           ;stateMachine.c: 61:             if (evento == EV_PROT_SERIAL) {
   971   000E14  0E05               	movlw	5
   972   000E16  1848               	xorwf	smLoop@evento^0,w,c
   973   000E18  A4D8               	btfss	status,2,c
   974   000E1A  EF11  F007         	goto	u2811
   975   000E1E  EF13  F007         	goto	u2810
   976   000E22                     u2811:
   977   000E22  EF78  F007         	goto	l3255
   978   000E26                     u2810:
   979   000E26                     
   980                           ;stateMachine.c: 62:                 unsigned char* prot;;stateMachine.c: 63:           
      +                                prot = getProt();
   981   000E26  EC57  F00F         	call	_getProt	;wreg free
   982   000E2A  6E47               	movwf	smLoop@prot^0,c
   983   000E2C                     
   984                           ;stateMachine.c: 65:                 if (prot[1] == 'l') {
   985   000E2C  5047               	movf	smLoop@prot^0,w,c
   986   000E2E  6ED9               	movwf	fsr2l,c
   987   000E30  6ADA               	clrf	fsr2h,c
   988   000E32  0E01               	movlw	1
   989   000E34  26D9               	addwf	fsr2l,f,c
   990   000E36  0E6C               	movlw	108
   991   000E38  18DE               	xorwf	postinc2,w,c
   992   000E3A  A4D8               	btfss	status,2,c
   993   000E3C  EF22  F007         	goto	u2821
   994   000E40  EF24  F007         	goto	u2820
   995   000E44                     u2821:
   996   000E44  EF2C  F007         	goto	l609
   997   000E48                     u2820:
   998   000E48                     
   999                           ;stateMachine.c: 66:                     setLanguage(prot[3]);
  1000   000E48  5047               	movf	smLoop@prot^0,w,c
  1001   000E4A  6ED9               	movwf	fsr2l,c
  1002   000E4C  6ADA               	clrf	fsr2h,c
  1003   000E4E  0E03               	movlw	3
  1004   000E50  26D9               	addwf	fsr2l,f,c
  1005   000E52  50DF               	movf	indf2,w,c
  1006   000E54  EC38  F00F         	call	_setLanguage
  1007   000E58                     l609:
  1008                           
  1009                           ;stateMachine.c: 69:                 resetProt();
  1010   000E58  EC0D  F00E         	call	_resetProt	;wreg free
  1011   000E5C  EF78  F007         	goto	l3255
  1012   000E60                     l3235:
  1013                           
  1014                           ;stateMachine.c: 76:             if (evento == EV_B_2) {
  1015   000E60  0E02               	movlw	2
  1016   000E62  1848               	xorwf	smLoop@evento^0,w,c
  1017   000E64  A4D8               	btfss	status,2,c
  1018   000E66  EF37  F007         	goto	u2831
  1019   000E6A  EF39  F007         	goto	u2830
  1020   000E6E                     u2831:
  1021   000E6E  EF3C  F007         	goto	l3239
  1022   000E72                     u2830:
  1023   000E72                     
  1024                           ;stateMachine.c: 77:                 setState(STATE_ALARME);
  1025   000E72  0E00               	movlw	0
  1026   000E74  EC47  F00F         	call	_setState
  1027   000E78                     l3239:
  1028                           
  1029                           ;stateMachine.c: 80:             if (evento == EV_B_3) {
  1030   000E78  0E03               	movlw	3
  1031   000E7A  1848               	xorwf	smLoop@evento^0,w,c
  1032   000E7C  A4D8               	btfss	status,2,c
  1033   000E7E  EF43  F007         	goto	u2841
  1034   000E82  EF45  F007         	goto	u2840
  1035   000E86                     u2841:
  1036   000E86  EF48  F007         	goto	l3243
  1037   000E8A                     u2840:
  1038   000E8A                     
  1039                           ;stateMachine.c: 81:                 setState(STATE_IDIOMA);
  1040   000E8A  0E02               	movlw	2
  1041   000E8C  EC47  F00F         	call	_setState
  1042   000E90                     l3243:
  1043                           
  1044                           ;stateMachine.c: 84:             if(evento == EV_B_4)
  1045   000E90  0E04               	movlw	4
  1046   000E92  1848               	xorwf	smLoop@evento^0,w,c
  1047   000E94  A4D8               	btfss	status,2,c
  1048   000E96  EF4F  F007         	goto	u2851
  1049   000E9A  EF51  F007         	goto	u2850
  1050   000E9E                     u2851:
  1051   000E9E  EF78  F007         	goto	l3255
  1052   000EA2                     u2850:
  1053   000EA2                     
  1054                           ;stateMachine.c: 85:             {;stateMachine.c: 86:                 setState(STATE_HO
      +                          RA);
  1055   000EA2  0E03               	movlw	3
  1056   000EA4  EC47  F00F         	call	_setState
  1057   000EA8  EF78  F007         	goto	l3255
  1058   000EAC                     l3247:
  1059                           
  1060                           ;stateMachine.c: 91:             if(evento != EV_B_4)
  1061   000EAC  0E04               	movlw	4
  1062   000EAE  1848               	xorwf	smLoop@evento^0,w,c
  1063   000EB0  B4D8               	btfsc	status,2,c
  1064   000EB2  EF5D  F007         	goto	u2861
  1065   000EB6  EF5F  F007         	goto	u2860
  1066   000EBA                     u2861:
  1067   000EBA  EF78  F007         	goto	l3255
  1068   000EBE                     u2860:
  1069   000EBE                     
  1070                           ;stateMachine.c: 92:                 setState(STATE_ALARME);
  1071   000EBE  0E00               	movlw	0
  1072   000EC0  EC47  F00F         	call	_setState
  1073   000EC4  EF78  F007         	goto	l3255
  1074   000EC8                     l3253:
  1075   000EC8  EC53  F00F         	call	_getState	;wreg free
  1076                           
  1077                           ; Switch size 1, requested type "simple"
  1078                           ; Number of cases is 4, Range of values is 0 to 3
  1079                           ; switch strategies available:
  1080                           ; Name         Instructions Cycles
  1081                           ; simple_byte           13     7 (average)
  1082                           ;	Chosen strategy is simple_byte
  1083   000ECC  0A00               	xorlw	0	; case 0
  1084   000ECE  B4D8               	btfsc	status,2,c
  1085   000ED0  EFA4  F006         	goto	l3195
  1086   000ED4  0A01               	xorlw	1	; case 1
  1087   000ED6  B4D8               	btfsc	status,2,c
  1088   000ED8  EF30  F007         	goto	l3235
  1089   000EDC  0A03               	xorlw	3	; case 2
  1090   000EDE  B4D8               	btfsc	status,2,c
  1091   000EE0  EFCA  F006         	goto	l3207
  1092   000EE4  0A01               	xorlw	1	; case 3
  1093   000EE6  B4D8               	btfsc	status,2,c
  1094   000EE8  EF56  F007         	goto	l3247
  1095   000EEC  EF78  F007         	goto	l3255
  1096   000EF0                     l3255:
  1097                           
  1098                           ;stateMachine.c: 95:     outputPrint(getState(), getLanguage());
  1099   000EF0  EC51  F00F         	call	_getLanguage	;wreg free
  1100   000EF4  6E44               	movwf	??_smLoop^0,c
  1101   000EF6  5044               	movf	??_smLoop^0,w,c
  1102   000EF8  6E45               	movwf	_smLoop$1389^0,c
  1103   000EFA  6A46               	clrf	(_smLoop$1389+1)^0,c
  1104   000EFC                     
  1105                           ;stateMachine.c: 95:     outputPrint(getState(), getLanguage());
  1106   000EFC  EC53  F00F         	call	_getState	;wreg free
  1107   000F00  6E44               	movwf	??_smLoop^0,c
  1108   000F02  5044               	movf	??_smLoop^0,w,c
  1109   000F04  6E40               	movwf	outputPrint@numTela^0,c
  1110   000F06  6A41               	clrf	(outputPrint@numTela+1)^0,c
  1111   000F08  C045  F042         	movff	_smLoop$1389,outputPrint@idioma
  1112   000F0C  C046  F043         	movff	_smLoop$1389+1,outputPrint@idioma+1
  1113   000F10  EC8B  F007         	call	_outputPrint	;wreg free
  1114   000F14  0012               	return		;funcret
  1115   000F16                     __end_of_smLoop:
  1116                           	callstack 0
  1117                           
  1118 ;; *************** function _setLanguage *****************
  1119 ;; Defined at:
  1120 ;;		line 49 in file "var.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  newLanguage     1    wreg     unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  newLanguage     1    0[COMRAM] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1134 ;;      Params:         0       0       0       0       0       0       0       0       0
  1135 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1137 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1138 ;;Total ram usage:        1 bytes
  1139 ;; Hardware stack levels used: 1
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_smLoop
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text2
  1148   001E70                     __ptext2:
  1149                           	callstack 0
  1150   001E70                     _setLanguage:
  1151                           	callstack 29
  1152                           
  1153                           ;incstack = 0
  1154                           ;setLanguage@newLanguage stored from wreg
  1155   001E70  6E28               	movwf	setLanguage@newLanguage^0,c
  1156   001E72                     
  1157                           ;var.c: 52:     language = newLanguage % 2;
  1158   001E72  5028               	movf	setLanguage@newLanguage^0,w,c
  1159   001E74  0B01               	andlw	1
  1160   001E76  6E15               	movwf	_language^0,c
  1161   001E78  0012               	return		;funcret
  1162   001E7A                     __end_of_setLanguage:
  1163                           	callstack 0
  1164                           
  1165 ;; *************** function _resetProt *****************
  1166 ;; Defined at:
  1167 ;;		line 67 in file "var.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  i               1    0[COMRAM] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1181 ;;      Params:         0       0       0       0       0       0       0       0       0
  1182 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1184 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1185 ;;Total ram usage:        1 bytes
  1186 ;; Hardware stack levels used: 1
  1187 ;; This function calls:
  1188 ;;		Nothing
  1189 ;; This function is called by:
  1190 ;;		_smLoop
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text3
  1195   001C1A                     __ptext3:
  1196                           	callstack 0
  1197   001C1A                     _resetProt:
  1198                           	callstack 29
  1199   001C1A                     
  1200                           ;var.c: 69:     char i = 0;
  1201   001C1A  0E00               	movlw	0
  1202   001C1C  6E28               	movwf	resetProt@i^0,c
  1203                           
  1204                           ;var.c: 70:     while (i < 4)
  1205   001C1E  EF17  F00E         	goto	l3155
  1206   001C22                     l3151:
  1207                           
  1208                           ;var.c: 71:     {;var.c: 72:         prot[i] = 0;
  1209   001C22  5028               	movf	resetProt@i^0,w,c
  1210   001C24  0F24               	addlw	low _prot
  1211   001C26  6ED9               	movwf	fsr2l,c
  1212   001C28  6ADA               	clrf	fsr2h,c
  1213   001C2A  6ADF               	clrf	indf2,c
  1214   001C2C                     
  1215                           ;var.c: 73:         i++;
  1216   001C2C  2A28               	incf	resetProt@i^0,f,c
  1217   001C2E                     l3155:
  1218                           
  1219                           ;var.c: 70:     while (i < 4)
  1220   001C2E  0E03               	movlw	3
  1221   001C30  6428               	cpfsgt	resetProt@i^0,c
  1222   001C32  EF1D  F00E         	goto	u2711
  1223   001C36  EF1F  F00E         	goto	u2710
  1224   001C3A                     u2711:
  1225   001C3A  EF11  F00E         	goto	l3151
  1226   001C3E                     u2710:
  1227   001C3E                     
  1228                           ;var.c: 75:     prot_ready = 0;
  1229   001C3E  0E00               	movlw	0
  1230   001C40  6E18               	movwf	_prot_ready^0,c
  1231                           
  1232                           ;var.c: 76:     index = 0;
  1233   001C42  0E00               	movlw	0
  1234   001C44  6E14               	movwf	_index^0,c
  1235   001C46  0012               	return		;funcret
  1236   001C48                     __end_of_resetProt:
  1237                           	callstack 0
  1238                           
  1239 ;; *************** function _outputPrint *****************
  1240 ;; Defined at:
  1241 ;;		line 21 in file "output.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  numTela         2   24[COMRAM] int 
  1244 ;;  idioma          2   26[COMRAM] int 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1256 ;;      Params:         4       0       0       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1259 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1260 ;;Total ram usage:        4 bytes
  1261 ;; Hardware stack levels used: 1
  1262 ;; Hardware stack levels required when called: 5
  1263 ;; This function calls:
  1264 ;;		_bcd2dec
  1265 ;;		_dsReadData
  1266 ;;		_getAlarmLevel
  1267 ;;		_getLanguage
  1268 ;;		_getTime
  1269 ;;		_lcdCommand
  1270 ;;		_lcdData
  1271 ;;		_lcdInt
  1272 ;;		_lcdString
  1273 ;; This function is called by:
  1274 ;;		_smLoop
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text4
  1279   000F16                     __ptext4:
  1280                           	callstack 0
  1281   000F16                     _outputPrint:
  1282                           	callstack 24
  1283   000F16                     
  1284                           ;output.c: 23:     if (numTela == STATE_TEMPO) {
  1285   000F16  0440               	decf	outputPrint@numTela^0,w,c
  1286   000F18  1041               	iorwf	(outputPrint@numTela+1)^0,w,c
  1287   000F1A  A4D8               	btfss	status,2,c
  1288   000F1C  EF92  F007         	goto	u2651
  1289   000F20  EF94  F007         	goto	u2650
  1290   000F24                     u2651:
  1291   000F24  EFB1  F007         	goto	l3105
  1292   000F28                     u2650:
  1293   000F28                     
  1294                           ;output.c: 24:         lcdCommand(0x80);
  1295   000F28  0E80               	movlw	128
  1296   000F2A  ECFC  F00C         	call	_lcdCommand
  1297   000F2E                     
  1298                           ;output.c: 25:         lcdString(msgs[numTela][idioma]);
  1299   000F2E  5040               	movf	outputPrint@numTela^0,w,c
  1300   000F30  0D02               	mullw	2
  1301   000F32  50F3               	movf	243,w,c
  1302   000F34  0F49               	addlw	low _msgs
  1303   000F36  2442               	addwf	outputPrint@idioma^0,w,c
  1304   000F38  6ED9               	movwf	fsr2l,c
  1305   000F3A  6ADA               	clrf	fsr2h,c
  1306   000F3C  50DF               	movf	indf2,w,c
  1307   000F3E  6E2B               	movwf	lcdString@str^0,c
  1308   000F40  ECDA  F00D         	call	_lcdString	;wreg free
  1309   000F44                     
  1310                           ;output.c: 26:         lcdCommand(0xC0);
  1311   000F44  0EC0               	movlw	192
  1312   000F46  ECFC  F00C         	call	_lcdCommand
  1313   000F4A                     
  1314                           ;output.c: 27:         lcdInt(getTime());
  1315   000F4A  EC3D  F00F         	call	_getTime	;wreg free
  1316   000F4E  C028  F03E         	movff	?_getTime,lcdInt@val
  1317   000F52  C029  F03F         	movff	?_getTime+1,lcdInt@val+1
  1318   000F56  EC59  F00A         	call	_lcdInt	;wreg free
  1319   000F5A                     
  1320                           ;output.c: 28:         lcdString("           ");
  1321   000F5A  0E93               	movlw	low STR_7
  1322   000F5C  6E2B               	movwf	lcdString@str^0,c
  1323   000F5E  ECDA  F00D         	call	_lcdString	;wreg free
  1324   000F62                     l3105:
  1325                           
  1326                           ;output.c: 30:     if (numTela == STATE_ALARME) {
  1327   000F62  5040               	movf	outputPrint@numTela^0,w,c
  1328   000F64  1041               	iorwf	(outputPrint@numTela+1)^0,w,c
  1329   000F66  A4D8               	btfss	status,2,c
  1330   000F68  EFB8  F007         	goto	u2661
  1331   000F6C  EFBA  F007         	goto	u2660
  1332   000F70                     u2661:
  1333   000F70  EFD7  F007         	goto	l3117
  1334   000F74                     u2660:
  1335   000F74                     
  1336                           ;output.c: 31:         lcdCommand(0x80);
  1337   000F74  0E80               	movlw	128
  1338   000F76  ECFC  F00C         	call	_lcdCommand
  1339   000F7A                     
  1340                           ;output.c: 32:         lcdString(msgs[numTela][idioma]);
  1341   000F7A  5040               	movf	outputPrint@numTela^0,w,c
  1342   000F7C  0D02               	mullw	2
  1343   000F7E  50F3               	movf	243,w,c
  1344   000F80  0F49               	addlw	low _msgs
  1345   000F82  2442               	addwf	outputPrint@idioma^0,w,c
  1346   000F84  6ED9               	movwf	fsr2l,c
  1347   000F86  6ADA               	clrf	fsr2h,c
  1348   000F88  50DF               	movf	indf2,w,c
  1349   000F8A  6E2B               	movwf	lcdString@str^0,c
  1350   000F8C  ECDA  F00D         	call	_lcdString	;wreg free
  1351   000F90                     
  1352                           ;output.c: 33:         lcdCommand(0xC0);
  1353   000F90  0EC0               	movlw	192
  1354   000F92  ECFC  F00C         	call	_lcdCommand
  1355   000F96                     
  1356                           ;output.c: 34:         lcdInt(getAlarmLevel());
  1357   000F96  EC42  F00F         	call	_getAlarmLevel	;wreg free
  1358   000F9A  C028  F03E         	movff	?_getAlarmLevel,lcdInt@val
  1359   000F9E  C029  F03F         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1360   000FA2  EC59  F00A         	call	_lcdInt	;wreg free
  1361   000FA6                     
  1362                           ;output.c: 35:         lcdString("           ");
  1363   000FA6  0E93               	movlw	low STR_7
  1364   000FA8  6E2B               	movwf	lcdString@str^0,c
  1365   000FAA  ECDA  F00D         	call	_lcdString	;wreg free
  1366   000FAE                     l3117:
  1367                           
  1368                           ;output.c: 37:     if (numTela == STATE_IDIOMA) {
  1369   000FAE  0E02               	movlw	2
  1370   000FB0  1840               	xorwf	outputPrint@numTela^0,w,c
  1371   000FB2  1041               	iorwf	(outputPrint@numTela+1)^0,w,c
  1372   000FB4  A4D8               	btfss	status,2,c
  1373   000FB6  EFDF  F007         	goto	u2671
  1374   000FBA  EFE1  F007         	goto	u2670
  1375   000FBE                     u2671:
  1376   000FBE  EF0E  F008         	goto	l3133
  1377   000FC2                     u2670:
  1378   000FC2                     
  1379                           ;output.c: 38:         lcdCommand(0x80);
  1380   000FC2  0E80               	movlw	128
  1381   000FC4  ECFC  F00C         	call	_lcdCommand
  1382   000FC8                     
  1383                           ;output.c: 39:         lcdString(msgs[numTela][idioma]);
  1384   000FC8  5040               	movf	outputPrint@numTela^0,w,c
  1385   000FCA  0D02               	mullw	2
  1386   000FCC  50F3               	movf	243,w,c
  1387   000FCE  0F49               	addlw	low _msgs
  1388   000FD0  2442               	addwf	outputPrint@idioma^0,w,c
  1389   000FD2  6ED9               	movwf	fsr2l,c
  1390   000FD4  6ADA               	clrf	fsr2h,c
  1391   000FD6  50DF               	movf	indf2,w,c
  1392   000FD8  6E2B               	movwf	lcdString@str^0,c
  1393   000FDA  ECDA  F00D         	call	_lcdString	;wreg free
  1394   000FDE                     
  1395                           ;output.c: 40:         lcdCommand(0xC0);
  1396   000FDE  0EC0               	movlw	192
  1397   000FE0  ECFC  F00C         	call	_lcdCommand
  1398   000FE4                     
  1399                           ;output.c: 41:         if (getLanguage() == 0) {
  1400   000FE4  EC51  F00F         	call	_getLanguage	;wreg free
  1401   000FE8  0900               	iorlw	0
  1402   000FEA  A4D8               	btfss	status,2,c
  1403   000FEC  EFFA  F007         	goto	u2681
  1404   000FF0  EFFC  F007         	goto	u2680
  1405   000FF4                     u2681:
  1406   000FF4  EF00  F008         	goto	l3129
  1407   000FF8                     u2680:
  1408   000FF8                     
  1409                           ;output.c: 42:             lcdString("Portugues       ");
  1410   000FF8  0E22               	movlw	low STR_9
  1411   000FFA  6E2B               	movwf	lcdString@str^0,c
  1412   000FFC  ECDA  F00D         	call	_lcdString	;wreg free
  1413   001000                     l3129:
  1414                           
  1415                           ;output.c: 44:         if (getLanguage() == 1) {
  1416   001000  EC51  F00F         	call	_getLanguage	;wreg free
  1417   001004  06E8               	decf	wreg,f,c
  1418   001006  A4D8               	btfss	status,2,c
  1419   001008  EF08  F008         	goto	u2691
  1420   00100C  EF0A  F008         	goto	u2690
  1421   001010                     u2691:
  1422   001010  EF0E  F008         	goto	l3133
  1423   001014                     u2690:
  1424   001014                     
  1425                           ;output.c: 45:             lcdString("English         ");
  1426   001014  0E11               	movlw	low STR_10
  1427   001016  6E2B               	movwf	lcdString@str^0,c
  1428   001018  ECDA  F00D         	call	_lcdString	;wreg free
  1429   00101C                     l3133:
  1430                           
  1431                           ;output.c: 50:     if (numTela == STATE_HORA) {
  1432   00101C  0E03               	movlw	3
  1433   00101E  1840               	xorwf	outputPrint@numTela^0,w,c
  1434   001020  1041               	iorwf	(outputPrint@numTela+1)^0,w,c
  1435   001022  A4D8               	btfss	status,2,c
  1436   001024  EF16  F008         	goto	u2701
  1437   001028  EF18  F008         	goto	u2700
  1438   00102C                     u2701:
  1439   00102C  EF5A  F008         	goto	l568
  1440   001030                     u2700:
  1441   001030                     
  1442                           ;output.c: 51:         lcdCommand(0x80);
  1443   001030  0E80               	movlw	128
  1444   001032  ECFC  F00C         	call	_lcdCommand
  1445   001036                     
  1446                           ;output.c: 52:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)));
  1447   001036  0E00               	movlw	0
  1448   001038  6E36               	movwf	(dsReadData@address+1)^0,c
  1449   00103A  0E00               	movlw	0
  1450   00103C  6E35               	movwf	dsReadData@address^0,c
  1451   00103E  EC20  F00D         	call	_dsReadData	;wreg free
  1452   001042  0E7F               	movlw	127
  1453   001044  1435               	andwf	?_dsReadData^0,w,c
  1454   001046  6E3A               	movwf	bcd2dec@value^0,c
  1455   001048  6A3B               	clrf	(bcd2dec@value+1)^0,c
  1456   00104A  EC66  F00D         	call	_bcd2dec	;wreg free
  1457   00104E  C03A  F03E         	movff	?_bcd2dec,lcdInt@val
  1458   001052  C03B  F03F         	movff	?_bcd2dec+1,lcdInt@val+1
  1459   001056  EC59  F00A         	call	_lcdInt	;wreg free
  1460   00105A                     
  1461                           ;output.c: 53:         lcdData(':');
  1462   00105A  0E3A               	movlw	58
  1463   00105C  ECE5  F00E         	call	_lcdData
  1464                           
  1465                           ;output.c: 54:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)));
  1466   001060  0E00               	movlw	0
  1467   001062  6E36               	movwf	(dsReadData@address+1)^0,c
  1468   001064  0E01               	movlw	1
  1469   001066  6E35               	movwf	dsReadData@address^0,c
  1470   001068  EC20  F00D         	call	_dsReadData	;wreg free
  1471   00106C  0E7F               	movlw	127
  1472   00106E  1435               	andwf	?_dsReadData^0,w,c
  1473   001070  6E3A               	movwf	bcd2dec@value^0,c
  1474   001072  6A3B               	clrf	(bcd2dec@value+1)^0,c
  1475   001074  EC66  F00D         	call	_bcd2dec	;wreg free
  1476   001078  C03A  F03E         	movff	?_bcd2dec,lcdInt@val
  1477   00107C  C03B  F03F         	movff	?_bcd2dec+1,lcdInt@val+1
  1478   001080  EC59  F00A         	call	_lcdInt	;wreg free
  1479   001084                     
  1480                           ;output.c: 55:         lcdData(':');
  1481   001084  0E3A               	movlw	58
  1482   001086  ECE5  F00E         	call	_lcdData
  1483   00108A                     
  1484                           ;output.c: 56:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)));
  1485   00108A  0E00               	movlw	0
  1486   00108C  6E36               	movwf	(dsReadData@address+1)^0,c
  1487   00108E  0E02               	movlw	2
  1488   001090  6E35               	movwf	dsReadData@address^0,c
  1489   001092  EC20  F00D         	call	_dsReadData	;wreg free
  1490   001096  0E7F               	movlw	127
  1491   001098  1435               	andwf	?_dsReadData^0,w,c
  1492   00109A  6E3A               	movwf	bcd2dec@value^0,c
  1493   00109C  6A3B               	clrf	(bcd2dec@value+1)^0,c
  1494   00109E  EC66  F00D         	call	_bcd2dec	;wreg free
  1495   0010A2  C03A  F03E         	movff	?_bcd2dec,lcdInt@val
  1496   0010A6  C03B  F03F         	movff	?_bcd2dec+1,lcdInt@val+1
  1497   0010AA  EC59  F00A         	call	_lcdInt	;wreg free
  1498                           
  1499                           ;output.c: 57:         lcdData(':');
  1500   0010AE  0E3A               	movlw	58
  1501   0010B0  ECE5  F00E         	call	_lcdData
  1502   0010B4                     l568:
  1503   0010B4  0012               	return		;funcret
  1504   0010B6                     __end_of_outputPrint:
  1505                           	callstack 0
  1506                           
  1507 ;; *************** function _lcdString *****************
  1508 ;; Defined at:
  1509 ;;		line 168 in file "lcd.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  str             1    3[COMRAM] PTR const unsigned char 
  1512 ;;		 -> STR_10(17), STR_9(17), STR_8(12), STR_7(12), 
  1513 ;;		 -> STR_6(16), STR_5(16), STR_4(16), STR_3(16), 
  1514 ;;		 -> STR_2(16), STR_1(16), 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1526 ;;      Params:         1       0       0       0       0       0       0       0       0
  1527 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1529 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1530 ;;Total ram usage:        1 bytes
  1531 ;; Hardware stack levels used: 1
  1532 ;; Hardware stack levels required when called: 3
  1533 ;; This function calls:
  1534 ;;		_lcdData
  1535 ;; This function is called by:
  1536 ;;		_outputPrint
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text5
  1541   001BB4                     __ptext5:
  1542                           	callstack 0
  1543   001BB4                     _lcdString:
  1544                           	callstack 25
  1545   001BB4                     
  1546                           ;lcd.c: 169:     while(*str) {
  1547   001BB4  EFE5  F00D         	goto	l2967
  1548   001BB8                     l2963:
  1549                           
  1550                           ;lcd.c: 170:         lcdData(*str++);
  1551   001BB8  C02B  FFF6         	movff	lcdString@str,tblptrl
  1552   001BBC                     	if	1	;There is more than 1 active tblptr byte
  1553   001BBC  0E08               	movlw	high __smallconst
  1554   001BBE  6EF7               	movwf	tblptrh,c
  1555   001BC0                     	endif
  1556   001BC0                     	if	0	;tblptru may be non-zero
  1557   001BC0                     	endif
  1558   001BC0                     	if	0	;tblptru may be non-zero
  1559   001BC0                     	endif
  1560   001BC0  0008               	tblrd		*
  1561   001BC2  50F5               	movf	tablat,w,c
  1562   001BC4  ECE5  F00E         	call	_lcdData
  1563   001BC8  2A2B               	incf	lcdString@str^0,f,c
  1564   001BCA                     l2967:
  1565                           
  1566                           ;lcd.c: 169:     while(*str) {
  1567   001BCA  C02B  FFF6         	movff	lcdString@str,tblptrl
  1568   001BCE                     	if	1	;There is more than 1 active tblptr byte
  1569   001BCE  0E08               	movlw	high __smallconst
  1570   001BD0  6EF7               	movwf	tblptrh,c
  1571   001BD2                     	endif
  1572   001BD2                     	if	0	;tblptru may be non-zero
  1573   001BD2                     	endif
  1574   001BD2                     	if	0	;tblptru may be non-zero
  1575   001BD2                     	endif
  1576   001BD2  0008               	tblrd		*
  1577   001BD4  50F5               	movf	tablat,w,c
  1578   001BD6  0900               	iorlw	0
  1579   001BD8  A4D8               	btfss	status,2,c
  1580   001BDA  EFF1  F00D         	goto	u2501
  1581   001BDE  EFF3  F00D         	goto	u2500
  1582   001BE2                     u2501:
  1583   001BE2  EFDC  F00D         	goto	l2963
  1584   001BE6                     u2500:
  1585   001BE6  0012               	return		;funcret
  1586   001BE8                     __end_of_lcdString:
  1587                           	callstack 0
  1588                           
  1589 ;; *************** function _lcdInt *****************
  1590 ;; Defined at:
  1591 ;;		line 174 in file "lcd.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  val             2   22[COMRAM] int 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;		None
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  1    wreg      void 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         2       0       0       0       0       0       0       0       0
  1606 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1608 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1609 ;;Total ram usage:        2 bytes
  1610 ;; Hardware stack levels used: 1
  1611 ;; Hardware stack levels required when called: 3
  1612 ;; This function calls:
  1613 ;;		___awdiv
  1614 ;;		___awmod
  1615 ;;		_lcdData
  1616 ;; This function is called by:
  1617 ;;		_outputPrint
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text6
  1622   0014B2                     __ptext6:
  1623                           	callstack 0
  1624   0014B2                     _lcdInt:
  1625                           	callstack 25
  1626   0014B2                     
  1627                           ;lcd.c: 175:     if (val < 0) {
  1628   0014B2  BE3F               	btfsc	(lcdInt@val+1)^0,7,c
  1629   0014B4  EF60  F00A         	goto	u2510
  1630   0014B8  EF5E  F00A         	goto	u2511
  1631   0014BC                     u2511:
  1632   0014BC  EF67  F00A         	goto	l2975
  1633   0014C0                     u2510:
  1634   0014C0                     
  1635                           ;lcd.c: 176:         val = val * (-1);
  1636   0014C0  6C3E               	negf	lcdInt@val^0,c
  1637   0014C2  1E3F               	comf	(lcdInt@val+1)^0,f,c
  1638   0014C4  B0D8               	btfsc	status,0,c
  1639   0014C6  2A3F               	incf	(lcdInt@val+1)^0,f,c
  1640   0014C8                     
  1641                           ;lcd.c: 177:         lcdData('-');
  1642   0014C8  0E2D               	movlw	45
  1643   0014CA  ECE5  F00E         	call	_lcdData
  1644   0014CE                     l2975:
  1645                           
  1646                           ;lcd.c: 179:     lcdData((val / 10000) % 10 + 48);
  1647   0014CE  0E27               	movlw	39
  1648   0014D0  6E2B               	movwf	(___awdiv@divisor+1)^0,c
  1649   0014D2  0E10               	movlw	16
  1650   0014D4  6E2A               	movwf	___awdiv@divisor^0,c
  1651   0014D6  C03E  F028         	movff	lcdInt@val,___awdiv@dividend
  1652   0014DA  C03F  F029         	movff	lcdInt@val+1,___awdiv@dividend+1
  1653   0014DE  ECD6  F00A         	call	___awdiv	;wreg free
  1654   0014E2  C028  F030         	movff	?___awdiv,___awmod@dividend
  1655   0014E6  C029  F031         	movff	?___awdiv+1,___awmod@dividend+1
  1656   0014EA  0E00               	movlw	0
  1657   0014EC  6E33               	movwf	(___awmod@divisor+1)^0,c
  1658   0014EE  0E0A               	movlw	10
  1659   0014F0  6E32               	movwf	___awmod@divisor^0,c
  1660   0014F2  EC38  F00B         	call	___awmod	;wreg free
  1661   0014F6  5030               	movf	?___awmod^0,w,c
  1662   0014F8  0F30               	addlw	48
  1663   0014FA  ECE5  F00E         	call	_lcdData
  1664   0014FE                     
  1665                           ;lcd.c: 180:     lcdData((val / 1000) % 10 + 48);
  1666   0014FE  0E03               	movlw	3
  1667   001500  6E2B               	movwf	(___awdiv@divisor+1)^0,c
  1668   001502  0EE8               	movlw	232
  1669   001504  6E2A               	movwf	___awdiv@divisor^0,c
  1670   001506  C03E  F028         	movff	lcdInt@val,___awdiv@dividend
  1671   00150A  C03F  F029         	movff	lcdInt@val+1,___awdiv@dividend+1
  1672   00150E  ECD6  F00A         	call	___awdiv	;wreg free
  1673   001512  C028  F030         	movff	?___awdiv,___awmod@dividend
  1674   001516  C029  F031         	movff	?___awdiv+1,___awmod@dividend+1
  1675   00151A  0E00               	movlw	0
  1676   00151C  6E33               	movwf	(___awmod@divisor+1)^0,c
  1677   00151E  0E0A               	movlw	10
  1678   001520  6E32               	movwf	___awmod@divisor^0,c
  1679   001522  EC38  F00B         	call	___awmod	;wreg free
  1680   001526  5030               	movf	?___awmod^0,w,c
  1681   001528  0F30               	addlw	48
  1682   00152A  ECE5  F00E         	call	_lcdData
  1683   00152E                     
  1684                           ;lcd.c: 181:     lcdData((val / 100) % 10 + 48);
  1685   00152E  0E00               	movlw	0
  1686   001530  6E2B               	movwf	(___awdiv@divisor+1)^0,c
  1687   001532  0E64               	movlw	100
  1688   001534  6E2A               	movwf	___awdiv@divisor^0,c
  1689   001536  C03E  F028         	movff	lcdInt@val,___awdiv@dividend
  1690   00153A  C03F  F029         	movff	lcdInt@val+1,___awdiv@dividend+1
  1691   00153E  ECD6  F00A         	call	___awdiv	;wreg free
  1692   001542  C028  F030         	movff	?___awdiv,___awmod@dividend
  1693   001546  C029  F031         	movff	?___awdiv+1,___awmod@dividend+1
  1694   00154A  0E00               	movlw	0
  1695   00154C  6E33               	movwf	(___awmod@divisor+1)^0,c
  1696   00154E  0E0A               	movlw	10
  1697   001550  6E32               	movwf	___awmod@divisor^0,c
  1698   001552  EC38  F00B         	call	___awmod	;wreg free
  1699   001556  5030               	movf	?___awmod^0,w,c
  1700   001558  0F30               	addlw	48
  1701   00155A  ECE5  F00E         	call	_lcdData
  1702   00155E                     
  1703                           ;lcd.c: 182:     lcdData((val / 10) % 10 + 48);
  1704   00155E  0E00               	movlw	0
  1705   001560  6E2B               	movwf	(___awdiv@divisor+1)^0,c
  1706   001562  0E0A               	movlw	10
  1707   001564  6E2A               	movwf	___awdiv@divisor^0,c
  1708   001566  C03E  F028         	movff	lcdInt@val,___awdiv@dividend
  1709   00156A  C03F  F029         	movff	lcdInt@val+1,___awdiv@dividend+1
  1710   00156E  ECD6  F00A         	call	___awdiv	;wreg free
  1711   001572  C028  F030         	movff	?___awdiv,___awmod@dividend
  1712   001576  C029  F031         	movff	?___awdiv+1,___awmod@dividend+1
  1713   00157A  0E00               	movlw	0
  1714   00157C  6E33               	movwf	(___awmod@divisor+1)^0,c
  1715   00157E  0E0A               	movlw	10
  1716   001580  6E32               	movwf	___awmod@divisor^0,c
  1717   001582  EC38  F00B         	call	___awmod	;wreg free
  1718   001586  5030               	movf	?___awmod^0,w,c
  1719   001588  0F30               	addlw	48
  1720   00158A  ECE5  F00E         	call	_lcdData
  1721   00158E                     
  1722                           ;lcd.c: 183:     lcdData((val / 1) % 10 + 48);
  1723   00158E  C03E  F030         	movff	lcdInt@val,___awmod@dividend
  1724   001592  C03F  F031         	movff	lcdInt@val+1,___awmod@dividend+1
  1725   001596  0E00               	movlw	0
  1726   001598  6E33               	movwf	(___awmod@divisor+1)^0,c
  1727   00159A  0E0A               	movlw	10
  1728   00159C  6E32               	movwf	___awmod@divisor^0,c
  1729   00159E  EC38  F00B         	call	___awmod	;wreg free
  1730   0015A2  5030               	movf	?___awmod^0,w,c
  1731   0015A4  0F30               	addlw	48
  1732   0015A6  ECE5  F00E         	call	_lcdData
  1733   0015AA  0012               	return		;funcret
  1734   0015AC                     __end_of_lcdInt:
  1735                           	callstack 0
  1736                           
  1737 ;; *************** function _lcdData *****************
  1738 ;; Defined at:
  1739 ;;		line 108 in file "lcd.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  valor           1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  valor           1    2[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        1 bytes
  1758 ;; Hardware stack levels used: 1
  1759 ;; Hardware stack levels required when called: 2
  1760 ;; This function calls:
  1761 ;;		_Delay40us
  1762 ;;		_lcdCommand4bits
  1763 ;; This function is called by:
  1764 ;;		_lcdString
  1765 ;;		_lcdInt
  1766 ;;		_outputPrint
  1767 ;;		_printf
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text7
  1772   001DCA                     __ptext7:
  1773                           	callstack 0
  1774   001DCA                     _lcdData:
  1775                           	callstack 25
  1776                           
  1777                           ;incstack = 0
  1778                           ;lcdData@valor stored from wreg
  1779   001DCA  6E2A               	movwf	lcdData@valor^0,c
  1780   001DCC                     
  1781                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  1782   001DCC  0E01               	movlw	1
  1783   001DCE  6E28               	movwf	lcdCommand4bits@data^0,c
  1784   001DD0  502A               	movf	lcdData@valor^0,w,c
  1785   001DD2  EC09  F00C         	call	_lcdCommand4bits
  1786                           
  1787                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  1788   001DD6  0E01               	movlw	1
  1789   001DD8  6E28               	movwf	lcdCommand4bits@data^0,c
  1790   001DDA  382A               	swapf	lcdData@valor^0,w,c
  1791   001DDC  0BF0               	andlw	240
  1792   001DDE  EC09  F00C         	call	_lcdCommand4bits
  1793                           
  1794                           ;lcd.c: 113:     Delay40us();
  1795   001DE2  EC01  F00F         	call	_Delay40us	;wreg free
  1796   001DE6  0012               	return		;funcret
  1797   001DE8                     __end_of_lcdData:
  1798                           	callstack 0
  1799                           
  1800 ;; *************** function _getTime *****************
  1801 ;; Defined at:
  1802 ;;		line 29 in file "var.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  2    0[COMRAM] int 
  1809 ;; Registers used:
  1810 ;;		None
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1816 ;;      Params:         2       0       0       0       0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1819 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1820 ;;Total ram usage:        2 bytes
  1821 ;; Hardware stack levels used: 1
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_outputPrint
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text8
  1830   001E7A                     __ptext8:
  1831                           	callstack 0
  1832   001E7A                     _getTime:
  1833                           	callstack 28
  1834   001E7A                     
  1835                           ;var.c: 30:     return time;
  1836   001E7A  C008  F028         	movff	_time,?_getTime
  1837   001E7E  C009  F029         	movff	_time+1,?_getTime+1
  1838   001E82  0012               	return		;funcret
  1839   001E84                     __end_of_getTime:
  1840                           	callstack 0
  1841                           
  1842 ;; *************** function _getLanguage *****************
  1843 ;; Defined at:
  1844 ;;		line 45 in file "var.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      unsigned char 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_outputPrint
  1868 ;;		_smLoop
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text9
  1873   001EA2                     __ptext9:
  1874                           	callstack 0
  1875   001EA2                     _getLanguage:
  1876                           	callstack 28
  1877   001EA2                     
  1878                           ;var.c: 46:     return language;
  1879   001EA2  5015               	movf	_language^0,w,c
  1880   001EA4  0012               	return		;funcret
  1881   001EA6                     __end_of_getLanguage:
  1882                           	callstack 0
  1883                           
  1884 ;; *************** function _getAlarmLevel *****************
  1885 ;; Defined at:
  1886 ;;		line 37 in file "var.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    0[COMRAM] int 
  1893 ;; Registers used:
  1894 ;;		None
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1900 ;;      Params:         2       0       0       0       0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1903 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1904 ;;Total ram usage:        2 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_outputPrint
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text10
  1914   001E84                     __ptext10:
  1915                           	callstack 0
  1916   001E84                     _getAlarmLevel:
  1917                           	callstack 28
  1918   001E84                     
  1919                           ;var.c: 38:     return alarmLevel;
  1920   001E84  C006  F028         	movff	_alarmLevel,?_getAlarmLevel
  1921   001E88  C007  F029         	movff	_alarmLevel+1,?_getAlarmLevel+1
  1922   001E8C  0012               	return		;funcret
  1923   001E8E                     __end_of_getAlarmLevel:
  1924                           	callstack 0
  1925                           
  1926 ;; *************** function _dsReadData *****************
  1927 ;; Defined at:
  1928 ;;		line 31 in file "ds1307.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  address         2   13[COMRAM] int 
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;  result          2   16[COMRAM] int 
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  2   13[COMRAM] int 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2, status,0, cstack
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1942 ;;      Params:         2       0       0       0       0       0       0       0       0
  1943 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1944 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1945 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1946 ;;Total ram usage:        5 bytes
  1947 ;; Hardware stack levels used: 1
  1948 ;; Hardware stack levels required when called: 4
  1949 ;; This function calls:
  1950 ;;		_i2cReadByte
  1951 ;;		_i2cWriteByte
  1952 ;; This function is called by:
  1953 ;;		_outputPrint
  1954 ;;		_dsStartClock
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text11
  1959   001A40                     __ptext11:
  1960                           	callstack 0
  1961   001A40                     _dsReadData:
  1962                           	callstack 24
  1963   001A40                     
  1964                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  1965   001A40  0E00               	movlw	0
  1966   001A42  6E2F               	movwf	i2cWriteByte@send_stop^0,c
  1967   001A44  0EDE               	movlw	222
  1968   001A46  6E30               	movwf	i2cWriteByte@byte^0,c
  1969   001A48  0E01               	movlw	1
  1970   001A4A  EC76  F00C         	call	_i2cWriteByte
  1971                           
  1972                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  1973   001A4E  0E00               	movlw	0
  1974   001A50  6E2F               	movwf	i2cWriteByte@send_stop^0,c
  1975   001A52  C035  F030         	movff	dsReadData@address,i2cWriteByte@byte
  1976   001A56  0E00               	movlw	0
  1977   001A58  EC76  F00C         	call	_i2cWriteByte
  1978                           
  1979                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  1980   001A5C  0E00               	movlw	0
  1981   001A5E  6E2F               	movwf	i2cWriteByte@send_stop^0,c
  1982   001A60  0EDF               	movlw	223
  1983   001A62  6E30               	movwf	i2cWriteByte@byte^0,c
  1984   001A64  0E01               	movlw	1
  1985   001A66  EC76  F00C         	call	_i2cWriteByte
  1986                           
  1987                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  1988   001A6A  0E01               	movlw	1
  1989   001A6C  6E2F               	movwf	i2cReadByte@send_stop^0,c
  1990   001A6E  0E01               	movlw	1
  1991   001A70  ECD2  F00C         	call	_i2cReadByte
  1992   001A74  6E37               	movwf	??_dsReadData^0,c
  1993   001A76  5037               	movf	??_dsReadData^0,w,c
  1994   001A78  6E38               	movwf	dsReadData@result^0,c
  1995   001A7A  6A39               	clrf	(dsReadData@result+1)^0,c
  1996   001A7C                     
  1997                           ;ds1307.c: 37:  return result;
  1998   001A7C  C038  F035         	movff	dsReadData@result,?_dsReadData
  1999   001A80  C039  F036         	movff	dsReadData@result+1,?_dsReadData+1
  2000   001A84  0012               	return		;funcret
  2001   001A86                     __end_of_dsReadData:
  2002                           	callstack 0
  2003                           
  2004 ;; *************** function _i2cReadByte *****************
  2005 ;; Defined at:
  2006 ;;		line 131 in file "soft_i2c.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  nack            1    wreg     unsigned char 
  2009 ;;  send_stop       1    7[COMRAM] unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  nack            1    9[COMRAM] unsigned char 
  2012 ;;  bit             2   10[COMRAM] unsigned int 
  2013 ;;  byte            1   12[COMRAM] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      unsigned char 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2023 ;;      Params:         1       0       0       0       0       0       0       0       0
  2024 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2025 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2026 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2027 ;;Total ram usage:        6 bytes
  2028 ;; Hardware stack levels used: 1
  2029 ;; Hardware stack levels required when called: 3
  2030 ;; This function calls:
  2031 ;;		_i2c_read_bit
  2032 ;;		_i2c_stop
  2033 ;;		_i2c_write_bit
  2034 ;; This function is called by:
  2035 ;;		_dsReadData
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text12
  2040   0019A4                     __ptext12:
  2041                           	callstack 0
  2042   0019A4                     _i2cReadByte:
  2043                           	callstack 24
  2044                           
  2045                           ;incstack = 0
  2046                           ;i2cReadByte@nack stored from wreg
  2047   0019A4  6E31               	movwf	i2cReadByte@nack^0,c
  2048   0019A6                     
  2049                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  2050   0019A6  0E00               	movlw	0
  2051   0019A8  6E34               	movwf	i2cReadByte@byte^0,c
  2052                           
  2053                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  2054   0019AA  0E00               	movlw	0
  2055   0019AC  6E33               	movwf	(i2cReadByte@bit+1)^0,c
  2056   0019AE  0E00               	movlw	0
  2057   0019B0  6E32               	movwf	i2cReadByte@bit^0,c
  2058   0019B2                     l2813:
  2059                           
  2060                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  2061   0019B2  ECF4  F00D         	call	_i2c_read_bit	;wreg free
  2062   0019B6  6E30               	movwf	??_i2cReadByte^0,c
  2063   0019B8  5034               	movf	i2cReadByte@byte^0,w,c
  2064   0019BA  2434               	addwf	i2cReadByte@byte^0,w,c
  2065   0019BC  1030               	iorwf	??_i2cReadByte^0,w,c
  2066   0019BE  6E34               	movwf	i2cReadByte@byte^0,c
  2067   0019C0                     
  2068                           ;soft_i2c.c: 136:  }
  2069   0019C0  4A32               	infsnz	i2cReadByte@bit^0,f,c
  2070   0019C2  2A33               	incf	(i2cReadByte@bit+1)^0,f,c
  2071   0019C4  5033               	movf	(i2cReadByte@bit+1)^0,w,c
  2072   0019C6  E109               	bnz	u2320
  2073   0019C8  0E08               	movlw	8
  2074   0019CA  5C32               	subwf	i2cReadByte@bit^0,w,c
  2075   0019CC  A0D8               	btfss	status,0,c
  2076   0019CE  EFEB  F00C         	goto	u2321
  2077   0019D2  EFED  F00C         	goto	u2320
  2078   0019D6                     u2321:
  2079   0019D6  EFD9  F00C         	goto	l2813
  2080   0019DA                     u2320:
  2081   0019DA                     
  2082                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  2083   0019DA  5031               	movf	i2cReadByte@nack^0,w,c
  2084   0019DC  ECA6  F00C         	call	_i2c_write_bit
  2085   0019E0                     
  2086                           ;soft_i2c.c: 138:  if (send_stop) {
  2087   0019E0  502F               	movf	i2cReadByte@send_stop^0,w,c
  2088   0019E2  B4D8               	btfsc	status,2,c
  2089   0019E4  EFF6  F00C         	goto	u2331
  2090   0019E8  EFF8  F00C         	goto	u2330
  2091   0019EC                     u2331:
  2092   0019EC  EFFA  F00C         	goto	l2825
  2093   0019F0                     u2330:
  2094   0019F0                     
  2095                           ;soft_i2c.c: 139:   i2c_stop();
  2096   0019F0  EC52  F00E         	call	_i2c_stop	;wreg free
  2097   0019F4                     l2825:
  2098                           
  2099                           ;soft_i2c.c: 141:  return byte;
  2100   0019F4  5034               	movf	i2cReadByte@byte^0,w,c
  2101   0019F6  0012               	return		;funcret
  2102   0019F8                     __end_of_i2cReadByte:
  2103                           	callstack 0
  2104                           
  2105 ;; *************** function _bcd2dec *****************
  2106 ;; Defined at:
  2107 ;;		line 14 in file "ds1307.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  value           2   18[COMRAM] int 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  2   18[COMRAM] int 
  2114 ;; Registers used:
  2115 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2121 ;;      Params:         2       0       0       0       0       0       0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2123 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2124 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2125 ;;Total ram usage:        4 bytes
  2126 ;; Hardware stack levels used: 1
  2127 ;; Hardware stack levels required when called: 1
  2128 ;; This function calls:
  2129 ;;		___awdiv
  2130 ;;		___wmul
  2131 ;; This function is called by:
  2132 ;;		_outputPrint
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text13
  2137   001ACC                     __ptext13:
  2138                           	callstack 0
  2139   001ACC                     _bcd2dec:
  2140                           	callstack 27
  2141   001ACC                     
  2142                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  2143   001ACC  0E0F               	movlw	15
  2144   001ACE  143A               	andwf	bcd2dec@value^0,w,c
  2145   001AD0  6E3C               	movwf	??_bcd2dec^0,c
  2146   001AD2  0E00               	movlw	0
  2147   001AD4  143B               	andwf	(bcd2dec@value+1)^0,w,c
  2148   001AD6  6E3D               	movwf	(??_bcd2dec+1)^0,c
  2149   001AD8  0E00               	movlw	0
  2150   001ADA  6E2B               	movwf	(___awdiv@divisor+1)^0,c
  2151   001ADC  0E10               	movlw	16
  2152   001ADE  6E2A               	movwf	___awdiv@divisor^0,c
  2153   001AE0  C03A  F028         	movff	bcd2dec@value,___awdiv@dividend
  2154   001AE4  C03B  F029         	movff	bcd2dec@value+1,___awdiv@dividend+1
  2155   001AE8  ECD6  F00A         	call	___awdiv	;wreg free
  2156   001AEC  C028  F030         	movff	?___awdiv,___wmul@multiplier
  2157   001AF0  C029  F031         	movff	?___awdiv+1,___wmul@multiplier+1
  2158   001AF4  0E00               	movlw	0
  2159   001AF6  6E33               	movwf	(___wmul@multiplicand+1)^0,c
  2160   001AF8  0E0A               	movlw	10
  2161   001AFA  6E32               	movwf	___wmul@multiplicand^0,c
  2162   001AFC  ECD2  F00E         	call	___wmul	;wreg free
  2163   001B00  503C               	movf	??_bcd2dec^0,w,c
  2164   001B02  2430               	addwf	?___wmul^0,w,c
  2165   001B04  6E3A               	movwf	?_bcd2dec^0,c
  2166   001B06  503D               	movf	(??_bcd2dec+1)^0,w,c
  2167   001B08  2031               	addwfc	(?___wmul+1)^0,w,c
  2168   001B0A  6E3B               	movwf	(?_bcd2dec+1)^0,c
  2169   001B0C  0012               	return		;funcret
  2170   001B0E                     __end_of_bcd2dec:
  2171                           	callstack 0
  2172                           
  2173 ;; *************** function ___wmul *****************
  2174 ;; Defined at:
  2175 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  multiplier      2    8[COMRAM] unsigned int 
  2178 ;;  multiplicand    2   10[COMRAM] unsigned int 
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;  product         2   12[COMRAM] unsigned int 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  2    8[COMRAM] unsigned int 
  2183 ;; Registers used:
  2184 ;;		wreg, status,2, status,0, prodl, prodh
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2190 ;;      Params:         4       0       0       0       0       0       0       0       0
  2191 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2193 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2194 ;;Total ram usage:        6 bytes
  2195 ;; Hardware stack levels used: 1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_bcd2dec
  2200 ;;		_pwmSet1
  2201 ;;		_pwmSet2
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text14
  2206   001DA4                     __ptext14:
  2207                           	callstack 0
  2208   001DA4                     ___wmul:
  2209                           	callstack 27
  2210   001DA4  5030               	movf	___wmul@multiplier^0,w,c
  2211   001DA6  0232               	mulwf	___wmul@multiplicand^0,c
  2212   001DA8  CFF3 F034          	movff	prodl,___wmul@product
  2213   001DAC  CFF4 F035          	movff	prodh,___wmul@product+1
  2214   001DB0  5030               	movf	___wmul@multiplier^0,w,c
  2215   001DB2  0233               	mulwf	(___wmul@multiplicand+1)^0,c
  2216   001DB4  50F3               	movf	243,w,c
  2217   001DB6  2635               	addwf	(___wmul@product+1)^0,f,c
  2218   001DB8  5031               	movf	(___wmul@multiplier+1)^0,w,c
  2219   001DBA  0232               	mulwf	___wmul@multiplicand^0,c
  2220   001DBC  50F3               	movf	243,w,c
  2221   001DBE  2635               	addwf	(___wmul@product+1)^0,f,c
  2222   001DC0  C034  F030         	movff	___wmul@product,?___wmul
  2223   001DC4  C035  F031         	movff	___wmul@product+1,?___wmul+1
  2224   001DC8  0012               	return		;funcret
  2225   001DCA                     __end_of___wmul:
  2226                           	callstack 0
  2227                           
  2228 ;; *************** function _getState *****************
  2229 ;; Defined at:
  2230 ;;		line 21 in file "var.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      unsigned char 
  2237 ;; Registers used:
  2238 ;;		wreg, status,2
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2244 ;;      Params:         0       0       0       0       0       0       0       0       0
  2245 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2247 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2248 ;;Total ram usage:        0 bytes
  2249 ;; Hardware stack levels used: 1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_smLoop
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text15
  2258   001EA6                     __ptext15:
  2259                           	callstack 0
  2260   001EA6                     _getState:
  2261                           	callstack 29
  2262   001EA6                     
  2263                           ;var.c: 22:     return state;
  2264   001EA6  5016               	movf	_state^0,w,c
  2265   001EA8  0012               	return		;funcret
  2266   001EAA                     __end_of_getState:
  2267                           	callstack 0
  2268                           
  2269 ;; *************** function _eventRead *****************
  2270 ;; Defined at:
  2271 ;;		line 31 in file "event.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  key             2    9[COMRAM] int 
  2276 ;;  ev              2    6[COMRAM] int 
  2277 ;;  data            1    8[COMRAM] unsigned char 
  2278 ;;  prot            1    5[COMRAM] PTR unsigned char 
  2279 ;;		 -> prot(4), 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  2    2[COMRAM] unsigned int 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2289 ;;      Params:         2       0       0       0       0       0       0       0       0
  2290 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2291 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2292 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2293 ;;Total ram usage:        9 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 1
  2296 ;; This function calls:
  2297 ;;		_getProt
  2298 ;;		_kpRead
  2299 ;;		_serialRead
  2300 ;;		_serialSend
  2301 ;;		_setProt
  2302 ;; This function is called by:
  2303 ;;		_smLoop
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text16
  2308   0010B6                     __ptext16:
  2309                           	callstack 0
  2310   0010B6                     _eventRead:
  2311                           	callstack 28
  2312   0010B6                     
  2313                           ;event.c: 32:     int key;;event.c: 33:     int ev = EV_NOEVENT;
  2314   0010B6  0E00               	movlw	0
  2315   0010B8  6E2F               	movwf	(eventRead@ev+1)^0,c
  2316   0010BA  0E06               	movlw	6
  2317   0010BC  6E2E               	movwf	eventRead@ev^0,c
  2318   0010BE                     
  2319                           ;event.c: 34:     key = kpRead();
  2320   0010BE  EC55  F00F         	call	_kpRead	;wreg free
  2321   0010C2  6E2C               	movwf	??_eventRead^0,c
  2322   0010C4  502C               	movf	??_eventRead^0,w,c
  2323   0010C6  6E31               	movwf	eventRead@key^0,c
  2324   0010C8  6A32               	clrf	(eventRead@key+1)^0,c
  2325   0010CA                     
  2326                           ;event.c: 35:     if (((key) & (1<<4))) {
  2327   0010CA  A831               	btfss	eventRead@key^0,4,c
  2328   0010CC  EF6A  F008         	goto	u2561
  2329   0010D0  EF6C  F008         	goto	u2560
  2330   0010D4                     u2561:
  2331   0010D4  EF70  F008         	goto	l3033
  2332   0010D8                     u2560:
  2333   0010D8                     
  2334                           ;event.c: 36:         ev = EV_B_4;
  2335   0010D8  0E00               	movlw	0
  2336   0010DA  6E2F               	movwf	(eventRead@ev+1)^0,c
  2337   0010DC  0E04               	movlw	4
  2338   0010DE  6E2E               	movwf	eventRead@ev^0,c
  2339   0010E0                     l3033:
  2340                           
  2341                           ;event.c: 38:     if (key != key_ant) {
  2342   0010E0  5010               	movf	_key_ant^0,w,c
  2343   0010E2  1831               	xorwf	eventRead@key^0,w,c
  2344   0010E4  E109               	bnz	u2570
  2345   0010E6  5011               	movf	(_key_ant+1)^0,w,c
  2346   0010E8  1832               	xorwf	(eventRead@key+1)^0,w,c
  2347   0010EA  B4D8               	btfsc	status,2,c
  2348   0010EC  EF7A  F008         	goto	u2571
  2349   0010F0  EF7C  F008         	goto	u2570
  2350   0010F4                     u2571:
  2351   0010F4  EFA8  F008         	goto	l3051
  2352   0010F8                     u2570:
  2353   0010F8                     
  2354                           ;event.c: 39:         if (((key) & (1<<0))) {
  2355   0010F8  A031               	btfss	eventRead@key^0,0,c
  2356   0010FA  EF81  F008         	goto	u2581
  2357   0010FE  EF83  F008         	goto	u2580
  2358   001102                     u2581:
  2359   001102  EF87  F008         	goto	l3039
  2360   001106                     u2580:
  2361   001106                     
  2362                           ;event.c: 40:             ev = EV_B_0;
  2363   001106  0E00               	movlw	0
  2364   001108  6E2F               	movwf	(eventRead@ev+1)^0,c
  2365   00110A  0E00               	movlw	0
  2366   00110C  6E2E               	movwf	eventRead@ev^0,c
  2367   00110E                     l3039:
  2368                           
  2369                           ;event.c: 43:         if (((key) & (1<<1))) {
  2370   00110E  A231               	btfss	eventRead@key^0,1,c
  2371   001110  EF8C  F008         	goto	u2591
  2372   001114  EF8E  F008         	goto	u2590
  2373   001118                     u2591:
  2374   001118  EF92  F008         	goto	l3043
  2375   00111C                     u2590:
  2376   00111C                     
  2377                           ;event.c: 44:             ev = EV_B_1;
  2378   00111C  0E00               	movlw	0
  2379   00111E  6E2F               	movwf	(eventRead@ev+1)^0,c
  2380   001120  0E01               	movlw	1
  2381   001122  6E2E               	movwf	eventRead@ev^0,c
  2382   001124                     l3043:
  2383                           
  2384                           ;event.c: 47:         if (((key) & (1<<2))) {
  2385   001124  A431               	btfss	eventRead@key^0,2,c
  2386   001126  EF97  F008         	goto	u2601
  2387   00112A  EF99  F008         	goto	u2600
  2388   00112E                     u2601:
  2389   00112E  EF9D  F008         	goto	l3047
  2390   001132                     u2600:
  2391   001132                     
  2392                           ;event.c: 48:             ev = EV_B_2;
  2393   001132  0E00               	movlw	0
  2394   001134  6E2F               	movwf	(eventRead@ev+1)^0,c
  2395   001136  0E02               	movlw	2
  2396   001138  6E2E               	movwf	eventRead@ev^0,c
  2397   00113A                     l3047:
  2398                           
  2399                           ;event.c: 51:         if (((key) & (1<<3))) {
  2400   00113A  A631               	btfss	eventRead@key^0,3,c
  2401   00113C  EFA2  F008         	goto	u2611
  2402   001140  EFA4  F008         	goto	u2610
  2403   001144                     u2611:
  2404   001144  EFA8  F008         	goto	l3051
  2405   001148                     u2610:
  2406   001148                     
  2407                           ;event.c: 52:             ev = EV_B_3;
  2408   001148  0E00               	movlw	0
  2409   00114A  6E2F               	movwf	(eventRead@ev+1)^0,c
  2410   00114C  0E03               	movlw	3
  2411   00114E  6E2E               	movwf	eventRead@ev^0,c
  2412   001150                     l3051:
  2413                           
  2414                           ;event.c: 57:     key_ant = key;
  2415   001150  C031  F010         	movff	eventRead@key,_key_ant
  2416   001154  C032  F011         	movff	eventRead@key+1,_key_ant+1
  2417   001158                     
  2418                           ;event.c: 60:     unsigned char data = serialRead();
  2419   001158  EC69  F00E         	call	_serialRead	;wreg free
  2420   00115C  6E30               	movwf	eventRead@data^0,c
  2421   00115E                     
  2422                           ;event.c: 61:     serialSend(data);
  2423   00115E  5030               	movf	eventRead@data^0,w,c
  2424   001160  EC0D  F00F         	call	_serialSend
  2425   001164                     
  2426                           ;event.c: 62:     unsigned char* prot;;event.c: 63:     if (data != 0) {
  2427   001164  5030               	movf	eventRead@data^0,w,c
  2428   001166  B4D8               	btfsc	status,2,c
  2429   001168  EFB8  F008         	goto	u2621
  2430   00116C  EFBA  F008         	goto	u2620
  2431   001170                     u2621:
  2432   001170  EF21  F009         	goto	l3089
  2433   001174                     u2620:
  2434   001174                     
  2435                           ;event.c: 64:         prot = getProt();
  2436   001174  EC57  F00F         	call	_getProt	;wreg free
  2437   001178  6E2D               	movwf	eventRead@prot^0,c
  2438   00117A                     
  2439                           ;event.c: 65:         if (prot[0] == 0) {
  2440   00117A  502D               	movf	eventRead@prot^0,w,c
  2441   00117C  6ED9               	movwf	fsr2l,c
  2442   00117E  6ADA               	clrf	fsr2h,c
  2443   001180  50DF               	movf	indf2,w,c
  2444   001182  A4D8               	btfss	status,2,c
  2445   001184  EFC6  F008         	goto	u2631
  2446   001188  EFC8  F008         	goto	u2630
  2447   00118C                     u2631:
  2448   00118C  EF10  F009         	goto	l3083
  2449   001190                     u2630:
  2450   001190  EFF1  F008         	goto	l3081
  2451   001194                     l3065:
  2452                           
  2453                           ;event.c: 68:                     ev = EV_B_0;
  2454   001194  0E00               	movlw	0
  2455   001196  6E2F               	movwf	(eventRead@ev+1)^0,c
  2456   001198  0E00               	movlw	0
  2457   00119A  6E2E               	movwf	eventRead@ev^0,c
  2458                           
  2459                           ;event.c: 69:                     break;
  2460   00119C  EF21  F009         	goto	l3089
  2461   0011A0                     l3067:
  2462                           
  2463                           ;event.c: 71:                     ev = EV_B_1;
  2464   0011A0  0E00               	movlw	0
  2465   0011A2  6E2F               	movwf	(eventRead@ev+1)^0,c
  2466   0011A4  0E01               	movlw	1
  2467   0011A6  6E2E               	movwf	eventRead@ev^0,c
  2468                           
  2469                           ;event.c: 72:                     break;
  2470   0011A8  EF21  F009         	goto	l3089
  2471   0011AC                     l3069:
  2472                           
  2473                           ;event.c: 74:                     ev = EV_B_2;
  2474   0011AC  0E00               	movlw	0
  2475   0011AE  6E2F               	movwf	(eventRead@ev+1)^0,c
  2476   0011B0  0E02               	movlw	2
  2477   0011B2  6E2E               	movwf	eventRead@ev^0,c
  2478                           
  2479                           ;event.c: 75:                     break;
  2480   0011B4  EF21  F009         	goto	l3089
  2481   0011B8                     l3071:
  2482                           
  2483                           ;event.c: 77:                     ev = EV_B_3;
  2484   0011B8  0E00               	movlw	0
  2485   0011BA  6E2F               	movwf	(eventRead@ev+1)^0,c
  2486   0011BC  0E03               	movlw	3
  2487   0011BE  6E2E               	movwf	eventRead@ev^0,c
  2488                           
  2489                           ;event.c: 78:                     break;
  2490   0011C0  EF21  F009         	goto	l3089
  2491   0011C4                     l3073:
  2492                           
  2493                           ;event.c: 80:                     ev = EV_B_4;
  2494   0011C4  0E00               	movlw	0
  2495   0011C6  6E2F               	movwf	(eventRead@ev+1)^0,c
  2496   0011C8  0E04               	movlw	4
  2497   0011CA  6E2E               	movwf	eventRead@ev^0,c
  2498                           
  2499                           ;event.c: 81:                     break;
  2500   0011CC  EF21  F009         	goto	l3089
  2501   0011D0                     l3075:
  2502                           
  2503                           ;event.c: 83:                     ev = EV_NOEVENT;
  2504   0011D0  0E00               	movlw	0
  2505   0011D2  6E2F               	movwf	(eventRead@ev+1)^0,c
  2506   0011D4  0E06               	movlw	6
  2507   0011D6  6E2E               	movwf	eventRead@ev^0,c
  2508   0011D8                     
  2509                           ;event.c: 84:                     setProt('p');
  2510   0011D8  0E70               	movlw	112
  2511   0011DA  ECBE  F00E         	call	_setProt
  2512                           
  2513                           ;event.c: 86:                     break;
  2514   0011DE  EF21  F009         	goto	l3089
  2515   0011E2                     l3081:
  2516   0011E2  5030               	movf	eventRead@data^0,w,c
  2517                           
  2518                           ; Switch size 1, requested type "simple"
  2519                           ; Number of cases is 7, Range of values is 49 to 112
  2520                           ; switch strategies available:
  2521                           ; Name         Instructions Cycles
  2522                           ; simple_byte           22    12 (average)
  2523                           ;	Chosen strategy is simple_byte
  2524   0011E4  0A31               	xorlw	49	; case 49
  2525   0011E6  B4D8               	btfsc	status,2,c
  2526   0011E8  EFD0  F008         	goto	l3067
  2527   0011EC  0A03               	xorlw	3	; case 50
  2528   0011EE  B4D8               	btfsc	status,2,c
  2529   0011F0  EFD6  F008         	goto	l3069
  2530   0011F4  0A01               	xorlw	1	; case 51
  2531   0011F6  B4D8               	btfsc	status,2,c
  2532   0011F8  EFDC  F008         	goto	l3071
  2533   0011FC  0A07               	xorlw	7	; case 52
  2534   0011FE  B4D8               	btfsc	status,2,c
  2535   001200  EFE2  F008         	goto	l3073
  2536   001204  0A0D               	xorlw	13	; case 57
  2537   001206  B4D8               	btfsc	status,2,c
  2538   001208  EFCA  F008         	goto	l3065
  2539   00120C  0A69               	xorlw	105	; case 80
  2540   00120E  B4D8               	btfsc	status,2,c
  2541   001210  EFE8  F008         	goto	l3075
  2542   001214  0A20               	xorlw	32	; case 112
  2543   001216  B4D8               	btfsc	status,2,c
  2544   001218  EFE8  F008         	goto	l3075
  2545   00121C  EF21  F009         	goto	l521
  2546   001220                     l3083:
  2547                           
  2548                           ;event.c: 91:             setProt(data);
  2549   001220  5030               	movf	eventRead@data^0,w,c
  2550   001222  ECBE  F00E         	call	_setProt
  2551   001226                     
  2552                           ;event.c: 93:             if (prot_ready) {
  2553   001226  5018               	movf	_prot_ready^0,w,c
  2554   001228  B4D8               	btfsc	status,2,c
  2555   00122A  EF19  F009         	goto	u2641
  2556   00122E  EF1B  F009         	goto	u2640
  2557   001232                     u2641:
  2558   001232  EF21  F009         	goto	l3089
  2559   001236                     u2640:
  2560   001236                     
  2561                           ;event.c: 94:                 ev = EV_PROT_SERIAL;
  2562   001236  0E00               	movlw	0
  2563   001238  6E2F               	movwf	(eventRead@ev+1)^0,c
  2564   00123A  0E05               	movlw	5
  2565   00123C  6E2E               	movwf	eventRead@ev^0,c
  2566   00123E  EF21  F009         	goto	l3089
  2567   001242                     l521:
  2568   001242                     l3089:
  2569                           
  2570                           ;event.c: 100:     return ev;
  2571   001242  C02E  F02A         	movff	eventRead@ev,?_eventRead
  2572   001246  C02F  F02B         	movff	eventRead@ev+1,?_eventRead+1
  2573   00124A  0012               	return		;funcret
  2574   00124C                     __end_of_eventRead:
  2575                           	callstack 0
  2576                           
  2577 ;; *************** function _setProt *****************
  2578 ;; Defined at:
  2579 ;;		line 60 in file "var.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  newChar         1    wreg     unsigned char 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  newChar         1    0[COMRAM] unsigned char 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2593 ;;      Params:         0       0       0       0       0       0       0       0       0
  2594 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2596 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2597 ;;Total ram usage:        1 bytes
  2598 ;; Hardware stack levels used: 1
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_eventRead
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text17
  2607   001D7C                     __ptext17:
  2608                           	callstack 0
  2609   001D7C                     _setProt:
  2610                           	callstack 28
  2611                           
  2612                           ;incstack = 0
  2613                           ;setProt@newChar stored from wreg
  2614   001D7C  6E28               	movwf	setProt@newChar^0,c
  2615   001D7E                     
  2616                           ;var.c: 62:     prot[index++] = newChar;
  2617   001D7E  5014               	movf	_index^0,w,c
  2618   001D80  0F24               	addlw	low _prot
  2619   001D82  6ED9               	movwf	fsr2l,c
  2620   001D84  6ADA               	clrf	fsr2h,c
  2621   001D86  C028  FFDF         	movff	setProt@newChar,indf2
  2622   001D8A  2A14               	incf	_index^0,f,c
  2623   001D8C                     
  2624                           ;var.c: 64:     if(index == 4) prot_ready = 1;
  2625   001D8C  0E04               	movlw	4
  2626   001D8E  1814               	xorwf	_index^0,w,c
  2627   001D90  A4D8               	btfss	status,2,c
  2628   001D92  EFCD  F00E         	goto	u2551
  2629   001D96  EFCF  F00E         	goto	u2550
  2630   001D9A                     u2551:
  2631   001D9A  EFD1  F00E         	goto	l671
  2632   001D9E                     u2550:
  2633   001D9E  0E01               	movlw	1
  2634   001DA0  6E18               	movwf	_prot_ready^0,c
  2635   001DA2                     l671:
  2636   001DA2  0012               	return		;funcret
  2637   001DA4                     __end_of_setProt:
  2638                           	callstack 0
  2639                           
  2640 ;; *************** function _serialSend *****************
  2641 ;; Defined at:
  2642 ;;		line 25 in file "serial.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;  c               1    wreg     unsigned char 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;  c               1    0[COMRAM] unsigned char 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0
  2657 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2659 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2660 ;;Total ram usage:        1 bytes
  2661 ;; Hardware stack levels used: 1
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_eventRead
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text18
  2670   001E1A                     __ptext18:
  2671                           	callstack 0
  2672   001E1A                     _serialSend:
  2673                           	callstack 28
  2674                           
  2675                           ;incstack = 0
  2676                           ;serialSend@c stored from wreg
  2677   001E1A  6E28               	movwf	serialSend@c^0,c
  2678   001E1C                     l337:
  2679   001E1C  A89E               	btfss	158,4,c	;volatile
  2680   001E1E  EF13  F00F         	goto	u2521
  2681   001E22  EF15  F00F         	goto	u2520
  2682   001E26                     u2521:
  2683   001E26  EF0E  F00F         	goto	l337
  2684   001E2A                     u2520:
  2685   001E2A                     
  2686                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  2687   001E2A  C028  FFAD         	movff	serialSend@c,4013	;volatile
  2688   001E2E  0012               	return		;funcret
  2689   001E30                     __end_of_serialSend:
  2690                           	callstack 0
  2691                           
  2692 ;; *************** function _serialRead *****************
  2693 ;; Defined at:
  2694 ;;		line 30 in file "serial.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  resp            1    0[COMRAM] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      unsigned char 
  2701 ;; Registers used:
  2702 ;;		wreg, status,2, status,0
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0
  2709 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2711 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2712 ;;Total ram usage:        1 bytes
  2713 ;; Hardware stack levels used: 1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_eventRead
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text19
  2722   001CD2                     __ptext19:
  2723                           	callstack 0
  2724   001CD2                     _serialRead:
  2725                           	callstack 28
  2726   001CD2                     
  2727                           ;serial.c: 31:     char resp = 0;
  2728   001CD2  0E00               	movlw	0
  2729   001CD4  6E28               	movwf	serialRead@resp^0,c
  2730   001CD6                     
  2731                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  2732   001CD6  A2AB               	btfss	171,1,c	;volatile
  2733   001CD8  EF70  F00E         	goto	u2531
  2734   001CDC  EF72  F00E         	goto	u2530
  2735   001CE0                     u2531:
  2736   001CE0  EF74  F00E         	goto	l2995
  2737   001CE4                     u2530:
  2738   001CE4                     
  2739                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  2740   001CE4  98AB               	bcf	171,4,c	;volatile
  2741                           
  2742                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  2743   001CE6  88AB               	bsf	171,4,c	;volatile
  2744   001CE8                     l2995:
  2745                           
  2746                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  2747   001CE8  AA9E               	btfss	158,5,c	;volatile
  2748   001CEA  EF79  F00E         	goto	u2541
  2749   001CEE  EF7B  F00E         	goto	u2540
  2750   001CF2                     u2541:
  2751   001CF2  EF7D  F00E         	goto	l2999
  2752   001CF6                     u2540:
  2753   001CF6                     
  2754                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  2755   001CF6  CFAE F028          	movff	4014,serialRead@resp	;volatile
  2756   001CFA                     l2999:
  2757                           
  2758                           ;serial.c: 43:     return resp;
  2759   001CFA  5028               	movf	serialRead@resp^0,w,c
  2760   001CFC  0012               	return		;funcret
  2761   001CFE                     __end_of_serialRead:
  2762                           	callstack 0
  2763                           
  2764 ;; *************** function _kpRead *****************
  2765 ;; Defined at:
  2766 ;;		line 29 in file "keypad.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      unsigned char 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2780 ;;      Params:         0       0       0       0       0       0       0       0       0
  2781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2784 ;;Total ram usage:        0 bytes
  2785 ;; Hardware stack levels used: 1
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_eventRead
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text20
  2794   001EAA                     __ptext20:
  2795                           	callstack 0
  2796   001EAA                     _kpRead:
  2797                           	callstack 28
  2798   001EAA                     
  2799                           ;keypad.c: 30:     return valor;
  2800   001EAA  5023               	movf	_valor^0,w,c
  2801   001EAC  0012               	return		;funcret
  2802   001EAE                     __end_of_kpRead:
  2803                           	callstack 0
  2804                           
  2805 ;; *************** function _getProt *****************
  2806 ;; Defined at:
  2807 ;;		line 55 in file "var.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      PTR unsigned char 
  2814 ;; Registers used:
  2815 ;;		wreg
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         2       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        2 bytes
  2826 ;; Hardware stack levels used: 1
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_eventRead
  2831 ;;		_smLoop
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text21
  2836   001EAE                     __ptext21:
  2837                           	callstack 0
  2838   001EAE                     _getProt:
  2839                           	callstack 29
  2840   001EAE                     
  2841                           ;var.c: 57:     return prot;
  2842   001EAE  0E24               	movlw	_prot& (0+255)
  2843   001EB0  0012               	return		;funcret
  2844   001EB2                     __end_of_getProt:
  2845                           	callstack 0
  2846                           
  2847 ;; *************** function _smInit *****************
  2848 ;; Defined at:
  2849 ;;		line 10 in file "stateMachine.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, status,0, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used: 1
  2869 ;; Hardware stack levels required when called: 2
  2870 ;; This function calls:
  2871 ;;		_eventInit
  2872 ;;		_setState
  2873 ;; This function is called by:
  2874 ;;		_main
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text22
  2879   001E64                     __ptext22:
  2880                           	callstack 0
  2881   001E64                     _smInit:
  2882                           	callstack 28
  2883   001E64                     
  2884                           ;stateMachine.c: 11:     setState(STATE_ALARME);
  2885   001E64  0E00               	movlw	0
  2886   001E66  EC47  F00F         	call	_setState
  2887   001E6A                     
  2888                           ;stateMachine.c: 12:     eventInit();
  2889   001E6A  EC18  F00F         	call	_eventInit	;wreg free
  2890   001E6E  0012               	return		;funcret
  2891   001E70                     __end_of_smInit:
  2892                           	callstack 0
  2893                           
  2894 ;; *************** function _setState *****************
  2895 ;; Defined at:
  2896 ;;		line 25 in file "var.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  newState        1    wreg     unsigned char 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  newState        1    0[COMRAM] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0
  2911 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2913 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2914 ;;Total ram usage:        1 bytes
  2915 ;; Hardware stack levels used: 1
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_smInit
  2920 ;;		_smLoop
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text23
  2925   001E8E                     __ptext23:
  2926                           	callstack 0
  2927   001E8E                     _setState:
  2928                           	callstack 29
  2929                           
  2930                           ;incstack = 0
  2931                           ;setState@newState stored from wreg
  2932   001E8E  6E28               	movwf	setState@newState^0,c
  2933   001E90                     
  2934                           ;var.c: 26:     state = newState;
  2935   001E90  C028  F016         	movff	setState@newState,_state
  2936   001E94  0012               	return		;funcret
  2937   001E96                     __end_of_setState:
  2938                           	callstack 0
  2939                           
  2940 ;; *************** function _eventInit *****************
  2941 ;; Defined at:
  2942 ;;		line 18 in file "event.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;		None
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2956 ;;      Params:         0       0       0       0       0       0       0       0       0
  2957 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2959 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2960 ;;Total ram usage:        0 bytes
  2961 ;; Hardware stack levels used: 1
  2962 ;; Hardware stack levels required when called: 1
  2963 ;; This function calls:
  2964 ;;		_kpInit
  2965 ;; This function is called by:
  2966 ;;		_smInit
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text24
  2971   001E30                     __ptext24:
  2972                           	callstack 0
  2973   001E30                     _eventInit:
  2974                           	callstack 28
  2975   001E30                     
  2976                           ;event.c: 19:     kpInit();
  2977   001E30  EC2B  F00F         	call	_kpInit	;wreg free
  2978   001E34                     
  2979                           ;event.c: 21:     ev_ant = 0;
  2980   001E34  0E00               	movlw	0
  2981   001E36  6E13               	movwf	(_ev_ant+1)^0,c
  2982   001E38  0E00               	movlw	0
  2983   001E3A  6E12               	movwf	_ev_ant^0,c
  2984   001E3C                     
  2985                           ;event.c: 22:     key = 1;
  2986   001E3C  0E00               	movlw	0
  2987   001E3E  6E0F               	movwf	(_key+1)^0,c
  2988   001E40  0E01               	movlw	1
  2989   001E42  6E0E               	movwf	_key^0,c
  2990   001E44  0012               	return		;funcret
  2991   001E46                     __end_of_eventInit:
  2992                           	callstack 0
  2993                           
  2994 ;; *************** function _kpInit *****************
  2995 ;; Defined at:
  2996 ;;		line 81 in file "keypad.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;		None
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;		None
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      void 
  3003 ;; Registers used:
  3004 ;;		wreg, status,2, status,0
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3010 ;;      Params:         0       0       0       0       0       0       0       0       0
  3011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3013 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3014 ;;Total ram usage:        0 bytes
  3015 ;; Hardware stack levels used: 1
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;;		_eventInit
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text25
  3025   001E56                     __ptext25:
  3026                           	callstack 0
  3027   001E56                     _kpInit:
  3028                           	callstack 28
  3029   001E56                     
  3030                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  3031   001E56  6893               	setf	147,c	;volatile
  3032   001E58                     
  3033                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  3034   001E58  9EF1               	bcf	241,7,c	;volatile
  3035   001E5A                     
  3036                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  3037   001E5A  0E0E               	movlw	14
  3038   001E5C  6EC1               	movwf	193,c	;volatile
  3039   001E5E                     
  3040                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  3041   001E5E  0E00               	movlw	0
  3042   001E60  6E63               	movwf	99,c	;volatile
  3043   001E62  0012               	return		;funcret
  3044   001E64                     __end_of_kpInit:
  3045                           	callstack 0
  3046                           
  3047 ;; *************** function _serialInit *****************
  3048 ;; Defined at:
  3049 ;;		line 48 in file "serial.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3063 ;;      Params:         0       0       0       0       0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3066 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3067 ;;Total ram usage:        0 bytes
  3068 ;; Hardware stack levels used: 1
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_main
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text26
  3077   001DE8                     __ptext26:
  3078                           	callstack 0
  3079   001DE8                     _serialInit:
  3080                           	callstack 30
  3081   001DE8                     
  3082                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  3083   001DE8  0E2C               	movlw	44
  3084   001DEA  6EAC               	movwf	172,c	;volatile
  3085                           
  3086                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  3087   001DEC  0E90               	movlw	144
  3088   001DEE  6EAB               	movwf	171,c	;volatile
  3089                           
  3090                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  3091   001DF0  0E08               	movlw	8
  3092   001DF2  6EB8               	movwf	184,c	;volatile
  3093                           
  3094                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  3095   001DF4  0E00               	movlw	0
  3096   001DF6  6EB0               	movwf	176,c	;volatile
  3097                           
  3098                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  3099   001DF8  0E22               	movlw	34
  3100   001DFA  6EAF               	movwf	175,c	;volatile
  3101   001DFC                     
  3102                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  3103   001DFC  8C94               	bsf	148,6,c	;volatile
  3104   001DFE                     
  3105                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  3106   001DFE  8E94               	bsf	148,7,c	;volatile
  3107   001E00  0012               	return		;funcret
  3108   001E02                     __end_of_serialInit:
  3109                           	callstack 0
  3110                           
  3111 ;; *************** function _lcdInit *****************
  3112 ;; Defined at:
  3113 ;;		line 117 in file "lcd.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  i               1    3[COMRAM] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0
  3128 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3130 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3131 ;;Total ram usage:        1 bytes
  3132 ;; Hardware stack levels used: 1
  3133 ;; Hardware stack levels required when called: 3
  3134 ;; This function calls:
  3135 ;;		_Delay2ms
  3136 ;;		_lcdCommand
  3137 ;;		_lcdCommand4bits
  3138 ;; This function is called by:
  3139 ;;		_main
  3140 ;;		_outputInit
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text27
  3145   00179A                     __ptext27:
  3146                           	callstack 0
  3147   00179A                     _lcdInit:
  3148                           	callstack 27
  3149   00179A                     
  3150                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  3151   00179A  9095               	bcf	149,0,c	;volatile
  3152                           
  3153                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  3154   00179C  9E95               	bcf	149,7,c	;volatile
  3155                           
  3156                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  3157   00179E  9C95               	bcf	149,6,c	;volatile
  3158                           
  3159                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  3160   0017A0  9A95               	bcf	149,5,c	;volatile
  3161                           
  3162                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  3163   0017A2  9895               	bcf	149,4,c	;volatile
  3164                           
  3165                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  3166   0017A4  9495               	bcf	149,2,c	;volatile
  3167   0017A6                     
  3168                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  3169   0017A6  0E00               	movlw	0
  3170   0017A8  6E2B               	movwf	lcdInit@i^0,c
  3171   0017AA                     l3181:
  3172                           
  3173                           ;lcd.c: 133:         Delay2ms();
  3174   0017AA  EC24  F00E         	call	_Delay2ms	;wreg free
  3175   0017AE  2A2B               	incf	lcdInit@i^0,f,c
  3176   0017B0  0E06               	movlw	6
  3177   0017B2  642B               	cpfsgt	lcdInit@i^0,c
  3178   0017B4  EFDE  F00B         	goto	u2721
  3179   0017B8  EFE0  F00B         	goto	u2720
  3180   0017BC                     u2721:
  3181   0017BC  EFD5  F00B         	goto	l3181
  3182   0017C0                     u2720:
  3183   0017C0                     
  3184                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  3185   0017C0  0E00               	movlw	0
  3186   0017C2  6E28               	movwf	lcdCommand4bits@data^0,c
  3187   0017C4  0E30               	movlw	48
  3188   0017C6  EC09  F00C         	call	_lcdCommand4bits
  3189                           
  3190                           ;lcd.c: 138:     Delay2ms();
  3191   0017CA  EC24  F00E         	call	_Delay2ms	;wreg free
  3192                           
  3193                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  3194   0017CE  0E00               	movlw	0
  3195   0017D0  6E28               	movwf	lcdCommand4bits@data^0,c
  3196   0017D2  0E30               	movlw	48
  3197   0017D4  EC09  F00C         	call	_lcdCommand4bits
  3198                           
  3199                           ;lcd.c: 142:     Delay2ms();
  3200   0017D8  EC24  F00E         	call	_Delay2ms	;wreg free
  3201                           
  3202                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  3203   0017DC  0E00               	movlw	0
  3204   0017DE  6E28               	movwf	lcdCommand4bits@data^0,c
  3205   0017E0  0E30               	movlw	48
  3206   0017E2  EC09  F00C         	call	_lcdCommand4bits
  3207                           
  3208                           ;lcd.c: 146:     Delay2ms();
  3209   0017E6  EC24  F00E         	call	_Delay2ms	;wreg free
  3210                           
  3211                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  3212   0017EA  0E00               	movlw	0
  3213   0017EC  6E28               	movwf	lcdCommand4bits@data^0,c
  3214   0017EE  0E20               	movlw	32
  3215   0017F0  EC09  F00C         	call	_lcdCommand4bits
  3216                           
  3217                           ;lcd.c: 150:     Delay2ms();
  3218   0017F4  EC24  F00E         	call	_Delay2ms	;wreg free
  3219                           
  3220                           ;lcd.c: 153:     lcdCommand(0x28);
  3221   0017F8  0E28               	movlw	40
  3222   0017FA  ECFC  F00C         	call	_lcdCommand
  3223                           
  3224                           ;lcd.c: 154:     lcdCommand(0x06);
  3225   0017FE  0E06               	movlw	6
  3226   001800  ECFC  F00C         	call	_lcdCommand
  3227                           
  3228                           ;lcd.c: 156:     lcdCommand(0x0C);
  3229   001804  0E0C               	movlw	12
  3230   001806  ECFC  F00C         	call	_lcdCommand
  3231                           
  3232                           ;lcd.c: 157:     lcdCommand(0x01);
  3233   00180A  0E01               	movlw	1
  3234   00180C  ECFC  F00C         	call	_lcdCommand
  3235   001810  0012               	return		;funcret
  3236   001812                     __end_of_lcdInit:
  3237                           	callstack 0
  3238                           
  3239 ;; *************** function _lcdCommand *****************
  3240 ;; Defined at:
  3241 ;;		line 93 in file "lcd.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  cmd             1    wreg     unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  cmd             1    2[COMRAM] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0
  3256 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3258 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used: 1
  3261 ;; Hardware stack levels required when called: 2
  3262 ;; This function calls:
  3263 ;;		_Delay2ms
  3264 ;;		_Delay40us
  3265 ;;		_lcdCommand4bits
  3266 ;; This function is called by:
  3267 ;;		_lcdInit
  3268 ;;		_outputPrint
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text28
  3273   0019F8                     __ptext28:
  3274                           	callstack 0
  3275   0019F8                     _lcdCommand:
  3276                           	callstack 26
  3277                           
  3278                           ;incstack = 0
  3279                           ;lcdCommand@cmd stored from wreg
  3280   0019F8  6E2A               	movwf	lcdCommand@cmd^0,c
  3281   0019FA                     
  3282                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  3283   0019FA  0E00               	movlw	0
  3284   0019FC  6E28               	movwf	lcdCommand4bits@data^0,c
  3285   0019FE  502A               	movf	lcdCommand@cmd^0,w,c
  3286   001A00  EC09  F00C         	call	_lcdCommand4bits
  3287                           
  3288                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  3289   001A04  0E00               	movlw	0
  3290   001A06  6E28               	movwf	lcdCommand4bits@data^0,c
  3291   001A08  382A               	swapf	lcdCommand@cmd^0,w,c
  3292   001A0A  0BF0               	andlw	240
  3293   001A0C  EC09  F00C         	call	_lcdCommand4bits
  3294   001A10                     
  3295                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  3296   001A10  0E02               	movlw	2
  3297   001A12  182A               	xorwf	lcdCommand@cmd^0,w,c
  3298   001A14  B4D8               	btfsc	status,2,c
  3299   001A16  EF0F  F00D         	goto	u2481
  3300   001A1A  EF11  F00D         	goto	u2480
  3301   001A1E                     u2481:
  3302   001A1E  EF19  F00D         	goto	l2957
  3303   001A22                     u2480:
  3304   001A22  042A               	decf	lcdCommand@cmd^0,w,c
  3305   001A24  A4D8               	btfss	status,2,c
  3306   001A26  EF17  F00D         	goto	u2491
  3307   001A2A  EF19  F00D         	goto	u2490
  3308   001A2E                     u2491:
  3309   001A2E  EF1D  F00D         	goto	l2959
  3310   001A32                     u2490:
  3311   001A32                     l2957:
  3312                           
  3313                           ;lcd.c: 100:         Delay2ms();
  3314   001A32  EC24  F00E         	call	_Delay2ms	;wreg free
  3315                           
  3316                           ;lcd.c: 102:     } else {
  3317   001A36  EF1F  F00D         	goto	l180
  3318   001A3A                     l2959:
  3319                           
  3320                           ;lcd.c: 103:         Delay40us();
  3321   001A3A  EC01  F00F         	call	_Delay40us	;wreg free
  3322   001A3E                     l180:
  3323   001A3E  0012               	return		;funcret
  3324   001A40                     __end_of_lcdCommand:
  3325                           	callstack 0
  3326                           
  3327 ;; *************** function _lcdCommand4bits *****************
  3328 ;; Defined at:
  3329 ;;		line 52 in file "lcd.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  cmd             1    wreg     unsigned char 
  3332 ;;  data            1    0[COMRAM] unsigned char 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  cmd             1    1[COMRAM] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2, status,0, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3344 ;;      Params:         1       0       0       0       0       0       0       0       0
  3345 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3347 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3348 ;;Total ram usage:        2 bytes
  3349 ;; Hardware stack levels used: 1
  3350 ;; Hardware stack levels required when called: 1
  3351 ;; This function calls:
  3352 ;;		_pulseEnable
  3353 ;; This function is called by:
  3354 ;;		_lcdCommand
  3355 ;;		_lcdData
  3356 ;;		_lcdInit
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text29
  3361   001812                     __ptext29:
  3362                           	callstack 0
  3363   001812                     _lcdCommand4bits:
  3364                           	callstack 25
  3365                           
  3366                           ;incstack = 0
  3367                           ;lcdCommand4bits@cmd stored from wreg
  3368   001812  6E29               	movwf	lcdCommand4bits@cmd^0,c
  3369   001814                     
  3370                           ;lcd.c: 54:     if (data) {
  3371   001814  5028               	movf	lcdCommand4bits@data^0,w,c
  3372   001816  B4D8               	btfsc	status,2,c
  3373   001818  EF10  F00C         	goto	u2151
  3374   00181C  EF12  F00C         	goto	u2150
  3375   001820                     u2151:
  3376   001820  EF15  F00C         	goto	l2683
  3377   001824                     u2150:
  3378   001824                     
  3379                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  3380   001824  8083               	bsf	131,0,c	;volatile
  3381                           
  3382                           ;lcd.c: 56:     } else {
  3383   001826  EF16  F00C         	goto	l2685
  3384   00182A                     l2683:
  3385                           
  3386                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  3387   00182A  9083               	bcf	131,0,c	;volatile
  3388   00182C                     l2685:
  3389                           
  3390                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  3391   00182C  AE29               	btfss	lcdCommand4bits@cmd^0,7,c
  3392   00182E  EF1B  F00C         	goto	u2161
  3393   001832  EF1D  F00C         	goto	u2160
  3394   001836                     u2161:
  3395   001836  EF20  F00C         	goto	l2689
  3396   00183A                     u2160:
  3397   00183A                     
  3398                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  3399   00183A  8483               	bsf	131,2,c	;volatile
  3400                           
  3401                           ;lcd.c: 65:     } else {
  3402   00183C  EF21  F00C         	goto	l2691
  3403   001840                     l2689:
  3404                           
  3405                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  3406   001840  9483               	bcf	131,2,c	;volatile
  3407   001842                     l2691:
  3408                           
  3409                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  3410   001842  AC29               	btfss	lcdCommand4bits@cmd^0,6,c
  3411   001844  EF26  F00C         	goto	u2171
  3412   001848  EF28  F00C         	goto	u2170
  3413   00184C                     u2171:
  3414   00184C  EF2B  F00C         	goto	l2695
  3415   001850                     u2170:
  3416   001850                     
  3417                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  3418   001850  8883               	bsf	131,4,c	;volatile
  3419                           
  3420                           ;lcd.c: 72:     } else {
  3421   001852  EF2C  F00C         	goto	l2697
  3422   001856                     l2695:
  3423                           
  3424                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  3425   001856  9883               	bcf	131,4,c	;volatile
  3426   001858                     l2697:
  3427                           
  3428                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  3429   001858  AA29               	btfss	lcdCommand4bits@cmd^0,5,c
  3430   00185A  EF31  F00C         	goto	u2181
  3431   00185E  EF33  F00C         	goto	u2180
  3432   001862                     u2181:
  3433   001862  EF36  F00C         	goto	l2701
  3434   001866                     u2180:
  3435   001866                     
  3436                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  3437   001866  8A83               	bsf	131,5,c	;volatile
  3438                           
  3439                           ;lcd.c: 79:     } else {
  3440   001868  EF37  F00C         	goto	l2703
  3441   00186C                     l2701:
  3442                           
  3443                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  3444   00186C  9A83               	bcf	131,5,c	;volatile
  3445   00186E                     l2703:
  3446                           
  3447                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  3448   00186E  A829               	btfss	lcdCommand4bits@cmd^0,4,c
  3449   001870  EF3C  F00C         	goto	u2191
  3450   001874  EF3E  F00C         	goto	u2190
  3451   001878                     u2191:
  3452   001878  EF41  F00C         	goto	l2707
  3453   00187C                     u2190:
  3454   00187C                     
  3455                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  3456   00187C  8C83               	bsf	131,6,c	;volatile
  3457                           
  3458                           ;lcd.c: 86:     } else {
  3459   00187E  EF42  F00C         	goto	l2709
  3460   001882                     l2707:
  3461                           
  3462                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  3463   001882  9C83               	bcf	131,6,c	;volatile
  3464   001884                     l2709:
  3465                           
  3466                           ;lcd.c: 90:     pulseEnable();
  3467   001884  EC4B  F00F         	call	_pulseEnable	;wreg free
  3468   001888  0012               	return		;funcret
  3469   00188A                     __end_of_lcdCommand4bits:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _pulseEnable *****************
  3473 ;; Defined at:
  3474 ;;		line 47 in file "lcd.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_lcdCommand4bits
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text30
  3502   001E96                     __ptext30:
  3503                           	callstack 0
  3504   001E96                     _pulseEnable:
  3505                           	callstack 25
  3506   001E96                     
  3507                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  3508   001E96  8E83               	bsf	131,7,c	;volatile
  3509                           
  3510                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  3511   001E98  9E83               	bcf	131,7,c	;volatile
  3512   001E9A  0012               	return		;funcret
  3513   001E9C                     __end_of_pulseEnable:
  3514                           	callstack 0
  3515                           
  3516 ;; *************** function _Delay40us *****************
  3517 ;; Defined at:
  3518 ;;		line 36 in file "lcd.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  j               1    0[COMRAM] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0
  3533 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3535 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3536 ;;Total ram usage:        1 bytes
  3537 ;; Hardware stack levels used: 1
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_lcdCommand
  3542 ;;		_lcdData
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text31
  3547   001E02                     __ptext31:
  3548                           	callstack 0
  3549   001E02                     _Delay40us:
  3550                           	callstack 26
  3551   001E02                     
  3552                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  3553   001E02  0E00               	movlw	0
  3554   001E04  6E28               	movwf	Delay40us@j^0,c
  3555   001E06                     l2675:
  3556   001E06  2A28               	incf	Delay40us@j^0,f,c
  3557   001E08  0E43               	movlw	67
  3558   001E0A  6428               	cpfsgt	Delay40us@j^0,c
  3559   001E0C  EF0A  F00F         	goto	u2141
  3560   001E10  EF0C  F00F         	goto	u2140
  3561   001E14                     u2141:
  3562   001E14  EF03  F00F         	goto	l2675
  3563   001E18                     u2140:
  3564   001E18  0012               	return		;funcret
  3565   001E1A                     __end_of_Delay40us:
  3566                           	callstack 0
  3567                           
  3568 ;; *************** function _Delay2ms *****************
  3569 ;; Defined at:
  3570 ;;		line 41 in file "lcd.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;		None
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  k               1    1[COMRAM] unsigned char 
  3575 ;;  j               1    0[COMRAM] unsigned char 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2, status,0
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3585 ;;      Params:         0       0       0       0       0       0       0       0       0
  3586 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3588 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3589 ;;Total ram usage:        2 bytes
  3590 ;; Hardware stack levels used: 1
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_lcdCommand
  3595 ;;		_lcdInit
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text32
  3600   001C48                     __ptext32:
  3601                           	callstack 0
  3602   001C48                     _Delay2ms:
  3603                           	callstack 27
  3604   001C48                     
  3605                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  3606   001C48  0E00               	movlw	0
  3607   001C4A  6E28               	movwf	Delay2ms@j^0,c
  3608   001C4C                     l2835:
  3609                           
  3610                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  3611   001C4C  0E00               	movlw	0
  3612   001C4E  6E29               	movwf	Delay2ms@k^0,c
  3613   001C50                     l2841:
  3614   001C50  2A29               	incf	Delay2ms@k^0,f,c
  3615   001C52  0EB1               	movlw	177
  3616   001C54  6429               	cpfsgt	Delay2ms@k^0,c
  3617   001C56  EF2F  F00E         	goto	u2341
  3618   001C5A  EF31  F00E         	goto	u2340
  3619   001C5E                     u2341:
  3620   001C5E  EF28  F00E         	goto	l2841
  3621   001C62                     u2340:
  3622   001C62  2A28               	incf	Delay2ms@j^0,f,c
  3623   001C64  0E13               	movlw	19
  3624   001C66  6428               	cpfsgt	Delay2ms@j^0,c
  3625   001C68  EF38  F00E         	goto	u2351
  3626   001C6C  EF3A  F00E         	goto	u2350
  3627   001C70                     u2351:
  3628   001C70  EF26  F00E         	goto	l2835
  3629   001C74                     u2350:
  3630   001C74  0012               	return		;funcret
  3631   001C76                     __end_of_Delay2ms:
  3632                           	callstack 0
  3633                           
  3634 ;; *************** function _kpDebounce *****************
  3635 ;; Defined at:
  3636 ;;		line 33 in file "keypad.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  portes          5    8[COMRAM] unsigned char [5]
  3641 ;;  bits            5    3[COMRAM] unsigned char [5]
  3642 ;;  j               1   13[COMRAM] unsigned char 
  3643 ;;  i               1    0        unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      void 
  3646 ;; Registers used:
  3647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3653 ;;      Params:         0       0       0       0       0       0       0       0       0
  3654 ;;      Locals:        11       0       0       0       0       0       0       0       0
  3655 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3656 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3657 ;;Total ram usage:       14 bytes
  3658 ;; Hardware stack levels used: 1
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_main
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text33
  3667   0013B6                     __ptext33:
  3668                           	callstack 0
  3669   0013B6                     _kpDebounce:
  3670                           	callstack 30
  3671   0013B6                     
  3672                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  3673   0013B6  EE20  F030         	lfsr	2,kpDebounce@portes
  3674   0013BA  0E04               	movlw	4
  3675   0013BC                     u1211:
  3676   0013BC  6ADE               	clrf	postinc2,c
  3677   0013BE  06E8               	decf	wreg,f,c
  3678   0013C0  E2FD               	bc	u1211
  3679   0013C2  CF81 F030          	movff	3969,kpDebounce@portes	;volatile
  3680   0013C6  CF81 F031          	movff	3969,kpDebounce@portes+1	;volatile
  3681   0013CA  CF81 F032          	movff	3969,kpDebounce@portes+2	;volatile
  3682   0013CE  CF81 F033          	movff	3969,kpDebounce@portes+3	;volatile
  3683   0013D2  CF84 F034          	movff	3972,kpDebounce@portes+4	;volatile
  3684   0013D6                     
  3685                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  3686   0013D6  EE20  F051         	lfsr	2,kpDebounce@F15
  3687   0013DA  EE10  F02B         	lfsr	1,kpDebounce@bits
  3688   0013DE  0E04               	movlw	4
  3689   0013E0                     u1221:
  3690   0013E0  CFDB FFE3          	movff	plusw2,plusw1
  3691   0013E4  06E8               	decf	wreg,f,c
  3692   0013E6  E2FC               	bc	u1221
  3693   0013E8                     
  3694                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  3695   0013E8  0E00               	movlw	0
  3696   0013EA  6E35               	movwf	kpDebounce@j^0,c
  3697   0013EC                     l2105:
  3698                           
  3699                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  3700   0013EC  5035               	movf	kpDebounce@j^0,w,c
  3701   0013EE  0F30               	addlw	low kpDebounce@portes
  3702   0013F0  6ED9               	movwf	fsr2l,c
  3703   0013F2  6ADA               	clrf	fsr2h,c
  3704   0013F4  50DF               	movf	indf2,w,c
  3705   0013F6  6E28               	movwf	??_kpDebounce^0,c
  3706   0013F8  5035               	movf	kpDebounce@j^0,w,c
  3707   0013FA  0F2B               	addlw	low kpDebounce@bits
  3708   0013FC  6ED9               	movwf	fsr2l,c
  3709   0013FE  6ADA               	clrf	fsr2h,c
  3710   001400  50DF               	movf	indf2,w,c
  3711   001402  6E29               	movwf	(??_kpDebounce+1)^0,c
  3712   001404  0E01               	movlw	1
  3713   001406  6E2A               	movwf	(??_kpDebounce+2)^0,c
  3714   001408  2A29               	incf	(??_kpDebounce+1)^0,f,c
  3715   00140A  EF09  F00A         	goto	u1234
  3716   00140E                     u1235:
  3717   00140E  90D8               	bcf	status,0,c
  3718   001410  362A               	rlcf	(??_kpDebounce+2)^0,f,c
  3719   001412                     u1234:
  3720   001412  2E29               	decfsz	(??_kpDebounce+1)^0,f,c
  3721   001414  EF07  F00A         	goto	u1235
  3722   001418  502A               	movf	(??_kpDebounce+2)^0,w,c
  3723   00141A  1428               	andwf	??_kpDebounce^0,w,c
  3724   00141C  0900               	iorlw	0
  3725   00141E  A4D8               	btfss	status,2,c
  3726   001420  EF14  F00A         	goto	u1241
  3727   001424  EF16  F00A         	goto	u1240
  3728   001428                     u1241:
  3729   001428  EF26  F00A         	goto	l2109
  3730   00142C                     u1240:
  3731   00142C                     
  3732                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  3733   00142C  C035  F028         	movff	kpDebounce@j,??_kpDebounce
  3734   001430  0E01               	movlw	1
  3735   001432  6E29               	movwf	(??_kpDebounce+1)^0,c
  3736   001434  2A28               	incf	??_kpDebounce^0,f,c
  3737   001436  EF1F  F00A         	goto	u1254
  3738   00143A                     u1255:
  3739   00143A  90D8               	bcf	status,0,c
  3740   00143C  3629               	rlcf	(??_kpDebounce+1)^0,f,c
  3741   00143E                     u1254:
  3742   00143E  2E28               	decfsz	??_kpDebounce^0,f,c
  3743   001440  EF1D  F00A         	goto	u1255
  3744   001444  5029               	movf	(??_kpDebounce+1)^0,w,c
  3745   001446  1221               	iorwf	kpDebounce@valorNovo^0,f,c
  3746                           
  3747                           ;keypad.c: 65:             } else {
  3748   001448  EF35  F00A         	goto	l2111
  3749   00144C                     l2109:
  3750                           
  3751                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  3752   00144C  C035  F028         	movff	kpDebounce@j,??_kpDebounce
  3753   001450  0E01               	movlw	1
  3754   001452  6E29               	movwf	(??_kpDebounce+1)^0,c
  3755   001454  2A28               	incf	??_kpDebounce^0,f,c
  3756   001456  EF2F  F00A         	goto	u1264
  3757   00145A                     u1265:
  3758   00145A  90D8               	bcf	status,0,c
  3759   00145C  3629               	rlcf	(??_kpDebounce+1)^0,f,c
  3760   00145E                     u1264:
  3761   00145E  2E28               	decfsz	??_kpDebounce^0,f,c
  3762   001460  EF2D  F00A         	goto	u1265
  3763   001464  5029               	movf	(??_kpDebounce+1)^0,w,c
  3764   001466  0AFF               	xorlw	255
  3765   001468  1621               	andwf	kpDebounce@valorNovo^0,f,c
  3766   00146A                     l2111:
  3767                           
  3768                           ;keypad.c: 68:         }
  3769   00146A  2A35               	incf	kpDebounce@j^0,f,c
  3770   00146C  0E04               	movlw	4
  3771   00146E  6435               	cpfsgt	kpDebounce@j^0,c
  3772   001470  EF3C  F00A         	goto	u1271
  3773   001474  EF3E  F00A         	goto	u1270
  3774   001478                     u1271:
  3775   001478  EFF6  F009         	goto	l2105
  3776   00147C                     u1270:
  3777   00147C                     
  3778                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  3779   00147C  5021               	movf	kpDebounce@valorNovo^0,w,c
  3780   00147E  1820               	xorwf	kpDebounce@valorAntigo^0,w,c
  3781   001480  A4D8               	btfss	status,2,c
  3782   001482  EF45  F00A         	goto	u1281
  3783   001486  EF47  F00A         	goto	u1280
  3784   00148A                     u1281:
  3785   00148A  EF4A  F00A         	goto	l2119
  3786   00148E                     u1280:
  3787   00148E                     
  3788                           ;keypad.c: 70:         tempo--;
  3789   00148E  0622               	decf	kpDebounce@tempo^0,f,c
  3790                           
  3791                           ;keypad.c: 71:     } else {
  3792   001490  EF4E  F00A         	goto	l136
  3793   001494                     l2119:
  3794                           
  3795                           ;keypad.c: 72:         tempo = 10;
  3796   001494  0E0A               	movlw	10
  3797   001496  6E22               	movwf	kpDebounce@tempo^0,c
  3798   001498                     
  3799                           ;keypad.c: 73:         valorAntigo = valorNovo;
  3800   001498  C021  F020         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  3801   00149C                     l136:
  3802                           
  3803                           ;keypad.c: 75:     if (tempo == 0) {
  3804   00149C  5022               	movf	kpDebounce@tempo^0,w,c
  3805   00149E  A4D8               	btfss	status,2,c
  3806   0014A0  EF54  F00A         	goto	u1291
  3807   0014A4  EF56  F00A         	goto	u1290
  3808   0014A8                     u1291:
  3809   0014A8  EF58  F00A         	goto	l138
  3810   0014AC                     u1290:
  3811   0014AC                     
  3812                           ;keypad.c: 76:         valor = valorAntigo;
  3813   0014AC  C020  F023         	movff	kpDebounce@valorAntigo,_valor
  3814   0014B0                     l138:
  3815   0014B0  0012               	return		;funcret
  3816   0014B2                     __end_of_kpDebounce:
  3817                           	callstack 0
  3818                           
  3819 ;; *************** function _dsWriteData *****************
  3820 ;; Defined at:
  3821 ;;		line 26 in file "ds1307.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  value           1    wreg     unsigned char 
  3824 ;;  address         2   20[COMRAM] int 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  value           1   22[COMRAM] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3836 ;;      Params:         2       0       0       0       0       0       0       0       0
  3837 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3838 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3839 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3840 ;;Total ram usage:        3 bytes
  3841 ;; Hardware stack levels used: 1
  3842 ;; Hardware stack levels required when called: 4
  3843 ;; This function calls:
  3844 ;;		_i2cWriteByte
  3845 ;; This function is called by:
  3846 ;;		_main
  3847 ;;		_dsStartClock
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text34
  3852   001C76                     __ptext34:
  3853                           	callstack 0
  3854   001C76                     _dsWriteData:
  3855                           	callstack 26
  3856                           
  3857                           ;incstack = 0
  3858                           ;dsWriteData@value stored from wreg
  3859   001C76  6E3E               	movwf	dsWriteData@value^0,c
  3860   001C78                     
  3861                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  3862   001C78  0E00               	movlw	0
  3863   001C7A  6E2F               	movwf	i2cWriteByte@send_stop^0,c
  3864   001C7C  0EDE               	movlw	222
  3865   001C7E  6E30               	movwf	i2cWriteByte@byte^0,c
  3866   001C80  0E01               	movlw	1
  3867   001C82  EC76  F00C         	call	_i2cWriteByte
  3868                           
  3869                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  3870   001C86  0E00               	movlw	0
  3871   001C88  6E2F               	movwf	i2cWriteByte@send_stop^0,c
  3872   001C8A  C03C  F030         	movff	dsWriteData@address,i2cWriteByte@byte
  3873   001C8E  0E00               	movlw	0
  3874   001C90  EC76  F00C         	call	_i2cWriteByte
  3875                           
  3876                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  3877   001C94  0E01               	movlw	1
  3878   001C96  6E2F               	movwf	i2cWriteByte@send_stop^0,c
  3879   001C98  C03E  F030         	movff	dsWriteData@value,i2cWriteByte@byte
  3880   001C9C  0E00               	movlw	0
  3881   001C9E  EC76  F00C         	call	_i2cWriteByte
  3882   001CA2  0012               	return		;funcret
  3883   001CA4                     __end_of_dsWriteData:
  3884                           	callstack 0
  3885                           
  3886 ;; *************** function _i2cWriteByte *****************
  3887 ;; Defined at:
  3888 ;;		line 113 in file "soft_i2c.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  send_start      1    wreg     unsigned char 
  3891 ;;  send_stop       1    7[COMRAM] unsigned char 
  3892 ;;  byte            1    8[COMRAM] unsigned char 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  send_start      1    9[COMRAM] unsigned char 
  3895 ;;  bit             1   10[COMRAM] unsigned char 
  3896 ;;  nack            1    0        unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      unsigned char 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3906 ;;      Params:         2       0       0       0       0       0       0       0       0
  3907 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3909 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3910 ;;Total ram usage:        4 bytes
  3911 ;; Hardware stack levels used: 1
  3912 ;; Hardware stack levels required when called: 3
  3913 ;; This function calls:
  3914 ;;		_i2c_read_bit
  3915 ;;		_i2c_start
  3916 ;;		_i2c_stop
  3917 ;;		_i2c_write_bit
  3918 ;; This function is called by:
  3919 ;;		_dsWriteData
  3920 ;;		_dsReadData
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text35
  3925   0018EC                     __ptext35:
  3926                           	callstack 0
  3927   0018EC                     _i2cWriteByte:
  3928                           	callstack 24
  3929                           
  3930                           ;incstack = 0
  3931                           ;i2cWriteByte@send_start stored from wreg
  3932   0018EC  6E31               	movwf	i2cWriteByte@send_start^0,c
  3933   0018EE                     
  3934                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  3935   0018EE  5031               	movf	i2cWriteByte@send_start^0,w,c
  3936   0018F0  B4D8               	btfsc	status,2,c
  3937   0018F2  EF7D  F00C         	goto	u2271
  3938   0018F6  EF7F  F00C         	goto	u2270
  3939   0018FA                     u2271:
  3940   0018FA  EF81  F00C         	goto	l2785
  3941   0018FE                     u2270:
  3942   0018FE                     
  3943                           ;soft_i2c.c: 117:   i2c_start();
  3944   0018FE  EC43  F00D         	call	_i2c_start	;wreg free
  3945   001902                     l2785:
  3946                           
  3947                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  3948   001902  0E00               	movlw	0
  3949   001904  6E32               	movwf	i2cWriteByte@bit^0,c
  3950   001906                     l2791:
  3951                           
  3952                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  3953   001906  BE30               	btfsc	i2cWriteByte@byte^0,7,c
  3954   001908  EF88  F00C         	goto	u2281
  3955   00190C  EF8B  F00C         	goto	u2280
  3956   001910                     u2281:
  3957   001910  0E01               	movlw	1
  3958   001912  EF8C  F00C         	goto	u2290
  3959   001916                     u2280:
  3960   001916  0E00               	movlw	0
  3961   001918                     u2290:
  3962   001918  ECA6  F00C         	call	_i2c_write_bit
  3963   00191C                     
  3964                           ;soft_i2c.c: 121:   byte <<= 1;
  3965   00191C  90D8               	bcf	status,0,c
  3966   00191E  3630               	rlcf	i2cWriteByte@byte^0,f,c
  3967   001920                     
  3968                           ;soft_i2c.c: 122:  }
  3969   001920  2A32               	incf	i2cWriteByte@bit^0,f,c
  3970   001922  0E07               	movlw	7
  3971   001924  6432               	cpfsgt	i2cWriteByte@bit^0,c
  3972   001926  EF97  F00C         	goto	u2301
  3973   00192A  EF99  F00C         	goto	u2300
  3974   00192E                     u2301:
  3975   00192E  EF83  F00C         	goto	l2791
  3976   001932                     u2300:
  3977   001932  ECF4  F00D         	call	_i2c_read_bit	;wreg free
  3978   001936                     
  3979                           ;soft_i2c.c: 124:  if (send_stop) {
  3980   001936  502F               	movf	i2cWriteByte@send_stop^0,w,c
  3981   001938  B4D8               	btfsc	status,2,c
  3982   00193A  EFA1  F00C         	goto	u2311
  3983   00193E  EFA3  F00C         	goto	u2310
  3984   001942                     u2311:
  3985   001942  EFA5  F00C         	goto	l411
  3986   001946                     u2310:
  3987   001946                     
  3988                           ;soft_i2c.c: 125:   i2c_stop();
  3989   001946  EC52  F00E         	call	_i2c_stop	;wreg free
  3990   00194A                     l411:
  3991   00194A  0012               	return		;funcret
  3992   00194C                     __end_of_i2cWriteByte:
  3993                           	callstack 0
  3994                           
  3995 ;; *************** function _i2c_write_bit *****************
  3996 ;; Defined at:
  3997 ;;		line 84 in file "soft_i2c.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  bit             1    wreg     unsigned char 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  bit             1    6[COMRAM] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4011 ;;      Params:         0       0       0       0       0       0       0       0       0
  4012 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4014 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4015 ;;Total ram usage:        1 bytes
  4016 ;; Hardware stack levels used: 1
  4017 ;; Hardware stack levels required when called: 2
  4018 ;; This function calls:
  4019 ;;		_I2C_delay
  4020 ;;		_clear_SCL
  4021 ;;		_clear_SDA
  4022 ;;		_read_SCL
  4023 ;;		_read_SDA
  4024 ;; This function is called by:
  4025 ;;		_i2cWriteByte
  4026 ;;		_i2cReadByte
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           	psect	text36
  4031   00194C                     __ptext36:
  4032                           	callstack 0
  4033   00194C                     _i2c_write_bit:
  4034                           	callstack 24
  4035                           
  4036                           ;incstack = 0
  4037                           ;i2c_write_bit@bit stored from wreg
  4038   00194C  6E2E               	movwf	i2c_write_bit@bit^0,c
  4039   00194E                     
  4040                           ;soft_i2c.c: 85:  if (bit) {
  4041   00194E  502E               	movf	i2c_write_bit@bit^0,w,c
  4042   001950  B4D8               	btfsc	status,2,c
  4043   001952  EFAD  F00C         	goto	u2231
  4044   001956  EFAF  F00C         	goto	u2230
  4045   00195A                     u2231:
  4046   00195A  EFB3  F00C         	goto	l2749
  4047   00195E                     u2230:
  4048   00195E                     
  4049                           ;soft_i2c.c: 86:   read_SDA();
  4050   00195E  EC87  F00D         	call	_read_SDA	;wreg free
  4051                           
  4052                           ;soft_i2c.c: 87:  } else {
  4053   001962  EFB5  F00C         	goto	l2751
  4054   001966                     l2749:
  4055                           
  4056                           ;soft_i2c.c: 88:   clear_SDA();
  4057   001966  EC7F  F00E         	call	_clear_SDA	;wreg free
  4058   00196A                     l2751:
  4059                           
  4060                           ;soft_i2c.c: 90:  I2C_delay();
  4061   00196A  EC59  F00F         	call	_I2C_delay	;wreg free
  4062   00196E                     l2753:
  4063   00196E  ECA3  F00D         	call	_read_SCL	;wreg free
  4064   001972  0900               	iorlw	0
  4065   001974  B4D8               	btfsc	status,2,c
  4066   001976  EFBF  F00C         	goto	u2241
  4067   00197A  EFC1  F00C         	goto	u2240
  4068   00197E                     u2241:
  4069   00197E  EFB7  F00C         	goto	l2753
  4070   001982                     u2240:
  4071   001982                     
  4072                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  4073   001982  502E               	movf	i2c_write_bit@bit^0,w,c
  4074   001984  B4D8               	btfsc	status,2,c
  4075   001986  EFC7  F00C         	goto	u2251
  4076   00198A  EFC9  F00C         	goto	u2250
  4077   00198E                     u2251:
  4078   00198E  EFCB  F00C         	goto	l2759
  4079   001992                     u2250:
  4080   001992  EC87  F00D         	call	_read_SDA	;wreg free
  4081   001996                     l2759:
  4082                           
  4083                           ;soft_i2c.c: 95:  I2C_delay();
  4084   001996  EC59  F00F         	call	_I2C_delay	;wreg free
  4085   00199A                     
  4086                           ;soft_i2c.c: 96:  clear_SCL();
  4087   00199A  EC94  F00E         	call	_clear_SCL	;wreg free
  4088   00199E                     
  4089                           ;soft_i2c.c: 97:  I2C_delay();
  4090   00199E  EC59  F00F         	call	_I2C_delay	;wreg free
  4091   0019A2  0012               	return		;funcret
  4092   0019A4                     __end_of_i2c_write_bit:
  4093                           	callstack 0
  4094                           
  4095 ;; *************** function _i2c_stop *****************
  4096 ;; Defined at:
  4097 ;;		line 71 in file "soft_i2c.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4111 ;;      Params:         0       0       0       0       0       0       0       0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4114 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4115 ;;Total ram usage:        0 bytes
  4116 ;; Hardware stack levels used: 1
  4117 ;; Hardware stack levels required when called: 2
  4118 ;; This function calls:
  4119 ;;		_I2C_delay
  4120 ;;		_clear_SDA
  4121 ;;		_read_SCL
  4122 ;;		_read_SDA
  4123 ;; This function is called by:
  4124 ;;		_i2cWriteByte
  4125 ;;		_i2cReadByte
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text37
  4130   001CA4                     __ptext37:
  4131                           	callstack 0
  4132   001CA4                     _i2c_stop:
  4133                           	callstack 24
  4134   001CA4                     
  4135                           ;soft_i2c.c: 73:  clear_SDA();
  4136   001CA4  EC7F  F00E         	call	_clear_SDA	;wreg free
  4137   001CA8                     
  4138                           ;soft_i2c.c: 74:  I2C_delay();
  4139   001CA8  EC59  F00F         	call	_I2C_delay	;wreg free
  4140   001CAC                     l2735:
  4141   001CAC  ECA3  F00D         	call	_read_SCL	;wreg free
  4142   001CB0  0900               	iorlw	0
  4143   001CB2  B4D8               	btfsc	status,2,c
  4144   001CB4  EF5E  F00E         	goto	u2221
  4145   001CB8  EF60  F00E         	goto	u2220
  4146   001CBC                     u2221:
  4147   001CBC  EF56  F00E         	goto	l2735
  4148   001CC0                     u2220:
  4149   001CC0                     
  4150                           ;soft_i2c.c: 76:  I2C_delay();
  4151   001CC0  EC59  F00F         	call	_I2C_delay	;wreg free
  4152   001CC4                     
  4153                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  4154   001CC4  EC87  F00D         	call	_read_SDA	;wreg free
  4155   001CC8                     
  4156                           ;soft_i2c.c: 80:  I2C_delay();
  4157   001CC8  EC59  F00F         	call	_I2C_delay	;wreg free
  4158   001CCC                     
  4159                           ;soft_i2c.c: 81:  started = 0;
  4160   001CCC  0E00               	movlw	0
  4161   001CCE  6E1E               	movwf	_started^0,c
  4162   001CD0  0012               	return		;funcret
  4163   001CD2                     __end_of_i2c_stop:
  4164                           	callstack 0
  4165                           
  4166 ;; *************** function _i2c_start *****************
  4167 ;; Defined at:
  4168 ;;		line 52 in file "soft_i2c.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;		None
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;		None
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4182 ;;      Params:         0       0       0       0       0       0       0       0       0
  4183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4185 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4186 ;;Total ram usage:        0 bytes
  4187 ;; Hardware stack levels used: 1
  4188 ;; Hardware stack levels required when called: 2
  4189 ;; This function calls:
  4190 ;;		_I2C_delay
  4191 ;;		_clear_SCL
  4192 ;;		_clear_SDA
  4193 ;;		_read_SCL
  4194 ;;		_read_SDA
  4195 ;; This function is called by:
  4196 ;;		_i2cWriteByte
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text38
  4201   001A86                     __ptext38:
  4202                           	callstack 0
  4203   001A86                     _i2c_start:
  4204                           	callstack 24
  4205   001A86                     
  4206                           ;soft_i2c.c: 54:  if (started) {
  4207   001A86  501E               	movf	_started^0,w,c
  4208   001A88  B4D8               	btfsc	status,2,c
  4209   001A8A  EF49  F00D         	goto	u2201
  4210   001A8E  EF4B  F00D         	goto	u2200
  4211   001A92                     u2201:
  4212   001A92  EF5B  F00D         	goto	l2721
  4213   001A96                     u2200:
  4214   001A96                     
  4215                           ;soft_i2c.c: 55:   read_SDA();
  4216   001A96  EC87  F00D         	call	_read_SDA	;wreg free
  4217   001A9A                     
  4218                           ;soft_i2c.c: 56:   I2C_delay();
  4219   001A9A  EC59  F00F         	call	_I2C_delay	;wreg free
  4220   001A9E                     l2717:
  4221   001A9E  ECA3  F00D         	call	_read_SCL	;wreg free
  4222   001AA2  0900               	iorlw	0
  4223   001AA4  B4D8               	btfsc	status,2,c
  4224   001AA6  EF57  F00D         	goto	u2211
  4225   001AAA  EF59  F00D         	goto	u2210
  4226   001AAE                     u2211:
  4227   001AAE  EF4F  F00D         	goto	l2717
  4228   001AB2                     u2210:
  4229   001AB2                     
  4230                           ;soft_i2c.c: 59:   I2C_delay();
  4231   001AB2  EC59  F00F         	call	_I2C_delay	;wreg free
  4232   001AB6                     l2721:
  4233                           
  4234                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  4235   001AB6  EC87  F00D         	call	_read_SDA	;wreg free
  4236   001ABA                     
  4237                           ;soft_i2c.c: 65:  clear_SDA();
  4238   001ABA  EC7F  F00E         	call	_clear_SDA	;wreg free
  4239   001ABE                     
  4240                           ;soft_i2c.c: 66:  I2C_delay();
  4241   001ABE  EC59  F00F         	call	_I2C_delay	;wreg free
  4242   001AC2                     
  4243                           ;soft_i2c.c: 67:  clear_SCL();
  4244   001AC2  EC94  F00E         	call	_clear_SCL	;wreg free
  4245   001AC6                     
  4246                           ;soft_i2c.c: 68:  started = 1;
  4247   001AC6  0E01               	movlw	1
  4248   001AC8  6E1E               	movwf	_started^0,c
  4249   001ACA  0012               	return		;funcret
  4250   001ACC                     __end_of_i2c_start:
  4251                           	callstack 0
  4252                           
  4253 ;; *************** function _clear_SDA *****************
  4254 ;; Defined at:
  4255 ;;		line 45 in file "soft_i2c.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4272 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used: 1
  4275 ;; Hardware stack levels required when called: 1
  4276 ;; This function calls:
  4277 ;;		_digitalWrite
  4278 ;;		_pinMode
  4279 ;; This function is called by:
  4280 ;;		_i2c_start
  4281 ;;		_i2c_stop
  4282 ;;		_i2c_write_bit
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text39
  4287   001CFE                     __ptext39:
  4288                           	callstack 0
  4289   001CFE                     _clear_SDA:
  4290                           	callstack 24
  4291   001CFE                     
  4292                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  4293   001CFE  0E00               	movlw	0
  4294   001D00  6E29               	movwf	(pinMode@pin+1)^0,c
  4295   001D02  0E08               	movlw	8
  4296   001D04  6E28               	movwf	pinMode@pin^0,c
  4297   001D06  0E00               	movlw	0
  4298   001D08  6E2B               	movwf	(pinMode@type+1)^0,c
  4299   001D0A  0E00               	movlw	0
  4300   001D0C  6E2A               	movwf	pinMode@type^0,c
  4301   001D0E  EC77  F005         	call	_pinMode	;wreg free
  4302                           
  4303                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  4304   001D12  0E00               	movlw	0
  4305   001D14  6E29               	movwf	(digitalWrite@pin+1)^0,c
  4306   001D16  0E08               	movlw	8
  4307   001D18  6E28               	movwf	digitalWrite@pin^0,c
  4308   001D1A  0E00               	movlw	0
  4309   001D1C  6E2B               	movwf	(digitalWrite@value+1)^0,c
  4310   001D1E  0E00               	movlw	0
  4311   001D20  6E2A               	movwf	digitalWrite@value^0,c
  4312   001D22  EC50  F004         	call	_digitalWrite	;wreg free
  4313   001D26  0012               	return		;funcret
  4314   001D28                     __end_of_clear_SDA:
  4315                           	callstack 0
  4316                           
  4317 ;; *************** function _i2c_read_bit *****************
  4318 ;; Defined at:
  4319 ;;		line 100 in file "soft_i2c.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  bit             1    6[COMRAM] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      unsigned char 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0
  4334 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4336 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4337 ;;Total ram usage:        1 bytes
  4338 ;; Hardware stack levels used: 1
  4339 ;; Hardware stack levels required when called: 2
  4340 ;; This function calls:
  4341 ;;		_I2C_delay
  4342 ;;		_clear_SCL
  4343 ;;		_read_SCL
  4344 ;;		_read_SDA
  4345 ;; This function is called by:
  4346 ;;		_i2cWriteByte
  4347 ;;		_i2cReadByte
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text40
  4352   001BE8                     __ptext40:
  4353                           	callstack 0
  4354   001BE8                     _i2c_read_bit:
  4355                           	callstack 24
  4356   001BE8                     
  4357                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  4358   001BE8  EC87  F00D         	call	_read_SDA	;wreg free
  4359   001BEC                     
  4360                           ;soft_i2c.c: 103:  I2C_delay();
  4361   001BEC  EC59  F00F         	call	_I2C_delay	;wreg free
  4362   001BF0                     l2769:
  4363   001BF0  ECA3  F00D         	call	_read_SCL	;wreg free
  4364   001BF4  0900               	iorlw	0
  4365   001BF6  B4D8               	btfsc	status,2,c
  4366   001BF8  EF00  F00E         	goto	u2261
  4367   001BFC  EF02  F00E         	goto	u2260
  4368   001C00                     u2261:
  4369   001C00  EFF8  F00D         	goto	l2769
  4370   001C04                     u2260:
  4371   001C04                     
  4372                           ;soft_i2c.c: 105:  bit = read_SDA();
  4373   001C04  EC87  F00D         	call	_read_SDA	;wreg free
  4374   001C08  6E2E               	movwf	i2c_read_bit@bit^0,c
  4375   001C0A                     
  4376                           ;soft_i2c.c: 106:  I2C_delay();
  4377   001C0A  EC59  F00F         	call	_I2C_delay	;wreg free
  4378   001C0E                     
  4379                           ;soft_i2c.c: 107:  clear_SCL();
  4380   001C0E  EC94  F00E         	call	_clear_SCL	;wreg free
  4381                           
  4382                           ;soft_i2c.c: 108:  I2C_delay();
  4383   001C12  EC59  F00F         	call	_I2C_delay	;wreg free
  4384   001C16                     
  4385                           ;soft_i2c.c: 109:  return bit;
  4386   001C16  502E               	movf	i2c_read_bit@bit^0,w,c
  4387   001C18  0012               	return		;funcret
  4388   001C1A                     __end_of_i2c_read_bit:
  4389                           	callstack 0
  4390                           
  4391 ;; *************** function _read_SDA *****************
  4392 ;; Defined at:
  4393 ;;		line 34 in file "soft_i2c.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      unsigned char 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0, cstack
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4407 ;;      Params:         0       0       0       0       0       0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4410 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4411 ;;Total ram usage:        0 bytes
  4412 ;; Hardware stack levels used: 1
  4413 ;; Hardware stack levels required when called: 1
  4414 ;; This function calls:
  4415 ;;		_digitalRead
  4416 ;;		_pinMode
  4417 ;; This function is called by:
  4418 ;;		_i2c_start
  4419 ;;		_i2c_stop
  4420 ;;		_i2c_write_bit
  4421 ;;		_i2c_read_bit
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           	psect	text41
  4426   001B0E                     __ptext41:
  4427                           	callstack 0
  4428   001B0E                     _read_SDA:
  4429                           	callstack 24
  4430   001B0E                     
  4431                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  4432   001B0E  0E00               	movlw	0
  4433   001B10  6E29               	movwf	(pinMode@pin+1)^0,c
  4434   001B12  0E08               	movlw	8
  4435   001B14  6E28               	movwf	pinMode@pin^0,c
  4436   001B16  0E00               	movlw	0
  4437   001B18  6E2B               	movwf	(pinMode@type+1)^0,c
  4438   001B1A  0E01               	movlw	1
  4439   001B1C  6E2A               	movwf	pinMode@type^0,c
  4440   001B1E  EC77  F005         	call	_pinMode	;wreg free
  4441                           
  4442                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  4443   001B22  0E00               	movlw	0
  4444   001B24  6E29               	movwf	(digitalRead@pin+1)^0,c
  4445   001B26  0E08               	movlw	8
  4446   001B28  6E28               	movwf	digitalRead@pin^0,c
  4447   001B2A  EC26  F009         	call	_digitalRead	;wreg free
  4448   001B2E  5028               	movf	?_digitalRead^0,w,c
  4449   001B30  1029               	iorwf	(?_digitalRead+1)^0,w,c
  4450   001B32  A4D8               	btfss	status,2,c
  4451   001B34  EF9E  F00D         	goto	u2121
  4452   001B38  EFA1  F00D         	goto	u2120
  4453   001B3C                     u2121:
  4454   001B3C  0E01               	movlw	1
  4455   001B3E  EFA2  F00D         	goto	u2130
  4456   001B42                     u2120:
  4457   001B42  0E00               	movlw	0
  4458   001B44                     u2130:
  4459   001B44  0012               	return		;funcret
  4460   001B46                     __end_of_read_SDA:
  4461                           	callstack 0
  4462                           
  4463 ;; *************** function _read_SCL *****************
  4464 ;; Defined at:
  4465 ;;		line 29 in file "soft_i2c.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      unsigned char 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4479 ;;      Params:         0       0       0       0       0       0       0       0       0
  4480 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4482 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4483 ;;Total ram usage:        0 bytes
  4484 ;; Hardware stack levels used: 1
  4485 ;; Hardware stack levels required when called: 1
  4486 ;; This function calls:
  4487 ;;		_digitalRead
  4488 ;;		_pinMode
  4489 ;; This function is called by:
  4490 ;;		_i2c_start
  4491 ;;		_i2c_stop
  4492 ;;		_i2c_write_bit
  4493 ;;		_i2c_read_bit
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text42
  4498   001B46                     __ptext42:
  4499                           	callstack 0
  4500   001B46                     _read_SCL:
  4501                           	callstack 24
  4502   001B46                     
  4503                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  4504   001B46  0E00               	movlw	0
  4505   001B48  6E29               	movwf	(pinMode@pin+1)^0,c
  4506   001B4A  0E09               	movlw	9
  4507   001B4C  6E28               	movwf	pinMode@pin^0,c
  4508   001B4E  0E00               	movlw	0
  4509   001B50  6E2B               	movwf	(pinMode@type+1)^0,c
  4510   001B52  0E01               	movlw	1
  4511   001B54  6E2A               	movwf	pinMode@type^0,c
  4512   001B56  EC77  F005         	call	_pinMode	;wreg free
  4513                           
  4514                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  4515   001B5A  0E00               	movlw	0
  4516   001B5C  6E29               	movwf	(digitalRead@pin+1)^0,c
  4517   001B5E  0E09               	movlw	9
  4518   001B60  6E28               	movwf	digitalRead@pin^0,c
  4519   001B62  EC26  F009         	call	_digitalRead	;wreg free
  4520   001B66  5028               	movf	?_digitalRead^0,w,c
  4521   001B68  1029               	iorwf	(?_digitalRead+1)^0,w,c
  4522   001B6A  A4D8               	btfss	status,2,c
  4523   001B6C  EFBA  F00D         	goto	u2101
  4524   001B70  EFBD  F00D         	goto	u2100
  4525   001B74                     u2101:
  4526   001B74  0E01               	movlw	1
  4527   001B76  EFBE  F00D         	goto	u2110
  4528   001B7A                     u2100:
  4529   001B7A  0E00               	movlw	0
  4530   001B7C                     u2110:
  4531   001B7C  0012               	return		;funcret
  4532   001B7E                     __end_of_read_SCL:
  4533                           	callstack 0
  4534                           
  4535 ;; *************** function _digitalRead *****************
  4536 ;; Defined at:
  4537 ;;		line 39 in file "io.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  pin             2    0[COMRAM] int 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  2    0[COMRAM] int 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4551 ;;      Params:         2       0       0       0       0       0       0       0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4553 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4554 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4555 ;;Total ram usage:        5 bytes
  4556 ;; Hardware stack levels used: 1
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_read_SCL
  4561 ;;		_read_SDA
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text43
  4566   00124C                     __ptext43:
  4567                           	callstack 0
  4568   00124C                     _digitalRead:
  4569                           	callstack 24
  4570   00124C                     
  4571                           ;io.c: 40:     if(pin <8){
  4572   00124C  BE29               	btfsc	(digitalRead@pin+1)^0,7,c
  4573   00124E  EF34  F009         	goto	u1800
  4574   001252  5029               	movf	(digitalRead@pin+1)^0,w,c
  4575   001254  E107               	bnz	u1801
  4576   001256  0E08               	movlw	8
  4577   001258  5C28               	subwf	digitalRead@pin^0,w,c
  4578   00125A  B0D8               	btfsc	status,0,c
  4579   00125C  EF32  F009         	goto	u1801
  4580   001260  EF34  F009         	goto	u1800
  4581   001264                     u1801:
  4582   001264  EF48  F009         	goto	l2585
  4583   001268                     u1800:
  4584   001268                     
  4585                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  4586   001268  C028  F02A         	movff	digitalRead@pin,??_digitalRead
  4587   00126C  0E01               	movlw	1
  4588   00126E  6E2B               	movwf	(??_digitalRead+1)^0,c
  4589   001270  2A2A               	incf	??_digitalRead^0,f,c
  4590   001272  EF3D  F009         	goto	u1814
  4591   001276                     u1815:
  4592   001276  90D8               	bcf	status,0,c
  4593   001278  362B               	rlcf	(??_digitalRead+1)^0,f,c
  4594   00127A                     u1814:
  4595   00127A  2E2A               	decfsz	??_digitalRead^0,f,c
  4596   00127C  EF3B  F009         	goto	u1815
  4597   001280  502B               	movf	(??_digitalRead+1)^0,w,c
  4598   001282  1480               	andwf	128,w,c	;volatile
  4599   001284  6E2C               	movwf	(??_digitalRead+2)^0,c
  4600   001286  502C               	movf	(??_digitalRead+2)^0,w,c
  4601   001288  6E28               	movwf	?_digitalRead^0,c
  4602   00128A  6A29               	clrf	(?_digitalRead+1)^0,c
  4603   00128C  EFDA  F009         	goto	l83
  4604   001290                     l2585:
  4605   001290  BE29               	btfsc	(digitalRead@pin+1)^0,7,c
  4606   001292  EF56  F009         	goto	u1820
  4607   001296  5029               	movf	(digitalRead@pin+1)^0,w,c
  4608   001298  E107               	bnz	u1821
  4609   00129A  0E10               	movlw	16
  4610   00129C  5C28               	subwf	digitalRead@pin^0,w,c
  4611   00129E  B0D8               	btfsc	status,0,c
  4612   0012A0  EF54  F009         	goto	u1821
  4613   0012A4  EF56  F009         	goto	u1820
  4614   0012A8                     u1821:
  4615   0012A8  EF6C  F009         	goto	l2593
  4616   0012AC                     u1820:
  4617   0012AC                     
  4618                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  4619   0012AC  C028  F02A         	movff	digitalRead@pin,??_digitalRead
  4620   0012B0  0EF8               	movlw	-8
  4621   0012B2  262A               	addwf	??_digitalRead^0,f,c
  4622   0012B4  0E01               	movlw	1
  4623   0012B6  6E2B               	movwf	(??_digitalRead+1)^0,c
  4624   0012B8  2A2A               	incf	??_digitalRead^0,f,c
  4625   0012BA  EF61  F009         	goto	u1834
  4626   0012BE                     u1835:
  4627   0012BE  90D8               	bcf	status,0,c
  4628   0012C0  362B               	rlcf	(??_digitalRead+1)^0,f,c
  4629   0012C2                     u1834:
  4630   0012C2  2E2A               	decfsz	??_digitalRead^0,f,c
  4631   0012C4  EF5F  F009         	goto	u1835
  4632   0012C8  502B               	movf	(??_digitalRead+1)^0,w,c
  4633   0012CA  1481               	andwf	129,w,c	;volatile
  4634   0012CC  6E2C               	movwf	(??_digitalRead+2)^0,c
  4635   0012CE  502C               	movf	(??_digitalRead+2)^0,w,c
  4636   0012D0  6E28               	movwf	?_digitalRead^0,c
  4637   0012D2  6A29               	clrf	(?_digitalRead+1)^0,c
  4638   0012D4  EFDA  F009         	goto	l83
  4639   0012D8                     l2593:
  4640   0012D8  BE29               	btfsc	(digitalRead@pin+1)^0,7,c
  4641   0012DA  EF7A  F009         	goto	u1840
  4642   0012DE  5029               	movf	(digitalRead@pin+1)^0,w,c
  4643   0012E0  E107               	bnz	u1841
  4644   0012E2  0E18               	movlw	24
  4645   0012E4  5C28               	subwf	digitalRead@pin^0,w,c
  4646   0012E6  B0D8               	btfsc	status,0,c
  4647   0012E8  EF78  F009         	goto	u1841
  4648   0012EC  EF7A  F009         	goto	u1840
  4649   0012F0                     u1841:
  4650   0012F0  EF90  F009         	goto	l2601
  4651   0012F4                     u1840:
  4652   0012F4                     
  4653                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  4654   0012F4  C028  F02A         	movff	digitalRead@pin,??_digitalRead
  4655   0012F8  0EF0               	movlw	-16
  4656   0012FA  262A               	addwf	??_digitalRead^0,f,c
  4657   0012FC  0E01               	movlw	1
  4658   0012FE  6E2B               	movwf	(??_digitalRead+1)^0,c
  4659   001300  2A2A               	incf	??_digitalRead^0,f,c
  4660   001302  EF85  F009         	goto	u1854
  4661   001306                     u1855:
  4662   001306  90D8               	bcf	status,0,c
  4663   001308  362B               	rlcf	(??_digitalRead+1)^0,f,c
  4664   00130A                     u1854:
  4665   00130A  2E2A               	decfsz	??_digitalRead^0,f,c
  4666   00130C  EF83  F009         	goto	u1855
  4667   001310  502B               	movf	(??_digitalRead+1)^0,w,c
  4668   001312  1482               	andwf	130,w,c	;volatile
  4669   001314  6E2C               	movwf	(??_digitalRead+2)^0,c
  4670   001316  502C               	movf	(??_digitalRead+2)^0,w,c
  4671   001318  6E28               	movwf	?_digitalRead^0,c
  4672   00131A  6A29               	clrf	(?_digitalRead+1)^0,c
  4673   00131C  EFDA  F009         	goto	l83
  4674   001320                     l2601:
  4675   001320  BE29               	btfsc	(digitalRead@pin+1)^0,7,c
  4676   001322  EF9E  F009         	goto	u1860
  4677   001326  5029               	movf	(digitalRead@pin+1)^0,w,c
  4678   001328  E107               	bnz	u1861
  4679   00132A  0E20               	movlw	32
  4680   00132C  5C28               	subwf	digitalRead@pin^0,w,c
  4681   00132E  B0D8               	btfsc	status,0,c
  4682   001330  EF9C  F009         	goto	u1861
  4683   001334  EF9E  F009         	goto	u1860
  4684   001338                     u1861:
  4685   001338  EFB4  F009         	goto	l2609
  4686   00133C                     u1860:
  4687   00133C                     
  4688                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  4689   00133C  C028  F02A         	movff	digitalRead@pin,??_digitalRead
  4690   001340  0EE8               	movlw	-24
  4691   001342  262A               	addwf	??_digitalRead^0,f,c
  4692   001344  0E01               	movlw	1
  4693   001346  6E2B               	movwf	(??_digitalRead+1)^0,c
  4694   001348  2A2A               	incf	??_digitalRead^0,f,c
  4695   00134A  EFA9  F009         	goto	u1874
  4696   00134E                     u1875:
  4697   00134E  90D8               	bcf	status,0,c
  4698   001350  362B               	rlcf	(??_digitalRead+1)^0,f,c
  4699   001352                     u1874:
  4700   001352  2E2A               	decfsz	??_digitalRead^0,f,c
  4701   001354  EFA7  F009         	goto	u1875
  4702   001358  502B               	movf	(??_digitalRead+1)^0,w,c
  4703   00135A  1483               	andwf	131,w,c	;volatile
  4704   00135C  6E2C               	movwf	(??_digitalRead+2)^0,c
  4705   00135E  502C               	movf	(??_digitalRead+2)^0,w,c
  4706   001360  6E28               	movwf	?_digitalRead^0,c
  4707   001362  6A29               	clrf	(?_digitalRead+1)^0,c
  4708   001364  EFDA  F009         	goto	l83
  4709   001368                     l2609:
  4710   001368  BE29               	btfsc	(digitalRead@pin+1)^0,7,c
  4711   00136A  EFC2  F009         	goto	u1880
  4712   00136E  5029               	movf	(digitalRead@pin+1)^0,w,c
  4713   001370  E107               	bnz	u1881
  4714   001372  0E28               	movlw	40
  4715   001374  5C28               	subwf	digitalRead@pin^0,w,c
  4716   001376  B0D8               	btfsc	status,0,c
  4717   001378  EFC0  F009         	goto	u1881
  4718   00137C  EFC2  F009         	goto	u1880
  4719   001380                     u1881:
  4720   001380  EFD8  F009         	goto	l88
  4721   001384                     u1880:
  4722   001384                     
  4723                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  4724   001384  C028  F02A         	movff	digitalRead@pin,??_digitalRead
  4725   001388  0EE0               	movlw	-32
  4726   00138A  262A               	addwf	??_digitalRead^0,f,c
  4727   00138C  0E01               	movlw	1
  4728   00138E  6E2B               	movwf	(??_digitalRead+1)^0,c
  4729   001390  2A2A               	incf	??_digitalRead^0,f,c
  4730   001392  EFCD  F009         	goto	u1894
  4731   001396                     u1895:
  4732   001396  90D8               	bcf	status,0,c
  4733   001398  362B               	rlcf	(??_digitalRead+1)^0,f,c
  4734   00139A                     u1894:
  4735   00139A  2E2A               	decfsz	??_digitalRead^0,f,c
  4736   00139C  EFCB  F009         	goto	u1895
  4737   0013A0  502B               	movf	(??_digitalRead+1)^0,w,c
  4738   0013A2  1484               	andwf	132,w,c	;volatile
  4739   0013A4  6E2C               	movwf	(??_digitalRead+2)^0,c
  4740   0013A6  502C               	movf	(??_digitalRead+2)^0,w,c
  4741   0013A8  6E28               	movwf	?_digitalRead^0,c
  4742   0013AA  6A29               	clrf	(?_digitalRead+1)^0,c
  4743   0013AC  EFDA  F009         	goto	l83
  4744   0013B0                     l88:
  4745   0013B0                     
  4746                           ;io.c: 51:     return -1;
  4747   0013B0  6828               	setf	?_digitalRead^0,c
  4748   0013B2  6829               	setf	(?_digitalRead+1)^0,c
  4749   0013B4                     l83:
  4750   0013B4  0012               	return		;funcret
  4751   0013B6                     __end_of_digitalRead:
  4752                           	callstack 0
  4753                           
  4754 ;; *************** function _clear_SCL *****************
  4755 ;; Defined at:
  4756 ;;		line 39 in file "soft_i2c.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;		None
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;		None
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  1    wreg      void 
  4763 ;; Registers used:
  4764 ;;		wreg, status,2, status,0, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4770 ;;      Params:         0       0       0       0       0       0       0       0       0
  4771 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4773 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4774 ;;Total ram usage:        0 bytes
  4775 ;; Hardware stack levels used: 1
  4776 ;; Hardware stack levels required when called: 1
  4777 ;; This function calls:
  4778 ;;		_digitalWrite
  4779 ;;		_pinMode
  4780 ;; This function is called by:
  4781 ;;		_i2c_start
  4782 ;;		_i2c_write_bit
  4783 ;;		_i2c_read_bit
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text44
  4788   001D28                     __ptext44:
  4789                           	callstack 0
  4790   001D28                     _clear_SCL:
  4791                           	callstack 24
  4792   001D28                     
  4793                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  4794   001D28  0E00               	movlw	0
  4795   001D2A  6E29               	movwf	(pinMode@pin+1)^0,c
  4796   001D2C  0E09               	movlw	9
  4797   001D2E  6E28               	movwf	pinMode@pin^0,c
  4798   001D30  0E00               	movlw	0
  4799   001D32  6E2B               	movwf	(pinMode@type+1)^0,c
  4800   001D34  0E00               	movlw	0
  4801   001D36  6E2A               	movwf	pinMode@type^0,c
  4802   001D38  EC77  F005         	call	_pinMode	;wreg free
  4803                           
  4804                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  4805   001D3C  0E00               	movlw	0
  4806   001D3E  6E29               	movwf	(digitalWrite@pin+1)^0,c
  4807   001D40  0E09               	movlw	9
  4808   001D42  6E28               	movwf	digitalWrite@pin^0,c
  4809   001D44  0E00               	movlw	0
  4810   001D46  6E2B               	movwf	(digitalWrite@value+1)^0,c
  4811   001D48  0E00               	movlw	0
  4812   001D4A  6E2A               	movwf	digitalWrite@value^0,c
  4813   001D4C  EC50  F004         	call	_digitalWrite	;wreg free
  4814   001D50  0012               	return		;funcret
  4815   001D52                     __end_of_clear_SCL:
  4816                           	callstack 0
  4817                           
  4818 ;; *************** function _digitalWrite *****************
  4819 ;; Defined at:
  4820 ;;		line 14 in file "io.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  pin             2    0[COMRAM] int 
  4823 ;;  value           2    2[COMRAM] int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  1    wreg      void 
  4828 ;; Registers used:
  4829 ;;		wreg, status,2, status,0
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4835 ;;      Params:         4       0       0       0       0       0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4837 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4838 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4839 ;;Total ram usage:        6 bytes
  4840 ;; Hardware stack levels used: 1
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_clear_SCL
  4845 ;;		_clear_SDA
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text45
  4850   0008A0                     __ptext45:
  4851                           	callstack 0
  4852   0008A0                     _digitalWrite:
  4853                           	callstack 24
  4854   0008A0                     
  4855                           ;io.c: 16:     if(pin <8){
  4856   0008A0  BE29               	btfsc	(digitalWrite@pin+1)^0,7,c
  4857   0008A2  EF5E  F004         	goto	u1600
  4858   0008A6  5029               	movf	(digitalWrite@pin+1)^0,w,c
  4859   0008A8  E107               	bnz	u1601
  4860   0008AA  0E08               	movlw	8
  4861   0008AC  5C28               	subwf	digitalWrite@pin^0,w,c
  4862   0008AE  B0D8               	btfsc	status,0,c
  4863   0008B0  EF5C  F004         	goto	u1601
  4864   0008B4  EF5E  F004         	goto	u1600
  4865   0008B8                     u1601:
  4866   0008B8  EF88  F004         	goto	l2545
  4867   0008BC                     u1600:
  4868   0008BC                     
  4869                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  4870   0008BC  502A               	movf	digitalWrite@value^0,w,c
  4871   0008BE  102B               	iorwf	(digitalWrite@value+1)^0,w,c
  4872   0008C0  B4D8               	btfsc	status,2,c
  4873   0008C2  EF65  F004         	goto	u1611
  4874   0008C6  EF67  F004         	goto	u1610
  4875   0008CA                     u1611:
  4876   0008CA  EF77  F004         	goto	l2543
  4877   0008CE                     u1610:
  4878   0008CE  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  4879   0008D2  0E01               	movlw	1
  4880   0008D4  6E2D               	movwf	(??_digitalWrite+1)^0,c
  4881   0008D6  2A2C               	incf	??_digitalWrite^0,f,c
  4882   0008D8  EF70  F004         	goto	u1624
  4883   0008DC                     u1625:
  4884   0008DC  90D8               	bcf	status,0,c
  4885   0008DE  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  4886   0008E0                     u1624:
  4887   0008E0  2E2C               	decfsz	??_digitalWrite^0,f,c
  4888   0008E2  EF6E  F004         	goto	u1625
  4889   0008E6  502D               	movf	(??_digitalWrite+1)^0,w,c
  4890   0008E8  1280               	iorwf	128,f,c	;volatile
  4891   0008EA  EF76  F005         	goto	l79
  4892   0008EE                     l2543:
  4893   0008EE  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  4894   0008F2  0E01               	movlw	1
  4895   0008F4  6E2D               	movwf	(??_digitalWrite+1)^0,c
  4896   0008F6  2A2C               	incf	??_digitalWrite^0,f,c
  4897   0008F8  EF80  F004         	goto	u1634
  4898   0008FC                     u1635:
  4899   0008FC  90D8               	bcf	status,0,c
  4900   0008FE  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  4901   000900                     u1634:
  4902   000900  2E2C               	decfsz	??_digitalWrite^0,f,c
  4903   000902  EF7E  F004         	goto	u1635
  4904   000906  502D               	movf	(??_digitalWrite+1)^0,w,c
  4905   000908  0AFF               	xorlw	255
  4906   00090A  1680               	andwf	128,f,c	;volatile
  4907   00090C  EF76  F005         	goto	l79
  4908   000910                     l2545:
  4909   000910  BE29               	btfsc	(digitalWrite@pin+1)^0,7,c
  4910   000912  EF96  F004         	goto	u1640
  4911   000916  5029               	movf	(digitalWrite@pin+1)^0,w,c
  4912   000918  E107               	bnz	u1641
  4913   00091A  0E10               	movlw	16
  4914   00091C  5C28               	subwf	digitalWrite@pin^0,w,c
  4915   00091E  B0D8               	btfsc	status,0,c
  4916   000920  EF94  F004         	goto	u1641
  4917   000924  EF96  F004         	goto	u1640
  4918   000928                     u1641:
  4919   000928  EFC4  F004         	goto	l2553
  4920   00092C                     u1640:
  4921   00092C                     
  4922                           ;io.c: 20:         pin -=8;
  4923   00092C  0EF8               	movlw	248
  4924   00092E  2628               	addwf	digitalWrite@pin^0,f,c
  4925   000930  0EFF               	movlw	255
  4926   000932  2229               	addwfc	(digitalWrite@pin+1)^0,f,c
  4927                           
  4928                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  4929   000934  502A               	movf	digitalWrite@value^0,w,c
  4930   000936  102B               	iorwf	(digitalWrite@value+1)^0,w,c
  4931   000938  B4D8               	btfsc	status,2,c
  4932   00093A  EFA1  F004         	goto	u1651
  4933   00093E  EFA3  F004         	goto	u1650
  4934   000942                     u1651:
  4935   000942  EFB3  F004         	goto	l2551
  4936   000946                     u1650:
  4937   000946  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  4938   00094A  0E01               	movlw	1
  4939   00094C  6E2D               	movwf	(??_digitalWrite+1)^0,c
  4940   00094E  2A2C               	incf	??_digitalWrite^0,f,c
  4941   000950  EFAC  F004         	goto	u1664
  4942   000954                     u1665:
  4943   000954  90D8               	bcf	status,0,c
  4944   000956  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  4945   000958                     u1664:
  4946   000958  2E2C               	decfsz	??_digitalWrite^0,f,c
  4947   00095A  EFAA  F004         	goto	u1665
  4948   00095E  502D               	movf	(??_digitalWrite+1)^0,w,c
  4949   000960  1281               	iorwf	129,f,c	;volatile
  4950   000962  EF76  F005         	goto	l79
  4951   000966                     l2551:
  4952   000966  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  4953   00096A  0E01               	movlw	1
  4954   00096C  6E2D               	movwf	(??_digitalWrite+1)^0,c
  4955   00096E  2A2C               	incf	??_digitalWrite^0,f,c
  4956   000970  EFBC  F004         	goto	u1674
  4957   000974                     u1675:
  4958   000974  90D8               	bcf	status,0,c
  4959   000976  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  4960   000978                     u1674:
  4961   000978  2E2C               	decfsz	??_digitalWrite^0,f,c
  4962   00097A  EFBA  F004         	goto	u1675
  4963   00097E  502D               	movf	(??_digitalWrite+1)^0,w,c
  4964   000980  0AFF               	xorlw	255
  4965   000982  1681               	andwf	129,f,c	;volatile
  4966   000984  EF76  F005         	goto	l79
  4967   000988                     l2553:
  4968   000988  BE29               	btfsc	(digitalWrite@pin+1)^0,7,c
  4969   00098A  EFD2  F004         	goto	u1680
  4970   00098E  5029               	movf	(digitalWrite@pin+1)^0,w,c
  4971   000990  E107               	bnz	u1681
  4972   000992  0E18               	movlw	24
  4973   000994  5C28               	subwf	digitalWrite@pin^0,w,c
  4974   000996  B0D8               	btfsc	status,0,c
  4975   000998  EFD0  F004         	goto	u1681
  4976   00099C  EFD2  F004         	goto	u1680
  4977   0009A0                     u1681:
  4978   0009A0  EF00  F005         	goto	l2561
  4979   0009A4                     u1680:
  4980   0009A4                     
  4981                           ;io.c: 24:         pin -=16;
  4982   0009A4  0EF0               	movlw	240
  4983   0009A6  2628               	addwf	digitalWrite@pin^0,f,c
  4984   0009A8  0EFF               	movlw	255
  4985   0009AA  2229               	addwfc	(digitalWrite@pin+1)^0,f,c
  4986                           
  4987                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  4988   0009AC  502A               	movf	digitalWrite@value^0,w,c
  4989   0009AE  102B               	iorwf	(digitalWrite@value+1)^0,w,c
  4990   0009B0  B4D8               	btfsc	status,2,c
  4991   0009B2  EFDD  F004         	goto	u1691
  4992   0009B6  EFDF  F004         	goto	u1690
  4993   0009BA                     u1691:
  4994   0009BA  EFEF  F004         	goto	l2559
  4995   0009BE                     u1690:
  4996   0009BE  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  4997   0009C2  0E01               	movlw	1
  4998   0009C4  6E2D               	movwf	(??_digitalWrite+1)^0,c
  4999   0009C6  2A2C               	incf	??_digitalWrite^0,f,c
  5000   0009C8  EFE8  F004         	goto	u1704
  5001   0009CC                     u1705:
  5002   0009CC  90D8               	bcf	status,0,c
  5003   0009CE  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  5004   0009D0                     u1704:
  5005   0009D0  2E2C               	decfsz	??_digitalWrite^0,f,c
  5006   0009D2  EFE6  F004         	goto	u1705
  5007   0009D6  502D               	movf	(??_digitalWrite+1)^0,w,c
  5008   0009D8  1282               	iorwf	130,f,c	;volatile
  5009   0009DA  EF76  F005         	goto	l79
  5010   0009DE                     l2559:
  5011   0009DE  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  5012   0009E2  0E01               	movlw	1
  5013   0009E4  6E2D               	movwf	(??_digitalWrite+1)^0,c
  5014   0009E6  2A2C               	incf	??_digitalWrite^0,f,c
  5015   0009E8  EFF8  F004         	goto	u1714
  5016   0009EC                     u1715:
  5017   0009EC  90D8               	bcf	status,0,c
  5018   0009EE  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  5019   0009F0                     u1714:
  5020   0009F0  2E2C               	decfsz	??_digitalWrite^0,f,c
  5021   0009F2  EFF6  F004         	goto	u1715
  5022   0009F6  502D               	movf	(??_digitalWrite+1)^0,w,c
  5023   0009F8  0AFF               	xorlw	255
  5024   0009FA  1682               	andwf	130,f,c	;volatile
  5025   0009FC  EF76  F005         	goto	l79
  5026   000A00                     l2561:
  5027   000A00  BE29               	btfsc	(digitalWrite@pin+1)^0,7,c
  5028   000A02  EF0E  F005         	goto	u1720
  5029   000A06  5029               	movf	(digitalWrite@pin+1)^0,w,c
  5030   000A08  E107               	bnz	u1721
  5031   000A0A  0E20               	movlw	32
  5032   000A0C  5C28               	subwf	digitalWrite@pin^0,w,c
  5033   000A0E  B0D8               	btfsc	status,0,c
  5034   000A10  EF0C  F005         	goto	u1721
  5035   000A14  EF0E  F005         	goto	u1720
  5036   000A18                     u1721:
  5037   000A18  EF3C  F005         	goto	l2569
  5038   000A1C                     u1720:
  5039   000A1C                     
  5040                           ;io.c: 28:         pin -=24;
  5041   000A1C  0EE8               	movlw	232
  5042   000A1E  2628               	addwf	digitalWrite@pin^0,f,c
  5043   000A20  0EFF               	movlw	255
  5044   000A22  2229               	addwfc	(digitalWrite@pin+1)^0,f,c
  5045                           
  5046                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  5047   000A24  502A               	movf	digitalWrite@value^0,w,c
  5048   000A26  102B               	iorwf	(digitalWrite@value+1)^0,w,c
  5049   000A28  B4D8               	btfsc	status,2,c
  5050   000A2A  EF19  F005         	goto	u1731
  5051   000A2E  EF1B  F005         	goto	u1730
  5052   000A32                     u1731:
  5053   000A32  EF2B  F005         	goto	l2567
  5054   000A36                     u1730:
  5055   000A36  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  5056   000A3A  0E01               	movlw	1
  5057   000A3C  6E2D               	movwf	(??_digitalWrite+1)^0,c
  5058   000A3E  2A2C               	incf	??_digitalWrite^0,f,c
  5059   000A40  EF24  F005         	goto	u1744
  5060   000A44                     u1745:
  5061   000A44  90D8               	bcf	status,0,c
  5062   000A46  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  5063   000A48                     u1744:
  5064   000A48  2E2C               	decfsz	??_digitalWrite^0,f,c
  5065   000A4A  EF22  F005         	goto	u1745
  5066   000A4E  502D               	movf	(??_digitalWrite+1)^0,w,c
  5067   000A50  1283               	iorwf	131,f,c	;volatile
  5068   000A52  EF76  F005         	goto	l79
  5069   000A56                     l2567:
  5070   000A56  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  5071   000A5A  0E01               	movlw	1
  5072   000A5C  6E2D               	movwf	(??_digitalWrite+1)^0,c
  5073   000A5E  2A2C               	incf	??_digitalWrite^0,f,c
  5074   000A60  EF34  F005         	goto	u1754
  5075   000A64                     u1755:
  5076   000A64  90D8               	bcf	status,0,c
  5077   000A66  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  5078   000A68                     u1754:
  5079   000A68  2E2C               	decfsz	??_digitalWrite^0,f,c
  5080   000A6A  EF32  F005         	goto	u1755
  5081   000A6E  502D               	movf	(??_digitalWrite+1)^0,w,c
  5082   000A70  0AFF               	xorlw	255
  5083   000A72  1683               	andwf	131,f,c	;volatile
  5084   000A74  EF76  F005         	goto	l79
  5085   000A78                     l2569:
  5086   000A78  BE29               	btfsc	(digitalWrite@pin+1)^0,7,c
  5087   000A7A  EF4A  F005         	goto	u1760
  5088   000A7E  5029               	movf	(digitalWrite@pin+1)^0,w,c
  5089   000A80  E107               	bnz	u1761
  5090   000A82  0E28               	movlw	40
  5091   000A84  5C28               	subwf	digitalWrite@pin^0,w,c
  5092   000A86  B0D8               	btfsc	status,0,c
  5093   000A88  EF48  F005         	goto	u1761
  5094   000A8C  EF4A  F005         	goto	u1760
  5095   000A90                     u1761:
  5096   000A90  EF76  F005         	goto	l79
  5097   000A94                     u1760:
  5098   000A94                     
  5099                           ;io.c: 32:         pin -=32;
  5100   000A94  0EE0               	movlw	224
  5101   000A96  2628               	addwf	digitalWrite@pin^0,f,c
  5102   000A98  0EFF               	movlw	255
  5103   000A9A  2229               	addwfc	(digitalWrite@pin+1)^0,f,c
  5104                           
  5105                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  5106   000A9C  502A               	movf	digitalWrite@value^0,w,c
  5107   000A9E  102B               	iorwf	(digitalWrite@value+1)^0,w,c
  5108   000AA0  B4D8               	btfsc	status,2,c
  5109   000AA2  EF55  F005         	goto	u1771
  5110   000AA6  EF57  F005         	goto	u1770
  5111   000AAA                     u1771:
  5112   000AAA  EF67  F005         	goto	l2575
  5113   000AAE                     u1770:
  5114   000AAE  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  5115   000AB2  0E01               	movlw	1
  5116   000AB4  6E2D               	movwf	(??_digitalWrite+1)^0,c
  5117   000AB6  2A2C               	incf	??_digitalWrite^0,f,c
  5118   000AB8  EF60  F005         	goto	u1784
  5119   000ABC                     u1785:
  5120   000ABC  90D8               	bcf	status,0,c
  5121   000ABE  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  5122   000AC0                     u1784:
  5123   000AC0  2E2C               	decfsz	??_digitalWrite^0,f,c
  5124   000AC2  EF5E  F005         	goto	u1785
  5125   000AC6  502D               	movf	(??_digitalWrite+1)^0,w,c
  5126   000AC8  1284               	iorwf	132,f,c	;volatile
  5127   000ACA  EF76  F005         	goto	l79
  5128   000ACE                     l2575:
  5129   000ACE  C028  F02C         	movff	digitalWrite@pin,??_digitalWrite
  5130   000AD2  0E01               	movlw	1
  5131   000AD4  6E2D               	movwf	(??_digitalWrite+1)^0,c
  5132   000AD6  2A2C               	incf	??_digitalWrite^0,f,c
  5133   000AD8  EF70  F005         	goto	u1794
  5134   000ADC                     u1795:
  5135   000ADC  90D8               	bcf	status,0,c
  5136   000ADE  362D               	rlcf	(??_digitalWrite+1)^0,f,c
  5137   000AE0                     u1794:
  5138   000AE0  2E2C               	decfsz	??_digitalWrite^0,f,c
  5139   000AE2  EF6E  F005         	goto	u1795
  5140   000AE6  502D               	movf	(??_digitalWrite+1)^0,w,c
  5141   000AE8  0AFF               	xorlw	255
  5142   000AEA  1684               	andwf	132,f,c	;volatile
  5143   000AEC                     l79:
  5144   000AEC  0012               	return		;funcret
  5145   000AEE                     __end_of_digitalWrite:
  5146                           	callstack 0
  5147                           
  5148 ;; *************** function _I2C_delay *****************
  5149 ;; Defined at:
  5150 ;;		line 22 in file "soft_i2c.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  i               2    0        int 
  5155 ;;  v               2    0        volatile int 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      void 
  5158 ;; Registers used:
  5159 ;;		None
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0
  5166 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5168 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5169 ;;Total ram usage:        0 bytes
  5170 ;; Hardware stack levels used: 1
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_i2c_start
  5175 ;;		_i2c_stop
  5176 ;;		_i2c_write_bit
  5177 ;;		_i2c_read_bit
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text46
  5182   001EB2                     __ptext46:
  5183                           	callstack 0
  5184   001EB2                     _I2C_delay:
  5185                           	callstack 25
  5186   001EB2  0012               	return		;funcret
  5187   001EB4                     __end_of_I2C_delay:
  5188                           	callstack 0
  5189                           
  5190 ;; *************** function _dsInit *****************
  5191 ;; Defined at:
  5192 ;;		line 17 in file "ds1307.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;		None
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5206 ;;      Params:         0       0       0       0       0       0       0       0       0
  5207 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5209 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5210 ;;Total ram usage:        0 bytes
  5211 ;; Hardware stack levels used: 1
  5212 ;; Hardware stack levels required when called: 2
  5213 ;; This function calls:
  5214 ;;		_i2cInit
  5215 ;; This function is called by:
  5216 ;;		_main
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text47
  5221   001E9C                     __ptext47:
  5222                           	callstack 0
  5223   001E9C                     _dsInit:
  5224                           	callstack 28
  5225   001E9C                     
  5226                           ;ds1307.c: 18:  i2cInit();
  5227   001E9C  ECA9  F00E         	call	_i2cInit	;wreg free
  5228   001EA0  0012               	return		;funcret
  5229   001EA2                     __end_of_dsInit:
  5230                           	callstack 0
  5231                           
  5232 ;; *************** function _i2cInit *****************
  5233 ;; Defined at:
  5234 ;;		line 14 in file "soft_i2c.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5248 ;;      Params:         0       0       0       0       0       0       0       0       0
  5249 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5251 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5252 ;;Total ram usage:        0 bytes
  5253 ;; Hardware stack levels used: 1
  5254 ;; Hardware stack levels required when called: 1
  5255 ;; This function calls:
  5256 ;;		_pinMode
  5257 ;; This function is called by:
  5258 ;;		_dsInit
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text48
  5263   001D52                     __ptext48:
  5264                           	callstack 0
  5265   001D52                     _i2cInit:
  5266                           	callstack 28
  5267   001D52                     
  5268                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  5269   001D52  0E00               	movlw	0
  5270   001D54  6E29               	movwf	(pinMode@pin+1)^0,c
  5271   001D56  0E08               	movlw	8
  5272   001D58  6E28               	movwf	pinMode@pin^0,c
  5273   001D5A  0E00               	movlw	0
  5274   001D5C  6E2B               	movwf	(pinMode@type+1)^0,c
  5275   001D5E  0E01               	movlw	1
  5276   001D60  6E2A               	movwf	pinMode@type^0,c
  5277   001D62  EC77  F005         	call	_pinMode	;wreg free
  5278                           
  5279                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  5280   001D66  0E00               	movlw	0
  5281   001D68  6E29               	movwf	(pinMode@pin+1)^0,c
  5282   001D6A  0E09               	movlw	9
  5283   001D6C  6E28               	movwf	pinMode@pin^0,c
  5284   001D6E  0E00               	movlw	0
  5285   001D70  6E2B               	movwf	(pinMode@type+1)^0,c
  5286   001D72  0E01               	movlw	1
  5287   001D74  6E2A               	movwf	pinMode@type^0,c
  5288   001D76  EC77  F005         	call	_pinMode	;wreg free
  5289   001D7A  0012               	return		;funcret
  5290   001D7C                     __end_of_i2cInit:
  5291                           	callstack 0
  5292                           
  5293 ;; *************** function _pinMode *****************
  5294 ;; Defined at:
  5295 ;;		line 54 in file "io.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  pin             2    0[COMRAM] int 
  5298 ;;  type            2    2[COMRAM] int 
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  1    wreg      void 
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5310 ;;      Params:         4       0       0       0       0       0       0       0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5312 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5313 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5314 ;;Total ram usage:        6 bytes
  5315 ;; Hardware stack levels used: 1
  5316 ;; This function calls:
  5317 ;;		Nothing
  5318 ;; This function is called by:
  5319 ;;		_i2cInit
  5320 ;;		_read_SCL
  5321 ;;		_read_SDA
  5322 ;;		_clear_SCL
  5323 ;;		_clear_SDA
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text49
  5328   000AEE                     __ptext49:
  5329                           	callstack 0
  5330   000AEE                     _pinMode:
  5331                           	callstack 24
  5332   000AEE                     
  5333                           ;io.c: 56:     if(pin <8){
  5334   000AEE  BE29               	btfsc	(pinMode@pin+1)^0,7,c
  5335   000AF0  EF85  F005         	goto	u1900
  5336   000AF4  5029               	movf	(pinMode@pin+1)^0,w,c
  5337   000AF6  E107               	bnz	u1901
  5338   000AF8  0E08               	movlw	8
  5339   000AFA  5C28               	subwf	pinMode@pin^0,w,c
  5340   000AFC  B0D8               	btfsc	status,0,c
  5341   000AFE  EF83  F005         	goto	u1901
  5342   000B02  EF85  F005         	goto	u1900
  5343   000B06                     u1901:
  5344   000B06  EFAF  F005         	goto	l2623
  5345   000B0A                     u1900:
  5346   000B0A                     
  5347                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  5348   000B0A  502A               	movf	pinMode@type^0,w,c
  5349   000B0C  102B               	iorwf	(pinMode@type+1)^0,w,c
  5350   000B0E  B4D8               	btfsc	status,2,c
  5351   000B10  EF8C  F005         	goto	u1911
  5352   000B14  EF8E  F005         	goto	u1910
  5353   000B18                     u1911:
  5354   000B18  EF9E  F005         	goto	l2621
  5355   000B1C                     u1910:
  5356   000B1C  C028  F02C         	movff	pinMode@pin,??_pinMode
  5357   000B20  0E01               	movlw	1
  5358   000B22  6E2D               	movwf	(??_pinMode+1)^0,c
  5359   000B24  2A2C               	incf	??_pinMode^0,f,c
  5360   000B26  EF97  F005         	goto	u1924
  5361   000B2A                     u1925:
  5362   000B2A  90D8               	bcf	status,0,c
  5363   000B2C  362D               	rlcf	(??_pinMode+1)^0,f,c
  5364   000B2E                     u1924:
  5365   000B2E  2E2C               	decfsz	??_pinMode^0,f,c
  5366   000B30  EF95  F005         	goto	u1925
  5367   000B34  502D               	movf	(??_pinMode+1)^0,w,c
  5368   000B36  1292               	iorwf	146,f,c	;volatile
  5369   000B38  EF9D  F006         	goto	l113
  5370   000B3C                     l2621:
  5371   000B3C  C028  F02C         	movff	pinMode@pin,??_pinMode
  5372   000B40  0E01               	movlw	1
  5373   000B42  6E2D               	movwf	(??_pinMode+1)^0,c
  5374   000B44  2A2C               	incf	??_pinMode^0,f,c
  5375   000B46  EFA7  F005         	goto	u1934
  5376   000B4A                     u1935:
  5377   000B4A  90D8               	bcf	status,0,c
  5378   000B4C  362D               	rlcf	(??_pinMode+1)^0,f,c
  5379   000B4E                     u1934:
  5380   000B4E  2E2C               	decfsz	??_pinMode^0,f,c
  5381   000B50  EFA5  F005         	goto	u1935
  5382   000B54  502D               	movf	(??_pinMode+1)^0,w,c
  5383   000B56  0AFF               	xorlw	255
  5384   000B58  1692               	andwf	146,f,c	;volatile
  5385   000B5A  EF9D  F006         	goto	l113
  5386   000B5E                     l2623:
  5387   000B5E  BE29               	btfsc	(pinMode@pin+1)^0,7,c
  5388   000B60  EFBD  F005         	goto	u1940
  5389   000B64  5029               	movf	(pinMode@pin+1)^0,w,c
  5390   000B66  E107               	bnz	u1941
  5391   000B68  0E10               	movlw	16
  5392   000B6A  5C28               	subwf	pinMode@pin^0,w,c
  5393   000B6C  B0D8               	btfsc	status,0,c
  5394   000B6E  EFBB  F005         	goto	u1941
  5395   000B72  EFBD  F005         	goto	u1940
  5396   000B76                     u1941:
  5397   000B76  EFEB  F005         	goto	l2631
  5398   000B7A                     u1940:
  5399   000B7A                     
  5400                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  5401   000B7A  502A               	movf	pinMode@type^0,w,c
  5402   000B7C  102B               	iorwf	(pinMode@type+1)^0,w,c
  5403   000B7E  B4D8               	btfsc	status,2,c
  5404   000B80  EFC4  F005         	goto	u1951
  5405   000B84  EFC6  F005         	goto	u1950
  5406   000B88                     u1951:
  5407   000B88  EFD8  F005         	goto	l2629
  5408   000B8C                     u1950:
  5409   000B8C  C028  F02C         	movff	pinMode@pin,??_pinMode
  5410   000B90  0EF8               	movlw	-8
  5411   000B92  262C               	addwf	??_pinMode^0,f,c
  5412   000B94  0E01               	movlw	1
  5413   000B96  6E2D               	movwf	(??_pinMode+1)^0,c
  5414   000B98  2A2C               	incf	??_pinMode^0,f,c
  5415   000B9A  EFD1  F005         	goto	u1964
  5416   000B9E                     u1965:
  5417   000B9E  90D8               	bcf	status,0,c
  5418   000BA0  362D               	rlcf	(??_pinMode+1)^0,f,c
  5419   000BA2                     u1964:
  5420   000BA2  2E2C               	decfsz	??_pinMode^0,f,c
  5421   000BA4  EFCF  F005         	goto	u1965
  5422   000BA8  502D               	movf	(??_pinMode+1)^0,w,c
  5423   000BAA  1293               	iorwf	147,f,c	;volatile
  5424   000BAC  EF9D  F006         	goto	l113
  5425   000BB0                     l2629:
  5426   000BB0  C028  F02C         	movff	pinMode@pin,??_pinMode
  5427   000BB4  0EF8               	movlw	-8
  5428   000BB6  262C               	addwf	??_pinMode^0,f,c
  5429   000BB8  0E01               	movlw	1
  5430   000BBA  6E2D               	movwf	(??_pinMode+1)^0,c
  5431   000BBC  2A2C               	incf	??_pinMode^0,f,c
  5432   000BBE  EFE3  F005         	goto	u1974
  5433   000BC2                     u1975:
  5434   000BC2  90D8               	bcf	status,0,c
  5435   000BC4  362D               	rlcf	(??_pinMode+1)^0,f,c
  5436   000BC6                     u1974:
  5437   000BC6  2E2C               	decfsz	??_pinMode^0,f,c
  5438   000BC8  EFE1  F005         	goto	u1975
  5439   000BCC  502D               	movf	(??_pinMode+1)^0,w,c
  5440   000BCE  0AFF               	xorlw	255
  5441   000BD0  1693               	andwf	147,f,c	;volatile
  5442   000BD2  EF9D  F006         	goto	l113
  5443   000BD6                     l2631:
  5444   000BD6  BE29               	btfsc	(pinMode@pin+1)^0,7,c
  5445   000BD8  EFF9  F005         	goto	u1980
  5446   000BDC  5029               	movf	(pinMode@pin+1)^0,w,c
  5447   000BDE  E107               	bnz	u1981
  5448   000BE0  0E18               	movlw	24
  5449   000BE2  5C28               	subwf	pinMode@pin^0,w,c
  5450   000BE4  B0D8               	btfsc	status,0,c
  5451   000BE6  EFF7  F005         	goto	u1981
  5452   000BEA  EFF9  F005         	goto	u1980
  5453   000BEE                     u1981:
  5454   000BEE  EF27  F006         	goto	l2639
  5455   000BF2                     u1980:
  5456   000BF2                     
  5457                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  5458   000BF2  502A               	movf	pinMode@type^0,w,c
  5459   000BF4  102B               	iorwf	(pinMode@type+1)^0,w,c
  5460   000BF6  B4D8               	btfsc	status,2,c
  5461   000BF8  EF00  F006         	goto	u1991
  5462   000BFC  EF02  F006         	goto	u1990
  5463   000C00                     u1991:
  5464   000C00  EF14  F006         	goto	l2637
  5465   000C04                     u1990:
  5466   000C04  C028  F02C         	movff	pinMode@pin,??_pinMode
  5467   000C08  0EF0               	movlw	-16
  5468   000C0A  262C               	addwf	??_pinMode^0,f,c
  5469   000C0C  0E01               	movlw	1
  5470   000C0E  6E2D               	movwf	(??_pinMode+1)^0,c
  5471   000C10  2A2C               	incf	??_pinMode^0,f,c
  5472   000C12  EF0D  F006         	goto	u2004
  5473   000C16                     u2005:
  5474   000C16  90D8               	bcf	status,0,c
  5475   000C18  362D               	rlcf	(??_pinMode+1)^0,f,c
  5476   000C1A                     u2004:
  5477   000C1A  2E2C               	decfsz	??_pinMode^0,f,c
  5478   000C1C  EF0B  F006         	goto	u2005
  5479   000C20  502D               	movf	(??_pinMode+1)^0,w,c
  5480   000C22  1294               	iorwf	148,f,c	;volatile
  5481   000C24  EF9D  F006         	goto	l113
  5482   000C28                     l2637:
  5483   000C28  C028  F02C         	movff	pinMode@pin,??_pinMode
  5484   000C2C  0EF0               	movlw	-16
  5485   000C2E  262C               	addwf	??_pinMode^0,f,c
  5486   000C30  0E01               	movlw	1
  5487   000C32  6E2D               	movwf	(??_pinMode+1)^0,c
  5488   000C34  2A2C               	incf	??_pinMode^0,f,c
  5489   000C36  EF1F  F006         	goto	u2014
  5490   000C3A                     u2015:
  5491   000C3A  90D8               	bcf	status,0,c
  5492   000C3C  362D               	rlcf	(??_pinMode+1)^0,f,c
  5493   000C3E                     u2014:
  5494   000C3E  2E2C               	decfsz	??_pinMode^0,f,c
  5495   000C40  EF1D  F006         	goto	u2015
  5496   000C44  502D               	movf	(??_pinMode+1)^0,w,c
  5497   000C46  0AFF               	xorlw	255
  5498   000C48  1694               	andwf	148,f,c	;volatile
  5499   000C4A  EF9D  F006         	goto	l113
  5500   000C4E                     l2639:
  5501   000C4E  BE29               	btfsc	(pinMode@pin+1)^0,7,c
  5502   000C50  EF35  F006         	goto	u2020
  5503   000C54  5029               	movf	(pinMode@pin+1)^0,w,c
  5504   000C56  E107               	bnz	u2021
  5505   000C58  0E20               	movlw	32
  5506   000C5A  5C28               	subwf	pinMode@pin^0,w,c
  5507   000C5C  B0D8               	btfsc	status,0,c
  5508   000C5E  EF33  F006         	goto	u2021
  5509   000C62  EF35  F006         	goto	u2020
  5510   000C66                     u2021:
  5511   000C66  EF63  F006         	goto	l2647
  5512   000C6A                     u2020:
  5513   000C6A                     
  5514                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  5515   000C6A  502A               	movf	pinMode@type^0,w,c
  5516   000C6C  102B               	iorwf	(pinMode@type+1)^0,w,c
  5517   000C6E  B4D8               	btfsc	status,2,c
  5518   000C70  EF3C  F006         	goto	u2031
  5519   000C74  EF3E  F006         	goto	u2030
  5520   000C78                     u2031:
  5521   000C78  EF50  F006         	goto	l2645
  5522   000C7C                     u2030:
  5523   000C7C  C028  F02C         	movff	pinMode@pin,??_pinMode
  5524   000C80  0EE8               	movlw	-24
  5525   000C82  262C               	addwf	??_pinMode^0,f,c
  5526   000C84  0E01               	movlw	1
  5527   000C86  6E2D               	movwf	(??_pinMode+1)^0,c
  5528   000C88  2A2C               	incf	??_pinMode^0,f,c
  5529   000C8A  EF49  F006         	goto	u2044
  5530   000C8E                     u2045:
  5531   000C8E  90D8               	bcf	status,0,c
  5532   000C90  362D               	rlcf	(??_pinMode+1)^0,f,c
  5533   000C92                     u2044:
  5534   000C92  2E2C               	decfsz	??_pinMode^0,f,c
  5535   000C94  EF47  F006         	goto	u2045
  5536   000C98  502D               	movf	(??_pinMode+1)^0,w,c
  5537   000C9A  1295               	iorwf	149,f,c	;volatile
  5538   000C9C  EF9D  F006         	goto	l113
  5539   000CA0                     l2645:
  5540   000CA0  C028  F02C         	movff	pinMode@pin,??_pinMode
  5541   000CA4  0EE8               	movlw	-24
  5542   000CA6  262C               	addwf	??_pinMode^0,f,c
  5543   000CA8  0E01               	movlw	1
  5544   000CAA  6E2D               	movwf	(??_pinMode+1)^0,c
  5545   000CAC  2A2C               	incf	??_pinMode^0,f,c
  5546   000CAE  EF5B  F006         	goto	u2054
  5547   000CB2                     u2055:
  5548   000CB2  90D8               	bcf	status,0,c
  5549   000CB4  362D               	rlcf	(??_pinMode+1)^0,f,c
  5550   000CB6                     u2054:
  5551   000CB6  2E2C               	decfsz	??_pinMode^0,f,c
  5552   000CB8  EF59  F006         	goto	u2055
  5553   000CBC  502D               	movf	(??_pinMode+1)^0,w,c
  5554   000CBE  0AFF               	xorlw	255
  5555   000CC0  1695               	andwf	149,f,c	;volatile
  5556   000CC2  EF9D  F006         	goto	l113
  5557   000CC6                     l2647:
  5558   000CC6  BE29               	btfsc	(pinMode@pin+1)^0,7,c
  5559   000CC8  EF71  F006         	goto	u2060
  5560   000CCC  5029               	movf	(pinMode@pin+1)^0,w,c
  5561   000CCE  E107               	bnz	u2061
  5562   000CD0  0E28               	movlw	40
  5563   000CD2  5C28               	subwf	pinMode@pin^0,w,c
  5564   000CD4  B0D8               	btfsc	status,0,c
  5565   000CD6  EF6F  F006         	goto	u2061
  5566   000CDA  EF71  F006         	goto	u2060
  5567   000CDE                     u2061:
  5568   000CDE  EF9D  F006         	goto	l113
  5569   000CE2                     u2060:
  5570   000CE2                     
  5571                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  5572   000CE2  502A               	movf	pinMode@type^0,w,c
  5573   000CE4  102B               	iorwf	(pinMode@type+1)^0,w,c
  5574   000CE6  B4D8               	btfsc	status,2,c
  5575   000CE8  EF78  F006         	goto	u2071
  5576   000CEC  EF7A  F006         	goto	u2070
  5577   000CF0                     u2071:
  5578   000CF0  EF8C  F006         	goto	l2653
  5579   000CF4                     u2070:
  5580   000CF4  C028  F02C         	movff	pinMode@pin,??_pinMode
  5581   000CF8  0EE0               	movlw	-32
  5582   000CFA  262C               	addwf	??_pinMode^0,f,c
  5583   000CFC  0E01               	movlw	1
  5584   000CFE  6E2D               	movwf	(??_pinMode+1)^0,c
  5585   000D00  2A2C               	incf	??_pinMode^0,f,c
  5586   000D02  EF85  F006         	goto	u2084
  5587   000D06                     u2085:
  5588   000D06  90D8               	bcf	status,0,c
  5589   000D08  362D               	rlcf	(??_pinMode+1)^0,f,c
  5590   000D0A                     u2084:
  5591   000D0A  2E2C               	decfsz	??_pinMode^0,f,c
  5592   000D0C  EF83  F006         	goto	u2085
  5593   000D10  502D               	movf	(??_pinMode+1)^0,w,c
  5594   000D12  1296               	iorwf	150,f,c	;volatile
  5595   000D14  EF9D  F006         	goto	l113
  5596   000D18                     l2653:
  5597   000D18  C028  F02C         	movff	pinMode@pin,??_pinMode
  5598   000D1C  0EE0               	movlw	-32
  5599   000D1E  262C               	addwf	??_pinMode^0,f,c
  5600   000D20  0E01               	movlw	1
  5601   000D22  6E2D               	movwf	(??_pinMode+1)^0,c
  5602   000D24  2A2C               	incf	??_pinMode^0,f,c
  5603   000D26  EF97  F006         	goto	u2094
  5604   000D2A                     u2095:
  5605   000D2A  90D8               	bcf	status,0,c
  5606   000D2C  362D               	rlcf	(??_pinMode+1)^0,f,c
  5607   000D2E                     u2094:
  5608   000D2E  2E2C               	decfsz	??_pinMode^0,f,c
  5609   000D30  EF95  F006         	goto	u2095
  5610   000D34  502D               	movf	(??_pinMode+1)^0,w,c
  5611   000D36  0AFF               	xorlw	255
  5612   000D38  1696               	andwf	150,f,c	;volatile
  5613   000D3A                     l113:
  5614   000D3A  0012               	return		;funcret
  5615   000D3C                     __end_of_pinMode:
  5616                           	callstack 0
  5617                           
  5618 ;; *************** function _dec2bcd *****************
  5619 ;; Defined at:
  5620 ;;		line 9 in file "ds1307.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  value           2   14[COMRAM] int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  2   14[COMRAM] int 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5634 ;;      Params:         2       0       0       0       0       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5636 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5637 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5638 ;;Total ram usage:        6 bytes
  5639 ;; Hardware stack levels used: 1
  5640 ;; Hardware stack levels required when called: 1
  5641 ;; This function calls:
  5642 ;;		___awdiv
  5643 ;;		___awmod
  5644 ;; This function is called by:
  5645 ;;		_main
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text50
  5650   00188A                     __ptext50:
  5651                           	callstack 0
  5652   00188A                     _dec2bcd:
  5653                           	callstack 29
  5654   00188A                     
  5655                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  5656   00188A  C036  F028         	movff	dec2bcd@value,___awdiv@dividend
  5657   00188E  C037  F029         	movff	dec2bcd@value+1,___awdiv@dividend+1
  5658   001892  0E00               	movlw	0
  5659   001894  6E2B               	movwf	(___awdiv@divisor+1)^0,c
  5660   001896  0E0A               	movlw	10
  5661   001898  6E2A               	movwf	___awdiv@divisor^0,c
  5662   00189A  ECD6  F00A         	call	___awdiv	;wreg free
  5663   00189E  C028  F038         	movff	?___awdiv,??_dec2bcd
  5664   0018A2  C029  F039         	movff	?___awdiv+1,??_dec2bcd+1
  5665   0018A6  3A38               	swapf	??_dec2bcd^0,f,c
  5666   0018A8  3A39               	swapf	(??_dec2bcd+1)^0,f,c
  5667   0018AA  0EF0               	movlw	240
  5668   0018AC  1639               	andwf	(??_dec2bcd+1)^0,f,c
  5669   0018AE  5038               	movf	??_dec2bcd^0,w,c
  5670   0018B0  0B0F               	andlw	15
  5671   0018B2  1239               	iorwf	(??_dec2bcd+1)^0,f,c
  5672   0018B4  0EF0               	movlw	240
  5673   0018B6  1638               	andwf	??_dec2bcd^0,f,c
  5674   0018B8  C036  F030         	movff	dec2bcd@value,___awmod@dividend
  5675   0018BC  C037  F031         	movff	dec2bcd@value+1,___awmod@dividend+1
  5676   0018C0  0E00               	movlw	0
  5677   0018C2  6E33               	movwf	(___awmod@divisor+1)^0,c
  5678   0018C4  0E0A               	movlw	10
  5679   0018C6  6E32               	movwf	___awmod@divisor^0,c
  5680   0018C8  EC38  F00B         	call	___awmod	;wreg free
  5681   0018CC  5030               	movf	?___awmod^0,w,c
  5682   0018CE  2438               	addwf	??_dec2bcd^0,w,c
  5683   0018D0  6E3A               	movwf	(??_dec2bcd+2)^0,c
  5684   0018D2  5031               	movf	(?___awmod+1)^0,w,c
  5685   0018D4  2039               	addwfc	(??_dec2bcd+1)^0,w,c
  5686   0018D6  6E3B               	movwf	(??_dec2bcd+3)^0,c
  5687   0018D8  0E80               	movlw	128
  5688   0018DA  103A               	iorwf	(??_dec2bcd+2)^0,w,c
  5689   0018DC  6E36               	movwf	dec2bcd@value^0,c
  5690   0018DE  503B               	movf	(??_dec2bcd+3)^0,w,c
  5691   0018E0  6E37               	movwf	(dec2bcd@value+1)^0,c
  5692   0018E2                     
  5693                           ;ds1307.c: 11:     return value;
  5694   0018E2  C036  F036         	movff	dec2bcd@value,?_dec2bcd
  5695   0018E6  C037  F037         	movff	dec2bcd@value+1,?_dec2bcd+1
  5696   0018EA  0012               	return		;funcret
  5697   0018EC                     __end_of_dec2bcd:
  5698                           	callstack 0
  5699                           
  5700 ;; *************** function ___awmod *****************
  5701 ;; Defined at:
  5702 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  dividend        2    8[COMRAM] int 
  5705 ;;  divisor         2   10[COMRAM] int 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  sign            1   13[COMRAM] unsigned char 
  5708 ;;  counter         1   12[COMRAM] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  2    8[COMRAM] int 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5718 ;;      Params:         4       0       0       0       0       0       0       0       0
  5719 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5721 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5722 ;;Total ram usage:        6 bytes
  5723 ;; Hardware stack levels used: 1
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_dec2bcd
  5728 ;;		_lcdInt
  5729 ;;		_rtcPutSeconds
  5730 ;;		_rtcPutMinutes
  5731 ;;		_rtcPutHours
  5732 ;;		_rtcPutDate
  5733 ;;		_rtcPutMonth
  5734 ;;		_rtcPutYear
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text51
  5739   001670                     __ptext51:
  5740                           	callstack 0
  5741   001670                     ___awmod:
  5742                           	callstack 27
  5743   001670  0E00               	movlw	0
  5744   001672  6E35               	movwf	___awmod@sign^0,c
  5745   001674  BE31               	btfsc	(___awmod@dividend+1)^0,7,c
  5746   001676  EF41  F00B         	goto	u2420
  5747   00167A  EF3F  F00B         	goto	u2421
  5748   00167E                     u2421:
  5749   00167E  EF47  F00B         	goto	l2909
  5750   001682                     u2420:
  5751   001682  6C30               	negf	___awmod@dividend^0,c
  5752   001684  1E31               	comf	(___awmod@dividend+1)^0,f,c
  5753   001686  B0D8               	btfsc	status,0,c
  5754   001688  2A31               	incf	(___awmod@dividend+1)^0,f,c
  5755   00168A  0E01               	movlw	1
  5756   00168C  6E35               	movwf	___awmod@sign^0,c
  5757   00168E                     l2909:
  5758   00168E  BE33               	btfsc	(___awmod@divisor+1)^0,7,c
  5759   001690  EF4E  F00B         	goto	u2430
  5760   001694  EF4C  F00B         	goto	u2431
  5761   001698                     u2431:
  5762   001698  EF52  F00B         	goto	l2913
  5763   00169C                     u2430:
  5764   00169C  6C32               	negf	___awmod@divisor^0,c
  5765   00169E  1E33               	comf	(___awmod@divisor+1)^0,f,c
  5766   0016A0  B0D8               	btfsc	status,0,c
  5767   0016A2  2A33               	incf	(___awmod@divisor+1)^0,f,c
  5768   0016A4                     l2913:
  5769   0016A4  5032               	movf	___awmod@divisor^0,w,c
  5770   0016A6  1033               	iorwf	(___awmod@divisor+1)^0,w,c
  5771   0016A8  B4D8               	btfsc	status,2,c
  5772   0016AA  EF59  F00B         	goto	u2441
  5773   0016AE  EF5B  F00B         	goto	u2440
  5774   0016B2                     u2441:
  5775   0016B2  EF7F  F00B         	goto	l2929
  5776   0016B6                     u2440:
  5777   0016B6  0E01               	movlw	1
  5778   0016B8  6E34               	movwf	___awmod@counter^0,c
  5779   0016BA  EF63  F00B         	goto	l2919
  5780   0016BE                     l2917:
  5781   0016BE  90D8               	bcf	status,0,c
  5782   0016C0  3632               	rlcf	___awmod@divisor^0,f,c
  5783   0016C2  3633               	rlcf	(___awmod@divisor+1)^0,f,c
  5784   0016C4  2A34               	incf	___awmod@counter^0,f,c
  5785   0016C6                     l2919:
  5786   0016C6  AE33               	btfss	(___awmod@divisor+1)^0,7,c
  5787   0016C8  EF68  F00B         	goto	u2451
  5788   0016CC  EF6A  F00B         	goto	u2450
  5789   0016D0                     u2451:
  5790   0016D0  EF5F  F00B         	goto	l2917
  5791   0016D4                     u2450:
  5792   0016D4                     l2921:
  5793   0016D4  5032               	movf	___awmod@divisor^0,w,c
  5794   0016D6  5C30               	subwf	___awmod@dividend^0,w,c
  5795   0016D8  5033               	movf	(___awmod@divisor+1)^0,w,c
  5796   0016DA  5831               	subwfb	(___awmod@dividend+1)^0,w,c
  5797   0016DC  A0D8               	btfss	status,0,c
  5798   0016DE  EF73  F00B         	goto	u2461
  5799   0016E2  EF75  F00B         	goto	u2460
  5800   0016E6                     u2461:
  5801   0016E6  EF79  F00B         	goto	l2925
  5802   0016EA                     u2460:
  5803   0016EA  5032               	movf	___awmod@divisor^0,w,c
  5804   0016EC  5E30               	subwf	___awmod@dividend^0,f,c
  5805   0016EE  5033               	movf	(___awmod@divisor+1)^0,w,c
  5806   0016F0  5A31               	subwfb	(___awmod@dividend+1)^0,f,c
  5807   0016F2                     l2925:
  5808   0016F2  90D8               	bcf	status,0,c
  5809   0016F4  3233               	rrcf	(___awmod@divisor+1)^0,f,c
  5810   0016F6  3232               	rrcf	___awmod@divisor^0,f,c
  5811   0016F8  2E34               	decfsz	___awmod@counter^0,f,c
  5812   0016FA  EF6A  F00B         	goto	l2921
  5813   0016FE                     l2929:
  5814   0016FE  5035               	movf	___awmod@sign^0,w,c
  5815   001700  B4D8               	btfsc	status,2,c
  5816   001702  EF85  F00B         	goto	u2471
  5817   001706  EF87  F00B         	goto	u2470
  5818   00170A                     u2471:
  5819   00170A  EF8B  F00B         	goto	l2933
  5820   00170E                     u2470:
  5821   00170E  6C30               	negf	___awmod@dividend^0,c
  5822   001710  1E31               	comf	(___awmod@dividend+1)^0,f,c
  5823   001712  B0D8               	btfsc	status,0,c
  5824   001714  2A31               	incf	(___awmod@dividend+1)^0,f,c
  5825   001716                     l2933:
  5826   001716  C030  F030         	movff	___awmod@dividend,?___awmod
  5827   00171A  C031  F031         	movff	___awmod@dividend+1,?___awmod+1
  5828   00171E  0012               	return		;funcret
  5829   001720                     __end_of___awmod:
  5830                           	callstack 0
  5831                           
  5832 ;; *************** function ___awdiv *****************
  5833 ;; Defined at:
  5834 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  dividend        2    0[COMRAM] int 
  5837 ;;  divisor         2    2[COMRAM] int 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  quotient        2    6[COMRAM] int 
  5840 ;;  sign            1    5[COMRAM] unsigned char 
  5841 ;;  counter         1    4[COMRAM] unsigned char 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  2    0[COMRAM] int 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2, status,0
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5851 ;;      Params:         4       0       0       0       0       0       0       0       0
  5852 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5854 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5855 ;;Total ram usage:        8 bytes
  5856 ;; Hardware stack levels used: 1
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_dec2bcd
  5861 ;;		_bcd2dec
  5862 ;;		_lcdInt
  5863 ;;		_rtcPutSeconds
  5864 ;;		_rtcPutMinutes
  5865 ;;		_rtcPutHours
  5866 ;;		_rtcPutDate
  5867 ;;		_rtcPutMonth
  5868 ;;		_rtcPutYear
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text52
  5873   0015AC                     __ptext52:
  5874                           	callstack 0
  5875   0015AC                     ___awdiv:
  5876                           	callstack 27
  5877   0015AC  0E00               	movlw	0
  5878   0015AE  6E2D               	movwf	___awdiv@sign^0,c
  5879   0015B0  BE2B               	btfsc	(___awdiv@divisor+1)^0,7,c
  5880   0015B2  EFDF  F00A         	goto	u2360
  5881   0015B6  EFDD  F00A         	goto	u2361
  5882   0015BA                     u2361:
  5883   0015BA  EFE5  F00A         	goto	l2865
  5884   0015BE                     u2360:
  5885   0015BE  6C2A               	negf	___awdiv@divisor^0,c
  5886   0015C0  1E2B               	comf	(___awdiv@divisor+1)^0,f,c
  5887   0015C2  B0D8               	btfsc	status,0,c
  5888   0015C4  2A2B               	incf	(___awdiv@divisor+1)^0,f,c
  5889   0015C6  0E01               	movlw	1
  5890   0015C8  6E2D               	movwf	___awdiv@sign^0,c
  5891   0015CA                     l2865:
  5892   0015CA  BE29               	btfsc	(___awdiv@dividend+1)^0,7,c
  5893   0015CC  EFEC  F00A         	goto	u2370
  5894   0015D0  EFEA  F00A         	goto	u2371
  5895   0015D4                     u2371:
  5896   0015D4  EFF2  F00A         	goto	l2871
  5897   0015D8                     u2370:
  5898   0015D8  6C28               	negf	___awdiv@dividend^0,c
  5899   0015DA  1E29               	comf	(___awdiv@dividend+1)^0,f,c
  5900   0015DC  B0D8               	btfsc	status,0,c
  5901   0015DE  2A29               	incf	(___awdiv@dividend+1)^0,f,c
  5902   0015E0  0E01               	movlw	1
  5903   0015E2  1A2D               	xorwf	___awdiv@sign^0,f,c
  5904   0015E4                     l2871:
  5905   0015E4  0E00               	movlw	0
  5906   0015E6  6E2F               	movwf	(___awdiv@quotient+1)^0,c
  5907   0015E8  0E00               	movlw	0
  5908   0015EA  6E2E               	movwf	___awdiv@quotient^0,c
  5909   0015EC  502A               	movf	___awdiv@divisor^0,w,c
  5910   0015EE  102B               	iorwf	(___awdiv@divisor+1)^0,w,c
  5911   0015F0  B4D8               	btfsc	status,2,c
  5912   0015F2  EFFD  F00A         	goto	u2381
  5913   0015F6  EFFF  F00A         	goto	u2380
  5914   0015FA                     u2381:
  5915   0015FA  EF27  F00B         	goto	l2893
  5916   0015FE                     u2380:
  5917   0015FE  0E01               	movlw	1
  5918   001600  6E2C               	movwf	___awdiv@counter^0,c
  5919   001602  EF07  F00B         	goto	l2879
  5920   001606                     l2877:
  5921   001606  90D8               	bcf	status,0,c
  5922   001608  362A               	rlcf	___awdiv@divisor^0,f,c
  5923   00160A  362B               	rlcf	(___awdiv@divisor+1)^0,f,c
  5924   00160C  2A2C               	incf	___awdiv@counter^0,f,c
  5925   00160E                     l2879:
  5926   00160E  AE2B               	btfss	(___awdiv@divisor+1)^0,7,c
  5927   001610  EF0C  F00B         	goto	u2391
  5928   001614  EF0E  F00B         	goto	u2390
  5929   001618                     u2391:
  5930   001618  EF03  F00B         	goto	l2877
  5931   00161C                     u2390:
  5932   00161C                     l2881:
  5933   00161C  90D8               	bcf	status,0,c
  5934   00161E  362E               	rlcf	___awdiv@quotient^0,f,c
  5935   001620  362F               	rlcf	(___awdiv@quotient+1)^0,f,c
  5936   001622  502A               	movf	___awdiv@divisor^0,w,c
  5937   001624  5C28               	subwf	___awdiv@dividend^0,w,c
  5938   001626  502B               	movf	(___awdiv@divisor+1)^0,w,c
  5939   001628  5829               	subwfb	(___awdiv@dividend+1)^0,w,c
  5940   00162A  A0D8               	btfss	status,0,c
  5941   00162C  EF1A  F00B         	goto	u2401
  5942   001630  EF1C  F00B         	goto	u2400
  5943   001634                     u2401:
  5944   001634  EF21  F00B         	goto	l2889
  5945   001638                     u2400:
  5946   001638  502A               	movf	___awdiv@divisor^0,w,c
  5947   00163A  5E28               	subwf	___awdiv@dividend^0,f,c
  5948   00163C  502B               	movf	(___awdiv@divisor+1)^0,w,c
  5949   00163E  5A29               	subwfb	(___awdiv@dividend+1)^0,f,c
  5950   001640  802E               	bsf	___awdiv@quotient^0,0,c
  5951   001642                     l2889:
  5952   001642  90D8               	bcf	status,0,c
  5953   001644  322B               	rrcf	(___awdiv@divisor+1)^0,f,c
  5954   001646  322A               	rrcf	___awdiv@divisor^0,f,c
  5955   001648  2E2C               	decfsz	___awdiv@counter^0,f,c
  5956   00164A  EF0E  F00B         	goto	l2881
  5957   00164E                     l2893:
  5958   00164E  502D               	movf	___awdiv@sign^0,w,c
  5959   001650  B4D8               	btfsc	status,2,c
  5960   001652  EF2D  F00B         	goto	u2411
  5961   001656  EF2F  F00B         	goto	u2410
  5962   00165A                     u2411:
  5963   00165A  EF33  F00B         	goto	l2897
  5964   00165E                     u2410:
  5965   00165E  6C2E               	negf	___awdiv@quotient^0,c
  5966   001660  1E2F               	comf	(___awdiv@quotient+1)^0,f,c
  5967   001662  B0D8               	btfsc	status,0,c
  5968   001664  2A2F               	incf	(___awdiv@quotient+1)^0,f,c
  5969   001666                     l2897:
  5970   001666  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  5971   00166A  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  5972   00166E  0012               	return		;funcret
  5973   001670                     __end_of___awdiv:
  5974                           	callstack 0
  5975                           
  5976                           	psect	rparam
  5977   000000                     
  5978                           	psect	config
  5979                           
  5980                           ;Config register CONFIG1L @ 0x300000
  5981                           ;	unspecified, using default values
  5982                           ;	PLL Prescaler Selection bits
  5983                           ;	PLLDIV = 0x0, unprogrammed default
  5984                           ;	System Clock Postscaler Selection bits
  5985                           ;	CPUDIV = 0x0, unprogrammed default
  5986                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  5987                           ;	USBDIV = 0x0, unprogrammed default
  5988   300000                     	org	3145728
  5989   300000  00                 	db	0
  5990                           
  5991                           ;Config register CONFIG1H @ 0x300001
  5992                           ;	Oscillator Selection bits
  5993                           ;	FOSC = HS, HS oscillator (HS)
  5994                           ;	Fail-Safe Clock Monitor Enable bit
  5995                           ;	FCMEN = 0x0, unprogrammed default
  5996                           ;	Internal/External Oscillator Switchover bit
  5997                           ;	IESO = 0x0, unprogrammed default
  5998   300001                     	org	3145729
  5999   300001  0C                 	db	12
  6000                           
  6001                           ;Config register CONFIG2L @ 0x300002
  6002                           ;	unspecified, using default values
  6003                           ;	Power-up Timer Enable bit
  6004                           ;	PWRT = 0x1, unprogrammed default
  6005                           ;	Brown-out Reset Enable bits
  6006                           ;	BOR = 0x3, unprogrammed default
  6007                           ;	Brown-out Reset Voltage bits
  6008                           ;	BORV = 0x3, unprogrammed default
  6009                           ;	USB Voltage Regulator Enable bit
  6010                           ;	VREGEN = 0x0, unprogrammed default
  6011   300002                     	org	3145730
  6012   300002  1F                 	db	31
  6013                           
  6014                           ;Config register CONFIG2H @ 0x300003
  6015                           ;	Watchdog Timer Enable bit
  6016                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6017                           ;	Watchdog Timer Postscale Select bits
  6018                           ;	WDTPS = 0xF, unprogrammed default
  6019   300003                     	org	3145731
  6020   300003  1E                 	db	30
  6021                           
  6022                           ; Padding undefined space
  6023   300004                     	org	3145732
  6024   300004  FF                 	db	255
  6025                           
  6026                           ;Config register CONFIG3H @ 0x300005
  6027                           ;	CCP2 MUX bit
  6028                           ;	CCP2MX = 0x1, unprogrammed default
  6029                           ;	PORTB A/D Enable bit
  6030                           ;	PBADEN = 0x1, unprogrammed default
  6031                           ;	Low-Power Timer 1 Oscillator Enable bit
  6032                           ;	LPT1OSC = 0x0, unprogrammed default
  6033                           ;	MCLR Pin Enable bit
  6034                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6035   300005                     	org	3145733
  6036   300005  83                 	db	131
  6037                           
  6038                           ;Config register CONFIG4L @ 0x300006
  6039                           ;	Stack Full/Underflow Reset Enable bit
  6040                           ;	STVREN = 0x1, unprogrammed default
  6041                           ;	Single-Supply ICSP Enable bit
  6042                           ;	LVP = OFF, Single-Supply ICSP disabled
  6043                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  6044                           ;	ICPRT = 0x0, unprogrammed default
  6045                           ;	Extended Instruction Set Enable bit
  6046                           ;	XINST = 0x0, unprogrammed default
  6047                           ;	Background Debugger Enable bit
  6048                           ;	DEBUG = 0x1, unprogrammed default
  6049   300006                     	org	3145734
  6050   300006  81                 	db	129
  6051                           
  6052                           ; Padding undefined space
  6053   300007                     	org	3145735
  6054   300007  FF                 	db	255
  6055                           tosu	equ	0xFFF
  6056                           tosh	equ	0xFFE
  6057                           tosl	equ	0xFFD
  6058                           stkptr	equ	0xFFC
  6059                           pclatu	equ	0xFFB
  6060                           pclath	equ	0xFFA
  6061                           pcl	equ	0xFF9
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           indf0	equ	0xFEF
  6069                           postinc0	equ	0xFEE
  6070                           postdec0	equ	0xFED
  6071                           preinc0	equ	0xFEC
  6072                           plusw0	equ	0xFEB
  6073                           fsr0h	equ	0xFEA
  6074                           fsr0l	equ	0xFE9
  6075                           wreg	equ	0xFE8
  6076                           indf1	equ	0xFE7
  6077                           postinc1	equ	0xFE6
  6078                           postdec1	equ	0xFE5
  6079                           preinc1	equ	0xFE4
  6080                           plusw1	equ	0xFE3
  6081                           fsr1h	equ	0xFE2
  6082                           fsr1l	equ	0xFE1
  6083                           bsr	equ	0xFE0
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           preinc2	equ	0xFDC
  6088                           plusw2	equ	0xFDB
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        15
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      87
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eventRead@prot	PTR unsigned char  size(1) Largest target is 4
		 -> prot(COMRAM[4]), 

    lcdString@str	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[17]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[12]), 
		 -> STR_8(CODE[12]), STR_9(CODE[17]), 

    msgs	PTR unsigned char [2][4] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 4
		 -> prot(COMRAM[4]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 4
		 -> prot(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_outputPrint
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_bcd2dec
    _lcdData->_lcdCommand4bits
    _dsReadData->_i2cReadByte
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _bcd2dec->_dsReadData
    ___wmul->___awdiv
    _eventRead->_getProt
    _smInit->_setState
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _dsWriteData->_dec2bcd
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _i2cInit->_pinMode
    _dec2bcd->___awmod
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   96417
                            _dec2bcd
                             _dsInit
                        _dsWriteData
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               5     5      0   60685
                                             28 COMRAM     5     5      0
                          _eventRead
                        _getLanguage
                            _getProt
                           _getState
                        _outputPrint
                          _resetProt
                        _setLanguage
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          4     0      4   59870
                                             24 COMRAM     4     0      4
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            1     0      1    1385
                                              3 COMRAM     1     0      1
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    5587
                                             22 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getTime                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   46863
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (3) _bcd2dec                                              4     2      2    3911
                                             18 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1515
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            9     7      2     370
                                              2 COMRAM     9     7      2
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0      22
                          _eventInit
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     180
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsWriteData                                          3     1      2   27839
                                             20 COMRAM     3     1      2
                            _dec2bcd (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _dec2bcd                                              6     4      2    4539
                                             14 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2120
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2124
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dec2bcd
     ___awdiv
     ___awmod
       ___awdiv (ARG)
   _dsInit
     _i2cInit
       _pinMode
   _dsWriteData
     _dec2bcd (ARG)
     _i2cWriteByte (ARG)
       _i2c_read_bit
         _I2C_delay
         _clear_SCL
           _digitalWrite
           _pinMode
         _read_SCL
           _digitalRead
           _pinMode
         _read_SDA
           _digitalRead
           _pinMode
       _i2c_start
         _I2C_delay
         _clear_SCL
         _clear_SDA
           _digitalWrite
           _pinMode
         _read_SCL
         _read_SDA
       _i2c_stop
         _I2C_delay
         _clear_SDA
         _read_SCL
         _read_SDA
       _i2c_write_bit
         _I2C_delay
         _clear_SCL
         _clear_SDA
         _read_SCL
         _read_SDA
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
   _smLoop
     _eventRead
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setProt
     _getLanguage
     _getProt
     _getState
     _outputPrint
       _bcd2dec
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _dsReadData (ARG)
           _i2cReadByte
             _i2c_read_bit
             _i2c_stop
             _i2c_write_bit
           _i2cWriteByte
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _getTime (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _resetProt
     _setLanguage
     _setState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRhh         69      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      57       1       91.6%
BITBIGSFRl          20      0       0      23        0.0%
BITBIGSFRhlh         8      0       0      21        0.0%
BITBIGSFRhll         4      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      57      24        0.0%
DATA                 0      0      57       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jun 11 17:23:37 2024

                     l22 18EA                       l25 1B0C                       l34 1CA2  
                     l28 1EA0                       l37 1A84                       l83 13B4  
                     l84 13B0                       l79 0AEC                       l88 13B0  
           lcdString@str 002B             ___awdiv@sign 002D                       _v0 001C  
                     _v1 001B                       _v2 001A                       _v3 0019  
                     _de 001F                       _ev 0056      ___wmul@multiplicand 0032  
          ??_i2cReadByte 0030    i2cWriteByte@send_stop 002F           i2cReadByte@bit 0032  
                    l113 0D3A                      l141 1E62                      l150 1E18  
                    l118 1EAC                      l136 149C                      l160 1E9A  
                    l138 14B0                      l411 194A                      l404 1C18  
                    l180 1A3E                      l340 1E2E                      l157 1C74  
                    l173 1888                      l183 1DE6                      l360 1EB2  
                    l345 1CFC                      l337 1E1C                      l521 1242  
                    l417 19F6                      l194 1BE6                      l363 1B7C  
                    l523 124A                      l372 1D26                      l188 1810  
                    l348 1E00                      l357 1D7A                      l366 1B44  
                    l382 1ACA                      l198 15AA                      l616 0F14  
                    l369 1D50                      l609 0E58                      l643 1EA8  
                    l389 1CD0                      l493 1E44                      l661 1EA4  
                    l398 19A2                      l646 1E94                      l911 166E  
                    l671 1DA2                      l655 1E8C                      l680 1DC8  
                    l568 10B4                      l664 1E78                      l593 1E6E  
                    l649 1E82                      l667 1EB0                      l924 171E  
                    l677 1C46                      _key 000E             ___awmod@sign 0035  
                    wreg 0FE8         i2c_write_bit@bit 002E            ?_i2cWriteByte 002F  
 i2cWriteByte@send_start 0031          i2cReadByte@nack 0031          i2cReadByte@byte 0034  
                   l2111 146A                     l2121 1498                     l2113 146C  
                   l2105 13EC                     l2123 14AC                     l2115 147C  
                   l2107 142C                     l3003 1EAE                     l3011 1D8C  
                   l2117 148E                     l2109 144C                     l3013 1D9E  
                   l3101 0F4A                     l3023 1D52                     l2119 1494  
                   l3007 1D7E                     l3031 10D8                     l3015 1E7A  
                   l3111 0F90                     l3103 0F5A                     l2145 1DE8  
                   l3009 1D8A                     l3041 111C                     l3033 10E0  
                   l3025 10B6                     l3017 1E84                     l3121 0FC8  
                   l3113 0F96                     l3105 0F62                     l3201 0D72  
                   l2091 13CA                     l2147 1DFC                     l3043 1124  
                   l3035 10F8                     l3051 1150                     l3027 10BE  
                   l3019 1EA2                     l3131 1014                     l3123 0FDE  
                   l3115 0FA6                     l3107 0F74                     l3211 0DAC  
                   l3203 0D78                     l2093 13CE                     l2085 13B6  
                   l2149 1DFE                     l3061 117A                     l3053 1158  
                   l3045 1132                     l3037 1106                     l3029 10CA  
                   l3141 1084                     l3125 0FE4                     l3133 101C  
                   l3109 0F7A                     l3117 0FAE                     l3221 0DEC  
                   l3213 0DBE                     l3205 0D8A                     l2095 13D2  
                   l2087 13C2                     l3071 11B8                     l3055 115E  
                   l3047 113A                     l3039 110E                     l3143 108A  
                   l3135 1030                     l3127 0FF8                     l3119 0FC2  
                   l3151 1C22                     l3231 0E2C                     l3223 0DF8  
                   l3215 0DC4                     l3207 0D94                     l2601 1320  
                   l2097 13D6                     l2089 13C6                     l3145 1E90  
                   l3073 11C4                     l3065 1194                     l3081 11E2  
                   l3057 1164                     l3049 1148                     l3137 1036  
                   l3129 1000                     l3153 1C2C                     l3241 0E8A  
                   l3233 0E48                     l3225 0E08                     l3217 0DD6  
                   l3209 0DA6                     l3163 188A                     l2611 1384  
                   l2603 133C                     l3171 1C78                     l2099 13E8  
                   l3075 11D0                     l3067 11A0                     l3083 1220  
                   l3059 1174                     l3139 105A                     l3155 1C2E  
                   l3147 1E72                     l3243 0E90                     l3235 0E60  
                   l3227 0E14                     l3219 0DDC                     l3165 18E2  
                   l2621 0B3C                     l2541 08CE                     l2701 186C  
                   l3181 17AA                     l3173 179A                     l3085 1226  
                   l3077 11D8                     l3069 11AC                     l3093 0F16  
                   l3157 1C3E                     l3149 1C1A                     l3245 0EA2  
                   l3237 0E72                     l3229 0E26                     l3253 0EC8  
                   l2631 0BD6                     l2623 0B5E                     l2615 0AEE  
                   l2551 0966                     l2543 08EE                     l2711 1A86  
                   l2703 186E                     l3183 17AE                     l3175 17A6  
                   l3191 1E6A                     l3087 1236                     l3159 1EA6  
                   l3095 0F28                     l3247 0EAC                     l3239 0E78  
                   l3255 0EF0                     l3271 178E                     l3263 1720  
                   l2641 0C6A                     l2633 0BF2                     l2625 0B7A  
                   l2617 0B0A                     l3169 1E9C                     l2561 0A00  
                   l2553 0988                     l2545 0910                     l2537 08A0  
                   l2609 1368                     l2713 1A96                     l2721 1AB6  
                   l2801 1936                     l2705 187C                     l3185 17B0  
                   l3089 1242                     l3097 0F2E                     l3257 0EFC  
                   l3249 0EBE                     l3193 0D3C                     l3265 1734  
                   l2651 0CF4                     l2643 0C7C                     l2635 0C04  
                   l2627 0B8C                     l2619 0B1C                     l2571 0A94  
                   l2563 0A1C                     l2555 09A4                     l2547 092C  
                   l2539 08BC                     l2723 1ABA                     l2715 1A9A  
                   l2731 1CA4                     l2803 1946                     l2707 1882  
                   l3187 17C0                     l1771 1E5A                     l1931 1E30  
                   l3099 0F44                     l3195 0D48                     l3267 1738  
                   l2901 1670                     l2653 0D18                     l2645 0CA0  
                   l2637 0C28                     l2629 0BB0                     l2573 0AAE  
                   l2565 0A36                     l2557 09BE                     l2549 0946  
                   l2661 1B0E                     l2725 1ABE                     l2717 1A9E  
                   l2741 1CC8                     l2733 1CA8                     l2709 1884  
                   l1773 1E5E                     l1933 1E34                     l3189 1E64  
                   l2821 19E0                     l2813 19B2                     l3197 0D5A  
                   l3269 178A                     l2911 169C                     l2903 1674  
                   l2647 0CC6                     l2639 0C4E                     l2575 0ACE  
                   l2567 0A56                     l2559 09DE                     l2727 1AC2  
                   l2719 1AB2                     l2743 1CCC                     l2735 1CAC  
                   l2751 196A                     l2655 1E96                     l1767 1E56  
                   l1935 1E3C                     l2823 19F0                     l2815 19C0  
                   l2807 19A6                     l3199 0D60                     l2921 16D4  
                   l2913 16A4                     l2905 1682                     l2649 0CE2  
                   l2569 0A78                     l2665 1D28                     l2593 12D8  
                   l2585 1290                     l2577 124C                     l2657 1B46  
                   l2729 1AC6                     l2737 1CC0                     l2761 199A  
                   l2753 196E                     l2745 194E                     l2841 1C50  
                   l2681 1824                     l1769 1E58                     l2825 19F4  
                   l2817 19C4                     l2931 170E                     l2923 16EA  
                   l2915 16B6                     l2907 168A                     l2595 12F4  
                   l2587 12AC                     l2579 1268                     l2771 1C04  
                   l2667 1CFE                     l2739 1CC4                     l2763 199E  
                   l2755 1982                     l2747 195E                     l2843 1C52  
                   l2835 1C4C                     l2675 1E06                     l2691 1842  
                   l2683 182A                     l2851 1DA4                     l2819 19DA  
                   l2861 15BE                     l2933 1716                     l2925 16F2  
                   l2917 16BE                     l2909 168E                     l2773 1C0A  
                   l2765 1BE8                     l2757 1992                     l2749 1966  
                   l2781 18EE                     l2845 1C62                     l2829 1C48  
                   l2677 1E08                     l2669 1E02                     l2693 1850  
                   l2685 182C                     l2853 1DC0                     l2941 1A40  
                   l2871 15E4                     l2863 15C6                     l2927 16F8  
                   l2919 16C6                     l2775 1C0E                     l2767 1BEC  
                   l2759 1996                     l2791 1906                     l2783 18FE  
                   l2847 1C64                     l2695 1856                     l2687 183A  
                   l2679 1814                     l2951 19FA                     l2943 1A7C  
                   l2881 161C                     l2873 15EC                     l2865 15CA  
                   l2857 15AC                     l2929 16FE                     l2777 1C16  
                   l2769 1BF0                     l2793 191C                     l2785 1902  
                   l2697 1858                     l2689 1840                     l2953 1A10  
                   l2937 1ACC                     l2849 1DCC                     l2961 1BB4  
                   l2891 1648                     l2883 1622                     l2875 15FE  
                   l2867 15D8                     l2859 15B0                     l2795 1920  
                   l2699 1866                     l2955 1A22                     l2947 1EAA  
                   l2971 14C0                     l2963 1BB8                     l2885 1638  
                   l2877 1606                     l2893 164E                     l2869 15E0  
                   l2797 1922                     l2957 1A32                     l2981 155E  
                   l2973 14C8                     l2965 1BC8                     l2895 165E  
                   l2887 1640                     l2879 160E                     l2799 1932  
                   l2959 1A3A                     l2991 1CD6                     l2983 158E  
                   l2975 14CE                     l2967 1BCA                     l2897 1666  
                   l2889 1642                     l2993 1CE4                     l2985 1E1C  
                   l2977 14FE                     l2969 14B2                     l2995 1CE8  
                   l2987 1E2A                     l2979 152E                     l2997 1CF6  
                   l2989 1CD2                     l2999 1CFA                     STR_1 0873  
                   STR_2 0843                     STR_3 0853                     STR_4 0833  
                   STR_5 0863                     STR_6 0883                     STR_7 0893  
                   STR_8 0893                     STR_9 0822                     u1211 13BC  
                   u2020 0C6A                     u2004 0C1A                     u2100 1B7A  
                   u2021 0C66                     u2005 0C16                     u2101 1B74  
                   u1221 13E0                     u2030 0C7C                     u2014 0C3E  
                   u2110 1B7C                     u2031 0C78                     u2015 0C3A  
                   u2120 1B42                     u2200 1A96                     u1240 142C  
                   u2121 1B3C                     u2201 1A92                     u1241 1428  
                   u2130 1B44                     u2210 1AB2                     u1234 1412  
                   u2211 1AAE                     u1235 140E                     u2060 0CE2  
                   u2044 0C92                     u2220 1CC0                     u2300 1932  
                   u2140 1E18                     u2061 0CDE                     u2045 0C8E  
                   u2221 1CBC                     u2301 192E                     u2141 1E14  
                   _LATA 0F89                     u2070 0CF4                     u2054 0CB6  
                   u2230 195E                     u2310 1946                     u1270 147C  
                   u1254 143E                     u2150 1824                     u2071 0CF0  
                   u2055 0CB2                     u2231 195A                     u2311 1942  
                   u1271 1478                     u1255 143A                     u2151 1820  
                   u2400 1638                     u1600 08BC                     u2240 1982  
                   u1280 148E                     u1264 145E                     u2160 183A  
                   u2320 19DA                     u2401 1634                     u1601 08B8  
                   u2241 197E                     u1281 148A                     u1265 145A  
                   u2161 1836                     u2321 19D6                     u2410 165E  
                   u1610 08CE                     u2250 1992                     u1290 14AC  
                   u2170 1850                     u2330 19F0                     u2411 165A  
                   u1611 08CA                     u2251 198E                     u1291 14A8  
                   u2171 184C                     u2331 19EC                     u2420 1682  
                   u2084 0D0A                     u2260 1C04                     u2340 1C62  
                   u2180 1866                     u2500 1BE6                     u2421 167E  
                   u2085 0D06                     u2261 1C00                     u2341 1C5E  
                   u2181 1862                     u2501 1BE2                     u2430 169C  
                   u2094 0D2E                     u2270 18FE                     u2350 1C74  
                   u2190 187C                     u2510 14C0                     u2431 1698  
                   u2095 0D2A                     u2271 18FA                     u2351 1C70  
                   u2191 1878                     u2511 14BC                     u2360 15BE  
                   u2440 16B6                     u1720 0A1C                     u1704 09D0  
                   u1640 092C                     u1624 08E0                     u1800 1268  
                   u2280 1916                     u2520 1E2A                     u2600 1132  
                   u2361 15BA                     u2441 16B2                     u1721 0A18  
                   u1705 09CC                     u1641 0928                     u1625 08DC  
                   u1801 1264                     u2281 1910                     u2521 1E26  
                   u2601 112E                     u2370 15D8                     u2450 16D4  
                   u1730 0A36                     u1714 09F0                     u1650 0946  
                   u1634 0900                     u2290 1918                     u2530 1CE4  
                   u2610 1148                     u2371 15D4                     u2451 16D0  
                   u1731 0A32                     u1715 09EC                     u1651 0942  
                   u1635 08FC                     u2531 1CE0                     u2611 1144  
                   u2380 15FE                     u2460 16EA                     u1900 0B0A  
                   u1820 12AC                     u2540 1CF6                     u2620 1174  
                   u2700 1030                     u2381 15FA                     u2461 16E6  
                   u1901 0B06                     u1821 12A8                     u2541 1CF2  
                   u2621 1170                     u2701 102C                     u2390 161C  
                   u2470 170E                     u1910 0B1C                     u1814 127A  
                   u2550 1D9E                     u2630 1190                     u2710 1C3E  
                   u2391 1618                     u2471 170A                     u1911 0B18  
                   u1815 1276                     u2551 1D9A                     u2631 118C  
                   u2711 1C3A                     u1760 0A94                     u1744 0A48  
                   u1680 09A4                     u1664 0958                     u1840 12F4  
                   u2480 1A22                     u2720 17C0                     u2640 1236  
                   u2560 10D8                     u2800 0E08                     u1761 0A90  
                   u1745 0A44                     u1681 09A0                     u1665 0954  
                   u1841 12F0                     u2481 1A1E                     u2721 17BC  
                   u2641 1232                     u2561 10D4                     u2801 0E04  
                   u1770 0AAE                     u1754 0A68                     u1690 09BE  
                   u1674 0978                     u1834 12C2                     u2490 1A32  
                   u2570 10F8                     u2650 0F28                     u2810 0E26  
                   u2730 0D5A                     u1771 0AAA                     u1755 0A64  
                   u1691 09BA                     u1675 0974                     u1835 12BE  
                   u2491 1A2E                     u2571 10F4                     u2651 0F24  
                   u2811 0E22                     u2731 0D56                     u1940 0B7A  
                   u1924 0B2E                     u1860 133C                     u2580 1106  
                   u2660 0F74                     u2820 0E48                     u2740 0D72  
                   u1941 0B76                     u1925 0B2A                     u1861 1338  
                   u2581 1102                     u2661 0F70                     u2821 0E44  
                   u2741 0D6E                     u1950 0B8C                     u1934 0B4E  
                   u1854 130A                     u2590 111C                     u2670 0FC2  
                   u2830 0E72                     u2750 0D8A                     u1951 0B88  
                   u1935 0B4A                     u1855 1306                     u2591 1118  
                   u2671 0FBE                     u2831 0E6E                     u2751 0D86  
                   u1784 0AC0                     u1880 1384                     u2680 0FF8  
                   u2840 0E8A                     u2760 0DA6                     u1785 0ABC  
                   u1881 1380                     u2681 0FF4                     u2841 0E86  
                   u2761 0DA2                     u1794 0AE0                     u1874 1352  
                   u2690 1014                     u2850 0EA2                     u2770 0DBE  
                   u1795 0ADC                     u1875 134E                     u2691 1010  
                   u2851 0E9E                     u2771 0DBA                     u1980 0BF2  
                   u1964 0BA2                     u2860 0EBE                     u2780 0DD6  
                   u1981 0BEE                     u1965 0B9E                     u2861 0EBA  
                   u2781 0DD2                     u1990 0C04                     u1974 0BC6  
                   u1894 139A                     u2790 0DEC                     u1991 0C00  
                   u1975 0BC2                     u1895 1396                     u2791 0DE8  
            _outputPrint 0F16                     _main 1720                     _msgs 0049  
                   _time 0008                     _prot 0024                     fsr2h 0FDA  
                   indf2 0FDF                     fsr1l 0FE1                     fsr2l 0FD9  
          ?_i2c_read_bit 0028                     prodh 0FF4                     prodl 0FF3  
                   start 0000             ___param_bank 0000          __end_of_i2cInit 1D7C  
        __end_of_bcd2dec 1B0E                    ?_main 0028          __end_of_dec2bcd 18EC  
        __end_of___awdiv 1670         ?_lcdCommand4bits 0028                    STR_10 0811  
        __end_of___awmod 1720          ___awdiv@divisor 002A          ___awdiv@counter 002C  
                  _PORTA 0F80                    _PORTB 0F81                    _PORTC 0F82  
                  _PORTD 0F83                    _PORTE 0F84                    _TRISA 0F92  
                  _TRISB 0F93                    _TRISC 0F94                    _TRISD 0F95  
                  _TRISE 0F96          __end_of_lcdData 1DE8          __end_of_lcdInit 1812  
         ??_i2cWriteByte 0031          __end_of_getTime 1E84          __end_of_getProt 1EB2  
    __end_of_i2cReadByte 19F8       outputPrint@numTela 0040                    _index 0014  
         setProt@newChar 0028          __end_of_pinMode 0D3C                    _valor 0023  
                  _state 0016             dec2bcd@value 0036          __end_of_setProt 1DA4  
                  tablat 0FF5        __end_of_I2C_delay 1EB4            _i2c_write_bit 194C  
                  plusw1 0FE3                    plusw2 0FDB                    status 0FD8  
         ??_i2c_read_bit 002E         __end_of_Delay2ms 1C76     __end_of_digitalWrite 0AEE  
        __initialization 1B7E             __end_of_main 179A          i2cWriteByte@bit 0032  
       __end_of_i2c_stop 1CD2             ?_setLanguage 0028                   ??_main 0049  
          __activetblptr 0002              eventRead@ev 002E         ___awdiv@dividend 0028  
         ?_i2c_write_bit 0028                ??_i2cInit 002E    __end_of_getAlarmLevel 1E8E  
     dsWriteData@address 003C         __end_of_getState 1EAA                ??_bcd2dec 003C  
                 _dTimer 000C                ??_dec2bcd 0038                   ___wmul 1DA4  
              ??___awdiv 002C                ??___awmod 0034                   _dsInit 1E9C  
                 _lcdInt 14B2                   _kpInit 1E56                   _kpRead 1EAA  
       __end_of_read_SDA 1B46         __end_of_read_SCL 1B7E                   _ev_ant 0012  
                 _smInit 1E64                   clear_0 1BA4                   _smLoop 0D3C  
       ___awdiv@quotient 002E          ___awmod@divisor 0032                ??_lcdData 002A  
                 isa$std 0001              _i2cReadByte 19A4                ??_lcdInit 002B  
        ___awmod@counter 0034                ??_getTime 002A                ??_getProt 002A  
       __end_of_setState 1E96             __pdataCOMRAM 0049                ??_pinMode 002C  
           __mediumconst 0000                ??_setProt 0028                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8        __end_of_Delay40us 1E1A  
             __accesstop 0060  __end_of__initialization 1BAA            ___rparam_used 0001  
           ?_pulseEnable 0028              pinMode@type 002A     __end_of_i2cWriteByte 194C  
         __pcstackCOMRAM 0028         i2cWriteByte@byte 0030        __end_of_i2c_start 1ACC  
   __end_of_i2c_read_bit 1C1A                ?_Delay2ms 0028          ??_i2c_write_bit 002E  
           ?_outputPrint 0040               _alarmLevel 0006                ?_i2c_stop 0028  
             _dsReadData 1A40         dsReadData@result 0038               _lcdCommand 19F8  
                ?___wmul 0030                  ?_dsInit 0028                  ?_lcdInt 003E  
                ?_kpInit 0028                  ?_kpRead 0028             eventRead@key 0031  
                ?_smInit 0028                  ?_smLoop 0028               _kpDebounce 13B6  
             ??_Delay2ms 0028     i2cReadByte@send_stop 002F             _digitalWrite 08A0  
              ?_getState 0028        __end_of_clear_SDA 1D28        __end_of_clear_SCL 1D52  
              ?_read_SDA 0028                ?_read_SCL 0028               ??_i2c_stop 002E  
                _i2cInit 1D52                _I2C_delay 1EB2                  __Hparam 0000  
              ?_setState 0028                  __Lparam 0000        __end_of_lcdString 1BE8  
        kpDebounce@tempo 0022                  _bcd2dec 1ACC                  _dec2bcd 188A  
             _estado_ant 0017                  ___awdiv 15AC                  ___awmod 1670  
           __psmallconst 0800                  __pcinit 1B7E           serialRead@resp 0028  
                _lcdData 1DCA                  __ramtop 0800                  _lcdInit 179A  
                __ptext0 1720                  __ptext1 0D3C                  __ptext2 1E70  
                __ptext3 1C1A                  _getTime 1E7A                  __ptext4 0F16  
                __ptext5 1BB4                  __ptext6 14B2                  __ptext7 1DCA  
                __ptext8 1E7A                  __ptext9 1EA2                  _getProt 1EAE  
      __end_of_eventInit 1E46        __end_of_eventRead 124C                  _display 001D  
                _key_ant 0010                  _pinMode 0AEE         ___awmod@dividend 0030  
            serialSend@c 0028                  _setProt 1D7C               ??_getState 0028  
              Delay2ms@j 0028                Delay2ms@k 0029                  _started 001E  
    kpDebounce@valorNovo 0021     end_of_initialization 1BAA               ??_read_SDA 002E  
             ??_read_SCL 002E        __end_of_resetProt 1C48            __Lmediumconst 0000  
            ?_dsReadData 0035           digitalRead@pin 0028               ?_I2C_delay 0028  
             ??_setState 0028               _serialInit 1DE8               _serialRead 1CD2  
             _serialSend 1E1A                  postdec1 0FE5              ?_lcdCommand 0028  
                postinc0 0FEE                  postinc2 0FDE            ??_digitalRead 002A  
          ??_getLanguage 0028              ?_kpDebounce 0028             ?_i2cReadByte 002F  
        i2c_read_bit@bit 002E           _valor@ssd$F315 0801               _prot_ready 0018  
           _i2cWriteByte 18EC            ??_dsWriteData 003E                _Delay40us 1E02  
           _i2c_read_bit 1BE8        outputPrint@idioma 0042           __end_of___wmul 1DCA  
         __end_of_dsInit 1EA2            __pidataCOMRAM 1E46           __end_of_lcdInt 15AC  
         __end_of_kpInit 1E64           __end_of_kpRead 1EAE   __end_of_valor@ssd$F315 0811  
         __end_of_smInit 1E70           __end_of_smLoop 0F16      start_initialization 1B7E  
    __end_of_digitalRead 13B6      __end_of_getLanguage 1EA6                _i2c_start 1A86  
             ?_Delay40us 0028             smLoop@evento 0048        ??_lcdCommand4bits 0029  
            ??_I2C_delay 0028      __end_of_dsWriteData 1CA4              ?_serialInit 0028  
            ?_serialRead 0028              ?_serialSend 0028                 ??___wmul 0034  
               ??_dsInit 002E                 ??_lcdInt 0040                 ??_kpInit 0028  
               ??_kpRead 0028                 ??_smInit 0029                 ??_smLoop 0044  
      dsReadData@address 0035                _dTimerMax 000A              __pbssCOMRAM 0001  
             pinMode@pin 0028               ?_i2c_start 0028         setState@newState 0028  
  __end_of_i2c_write_bit 19A4               smLoop@prot 0047                 ?_i2cInit 0028  
          _getAlarmLevel 1E84                _clear_SDA 1CFE                _clear_SCL 1D28  
               ?_bcd2dec 003A                 ?_dec2bcd 0036                 ?___awdiv 0028  
               ?___awmod 0030                _lcdString 1BB4              _digitalRead 124C  
            _getLanguage 1EA2                 ?_lcdData 0028            ??_setLanguage 0028  
               ?_lcdInit 0028                 ?_getTime 0028                 ?_getProt 0028  
          lcdCommand@cmd 002A            eventRead@data 0030              __smallconst 0800  
          eventRead@prot 002D                 ?_pinMode 0028                 ?_setProt 0028  
         kpDebounce@bits 002B                _eventInit 1E30                _eventRead 10B6  
             resetProt@i 0028              _dsWriteData 1C76              ??_Delay40us 0028  
         ___wmul@product 0034             ??_dsReadData 0037           ?_getAlarmLevel 0028  
             ?_clear_SDA 0028               ?_clear_SCL 0028                _resetProt 1C1A  
              lcdInt@val 003E             ??_lcdCommand 002A               ?_lcdString 002B  
           ??_kpDebounce 0028        ___wmul@multiplier 0030    kpDebounce@valorAntigo 0020  
               _Delay2ms 1C48       __end_of_dsReadData 1A86               ?_eventInit 0028  
             ?_eventRead 002A              ??_i2c_start 002E      __end_of_setLanguage 1E7A  
              copy_data0 1B92       __end_of_lcdCommand 1A40             lcdData@valor 002A  
               _i2c_stop 1CA4       __end_of_kpDebounce 14B2                 __Hrparam 0000  
             ?_resetProt 0028            ??_pulseEnable 0028                 __Lrparam 0000  
       dsWriteData@value 003E         kpDebounce@portes 0030          _lcdCommand4bits 1812  
               __ptext10 1E84                 __ptext11 1A40                 __ptext20 1EAA  
               __ptext12 19A4                 __ptext21 1EAE                 __ptext13 1ACC  
               __ptext30 1E96                 __ptext22 1E64                 __ptext14 1DA4  
               __ptext31 1E02                 __ptext23 1E8E                 __ptext15 1EA6  
               __ptext40 1BE8                 __ptext32 1C48                 __ptext24 1E30  
               __ptext16 10B6                 __ptext41 1B0E                 __ptext33 13B6  
               __ptext25 1E56                 __ptext17 1D7C                 __ptext50 188A  
               __ptext42 1B46                 __ptext34 1C76                 __ptext26 1DE8  
               __ptext18 1E1A                 __ptext51 1670                 __ptext43 124C  
               __ptext35 18EC                 __ptext27 179A                 __ptext19 1CD2  
               __ptext52 15AC                 __ptext44 1D28                 __ptext36 194C  
               __ptext28 19F8                 __ptext45 08A0                 __ptext37 1CA4  
               __ptext29 1812                 __ptext46 1EB2                 __ptext38 1A86  
               __ptext47 1E9C                 __ptext39 1CFE                 __ptext48 1D52  
               __ptext49 0AEE                 _getState 1EA6              _smLoop$1389 0045  
          kpDebounce@F13 0001            kpDebounce@F15 0051            ??_outputPrint 0044  
               _language 0015          ??_getAlarmLevel 002A                 _read_SDA 1B0E  
               _read_SCL 1B46              ??_clear_SDA 002E              ??_clear_SCL 002E  
           ??_serialInit 0028             ??_serialRead 0028             ??_serialSend 0028  
               _setState 1E8E               Delay40us@j 0028                 lcdInit@i 002B  
               isa$xinst 0000              ??_lcdString 002C      __end_of_pulseEnable 1E9C  
            _setLanguage 1E70   setLanguage@newLanguage 0028              ??_eventInit 0028  
            ??_eventRead 002C            ?_digitalWrite 0028       __end_of_serialInit 1E02  
     __end_of_serialRead 1CFE       __end_of_serialSend 1E30        digitalWrite@value 002A  
            ??_resetProt 0028      __end_of_outputPrint 10B6             bcd2dec@value 003A  
           ?_digitalRead 0028             ?_getLanguage 0028  __end_of_lcdCommand4bits 188A  
            kpDebounce@j 0035           ??_digitalWrite 002C          digitalWrite@pin 0028  
           ?_dsWriteData 003C      lcdCommand4bits@data 0028       lcdCommand4bits@cmd 0029  
            _pulseEnable 1E96  
