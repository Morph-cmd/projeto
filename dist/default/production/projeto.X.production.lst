

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jun 04 17:39:56 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42   000000                     
    43                           ; Generated 17/10/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77   000000                     
    78                           	psect	idataCOMRAM
    79   001130                     __pidataCOMRAM:
    80                           	callstack 0
    81                           
    82                           ;initializer for _msgs
    83   001130  73                 	db	low STR_1
    84   001131  43                 	db	low STR_2
    85   001132  53                 	db	low STR_3
    86   001133  33                 	db	low STR_4
    87   001134  63                 	db	low STR_5
    88   001135  83                 	db	low STR_6
    89                           
    90                           ;initializer for kpDebounce@F15
    91   001136  02                 	db	2
    92   001137  03                 	db	3
    93   001138  05                 	db	5
    94   001139  04                 	db	4
    95   00113A  01                 	db	1
    96                           
    97                           ;initializer for _ev
    98   00113B  0062               	dw	98
    99                           
   100                           	psect	smallconst
   101   000800                     __psmallconst:
   102                           	callstack 0
   103   000800  00                 	db	0
   104   000801                     _valor@ssd$F312:
   105                           	callstack 0
   106   000801  3F                 	db	63
   107   000802  06                 	db	6
   108   000803  5B                 	db	91
   109   000804  4F                 	db	79
   110   000805  66                 	db	102
   111   000806  6D                 	db	109
   112   000807  7D                 	db	125
   113   000808  07                 	db	7
   114   000809  7F                 	db	127
   115   00080A  6F                 	db	111
   116   00080B  77                 	db	119
   117   00080C  7C                 	db	124
   118   00080D  39                 	db	57
   119   00080E  5E                 	db	94
   120   00080F  79                 	db	121
   121   000810  71                 	db	113
   122   000811                     __end_of_valor@ssd$F312:
   123                           	callstack 0
   124   000000                     _PORTA	set	3968
   125   000000                     _LATA	set	3977
   126   000000                     _TRISA	set	3986
   127   000000                     _PORTE	set	3972
   128   000000                     _PORTD	set	3971
   129   000000                     _PORTC	set	3970
   130   000000                     _PORTB	set	3969
   131   000000                     _TRISE	set	3990
   132   000000                     _TRISD	set	3989
   133   000000                     _TRISC	set	3988
   134   000000                     _TRISB	set	3987
   135   000811  45                 	db	69	;'E'
   136   000812  6E                 	db	110	;'n'
   137   000813  67                 	db	103	;'g'
   138   000814  6C                 	db	108	;'l'
   139   000815  69                 	db	105	;'i'
   140   000816  73                 	db	115	;'s'
   141   000817  68                 	db	104	;'h'
   142   000818  20                 	db	32
   143   000819  20                 	db	32
   144   00081A  20                 	db	32
   145   00081B  20                 	db	32
   146   00081C  20                 	db	32
   147   00081D  20                 	db	32
   148   00081E  20                 	db	32
   149   00081F  20                 	db	32
   150   000820  20                 	db	32
   151   000821  00                 	db	0
   152   000822  50                 	db	80	;'P'
   153   000823  6F                 	db	111	;'o'
   154   000824  72                 	db	114	;'r'
   155   000825  74                 	db	116	;'t'
   156   000826  75                 	db	117	;'u'
   157   000827  67                 	db	103	;'g'
   158   000828  75                 	db	117	;'u'
   159   000829  65                 	db	101	;'e'
   160   00082A  73                 	db	115	;'s'
   161   00082B  20                 	db	32
   162   00082C  20                 	db	32
   163   00082D  20                 	db	32
   164   00082E  20                 	db	32
   165   00082F  20                 	db	32
   166   000830  20                 	db	32
   167   000831  20                 	db	32
   168   000832  00                 	db	0
   169   000833                     STR_4:
   170   000833  43                 	db	67	;'C'
   171   000834  68                 	db	104	;'h'
   172   000835  61                 	db	97	;'a'
   173   000836  6E                 	db	110	;'n'
   174   000837  67                 	db	103	;'g'
   175   000838  65                 	db	101	;'e'
   176   000839  20                 	db	32
   177   00083A  74                 	db	116	;'t'
   178   00083B  69                 	db	105	;'i'
   179   00083C  6D                 	db	109	;'m'
   180   00083D  65                 	db	101	;'e'
   181   00083E  20                 	db	32
   182   00083F  20                 	db	32
   183   000840  20                 	db	32
   184   000841  20                 	db	32
   185   000842  00                 	db	0
   186   000843                     STR_2:
   187   000843  43                 	db	67	;'C'
   188   000844  68                 	db	104	;'h'
   189   000845  61                 	db	97	;'a'
   190   000846  6E                 	db	110	;'n'
   191   000847  67                 	db	103	;'g'
   192   000848  65                 	db	101	;'e'
   193   000849  20                 	db	32
   194   00084A  61                 	db	97	;'a'
   195   00084B  6C                 	db	108	;'l'
   196   00084C  61                 	db	97	;'a'
   197   00084D  72                 	db	114	;'r'
   198   00084E  6D                 	db	109	;'m'
   199   00084F  20                 	db	32
   200   000850  20                 	db	32
   201   000851  20                 	db	32
   202   000852  00                 	db	0
   203   000853                     STR_3:
   204   000853  41                 	db	65	;'A'
   205   000854  6C                 	db	108	;'l'
   206   000855  74                 	db	116	;'t'
   207   000856  65                 	db	101	;'e'
   208   000857  72                 	db	114	;'r'
   209   000858  61                 	db	97	;'a'
   210   000859  72                 	db	114	;'r'
   211   00085A  20                 	db	32
   212   00085B  74                 	db	116	;'t'
   213   00085C  65                 	db	101	;'e'
   214   00085D  6D                 	db	109	;'m'
   215   00085E  70                 	db	112	;'p'
   216   00085F  6F                 	db	111	;'o'
   217   000860  20                 	db	32
   218   000861  20                 	db	32
   219   000862  00                 	db	0
   220   000863                     STR_5:
   221   000863  41                 	db	65	;'A'
   222   000864  6C                 	db	108	;'l'
   223   000865  74                 	db	116	;'t'
   224   000866  65                 	db	101	;'e'
   225   000867  72                 	db	114	;'r'
   226   000868  61                 	db	97	;'a'
   227   000869  72                 	db	114	;'r'
   228   00086A  20                 	db	32
   229   00086B  69                 	db	105	;'i'
   230   00086C  64                 	db	100	;'d'
   231   00086D  69                 	db	105	;'i'
   232   00086E  6F                 	db	111	;'o'
   233   00086F  6D                 	db	109	;'m'
   234   000870  61                 	db	97	;'a'
   235   000871  20                 	db	32
   236   000872  00                 	db	0
   237   000873                     STR_1:
   238   000873  41                 	db	65	;'A'
   239   000874  6C                 	db	108	;'l'
   240   000875  74                 	db	116	;'t'
   241   000876  65                 	db	101	;'e'
   242   000877  72                 	db	114	;'r'
   243   000878  61                 	db	97	;'a'
   244   000879  72                 	db	114	;'r'
   245   00087A  20                 	db	32
   246   00087B  61                 	db	97	;'a'
   247   00087C  6C                 	db	108	;'l'
   248   00087D  61                 	db	97	;'a'
   249   00087E  72                 	db	114	;'r'
   250   00087F  6D                 	db	109	;'m'
   251   000880  65                 	db	101	;'e'
   252   000881  20                 	db	32
   253   000882  00                 	db	0
   254   000883                     STR_6:
   255   000883  43                 	db	67	;'C'
   256   000884  68                 	db	104	;'h'
   257   000885  61                 	db	97	;'a'
   258   000886  6E                 	db	110	;'n'
   259   000887  67                 	db	103	;'g'
   260   000888  65                 	db	101	;'e'
   261   000889  20                 	db	32
   262   00088A  6C                 	db	108	;'l'
   263   00088B  61                 	db	97	;'a'
   264   00088C  6E                 	db	110	;'n'
   265   00088D  67                 	db	103	;'g'
   266   00088E  75                 	db	117	;'u'
   267   00088F  61                 	db	97	;'a'
   268   000890  67                 	db	103	;'g'
   269   000891  65                 	db	101	;'e'
   270   000892  00                 	db	0
   271   000893                     STR_7:
   272   000893  20                 	db	32
   273   000894  20                 	db	32
   274   000895  20                 	db	32
   275   000896  20                 	db	32
   276   000897  20                 	db	32
   277   000898  20                 	db	32
   278   000899  20                 	db	32
   279   00089A  20                 	db	32
   280   00089B  20                 	db	32
   281   00089C  20                 	db	32
   282   00089D  20                 	db	32
   283   00089E  00                 	db	0
   284   00089F  00                 	db	0	; dummy byte at the end
   285   000000                     
   286                           ; #config settings
   287                           
   288                           	psect	cinit
   289   000F74                     __pcinit:
   290                           	callstack 0
   291   000F74                     start_initialization:
   292                           	callstack 0
   293   000F74                     __initialization:
   294                           	callstack 0
   295                           
   296                           ; Initialize objects allocated to COMRAM (13 bytes)
   297                           ; load TBLPTR registers with __pidataCOMRAM
   298   000F74  0E30               	movlw	low __pidataCOMRAM
   299   000F76  6EF6               	movwf	tblptrl,c
   300   000F78  0E11               	movlw	high __pidataCOMRAM
   301   000F7A  6EF7               	movwf	tblptrh,c
   302   000F7C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   303   000F7E  6EF8               	movwf	tblptru,c
   304   000F80  EE00  F03D         	lfsr	0,__pdataCOMRAM
   305   000F84  EE10 F00D          	lfsr	1,13
   306   000F88                     copy_data0:
   307   000F88  0009               	tblrd		*+
   308   000F8A  CFF5 FFEE          	movff	tablat,postinc0
   309   000F8E  50E5               	movf	postdec1,w,c
   310   000F90  50E1               	movf	fsr1l,w,c
   311   000F92  E1FA               	bnz	copy_data0
   312                           
   313                           ; Clear objects allocated to COMRAM (37 bytes)
   314   000F94  EE00  F001         	lfsr	0,__pbssCOMRAM
   315   000F98  0E25               	movlw	37
   316   000F9A                     clear_0:
   317   000F9A  6AEE               	clrf	postinc0,c
   318   000F9C  06E8               	decf	wreg,f,c
   319   000F9E  E1FD               	bnz	clear_0
   320   000FA0                     end_of_initialization:
   321                           	callstack 0
   322   000FA0                     __end_of__initialization:
   323                           	callstack 0
   324   000FA0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   325   000FA2  6EF8               	movwf	tblptru,c
   326   000FA4  0100               	movlb	0
   327   000FA6  EFEC  F007         	goto	_main	;jump to C main() function
   328                           
   329                           	psect	bssCOMRAM
   330   000001                     __pbssCOMRAM:
   331                           	callstack 0
   332   000001                     	ds	5
   333   000006                     _prot:
   334                           	callstack 0
   335   000006                     	ds	4
   336   00000A                     _alarmLevel:
   337                           	callstack 0
   338   00000A                     	ds	2
   339   00000C                     _time:
   340                           	callstack 0
   341   00000C                     	ds	2
   342   00000E                     	ds	2
   343   000010                     	ds	2
   344   000012                     _key:
   345                           	callstack 0
   346   000012                     	ds	2
   347   000014                     _key_ant:
   348                           	callstack 0
   349   000014                     	ds	2
   350   000016                     _ev_ant:
   351                           	callstack 0
   352   000016                     	ds	2
   353   000018                     _language:
   354                           	callstack 0
   355   000018                     	ds	1
   356   000019                     _state:
   357                           	callstack 0
   358   000019                     	ds	1
   359   00001A                     _prot_ready:
   360                           	callstack 0
   361   00001A                     	ds	1
   362   00001B                     _v3:
   363                           	callstack 0
   364   00001B                     	ds	1
   365   00001C                     _v2:
   366                           	callstack 0
   367   00001C                     	ds	1
   368   00001D                     _v1:
   369                           	callstack 0
   370   00001D                     	ds	1
   371   00001E                     _v0:
   372                           	callstack 0
   373   00001E                     	ds	1
   374   00001F                     _display:
   375                           	callstack 0
   376   00001F                     	ds	1
   377   000020                     _started:
   378                           	callstack 0
   379   000020                     	ds	1
   380   000021                     _de:
   381                           	callstack 0
   382   000021                     	ds	1
   383   000022                     kpDebounce@valorAntigo:
   384                           	callstack 0
   385   000022                     	ds	1
   386   000023                     kpDebounce@valorNovo:
   387                           	callstack 0
   388   000023                     	ds	1
   389   000024                     kpDebounce@tempo:
   390                           	callstack 0
   391   000024                     	ds	1
   392   000025                     _valor:
   393                           	callstack 0
   394   000025                     	ds	1
   395                           
   396                           	psect	dataCOMRAM
   397   00003D                     __pdataCOMRAM:
   398                           	callstack 0
   399   00003D                     _msgs:
   400                           	callstack 0
   401   00003D                     	ds	6
   402   000043                     kpDebounce@F15:
   403                           	callstack 0
   404   000043                     	ds	5
   405   000048                     	ds	2
   406                           
   407                           	psect	cstackCOMRAM
   408   000026                     __pcstackCOMRAM:
   409                           	callstack 0
   410   000026                     ??_kpDebounce:
   411   000026                     Delay40us@j:
   412                           	callstack 0
   413   000026                     Delay2ms@j:
   414                           	callstack 0
   415   000026                     lcdCommand4bits@data:
   416                           	callstack 0
   417   000026                     serialSend@c:
   418                           	callstack 0
   419   000026                     serialRead@resp:
   420                           	callstack 0
   421   000026                     setState@newState:
   422                           	callstack 0
   423   000026                     setLanguage@newLanguage:
   424                           	callstack 0
   425   000026                     getProt@p:
   426                           	callstack 0
   427   000026                     setProt@newChar:
   428                           	callstack 0
   429   000026                     resetProt@i:
   430                           	callstack 0
   431   000026                     pinMode@pin:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x0
   435   000026                     	ds	1
   436   000027                     Delay2ms@k:
   437                           	callstack 0
   438   000027                     lcdCommand4bits@cmd:
   439                           	callstack 0
   440   000027                     getProt@i:
   441                           	callstack 0
   442   000027                     setProt@i:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x1
   446   000027                     	ds	1
   447   000028                     lcdCommand@cmd:
   448                           	callstack 0
   449   000028                     lcdData@valor:
   450                           	callstack 0
   451   000028                     pinMode@type:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x2
   455   000028                     	ds	1
   456   000029                     ?_eventRead:
   457                           	callstack 0
   458   000029                     lcdInit@i:
   459                           	callstack 0
   460   000029                     kpDebounce@bits:
   461                           	callstack 0
   462                           
   463                           ; 5 bytes @ 0x3
   464   000029                     	ds	1
   465   00002A                     ??_pinMode:
   466                           
   467                           ; 1 bytes @ 0x4
   468   00002A                     	ds	1
   469   00002B                     ??_eventRead:
   470                           
   471                           ; 1 bytes @ 0x5
   472   00002B                     	ds	1
   473   00002C                     eventRead@prot:
   474                           	callstack 0
   475                           
   476                           ; 4 bytes @ 0x6
   477   00002C                     	ds	2
   478   00002E                     kpDebounce@portes:
   479                           	callstack 0
   480                           
   481                           ; 5 bytes @ 0x8
   482   00002E                     	ds	2
   483   000030                     eventRead@ev:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0xA
   487   000030                     	ds	2
   488   000032                     eventRead@data:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0xC
   492   000032                     	ds	1
   493   000033                     kpDebounce@j:
   494                           	callstack 0
   495   000033                     eventRead@key:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0xD
   499   000033                     	ds	2
   500   000035                     ??_smLoop:
   501                           
   502                           ; 1 bytes @ 0xF
   503   000035                     	ds	1
   504   000036                     smLoop@prot:
   505                           	callstack 0
   506                           
   507                           ; 4 bytes @ 0x10
   508   000036                     	ds	4
   509   00003A                     smLoop@i:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x14
   513   00003A                     	ds	2
   514   00003C                     smLoop@evento:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0x16
   518   00003C                     	ds	1
   519   00003D                     
   520                           ; 1 bytes @ 0x17
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 23 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   540 ;;      Params:         0       0       0       0       0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0       0       0
   543 ;;      Totals:         0       0       0       0       0       0       0       0       0
   544 ;;Total ram usage:        0 bytes
   545 ;; Hardware stack levels required when called: 5
   546 ;; This function calls:
   547 ;;		_dsInit
   548 ;;		_kpDebounce
   549 ;;		_kpInit
   550 ;;		_lcdInit
   551 ;;		_serialInit
   552 ;;		_smInit
   553 ;;		_smLoop
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text0
   560   000FD8                     __ptext0:
   561                           	callstack 0
   562   000FD8                     _main:
   563                           	callstack 26
   564   000FD8                     
   565                           ;main.c: 26:     kpInit();
   566   000FD8  EC91  F008         	call	_kpInit	;wreg free
   567                           
   568                           ;main.c: 27:     lcdInit();
   569   000FDC  ECFA  F006         	call	_lcdInit	;wreg free
   570                           
   571                           ;main.c: 28:     dsInit();
   572   000FE0  ECB1  F008         	call	_dsInit	;wreg free
   573                           
   574                           ;main.c: 29:     smInit();
   575   000FE4  EC9F  F008         	call	_smInit	;wreg free
   576                           
   577                           ;main.c: 30:     serialInit();
   578   000FE8  EC62  F008         	call	_serialInit	;wreg free
   579   000FEC                     
   580                           ;main.c: 31:     TRISA = 0x00;
   581   000FEC  0E00               	movlw	0
   582   000FEE  6E92               	movwf	146,c	;volatile
   583   000FF0                     
   584                           ;main.c: 32:     LATA = 0x00;
   585   000FF0  0E00               	movlw	0
   586   000FF2  6E89               	movwf	137,c	;volatile
   587   000FF4                     l2746:
   588                           
   589                           ;main.c: 35:         kpDebounce();
   590   000FF4  EC22  F006         	call	_kpDebounce	;wreg free
   591   000FF8                     
   592                           ;main.c: 37:         smLoop();
   593   000FF8  ECA0  F006         	call	_smLoop	;wreg free
   594   000FFC  EFFA  F007         	goto	l2746
   595   001000  EF00  F000         	goto	start
   596   001004                     __end_of_main:
   597                           	callstack 0
   598                           
   599 ;; *************** function _smLoop *****************
   600 ;; Defined at:
   601 ;;		line 13 in file "stateMachine.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  i               2   20[COMRAM] int 
   606 ;;  prot            4   16[COMRAM] unsigned char [4]
   607 ;;  evento          1   22[COMRAM] unsigned char 
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   617 ;;      Params:         0       0       0       0       0       0       0       0       0
   618 ;;      Locals:         7       0       0       0       0       0       0       0       0
   619 ;;      Temps:          1       0       0       0       0       0       0       0       0
   620 ;;      Totals:         8       0       0       0       0       0       0       0       0
   621 ;;Total ram usage:        8 bytes
   622 ;; Hardware stack levels used: 1
   623 ;; Hardware stack levels required when called: 4
   624 ;; This function calls:
   625 ;;		_eventRead
   626 ;;		_getLanguage
   627 ;;		_getProt
   628 ;;		_getState
   629 ;;		_lcdData
   630 ;;		_resetProt
   631 ;;		_setLanguage
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text1
   638   000D40                     __ptext1:
   639                           	callstack 0
   640   000D40                     _smLoop:
   641                           	callstack 26
   642   000D40                     
   643                           ;stateMachine.c: 14:     unsigned char evento;;stateMachine.c: 17:     evento = eventRea
      +                          d();
   644   000D40  EC77  F005         	call	_eventRead	;wreg free
   645   000D44  5029               	movf	?_eventRead^0,w,c
   646   000D46  6E3C               	movwf	smLoop@evento^0,c
   647                           
   648                           ;stateMachine.c: 19:     switch (getState()) {
   649   000D48  EFF1  F006         	goto	l2608
   650   000D4C                     l2580:
   651                           
   652                           ;stateMachine.c: 22:             if (evento == EV_B_0) {
   653   000D4C  503C               	movf	smLoop@evento^0,w,c
   654   000D4E  A4D8               	btfss	status,2,c
   655   000D50  EFAC  F006         	goto	u1771
   656   000D54  EFAE  F006         	goto	u1770
   657   000D58                     u1771:
   658   000D58  EFB4  F006         	goto	l2584
   659   000D5C                     u1770:
   660   000D5C                     
   661                           ;stateMachine.c: 24:                 setLanguage(getLanguage() + 1);
   662   000D5C  ECB6  F008         	call	_getLanguage	;wreg free
   663   000D60  6E35               	movwf	??_smLoop^0,c
   664   000D62  2835               	incf	??_smLoop^0,w,c
   665   000D64  ECA5  F008         	call	_setLanguage
   666   000D68                     l2584:
   667                           
   668                           ;stateMachine.c: 28:             if (evento == EV_B_1) {
   669   000D68  043C               	decf	smLoop@evento^0,w,c
   670   000D6A  A4D8               	btfss	status,2,c
   671   000D6C  EFBA  F006         	goto	u1781
   672   000D70  EFBC  F006         	goto	u1780
   673   000D74                     u1781:
   674   000D74  EFC2  F006         	goto	l2588
   675   000D78                     u1780:
   676   000D78                     
   677                           ;stateMachine.c: 29:                 setLanguage(getLanguage() - 1);
   678   000D78  ECB6  F008         	call	_getLanguage	;wreg free
   679   000D7C  6E35               	movwf	??_smLoop^0,c
   680   000D7E  0435               	decf	??_smLoop^0,w,c
   681   000D80  ECA5  F008         	call	_setLanguage
   682   000D84                     l2588:
   683                           
   684                           ;stateMachine.c: 32:             if(evento == EV_PROT_SERIAL)
   685   000D84  0E05               	movlw	5
   686   000D86  183C               	xorwf	smLoop@evento^0,w,c
   687   000D88  A4D8               	btfss	status,2,c
   688   000D8A  EFC9  F006         	goto	u1791
   689   000D8E  EFCB  F006         	goto	u1790
   690   000D92                     u1791:
   691   000D92  EFF9  F006         	goto	l591
   692   000D96                     u1790:
   693   000D96                     
   694                           ;stateMachine.c: 33:             {;stateMachine.c: 34:                 lcdData('s');
   695   000D96  0E73               	movlw	115
   696   000D98  EC53  F008         	call	_lcdData
   697   000D9C                     
   698                           ;stateMachine.c: 35:                 unsigned char prot[4];;stateMachine.c: 36:         
      +                                  getProt(prot);
   699   000D9C  0E36               	movlw	low smLoop@prot
   700   000D9E  6E26               	movwf	getProt@p^0,c
   701   000DA0  EC18  F008         	call	_getProt	;wreg free
   702   000DA4                     
   703                           ;stateMachine.c: 38:                 for(int i = 0; i < 4; i++)
   704   000DA4  0E00               	movlw	0
   705   000DA6  6E3B               	movwf	(smLoop@i+1)^0,c
   706   000DA8  0E00               	movlw	0
   707   000DAA  6E3A               	movwf	smLoop@i^0,c
   708   000DAC                     l2600:
   709                           
   710                           ;stateMachine.c: 39:                 {;stateMachine.c: 40:                     lcdData(p
      +                          rot[i]);
   711   000DAC  503A               	movf	smLoop@i^0,w,c
   712   000DAE  0F36               	addlw	low smLoop@prot
   713   000DB0  6ED9               	movwf	fsr2l,c
   714   000DB2  6ADA               	clrf	fsr2h,c
   715   000DB4  50DF               	movf	indf2,w,c
   716   000DB6  EC53  F008         	call	_lcdData
   717   000DBA                     
   718                           ;stateMachine.c: 41:                 }
   719   000DBA  4A3A               	infsnz	smLoop@i^0,f,c
   720   000DBC  2A3B               	incf	(smLoop@i+1)^0,f,c
   721   000DBE  BE3B               	btfsc	(smLoop@i+1)^0,7,c
   722   000DC0  EFEB  F006         	goto	u1801
   723   000DC4  503B               	movf	(smLoop@i+1)^0,w,c
   724   000DC6  E109               	bnz	u1800
   725   000DC8  0E04               	movlw	4
   726   000DCA  5C3A               	subwf	smLoop@i^0,w,c
   727   000DCC  A0D8               	btfss	status,0,c
   728   000DCE  EFEB  F006         	goto	u1801
   729   000DD2  EFED  F006         	goto	u1800
   730   000DD6                     u1801:
   731   000DD6  EFD6  F006         	goto	l2600
   732   000DDA                     u1800:
   733   000DDA                     
   734                           ;stateMachine.c: 42:                 resetProt();
   735   000DDA  EC43  F008         	call	_resetProt	;wreg free
   736   000DDE  EFF9  F006         	goto	l591
   737   000DE2                     l2608:
   738   000DE2  ECB4  F008         	call	_getState	;wreg free
   739                           
   740                           ; Switch size 1, requested type "simple"
   741                           ; Number of cases is 1, Range of values is 0 to 0
   742                           ; switch strategies available:
   743                           ; Name         Instructions Cycles
   744                           ; simple_byte            4     3 (average)
   745                           ;	Chosen strategy is simple_byte
   746   000DE6  0A00               	xorlw	0	; case 0
   747   000DE8  B4D8               	btfsc	status,2,c
   748   000DEA  EFA6  F006         	goto	l2580
   749   000DEE  EFF9  F006         	goto	l591
   750   000DF2                     l591:
   751   000DF2  0012               	return		;funcret
   752   000DF4                     __end_of_smLoop:
   753                           	callstack 0
   754                           
   755 ;; *************** function _setLanguage *****************
   756 ;; Defined at:
   757 ;;		line 48 in file "var.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  newLanguage     1    wreg     unsigned char 
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  newLanguage     1    0[COMRAM] unsigned char 
   762 ;; Return value:  Size  Location     Type
   763 ;;                  1    wreg      void 
   764 ;; Registers used:
   765 ;;		wreg, status,2, status,0
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   771 ;;      Params:         0       0       0       0       0       0       0       0       0
   772 ;;      Locals:         1       0       0       0       0       0       0       0       0
   773 ;;      Temps:          0       0       0       0       0       0       0       0       0
   774 ;;      Totals:         1       0       0       0       0       0       0       0       0
   775 ;;Total ram usage:        1 bytes
   776 ;; Hardware stack levels used: 1
   777 ;; This function calls:
   778 ;;		Nothing
   779 ;; This function is called by:
   780 ;;		_smLoop
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text2
   785   00114A                     __ptext2:
   786                           	callstack 0
   787   00114A                     _setLanguage:
   788                           	callstack 29
   789                           
   790                           ;incstack = 0
   791                           ;setLanguage@newLanguage stored from wreg
   792   00114A  6E26               	movwf	setLanguage@newLanguage^0,c
   793   00114C                     
   794                           ;var.c: 51:     language = newLanguage % 2;
   795   00114C  5026               	movf	setLanguage@newLanguage^0,w,c
   796   00114E  0B01               	andlw	1
   797   001150  6E18               	movwf	_language^0,c
   798   001152  0012               	return		;funcret
   799   001154                     __end_of_setLanguage:
   800                           	callstack 0
   801                           
   802 ;; *************** function _resetProt *****************
   803 ;; Defined at:
   804 ;;		line 72 in file "var.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  i               1    0[COMRAM] unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   818 ;;      Params:         0       0       0       0       0       0       0       0       0
   819 ;;      Locals:         1       0       0       0       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0
   821 ;;      Totals:         1       0       0       0       0       0       0       0       0
   822 ;;Total ram usage:        1 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; This function calls:
   825 ;;		Nothing
   826 ;; This function is called by:
   827 ;;		_smLoop
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text3
   832   001086                     __ptext3:
   833                           	callstack 0
   834   001086                     _resetProt:
   835                           	callstack 29
   836   001086                     
   837                           ;var.c: 74:     char i;;var.c: 75:     while (i < 4)
   838   001086  EF4A  F008         	goto	l1748
   839   00108A                     l1746:
   840                           
   841                           ;var.c: 76:     {;var.c: 77:         prot[i] = 0;
   842   00108A  5026               	movf	resetProt@i^0,w,c
   843   00108C  0F06               	addlw	low _prot
   844   00108E  6ED9               	movwf	fsr2l,c
   845   001090  6ADA               	clrf	fsr2h,c
   846   001092  6ADF               	clrf	indf2,c
   847   001094                     l1748:
   848                           
   849                           ;var.c: 75:     while (i < 4)
   850   001094  0E03               	movlw	3
   851   001096  6426               	cpfsgt	resetProt@i^0,c
   852   001098  EF50  F008         	goto	u851
   853   00109C  EF52  F008         	goto	u850
   854   0010A0                     u851:
   855   0010A0  EF45  F008         	goto	l1746
   856   0010A4                     u850:
   857   0010A4  0012               	return		;funcret
   858   0010A6                     __end_of_resetProt:
   859                           	callstack 0
   860                           
   861 ;; *************** function _getState *****************
   862 ;; Defined at:
   863 ;;		line 20 in file "var.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      unsigned char 
   870 ;; Registers used:
   871 ;;		wreg, status,2
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   877 ;;      Params:         0       0       0       0       0       0       0       0       0
   878 ;;      Locals:         0       0       0       0       0       0       0       0       0
   879 ;;      Temps:          0       0       0       0       0       0       0       0       0
   880 ;;      Totals:         0       0       0       0       0       0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used: 1
   883 ;; This function calls:
   884 ;;		Nothing
   885 ;; This function is called by:
   886 ;;		_smLoop
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text4
   891   001168                     __ptext4:
   892                           	callstack 0
   893   001168                     _getState:
   894                           	callstack 29
   895   001168                     
   896                           ;var.c: 21:     return state;
   897   001168  5019               	movf	_state^0,w,c
   898   00116A  0012               	return		;funcret
   899   00116C                     __end_of_getState:
   900                           	callstack 0
   901                           
   902 ;; *************** function _getLanguage *****************
   903 ;; Defined at:
   904 ;;		line 44 in file "var.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      unsigned char 
   911 ;; Registers used:
   912 ;;		wreg, status,2
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   918 ;;      Params:         0       0       0       0       0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used: 1
   924 ;; This function calls:
   925 ;;		Nothing
   926 ;; This function is called by:
   927 ;;		_smLoop
   928 ;;		_outputPrint
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text5
   933   00116C                     __ptext5:
   934                           	callstack 0
   935   00116C                     _getLanguage:
   936                           	callstack 29
   937   00116C                     
   938                           ;var.c: 45:     return language;
   939   00116C  5018               	movf	_language^0,w,c
   940   00116E  0012               	return		;funcret
   941   001170                     __end_of_getLanguage:
   942                           	callstack 0
   943                           
   944 ;; *************** function _eventRead *****************
   945 ;; Defined at:
   946 ;;		line 32 in file "event.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  prot            4    6[COMRAM] unsigned char [4]
   951 ;;  key             2   13[COMRAM] int 
   952 ;;  ev              2   10[COMRAM] int 
   953 ;;  data            1   12[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  2    3[COMRAM] unsigned int 
   956 ;; Registers used:
   957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   963 ;;      Params:         2       0       0       0       0       0       0       0       0
   964 ;;      Locals:         9       0       0       0       0       0       0       0       0
   965 ;;      Temps:          1       0       0       0       0       0       0       0       0
   966 ;;      Totals:        12       0       0       0       0       0       0       0       0
   967 ;;Total ram usage:       12 bytes
   968 ;; Hardware stack levels used: 1
   969 ;; Hardware stack levels required when called: 3
   970 ;; This function calls:
   971 ;;		_getProt
   972 ;;		_kpRead
   973 ;;		_lcdData
   974 ;;		_serialRead
   975 ;;		_serialSend
   976 ;;		_setProt
   977 ;; This function is called by:
   978 ;;		_smLoop
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text6
   983   000AEE                     __ptext6:
   984                           	callstack 0
   985   000AEE                     _eventRead:
   986                           	callstack 26
   987   000AEE                     
   988                           ;event.c: 33:     int key;;event.c: 34:     int ev = EV_NOEVENT;
   989   000AEE  0E00               	movlw	0
   990   000AF0  6E31               	movwf	(eventRead@ev+1)^0,c
   991   000AF2  0E06               	movlw	6
   992   000AF4  6E30               	movwf	eventRead@ev^0,c
   993   000AF6                     
   994                           ;event.c: 35:     key = kpRead();
   995   000AF6  ECB8  F008         	call	_kpRead	;wreg free
   996   000AFA  6E2B               	movwf	??_eventRead^0,c
   997   000AFC  502B               	movf	??_eventRead^0,w,c
   998   000AFE  6E33               	movwf	eventRead@key^0,c
   999   000B00  6A34               	clrf	(eventRead@key+1)^0,c
  1000   000B02                     
  1001                           ;event.c: 36:     if (key != key_ant) {
  1002   000B02  5014               	movf	_key_ant^0,w,c
  1003   000B04  1833               	xorwf	eventRead@key^0,w,c
  1004   000B06  E109               	bnz	u1680
  1005   000B08  5015               	movf	(_key_ant+1)^0,w,c
  1006   000B0A  1834               	xorwf	(eventRead@key+1)^0,w,c
  1007   000B0C  B4D8               	btfsc	status,2,c
  1008   000B0E  EF8B  F005         	goto	u1681
  1009   000B12  EF8D  F005         	goto	u1680
  1010   000B16                     u1681:
  1011   000B16  EFA3  F005         	goto	l501
  1012   000B1A                     u1680:
  1013   000B1A                     
  1014                           ;event.c: 37:         if (((key) & (1<<0))) {
  1015   000B1A  A033               	btfss	eventRead@key^0,0,c
  1016   000B1C  EF92  F005         	goto	u1691
  1017   000B20  EF94  F005         	goto	u1690
  1018   000B24                     u1691:
  1019   000B24  EF98  F005         	goto	l2488
  1020   000B28                     u1690:
  1021   000B28                     
  1022                           ;event.c: 38:             ev = EV_B_0;
  1023   000B28  0E00               	movlw	0
  1024   000B2A  6E31               	movwf	(eventRead@ev+1)^0,c
  1025   000B2C  0E00               	movlw	0
  1026   000B2E  6E30               	movwf	eventRead@ev^0,c
  1027   000B30                     l2488:
  1028                           
  1029                           ;event.c: 41:         if (((key) & (1<<1))) {
  1030   000B30  A233               	btfss	eventRead@key^0,1,c
  1031   000B32  EF9D  F005         	goto	u1701
  1032   000B36  EF9F  F005         	goto	u1700
  1033   000B3A                     u1701:
  1034   000B3A  EFA3  F005         	goto	l501
  1035   000B3E                     u1700:
  1036   000B3E                     
  1037                           ;event.c: 42:             ev = EV_B_1;
  1038   000B3E  0E00               	movlw	0
  1039   000B40  6E31               	movwf	(eventRead@ev+1)^0,c
  1040   000B42  0E01               	movlw	1
  1041   000B44  6E30               	movwf	eventRead@ev^0,c
  1042   000B46                     l501:
  1043                           
  1044                           ;event.c: 50:     key_ant = key;
  1045   000B46  C033  F014         	movff	eventRead@key,_key_ant
  1046   000B4A  C034  F015         	movff	eventRead@key+1,_key_ant+1
  1047   000B4E                     
  1048                           ;event.c: 53:     unsigned char data = serialRead();
  1049   000B4E  EC02  F008         	call	_serialRead	;wreg free
  1050   000B52  6E32               	movwf	eventRead@data^0,c
  1051   000B54                     
  1052                           ;event.c: 54:     unsigned char prot[4];;event.c: 55:     if (data != 0) {
  1053   000B54  5032               	movf	eventRead@data^0,w,c
  1054   000B56  B4D8               	btfsc	status,2,c
  1055   000B58  EFB0  F005         	goto	u1711
  1056   000B5C  EFB2  F005         	goto	u1710
  1057   000B60                     u1711:
  1058   000B60  EF1D  F006         	goto	l2532
  1059   000B64                     u1710:
  1060   000B64                     
  1061                           ;event.c: 56:         serialSend(data);
  1062   000B64  5032               	movf	eventRead@data^0,w,c
  1063   000B66  EC7B  F008         	call	_serialSend
  1064   000B6A                     
  1065                           ;event.c: 57:         getProt(prot);
  1066   000B6A  0E2C               	movlw	low eventRead@prot
  1067   000B6C  6E26               	movwf	getProt@p^0,c
  1068   000B6E  EC18  F008         	call	_getProt	;wreg free
  1069   000B72                     
  1070                           ;event.c: 58:         if (prot[0] == 0) {
  1071   000B72  502C               	movf	eventRead@prot^0,w,c
  1072   000B74  A4D8               	btfss	status,2,c
  1073   000B76  EFBF  F005         	goto	u1721
  1074   000B7A  EFC1  F005         	goto	u1720
  1075   000B7E                     u1721:
  1076   000B7E  EF09  F006         	goto	l2524
  1077   000B82                     u1720:
  1078   000B82  EFEA  F005         	goto	l2522
  1079   000B86                     l2506:
  1080                           
  1081                           ;event.c: 61:                     ev = EV_B_0;
  1082   000B86  0E00               	movlw	0
  1083   000B88  6E31               	movwf	(eventRead@ev+1)^0,c
  1084   000B8A  0E00               	movlw	0
  1085   000B8C  6E30               	movwf	eventRead@ev^0,c
  1086                           
  1087                           ;event.c: 62:                     break;
  1088   000B8E  EF1D  F006         	goto	l2532
  1089   000B92                     l2508:
  1090                           
  1091                           ;event.c: 64:                     ev = EV_B_1;
  1092   000B92  0E00               	movlw	0
  1093   000B94  6E31               	movwf	(eventRead@ev+1)^0,c
  1094   000B96  0E01               	movlw	1
  1095   000B98  6E30               	movwf	eventRead@ev^0,c
  1096                           
  1097                           ;event.c: 65:                     break;
  1098   000B9A  EF1D  F006         	goto	l2532
  1099   000B9E                     l2510:
  1100                           
  1101                           ;event.c: 67:                     ev = EV_B_2;
  1102   000B9E  0E00               	movlw	0
  1103   000BA0  6E31               	movwf	(eventRead@ev+1)^0,c
  1104   000BA2  0E02               	movlw	2
  1105   000BA4  6E30               	movwf	eventRead@ev^0,c
  1106                           
  1107                           ;event.c: 68:                     break;
  1108   000BA6  EF1D  F006         	goto	l2532
  1109   000BAA                     l2512:
  1110                           
  1111                           ;event.c: 70:                     ev = EV_B_3;
  1112   000BAA  0E00               	movlw	0
  1113   000BAC  6E31               	movwf	(eventRead@ev+1)^0,c
  1114   000BAE  0E03               	movlw	3
  1115   000BB0  6E30               	movwf	eventRead@ev^0,c
  1116                           
  1117                           ;event.c: 71:                     break;
  1118   000BB2  EF1D  F006         	goto	l2532
  1119   000BB6                     l2514:
  1120                           
  1121                           ;event.c: 73:                     ev = EV_B_4;
  1122   000BB6  0E00               	movlw	0
  1123   000BB8  6E31               	movwf	(eventRead@ev+1)^0,c
  1124   000BBA  0E04               	movlw	4
  1125   000BBC  6E30               	movwf	eventRead@ev^0,c
  1126                           
  1127                           ;event.c: 74:                     break;
  1128   000BBE  EF1D  F006         	goto	l2532
  1129   000BC2                     l2516:
  1130                           
  1131                           ;event.c: 76:                     ev = EV_NOEVENT;
  1132   000BC2  0E00               	movlw	0
  1133   000BC4  6E31               	movwf	(eventRead@ev+1)^0,c
  1134   000BC6  0E06               	movlw	6
  1135   000BC8  6E30               	movwf	eventRead@ev^0,c
  1136   000BCA                     
  1137                           ;event.c: 77:                     setProt('p');
  1138   000BCA  0E70               	movlw	112
  1139   000BCC  EC72  F007         	call	_setProt
  1140                           
  1141                           ;event.c: 79:                     break;
  1142   000BD0  EF1D  F006         	goto	l2532
  1143   000BD4                     l2522:
  1144   000BD4  5032               	movf	eventRead@data^0,w,c
  1145                           
  1146                           ; Switch size 1, requested type "simple"
  1147                           ; Number of cases is 7, Range of values is 48 to 112
  1148                           ; switch strategies available:
  1149                           ; Name         Instructions Cycles
  1150                           ; simple_byte           22    12 (average)
  1151                           ;	Chosen strategy is simple_byte
  1152   000BD6  0A30               	xorlw	48	; case 48
  1153   000BD8  B4D8               	btfsc	status,2,c
  1154   000BDA  EFC3  F005         	goto	l2506
  1155   000BDE  0A01               	xorlw	1	; case 49
  1156   000BE0  B4D8               	btfsc	status,2,c
  1157   000BE2  EFC9  F005         	goto	l2508
  1158   000BE6  0A03               	xorlw	3	; case 50
  1159   000BE8  B4D8               	btfsc	status,2,c
  1160   000BEA  EFCF  F005         	goto	l2510
  1161   000BEE  0A01               	xorlw	1	; case 51
  1162   000BF0  B4D8               	btfsc	status,2,c
  1163   000BF2  EFD5  F005         	goto	l2512
  1164   000BF6  0A07               	xorlw	7	; case 52
  1165   000BF8  B4D8               	btfsc	status,2,c
  1166   000BFA  EFDB  F005         	goto	l2514
  1167   000BFE  0A64               	xorlw	100	; case 80
  1168   000C00  B4D8               	btfsc	status,2,c
  1169   000C02  EFE1  F005         	goto	l2516
  1170   000C06  0A20               	xorlw	32	; case 112
  1171   000C08  B4D8               	btfsc	status,2,c
  1172   000C0A  EFE1  F005         	goto	l2516
  1173   000C0E  EF1D  F006         	goto	l517
  1174   000C12                     l2524:
  1175                           
  1176                           ;event.c: 84:             setProt(data);
  1177   000C12  5032               	movf	eventRead@data^0,w,c
  1178   000C14  EC72  F007         	call	_setProt
  1179   000C18                     
  1180                           ;event.c: 86:             if(prot_ready)
  1181   000C18  501A               	movf	_prot_ready^0,w,c
  1182   000C1A  B4D8               	btfsc	status,2,c
  1183   000C1C  EF12  F006         	goto	u1731
  1184   000C20  EF14  F006         	goto	u1730
  1185   000C24                     u1731:
  1186   000C24  EF1D  F006         	goto	l2532
  1187   000C28                     u1730:
  1188   000C28                     
  1189                           ;event.c: 87:             {;event.c: 88:                 ev = EV_PROT_SERIAL;
  1190   000C28  0E00               	movlw	0
  1191   000C2A  6E31               	movwf	(eventRead@ev+1)^0,c
  1192   000C2C  0E05               	movlw	5
  1193   000C2E  6E30               	movwf	eventRead@ev^0,c
  1194   000C30                     
  1195                           ;event.c: 89:                 lcdData('k');
  1196   000C30  0E6B               	movlw	107
  1197   000C32  EC53  F008         	call	_lcdData
  1198   000C36  EF1D  F006         	goto	l2532
  1199   000C3A                     l517:
  1200   000C3A                     l2532:
  1201                           
  1202                           ;event.c: 95:     return ev;
  1203   000C3A  C030  F029         	movff	eventRead@ev,?_eventRead
  1204   000C3E  C031  F02A         	movff	eventRead@ev+1,?_eventRead+1
  1205   000C42  0012               	return		;funcret
  1206   000C44                     __end_of_eventRead:
  1207                           	callstack 0
  1208                           
  1209 ;; *************** function _setProt *****************
  1210 ;; Defined at:
  1211 ;;		line 64 in file "var.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;  newChar         1    wreg     unsigned char 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  newChar         1    0[COMRAM] unsigned char 
  1216 ;;  i               1    1[COMRAM] unsigned char 
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1226 ;;      Params:         0       0       0       0       0       0       0       0       0
  1227 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1229 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1230 ;;Total ram usage:        2 bytes
  1231 ;; Hardware stack levels used: 1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_eventRead
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text7
  1240   000EE4                     __ptext7:
  1241                           	callstack 0
  1242   000EE4                     _setProt:
  1243                           	callstack 28
  1244                           
  1245                           ;incstack = 0
  1246                           ;setProt@newChar stored from wreg
  1247   000EE4  6E26               	movwf	setProt@newChar^0,c
  1248   000EE6                     
  1249                           ;var.c: 65:     char i = 0;
  1250   000EE6  0E00               	movlw	0
  1251   000EE8  6E27               	movwf	setProt@i^0,c
  1252                           
  1253                           ;var.c: 66:     while (prot[i] != 0) i++;
  1254   000EEA  EF78  F007         	goto	l1558
  1255   000EEE                     l1556:
  1256   000EEE  2A27               	incf	setProt@i^0,f,c
  1257   000EF0                     l1558:
  1258   000EF0  5027               	movf	setProt@i^0,w,c
  1259   000EF2  0F06               	addlw	low _prot
  1260   000EF4  6ED9               	movwf	fsr2l,c
  1261   000EF6  6ADA               	clrf	fsr2h,c
  1262   000EF8  50DF               	movf	indf2,w,c
  1263   000EFA  A4D8               	btfss	status,2,c
  1264   000EFC  EF82  F007         	goto	u631
  1265   000F00  EF84  F007         	goto	u630
  1266   000F04                     u631:
  1267   000F04  EF77  F007         	goto	l1556
  1268   000F08                     u630:
  1269   000F08                     
  1270                           ;var.c: 67:     prot[i] = newChar;
  1271   000F08  5027               	movf	setProt@i^0,w,c
  1272   000F0A  0F06               	addlw	low _prot
  1273   000F0C  6ED9               	movwf	fsr2l,c
  1274   000F0E  6ADA               	clrf	fsr2h,c
  1275   000F10  C026  FFDF         	movff	setProt@newChar,indf2
  1276   000F14                     
  1277                           ;var.c: 69:     if(i == 4 - 1) prot_ready = 1;
  1278   000F14  0E03               	movlw	3
  1279   000F16  1827               	xorwf	setProt@i^0,w,c
  1280   000F18  A4D8               	btfss	status,2,c
  1281   000F1A  EF91  F007         	goto	u641
  1282   000F1E  EF93  F007         	goto	u640
  1283   000F22                     u641:
  1284   000F22  EF95  F007         	goto	l650
  1285   000F26                     u640:
  1286   000F26  0E01               	movlw	1
  1287   000F28  6E1A               	movwf	_prot_ready^0,c
  1288   000F2A                     l650:
  1289   000F2A  0012               	return		;funcret
  1290   000F2C                     __end_of_setProt:
  1291                           	callstack 0
  1292                           
  1293 ;; *************** function _serialSend *****************
  1294 ;; Defined at:
  1295 ;;		line 25 in file "serial.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  c               1    wreg     unsigned char 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  c               1    0[COMRAM] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0
  1310 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1312 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1313 ;;Total ram usage:        1 bytes
  1314 ;; Hardware stack levels used: 1
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_eventRead
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text8
  1323   0010F6                     __ptext8:
  1324                           	callstack 0
  1325   0010F6                     _serialSend:
  1326                           	callstack 28
  1327                           
  1328                           ;incstack = 0
  1329                           ;serialSend@c stored from wreg
  1330   0010F6  6E26               	movwf	serialSend@c^0,c
  1331   0010F8                     l333:
  1332   0010F8  A89E               	btfss	158,4,c	;volatile
  1333   0010FA  EF81  F008         	goto	u591
  1334   0010FE  EF83  F008         	goto	u590
  1335   001102                     u591:
  1336   001102  EF7C  F008         	goto	l333
  1337   001106                     u590:
  1338   001106                     
  1339                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  1340   001106  C026  FFAD         	movff	serialSend@c,4013	;volatile
  1341   00110A  0012               	return		;funcret
  1342   00110C                     __end_of_serialSend:
  1343                           	callstack 0
  1344                           
  1345 ;; *************** function _serialRead *****************
  1346 ;; Defined at:
  1347 ;;		line 30 in file "serial.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  resp            1    0[COMRAM] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      unsigned char 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0
  1362 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1364 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1365 ;;Total ram usage:        1 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_eventRead
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text9
  1375   001004                     __ptext9:
  1376                           	callstack 0
  1377   001004                     _serialRead:
  1378                           	callstack 28
  1379   001004                     
  1380                           ;serial.c: 31:     char resp = 0;
  1381   001004  0E00               	movlw	0
  1382   001006  6E26               	movwf	serialRead@resp^0,c
  1383   001008                     
  1384                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  1385   001008  A2AB               	btfss	171,1,c	;volatile
  1386   00100A  EF09  F008         	goto	u601
  1387   00100E  EF0B  F008         	goto	u600
  1388   001012                     u601:
  1389   001012  EF0D  F008         	goto	l1538
  1390   001016                     u600:
  1391   001016                     
  1392                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  1393   001016  98AB               	bcf	171,4,c	;volatile
  1394                           
  1395                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  1396   001018  88AB               	bsf	171,4,c	;volatile
  1397   00101A                     l1538:
  1398                           
  1399                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  1400   00101A  AA9E               	btfss	158,5,c	;volatile
  1401   00101C  EF12  F008         	goto	u611
  1402   001020  EF14  F008         	goto	u610
  1403   001024                     u611:
  1404   001024  EF16  F008         	goto	l1542
  1405   001028                     u610:
  1406   001028                     
  1407                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  1408   001028  CFAE F026          	movff	4014,serialRead@resp	;volatile
  1409   00102C                     l1542:
  1410                           
  1411                           ;serial.c: 43:     return resp;
  1412   00102C  5026               	movf	serialRead@resp^0,w,c
  1413   00102E  0012               	return		;funcret
  1414   001030                     __end_of_serialRead:
  1415                           	callstack 0
  1416                           
  1417 ;; *************** function _lcdData *****************
  1418 ;; Defined at:
  1419 ;;		line 108 in file "lcd.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  valor           1    wreg     unsigned char 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  valor           1    2[COMRAM] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:         0       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1436 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1437 ;;Total ram usage:        1 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; Hardware stack levels required when called: 2
  1440 ;; This function calls:
  1441 ;;		_Delay40us
  1442 ;;		_lcdCommand4bits
  1443 ;; This function is called by:
  1444 ;;		_eventRead
  1445 ;;		_smLoop
  1446 ;;		_lcdString
  1447 ;;		_lcdInt
  1448 ;;		_printf
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text10
  1453   0010A6                     __ptext10:
  1454                           	callstack 0
  1455   0010A6                     _lcdData:
  1456                           	callstack 27
  1457                           
  1458                           ;incstack = 0
  1459                           ;lcdData@valor stored from wreg
  1460   0010A6  6E28               	movwf	lcdData@valor^0,c
  1461   0010A8                     
  1462                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  1463   0010A8  0E01               	movlw	1
  1464   0010AA  6E26               	movwf	lcdCommand4bits@data^0,c
  1465   0010AC  5028               	movf	lcdData@valor^0,w,c
  1466   0010AE  EC36  F007         	call	_lcdCommand4bits
  1467                           
  1468                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  1469   0010B2  0E01               	movlw	1
  1470   0010B4  6E26               	movwf	lcdCommand4bits@data^0,c
  1471   0010B6  3828               	swapf	lcdData@valor^0,w,c
  1472   0010B8  0BF0               	andlw	240
  1473   0010BA  EC36  F007         	call	_lcdCommand4bits
  1474                           
  1475                           ;lcd.c: 113:     Delay40us();
  1476   0010BE  EC6F  F008         	call	_Delay40us	;wreg free
  1477   0010C2  0012               	return		;funcret
  1478   0010C4                     __end_of_lcdData:
  1479                           	callstack 0
  1480                           
  1481 ;; *************** function _kpRead *****************
  1482 ;; Defined at:
  1483 ;;		line 29 in file "keypad.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      unsigned char 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0
  1498 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1500 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1501 ;;Total ram usage:        0 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_eventRead
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text11
  1511   001170                     __ptext11:
  1512                           	callstack 0
  1513   001170                     _kpRead:
  1514                           	callstack 28
  1515   001170                     
  1516                           ;keypad.c: 30:     return valor;
  1517   001170  5025               	movf	_valor^0,w,c
  1518   001172  0012               	return		;funcret
  1519   001174                     __end_of_kpRead:
  1520                           	callstack 0
  1521                           
  1522 ;; *************** function _getProt *****************
  1523 ;; Defined at:
  1524 ;;		line 54 in file "var.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  p               1    0[COMRAM] PTR unsigned char 
  1527 ;;		 -> smLoop@prot(4), eventRead@prot(4), 
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  i               1    1[COMRAM] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      void 
  1532 ;; Registers used:
  1533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1539 ;;      Params:         1       0       0       0       0       0       0       0       0
  1540 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1542 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1543 ;;Total ram usage:        2 bytes
  1544 ;; Hardware stack levels used: 1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_eventRead
  1549 ;;		_smLoop
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text12
  1554   001030                     __ptext12:
  1555                           	callstack 0
  1556   001030                     _getProt:
  1557                           	callstack 29
  1558   001030                     
  1559                           ;var.c: 56:     char i;;var.c: 57:     while (i < 4)
  1560   001030  EF25  F008         	goto	l2452
  1561   001034                     l2448:
  1562                           
  1563                           ;var.c: 58:     {;var.c: 59:         p[i] = prot[i];
  1564   001034  5027               	movf	getProt@i^0,w,c
  1565   001036  0F06               	addlw	low _prot
  1566   001038  6ED9               	movwf	fsr2l,c
  1567   00103A  6ADA               	clrf	fsr2h,c
  1568   00103C  5026               	movf	getProt@p^0,w,c
  1569   00103E  2427               	addwf	getProt@i^0,w,c
  1570   001040  6EE1               	movwf	fsr1l,c
  1571   001042  6AE2               	clrf	fsr1h,c
  1572   001044  CFDF FFE7          	movff	indf2,indf1
  1573   001048                     
  1574                           ;var.c: 60:         i++;
  1575   001048  2A27               	incf	getProt@i^0,f,c
  1576   00104A                     l2452:
  1577                           
  1578                           ;var.c: 57:     while (i < 4)
  1579   00104A  0E03               	movlw	3
  1580   00104C  6427               	cpfsgt	getProt@i^0,c
  1581   00104E  EF2B  F008         	goto	u1611
  1582   001052  EF2D  F008         	goto	u1610
  1583   001056                     u1611:
  1584   001056  EF1A  F008         	goto	l2448
  1585   00105A                     u1610:
  1586   00105A  0012               	return		;funcret
  1587   00105C                     __end_of_getProt:
  1588                           	callstack 0
  1589                           
  1590 ;; *************** function _smInit *****************
  1591 ;; Defined at:
  1592 ;;		line 8 in file "stateMachine.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1606 ;;      Params:         0       0       0       0       0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1609 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1610 ;;Total ram usage:        0 bytes
  1611 ;; Hardware stack levels used: 1
  1612 ;; Hardware stack levels required when called: 2
  1613 ;; This function calls:
  1614 ;;		_eventInit
  1615 ;;		_setState
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text13
  1622   00113E                     __ptext13:
  1623                           	callstack 0
  1624   00113E                     _smInit:
  1625                           	callstack 28
  1626   00113E                     
  1627                           ;stateMachine.c: 9:     setState(STATE_ALARME);
  1628   00113E  0E00               	movlw	0
  1629   001140  ECAA  F008         	call	_setState
  1630   001144                     
  1631                           ;stateMachine.c: 10:     eventInit();
  1632   001144  EC86  F008         	call	_eventInit	;wreg free
  1633   001148  0012               	return		;funcret
  1634   00114A                     __end_of_smInit:
  1635                           	callstack 0
  1636                           
  1637 ;; *************** function _setState *****************
  1638 ;; Defined at:
  1639 ;;		line 24 in file "var.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  newState        1    wreg     unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  newState        1    0[COMRAM] unsigned char 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0
  1654 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1656 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1657 ;;Total ram usage:        1 bytes
  1658 ;; Hardware stack levels used: 1
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_smInit
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text14
  1667   001154                     __ptext14:
  1668                           	callstack 0
  1669   001154                     _setState:
  1670                           	callstack 29
  1671                           
  1672                           ;incstack = 0
  1673                           ;setState@newState stored from wreg
  1674   001154  6E26               	movwf	setState@newState^0,c
  1675   001156                     
  1676                           ;var.c: 25:     state = newState;
  1677   001156  C026  F019         	movff	setState@newState,_state
  1678   00115A  0012               	return		;funcret
  1679   00115C                     __end_of_setState:
  1680                           	callstack 0
  1681                           
  1682 ;; *************** function _eventInit *****************
  1683 ;; Defined at:
  1684 ;;		line 19 in file "event.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       0       0       0       0       0       0       0       0
  1699 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1701 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1702 ;;Total ram usage:        0 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; Hardware stack levels required when called: 1
  1705 ;; This function calls:
  1706 ;;		_kpInit
  1707 ;; This function is called by:
  1708 ;;		_smInit
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text15
  1713   00110C                     __ptext15:
  1714                           	callstack 0
  1715   00110C                     _eventInit:
  1716                           	callstack 28
  1717   00110C                     
  1718                           ;event.c: 20:     kpInit();
  1719   00110C  EC91  F008         	call	_kpInit	;wreg free
  1720   001110                     
  1721                           ;event.c: 22:     ev_ant = 0;
  1722   001110  0E00               	movlw	0
  1723   001112  6E17               	movwf	(_ev_ant+1)^0,c
  1724   001114  0E00               	movlw	0
  1725   001116  6E16               	movwf	_ev_ant^0,c
  1726   001118                     
  1727                           ;event.c: 23:     key = 1;
  1728   001118  0E00               	movlw	0
  1729   00111A  6E13               	movwf	(_key+1)^0,c
  1730   00111C  0E01               	movlw	1
  1731   00111E  6E12               	movwf	_key^0,c
  1732   001120  0012               	return		;funcret
  1733   001122                     __end_of_eventInit:
  1734                           	callstack 0
  1735                           
  1736 ;; *************** function _kpInit *****************
  1737 ;; Defined at:
  1738 ;;		line 81 in file "keypad.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;		None
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1755 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1756 ;;Total ram usage:        0 bytes
  1757 ;; Hardware stack levels used: 1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;;		_eventInit
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text16
  1767   001122                     __ptext16:
  1768                           	callstack 0
  1769   001122                     _kpInit:
  1770                           	callstack 28
  1771   001122                     
  1772                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  1773   001122  6893               	setf	147,c	;volatile
  1774   001124                     
  1775                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  1776   001124  9EF1               	bcf	241,7,c	;volatile
  1777   001126                     
  1778                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  1779   001126  0E0E               	movlw	14
  1780   001128  6EC1               	movwf	193,c	;volatile
  1781   00112A                     
  1782                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  1783   00112A  0E00               	movlw	0
  1784   00112C  6E63               	movwf	99,c	;volatile
  1785   00112E  0012               	return		;funcret
  1786   001130                     __end_of_kpInit:
  1787                           	callstack 0
  1788                           
  1789 ;; *************** function _serialInit *****************
  1790 ;; Defined at:
  1791 ;;		line 48 in file "serial.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, status,2, status,0
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1808 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used: 1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text17
  1819   0010C4                     __ptext17:
  1820                           	callstack 0
  1821   0010C4                     _serialInit:
  1822                           	callstack 30
  1823   0010C4                     
  1824                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  1825   0010C4  0E2C               	movlw	44
  1826   0010C6  6EAC               	movwf	172,c	;volatile
  1827                           
  1828                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  1829   0010C8  0E90               	movlw	144
  1830   0010CA  6EAB               	movwf	171,c	;volatile
  1831                           
  1832                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  1833   0010CC  0E08               	movlw	8
  1834   0010CE  6EB8               	movwf	184,c	;volatile
  1835                           
  1836                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  1837   0010D0  0E00               	movlw	0
  1838   0010D2  6EB0               	movwf	176,c	;volatile
  1839                           
  1840                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  1841   0010D4  0E22               	movlw	34
  1842   0010D6  6EAF               	movwf	175,c	;volatile
  1843   0010D8                     
  1844                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  1845   0010D8  8C94               	bsf	148,6,c	;volatile
  1846   0010DA                     
  1847                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  1848   0010DA  8E94               	bsf	148,7,c	;volatile
  1849   0010DC  0012               	return		;funcret
  1850   0010DE                     __end_of_serialInit:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function _lcdInit *****************
  1854 ;; Defined at:
  1855 ;;		line 117 in file "lcd.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;  i               1    3[COMRAM] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         0       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        1 bytes
  1874 ;; Hardware stack levels used: 1
  1875 ;; Hardware stack levels required when called: 3
  1876 ;; This function calls:
  1877 ;;		_Delay2ms
  1878 ;;		_lcdCommand
  1879 ;;		_lcdCommand4bits
  1880 ;; This function is called by:
  1881 ;;		_main
  1882 ;;		_outputInit
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text18
  1887   000DF4                     __ptext18:
  1888                           	callstack 0
  1889   000DF4                     _lcdInit:
  1890                           	callstack 27
  1891   000DF4                     
  1892                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  1893   000DF4  9095               	bcf	149,0,c	;volatile
  1894                           
  1895                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  1896   000DF6  9E95               	bcf	149,7,c	;volatile
  1897                           
  1898                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  1899   000DF8  9C95               	bcf	149,6,c	;volatile
  1900                           
  1901                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  1902   000DFA  9A95               	bcf	149,5,c	;volatile
  1903                           
  1904                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  1905   000DFC  9895               	bcf	149,4,c	;volatile
  1906                           
  1907                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  1908   000DFE  9495               	bcf	149,2,c	;volatile
  1909   000E00                     
  1910                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  1911   000E00  0E00               	movlw	0
  1912   000E02  6E29               	movwf	lcdInit@i^0,c
  1913   000E04                     l2546:
  1914                           
  1915                           ;lcd.c: 133:         Delay2ms();
  1916   000E04  ECD5  F007         	call	_Delay2ms	;wreg free
  1917   000E08  2A29               	incf	lcdInit@i^0,f,c
  1918   000E0A  0E06               	movlw	6
  1919   000E0C  6429               	cpfsgt	lcdInit@i^0,c
  1920   000E0E  EF0B  F007         	goto	u1741
  1921   000E12  EF0D  F007         	goto	u1740
  1922   000E16                     u1741:
  1923   000E16  EF02  F007         	goto	l2546
  1924   000E1A                     u1740:
  1925   000E1A                     
  1926                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  1927   000E1A  0E00               	movlw	0
  1928   000E1C  6E26               	movwf	lcdCommand4bits@data^0,c
  1929   000E1E  0E30               	movlw	48
  1930   000E20  EC36  F007         	call	_lcdCommand4bits
  1931                           
  1932                           ;lcd.c: 138:     Delay2ms();
  1933   000E24  ECD5  F007         	call	_Delay2ms	;wreg free
  1934                           
  1935                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  1936   000E28  0E00               	movlw	0
  1937   000E2A  6E26               	movwf	lcdCommand4bits@data^0,c
  1938   000E2C  0E30               	movlw	48
  1939   000E2E  EC36  F007         	call	_lcdCommand4bits
  1940                           
  1941                           ;lcd.c: 142:     Delay2ms();
  1942   000E32  ECD5  F007         	call	_Delay2ms	;wreg free
  1943                           
  1944                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  1945   000E36  0E00               	movlw	0
  1946   000E38  6E26               	movwf	lcdCommand4bits@data^0,c
  1947   000E3A  0E30               	movlw	48
  1948   000E3C  EC36  F007         	call	_lcdCommand4bits
  1949                           
  1950                           ;lcd.c: 146:     Delay2ms();
  1951   000E40  ECD5  F007         	call	_Delay2ms	;wreg free
  1952                           
  1953                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  1954   000E44  0E00               	movlw	0
  1955   000E46  6E26               	movwf	lcdCommand4bits@data^0,c
  1956   000E48  0E20               	movlw	32
  1957   000E4A  EC36  F007         	call	_lcdCommand4bits
  1958                           
  1959                           ;lcd.c: 150:     Delay2ms();
  1960   000E4E  ECD5  F007         	call	_Delay2ms	;wreg free
  1961                           
  1962                           ;lcd.c: 153:     lcdCommand(0x28);
  1963   000E52  0E28               	movlw	40
  1964   000E54  EC96  F007         	call	_lcdCommand
  1965                           
  1966                           ;lcd.c: 154:     lcdCommand(0x06);
  1967   000E58  0E06               	movlw	6
  1968   000E5A  EC96  F007         	call	_lcdCommand
  1969                           
  1970                           ;lcd.c: 156:     lcdCommand(0x0C);
  1971   000E5E  0E0C               	movlw	12
  1972   000E60  EC96  F007         	call	_lcdCommand
  1973                           
  1974                           ;lcd.c: 157:     lcdCommand(0x01);
  1975   000E64  0E01               	movlw	1
  1976   000E66  EC96  F007         	call	_lcdCommand
  1977   000E6A  0012               	return		;funcret
  1978   000E6C                     __end_of_lcdInit:
  1979                           	callstack 0
  1980                           
  1981 ;; *************** function _lcdCommand *****************
  1982 ;; Defined at:
  1983 ;;		line 93 in file "lcd.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  cmd             1    wreg     unsigned char 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  cmd             1    2[COMRAM] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg, status,2, status,0, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1997 ;;      Params:         0       0       0       0       0       0       0       0       0
  1998 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2000 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2001 ;;Total ram usage:        1 bytes
  2002 ;; Hardware stack levels used: 1
  2003 ;; Hardware stack levels required when called: 2
  2004 ;; This function calls:
  2005 ;;		_Delay2ms
  2006 ;;		_Delay40us
  2007 ;;		_lcdCommand4bits
  2008 ;; This function is called by:
  2009 ;;		_lcdInit
  2010 ;;		_outputPrint
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text19
  2015   000F2C                     __ptext19:
  2016                           	callstack 0
  2017   000F2C                     _lcdCommand:
  2018                           	callstack 27
  2019                           
  2020                           ;incstack = 0
  2021                           ;lcdCommand@cmd stored from wreg
  2022   000F2C  6E28               	movwf	lcdCommand@cmd^0,c
  2023   000F2E                     
  2024                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  2025   000F2E  0E00               	movlw	0
  2026   000F30  6E26               	movwf	lcdCommand4bits@data^0,c
  2027   000F32  5028               	movf	lcdCommand@cmd^0,w,c
  2028   000F34  EC36  F007         	call	_lcdCommand4bits
  2029                           
  2030                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  2031   000F38  0E00               	movlw	0
  2032   000F3A  6E26               	movwf	lcdCommand4bits@data^0,c
  2033   000F3C  3828               	swapf	lcdCommand@cmd^0,w,c
  2034   000F3E  0BF0               	andlw	240
  2035   000F40  EC36  F007         	call	_lcdCommand4bits
  2036   000F44                     
  2037                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  2038   000F44  0E02               	movlw	2
  2039   000F46  1828               	xorwf	lcdCommand@cmd^0,w,c
  2040   000F48  B4D8               	btfsc	status,2,c
  2041   000F4A  EFA9  F007         	goto	u1621
  2042   000F4E  EFAB  F007         	goto	u1620
  2043   000F52                     u1621:
  2044   000F52  EFB3  F007         	goto	l2462
  2045   000F56                     u1620:
  2046   000F56  0428               	decf	lcdCommand@cmd^0,w,c
  2047   000F58  A4D8               	btfss	status,2,c
  2048   000F5A  EFB1  F007         	goto	u1631
  2049   000F5E  EFB3  F007         	goto	u1630
  2050   000F62                     u1631:
  2051   000F62  EFB7  F007         	goto	l2464
  2052   000F66                     u1630:
  2053   000F66                     l2462:
  2054                           
  2055                           ;lcd.c: 100:         Delay2ms();
  2056   000F66  ECD5  F007         	call	_Delay2ms	;wreg free
  2057                           
  2058                           ;lcd.c: 102:     } else {
  2059   000F6A  EFB9  F007         	goto	l180
  2060   000F6E                     l2464:
  2061                           
  2062                           ;lcd.c: 103:         Delay40us();
  2063   000F6E  EC6F  F008         	call	_Delay40us	;wreg free
  2064   000F72                     l180:
  2065   000F72  0012               	return		;funcret
  2066   000F74                     __end_of_lcdCommand:
  2067                           	callstack 0
  2068                           
  2069 ;; *************** function _lcdCommand4bits *****************
  2070 ;; Defined at:
  2071 ;;		line 52 in file "lcd.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  cmd             1    wreg     unsigned char 
  2074 ;;  data            1    0[COMRAM] unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  cmd             1    1[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2086 ;;      Params:         1       0       0       0       0       0       0       0       0
  2087 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2089 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2090 ;;Total ram usage:        2 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 1
  2093 ;; This function calls:
  2094 ;;		_pulseEnable
  2095 ;; This function is called by:
  2096 ;;		_lcdCommand
  2097 ;;		_lcdData
  2098 ;;		_lcdInit
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text20
  2103   000E6C                     __ptext20:
  2104                           	callstack 0
  2105   000E6C                     _lcdCommand4bits:
  2106                           	callstack 27
  2107                           
  2108                           ;incstack = 0
  2109                           ;lcdCommand4bits@cmd stored from wreg
  2110   000E6C  6E27               	movwf	lcdCommand4bits@cmd^0,c
  2111   000E6E                     
  2112                           ;lcd.c: 54:     if (data) {
  2113   000E6E  5026               	movf	lcdCommand4bits@data^0,w,c
  2114   000E70  B4D8               	btfsc	status,2,c
  2115   000E72  EF3D  F007         	goto	u1361
  2116   000E76  EF3F  F007         	goto	u1360
  2117   000E7A                     u1361:
  2118   000E7A  EF42  F007         	goto	l2376
  2119   000E7E                     u1360:
  2120   000E7E                     
  2121                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  2122   000E7E  8083               	bsf	131,0,c	;volatile
  2123                           
  2124                           ;lcd.c: 56:     } else {
  2125   000E80  EF43  F007         	goto	l2378
  2126   000E84                     l2376:
  2127                           
  2128                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  2129   000E84  9083               	bcf	131,0,c	;volatile
  2130   000E86                     l2378:
  2131                           
  2132                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  2133   000E86  AE27               	btfss	lcdCommand4bits@cmd^0,7,c
  2134   000E88  EF48  F007         	goto	u1371
  2135   000E8C  EF4A  F007         	goto	u1370
  2136   000E90                     u1371:
  2137   000E90  EF4D  F007         	goto	l2382
  2138   000E94                     u1370:
  2139   000E94                     
  2140                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  2141   000E94  8483               	bsf	131,2,c	;volatile
  2142                           
  2143                           ;lcd.c: 65:     } else {
  2144   000E96  EF4E  F007         	goto	l2384
  2145   000E9A                     l2382:
  2146                           
  2147                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  2148   000E9A  9483               	bcf	131,2,c	;volatile
  2149   000E9C                     l2384:
  2150                           
  2151                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  2152   000E9C  AC27               	btfss	lcdCommand4bits@cmd^0,6,c
  2153   000E9E  EF53  F007         	goto	u1381
  2154   000EA2  EF55  F007         	goto	u1380
  2155   000EA6                     u1381:
  2156   000EA6  EF58  F007         	goto	l2388
  2157   000EAA                     u1380:
  2158   000EAA                     
  2159                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  2160   000EAA  8883               	bsf	131,4,c	;volatile
  2161                           
  2162                           ;lcd.c: 72:     } else {
  2163   000EAC  EF59  F007         	goto	l2390
  2164   000EB0                     l2388:
  2165                           
  2166                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  2167   000EB0  9883               	bcf	131,4,c	;volatile
  2168   000EB2                     l2390:
  2169                           
  2170                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  2171   000EB2  AA27               	btfss	lcdCommand4bits@cmd^0,5,c
  2172   000EB4  EF5E  F007         	goto	u1391
  2173   000EB8  EF60  F007         	goto	u1390
  2174   000EBC                     u1391:
  2175   000EBC  EF63  F007         	goto	l2394
  2176   000EC0                     u1390:
  2177   000EC0                     
  2178                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  2179   000EC0  8A83               	bsf	131,5,c	;volatile
  2180                           
  2181                           ;lcd.c: 79:     } else {
  2182   000EC2  EF64  F007         	goto	l2396
  2183   000EC6                     l2394:
  2184                           
  2185                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  2186   000EC6  9A83               	bcf	131,5,c	;volatile
  2187   000EC8                     l2396:
  2188                           
  2189                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  2190   000EC8  A827               	btfss	lcdCommand4bits@cmd^0,4,c
  2191   000ECA  EF69  F007         	goto	u1401
  2192   000ECE  EF6B  F007         	goto	u1400
  2193   000ED2                     u1401:
  2194   000ED2  EF6E  F007         	goto	l2400
  2195   000ED6                     u1400:
  2196   000ED6                     
  2197                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  2198   000ED6  8C83               	bsf	131,6,c	;volatile
  2199                           
  2200                           ;lcd.c: 86:     } else {
  2201   000ED8  EF6F  F007         	goto	l2402
  2202   000EDC                     l2400:
  2203                           
  2204                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  2205   000EDC  9C83               	bcf	131,6,c	;volatile
  2206   000EDE                     l2402:
  2207                           
  2208                           ;lcd.c: 90:     pulseEnable();
  2209   000EDE  ECAE  F008         	call	_pulseEnable	;wreg free
  2210   000EE2  0012               	return		;funcret
  2211   000EE4                     __end_of_lcdCommand4bits:
  2212                           	callstack 0
  2213                           
  2214 ;; *************** function _pulseEnable *****************
  2215 ;; Defined at:
  2216 ;;		line 47 in file "lcd.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		status,2, status,0
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2230 ;;      Params:         0       0       0       0       0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2233 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used: 1
  2236 ;; This function calls:
  2237 ;;		Nothing
  2238 ;; This function is called by:
  2239 ;;		_lcdCommand4bits
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text21
  2244   00115C                     __ptext21:
  2245                           	callstack 0
  2246   00115C                     _pulseEnable:
  2247                           	callstack 27
  2248   00115C                     
  2249                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  2250   00115C  8E83               	bsf	131,7,c	;volatile
  2251                           
  2252                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  2253   00115E  9E83               	bcf	131,7,c	;volatile
  2254   001160  0012               	return		;funcret
  2255   001162                     __end_of_pulseEnable:
  2256                           	callstack 0
  2257                           
  2258 ;; *************** function _Delay40us *****************
  2259 ;; Defined at:
  2260 ;;		line 36 in file "lcd.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  j               1    0[COMRAM] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2274 ;;      Params:         0       0       0       0       0       0       0       0       0
  2275 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2277 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2278 ;;Total ram usage:        1 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_lcdCommand
  2284 ;;		_lcdData
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text22
  2289   0010DE                     __ptext22:
  2290                           	callstack 0
  2291   0010DE                     _Delay40us:
  2292                           	callstack 28
  2293   0010DE                     
  2294                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  2295   0010DE  0E00               	movlw	0
  2296   0010E0  6E26               	movwf	Delay40us@j^0,c
  2297   0010E2                     l1340:
  2298   0010E2  2A26               	incf	Delay40us@j^0,f,c
  2299   0010E4  0E43               	movlw	67
  2300   0010E6  6426               	cpfsgt	Delay40us@j^0,c
  2301   0010E8  EF78  F008         	goto	u11
  2302   0010EC  EF7A  F008         	goto	u10
  2303   0010F0                     u11:
  2304   0010F0  EF71  F008         	goto	l1340
  2305   0010F4                     u10:
  2306   0010F4  0012               	return		;funcret
  2307   0010F6                     __end_of_Delay40us:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _Delay2ms *****************
  2311 ;; Defined at:
  2312 ;;		line 41 in file "lcd.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  k               1    1[COMRAM] unsigned char 
  2317 ;;  j               1    0[COMRAM] unsigned char 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, status,2, status,0
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2327 ;;      Params:         0       0       0       0       0       0       0       0       0
  2328 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2330 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2331 ;;Total ram usage:        2 bytes
  2332 ;; Hardware stack levels used: 1
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_lcdCommand
  2337 ;;		_lcdInit
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           	psect	text23
  2342   000FAA                     __ptext23:
  2343                           	callstack 0
  2344   000FAA                     _Delay2ms:
  2345                           	callstack 28
  2346   000FAA                     
  2347                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  2348   000FAA  0E00               	movlw	0
  2349   000FAC  6E26               	movwf	Delay2ms@j^0,c
  2350   000FAE                     l1512:
  2351                           
  2352                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  2353   000FAE  0E00               	movlw	0
  2354   000FB0  6E27               	movwf	Delay2ms@k^0,c
  2355   000FB2                     l1518:
  2356   000FB2  2A27               	incf	Delay2ms@k^0,f,c
  2357   000FB4  0EB1               	movlw	177
  2358   000FB6  6427               	cpfsgt	Delay2ms@k^0,c
  2359   000FB8  EFE0  F007         	goto	u571
  2360   000FBC  EFE2  F007         	goto	u570
  2361   000FC0                     u571:
  2362   000FC0  EFD9  F007         	goto	l1518
  2363   000FC4                     u570:
  2364   000FC4  2A26               	incf	Delay2ms@j^0,f,c
  2365   000FC6  0E13               	movlw	19
  2366   000FC8  6426               	cpfsgt	Delay2ms@j^0,c
  2367   000FCA  EFE9  F007         	goto	u581
  2368   000FCE  EFEB  F007         	goto	u580
  2369   000FD2                     u581:
  2370   000FD2  EFD7  F007         	goto	l1512
  2371   000FD6                     u580:
  2372   000FD6  0012               	return		;funcret
  2373   000FD8                     __end_of_Delay2ms:
  2374                           	callstack 0
  2375                           
  2376 ;; *************** function _kpDebounce *****************
  2377 ;; Defined at:
  2378 ;;		line 33 in file "keypad.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  portes          5    8[COMRAM] unsigned char [5]
  2383 ;;  bits            5    3[COMRAM] unsigned char [5]
  2384 ;;  j               1   13[COMRAM] unsigned char 
  2385 ;;  i               1    0        unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2395 ;;      Params:         0       0       0       0       0       0       0       0       0
  2396 ;;      Locals:        11       0       0       0       0       0       0       0       0
  2397 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2398 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2399 ;;Total ram usage:       14 bytes
  2400 ;; Hardware stack levels used: 1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text24
  2409   000C44                     __ptext24:
  2410                           	callstack 0
  2411   000C44                     _kpDebounce:
  2412                           	callstack 30
  2413   000C44                     
  2414                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  2415   000C44  EE20  F02E         	lfsr	2,kpDebounce@portes
  2416   000C48  0E04               	movlw	4
  2417   000C4A                     u861:
  2418   000C4A  6ADE               	clrf	postinc2,c
  2419   000C4C  06E8               	decf	wreg,f,c
  2420   000C4E  E2FD               	bc	u861
  2421   000C50  CF81 F02E          	movff	3969,kpDebounce@portes	;volatile
  2422   000C54  CF81 F02F          	movff	3969,kpDebounce@portes+1	;volatile
  2423   000C58  CF81 F030          	movff	3969,kpDebounce@portes+2	;volatile
  2424   000C5C  CF81 F031          	movff	3969,kpDebounce@portes+3	;volatile
  2425   000C60  CF84 F032          	movff	3972,kpDebounce@portes+4	;volatile
  2426   000C64                     
  2427                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  2428   000C64  EE20  F043         	lfsr	2,kpDebounce@F15
  2429   000C68  EE10  F029         	lfsr	1,kpDebounce@bits
  2430   000C6C  0E04               	movlw	4
  2431   000C6E                     u871:
  2432   000C6E  CFDB FFE3          	movff	plusw2,plusw1
  2433   000C72  06E8               	decf	wreg,f,c
  2434   000C74  E2FC               	bc	u871
  2435   000C76                     
  2436                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  2437   000C76  0E00               	movlw	0
  2438   000C78  6E33               	movwf	kpDebounce@j^0,c
  2439   000C7A                     l1776:
  2440                           
  2441                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  2442   000C7A  5033               	movf	kpDebounce@j^0,w,c
  2443   000C7C  0F2E               	addlw	low kpDebounce@portes
  2444   000C7E  6ED9               	movwf	fsr2l,c
  2445   000C80  6ADA               	clrf	fsr2h,c
  2446   000C82  50DF               	movf	indf2,w,c
  2447   000C84  6E26               	movwf	??_kpDebounce^0,c
  2448   000C86  5033               	movf	kpDebounce@j^0,w,c
  2449   000C88  0F29               	addlw	low kpDebounce@bits
  2450   000C8A  6ED9               	movwf	fsr2l,c
  2451   000C8C  6ADA               	clrf	fsr2h,c
  2452   000C8E  50DF               	movf	indf2,w,c
  2453   000C90  6E27               	movwf	(??_kpDebounce+1)^0,c
  2454   000C92  0E01               	movlw	1
  2455   000C94  6E28               	movwf	(??_kpDebounce+2)^0,c
  2456   000C96  2A27               	incf	(??_kpDebounce+1)^0,f,c
  2457   000C98  EF50  F006         	goto	u884
  2458   000C9C                     u885:
  2459   000C9C  90D8               	bcf	status,0,c
  2460   000C9E  3628               	rlcf	(??_kpDebounce+2)^0,f,c
  2461   000CA0                     u884:
  2462   000CA0  2E27               	decfsz	(??_kpDebounce+1)^0,f,c
  2463   000CA2  EF4E  F006         	goto	u885
  2464   000CA6  5028               	movf	(??_kpDebounce+2)^0,w,c
  2465   000CA8  1426               	andwf	??_kpDebounce^0,w,c
  2466   000CAA  0900               	iorlw	0
  2467   000CAC  A4D8               	btfss	status,2,c
  2468   000CAE  EF5B  F006         	goto	u891
  2469   000CB2  EF5D  F006         	goto	u890
  2470   000CB6                     u891:
  2471   000CB6  EF6D  F006         	goto	l1780
  2472   000CBA                     u890:
  2473   000CBA                     
  2474                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  2475   000CBA  C033  F026         	movff	kpDebounce@j,??_kpDebounce
  2476   000CBE  0E01               	movlw	1
  2477   000CC0  6E27               	movwf	(??_kpDebounce+1)^0,c
  2478   000CC2  2A26               	incf	??_kpDebounce^0,f,c
  2479   000CC4  EF66  F006         	goto	u904
  2480   000CC8                     u905:
  2481   000CC8  90D8               	bcf	status,0,c
  2482   000CCA  3627               	rlcf	(??_kpDebounce+1)^0,f,c
  2483   000CCC                     u904:
  2484   000CCC  2E26               	decfsz	??_kpDebounce^0,f,c
  2485   000CCE  EF64  F006         	goto	u905
  2486   000CD2  5027               	movf	(??_kpDebounce+1)^0,w,c
  2487   000CD4  1223               	iorwf	kpDebounce@valorNovo^0,f,c
  2488                           
  2489                           ;keypad.c: 65:             } else {
  2490   000CD6  EF7C  F006         	goto	l1782
  2491   000CDA                     l1780:
  2492                           
  2493                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  2494   000CDA  C033  F026         	movff	kpDebounce@j,??_kpDebounce
  2495   000CDE  0E01               	movlw	1
  2496   000CE0  6E27               	movwf	(??_kpDebounce+1)^0,c
  2497   000CE2  2A26               	incf	??_kpDebounce^0,f,c
  2498   000CE4  EF76  F006         	goto	u914
  2499   000CE8                     u915:
  2500   000CE8  90D8               	bcf	status,0,c
  2501   000CEA  3627               	rlcf	(??_kpDebounce+1)^0,f,c
  2502   000CEC                     u914:
  2503   000CEC  2E26               	decfsz	??_kpDebounce^0,f,c
  2504   000CEE  EF74  F006         	goto	u915
  2505   000CF2  5027               	movf	(??_kpDebounce+1)^0,w,c
  2506   000CF4  0AFF               	xorlw	255
  2507   000CF6  1623               	andwf	kpDebounce@valorNovo^0,f,c
  2508   000CF8                     l1782:
  2509                           
  2510                           ;keypad.c: 68:         }
  2511   000CF8  2A33               	incf	kpDebounce@j^0,f,c
  2512   000CFA  0E04               	movlw	4
  2513   000CFC  6433               	cpfsgt	kpDebounce@j^0,c
  2514   000CFE  EF83  F006         	goto	u921
  2515   000D02  EF85  F006         	goto	u920
  2516   000D06                     u921:
  2517   000D06  EF3D  F006         	goto	l1776
  2518   000D0A                     u920:
  2519   000D0A                     
  2520                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  2521   000D0A  5023               	movf	kpDebounce@valorNovo^0,w,c
  2522   000D0C  1822               	xorwf	kpDebounce@valorAntigo^0,w,c
  2523   000D0E  A4D8               	btfss	status,2,c
  2524   000D10  EF8C  F006         	goto	u931
  2525   000D14  EF8E  F006         	goto	u930
  2526   000D18                     u931:
  2527   000D18  EF91  F006         	goto	l1790
  2528   000D1C                     u930:
  2529   000D1C                     
  2530                           ;keypad.c: 70:         tempo--;
  2531   000D1C  0624               	decf	kpDebounce@tempo^0,f,c
  2532                           
  2533                           ;keypad.c: 71:     } else {
  2534   000D1E  EF95  F006         	goto	l136
  2535   000D22                     l1790:
  2536                           
  2537                           ;keypad.c: 72:         tempo = 10;
  2538   000D22  0E0A               	movlw	10
  2539   000D24  6E24               	movwf	kpDebounce@tempo^0,c
  2540   000D26                     
  2541                           ;keypad.c: 73:         valorAntigo = valorNovo;
  2542   000D26  C023  F022         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  2543   000D2A                     l136:
  2544                           
  2545                           ;keypad.c: 75:     if (tempo == 0) {
  2546   000D2A  5024               	movf	kpDebounce@tempo^0,w,c
  2547   000D2C  A4D8               	btfss	status,2,c
  2548   000D2E  EF9B  F006         	goto	u941
  2549   000D32  EF9D  F006         	goto	u940
  2550   000D36                     u941:
  2551   000D36  EF9F  F006         	goto	l138
  2552   000D3A                     u940:
  2553   000D3A                     
  2554                           ;keypad.c: 76:         valor = valorAntigo;
  2555   000D3A  C022  F025         	movff	kpDebounce@valorAntigo,_valor
  2556   000D3E                     l138:
  2557   000D3E  0012               	return		;funcret
  2558   000D40                     __end_of_kpDebounce:
  2559                           	callstack 0
  2560                           
  2561 ;; *************** function _dsInit *****************
  2562 ;; Defined at:
  2563 ;;		line 17 in file "ds1307.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, status,0, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2577 ;;      Params:         0       0       0       0       0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2579 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2580 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2581 ;;Total ram usage:        0 bytes
  2582 ;; Hardware stack levels used: 1
  2583 ;; Hardware stack levels required when called: 2
  2584 ;; This function calls:
  2585 ;;		_i2cInit
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text25
  2592   001162                     __ptext25:
  2593                           	callstack 0
  2594   001162                     _dsInit:
  2595                           	callstack 28
  2596   001162                     
  2597                           ;ds1307.c: 18:  i2cInit();
  2598   001162  EC2E  F008         	call	_i2cInit	;wreg free
  2599   001166  0012               	return		;funcret
  2600   001168                     __end_of_dsInit:
  2601                           	callstack 0
  2602                           
  2603 ;; *************** function _i2cInit *****************
  2604 ;; Defined at:
  2605 ;;		line 14 in file "soft_i2c.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used: 1
  2625 ;; Hardware stack levels required when called: 1
  2626 ;; This function calls:
  2627 ;;		_pinMode
  2628 ;; This function is called by:
  2629 ;;		_dsInit
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text26
  2634   00105C                     __ptext26:
  2635                           	callstack 0
  2636   00105C                     _i2cInit:
  2637                           	callstack 28
  2638   00105C                     
  2639                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  2640   00105C  0E00               	movlw	0
  2641   00105E  6E27               	movwf	(pinMode@pin+1)^0,c
  2642   001060  0E08               	movlw	8
  2643   001062  6E26               	movwf	pinMode@pin^0,c
  2644   001064  0E00               	movlw	0
  2645   001066  6E29               	movwf	(pinMode@type+1)^0,c
  2646   001068  0E01               	movlw	1
  2647   00106A  6E28               	movwf	pinMode@type^0,c
  2648   00106C  EC50  F004         	call	_pinMode	;wreg free
  2649                           
  2650                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  2651   001070  0E00               	movlw	0
  2652   001072  6E27               	movwf	(pinMode@pin+1)^0,c
  2653   001074  0E09               	movlw	9
  2654   001076  6E26               	movwf	pinMode@pin^0,c
  2655   001078  0E00               	movlw	0
  2656   00107A  6E29               	movwf	(pinMode@type+1)^0,c
  2657   00107C  0E01               	movlw	1
  2658   00107E  6E28               	movwf	pinMode@type^0,c
  2659   001080  EC50  F004         	call	_pinMode	;wreg free
  2660   001084  0012               	return		;funcret
  2661   001086                     __end_of_i2cInit:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _pinMode *****************
  2665 ;; Defined at:
  2666 ;;		line 54 in file "io.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  pin             2    0[COMRAM] int 
  2669 ;;  type            2    2[COMRAM] int 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2681 ;;      Params:         4       0       0       0       0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2683 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2684 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2685 ;;Total ram usage:        6 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_i2cInit
  2691 ;;		_read_SCL
  2692 ;;		_read_SDA
  2693 ;;		_clear_SCL
  2694 ;;		_clear_SDA
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text27
  2699   0008A0                     __ptext27:
  2700                           	callstack 0
  2701   0008A0                     _pinMode:
  2702                           	callstack 28
  2703   0008A0                     
  2704                           ;io.c: 56:     if(pin <8){
  2705   0008A0  BE27               	btfsc	(pinMode@pin+1)^0,7,c
  2706   0008A2  EF5E  F004         	goto	u1410
  2707   0008A6  5027               	movf	(pinMode@pin+1)^0,w,c
  2708   0008A8  E107               	bnz	u1411
  2709   0008AA  0E08               	movlw	8
  2710   0008AC  5C26               	subwf	pinMode@pin^0,w,c
  2711   0008AE  B0D8               	btfsc	status,0,c
  2712   0008B0  EF5C  F004         	goto	u1411
  2713   0008B4  EF5E  F004         	goto	u1410
  2714   0008B8                     u1411:
  2715   0008B8  EF88  F004         	goto	l2412
  2716   0008BC                     u1410:
  2717   0008BC                     
  2718                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  2719   0008BC  5028               	movf	pinMode@type^0,w,c
  2720   0008BE  1029               	iorwf	(pinMode@type+1)^0,w,c
  2721   0008C0  B4D8               	btfsc	status,2,c
  2722   0008C2  EF65  F004         	goto	u1421
  2723   0008C6  EF67  F004         	goto	u1420
  2724   0008CA                     u1421:
  2725   0008CA  EF77  F004         	goto	l2410
  2726   0008CE                     u1420:
  2727   0008CE  C026  F02A         	movff	pinMode@pin,??_pinMode
  2728   0008D2  0E01               	movlw	1
  2729   0008D4  6E2B               	movwf	(??_pinMode+1)^0,c
  2730   0008D6  2A2A               	incf	??_pinMode^0,f,c
  2731   0008D8  EF70  F004         	goto	u1434
  2732   0008DC                     u1435:
  2733   0008DC  90D8               	bcf	status,0,c
  2734   0008DE  362B               	rlcf	(??_pinMode+1)^0,f,c
  2735   0008E0                     u1434:
  2736   0008E0  2E2A               	decfsz	??_pinMode^0,f,c
  2737   0008E2  EF6E  F004         	goto	u1435
  2738   0008E6  502B               	movf	(??_pinMode+1)^0,w,c
  2739   0008E8  1292               	iorwf	146,f,c	;volatile
  2740   0008EA  EF76  F005         	goto	l113
  2741   0008EE                     l2410:
  2742   0008EE  C026  F02A         	movff	pinMode@pin,??_pinMode
  2743   0008F2  0E01               	movlw	1
  2744   0008F4  6E2B               	movwf	(??_pinMode+1)^0,c
  2745   0008F6  2A2A               	incf	??_pinMode^0,f,c
  2746   0008F8  EF80  F004         	goto	u1444
  2747   0008FC                     u1445:
  2748   0008FC  90D8               	bcf	status,0,c
  2749   0008FE  362B               	rlcf	(??_pinMode+1)^0,f,c
  2750   000900                     u1444:
  2751   000900  2E2A               	decfsz	??_pinMode^0,f,c
  2752   000902  EF7E  F004         	goto	u1445
  2753   000906  502B               	movf	(??_pinMode+1)^0,w,c
  2754   000908  0AFF               	xorlw	255
  2755   00090A  1692               	andwf	146,f,c	;volatile
  2756   00090C  EF76  F005         	goto	l113
  2757   000910                     l2412:
  2758   000910  BE27               	btfsc	(pinMode@pin+1)^0,7,c
  2759   000912  EF96  F004         	goto	u1450
  2760   000916  5027               	movf	(pinMode@pin+1)^0,w,c
  2761   000918  E107               	bnz	u1451
  2762   00091A  0E10               	movlw	16
  2763   00091C  5C26               	subwf	pinMode@pin^0,w,c
  2764   00091E  B0D8               	btfsc	status,0,c
  2765   000920  EF94  F004         	goto	u1451
  2766   000924  EF96  F004         	goto	u1450
  2767   000928                     u1451:
  2768   000928  EFC4  F004         	goto	l2420
  2769   00092C                     u1450:
  2770   00092C                     
  2771                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  2772   00092C  5028               	movf	pinMode@type^0,w,c
  2773   00092E  1029               	iorwf	(pinMode@type+1)^0,w,c
  2774   000930  B4D8               	btfsc	status,2,c
  2775   000932  EF9D  F004         	goto	u1461
  2776   000936  EF9F  F004         	goto	u1460
  2777   00093A                     u1461:
  2778   00093A  EFB1  F004         	goto	l2418
  2779   00093E                     u1460:
  2780   00093E  C026  F02A         	movff	pinMode@pin,??_pinMode
  2781   000942  0EF8               	movlw	-8
  2782   000944  262A               	addwf	??_pinMode^0,f,c
  2783   000946  0E01               	movlw	1
  2784   000948  6E2B               	movwf	(??_pinMode+1)^0,c
  2785   00094A  2A2A               	incf	??_pinMode^0,f,c
  2786   00094C  EFAA  F004         	goto	u1474
  2787   000950                     u1475:
  2788   000950  90D8               	bcf	status,0,c
  2789   000952  362B               	rlcf	(??_pinMode+1)^0,f,c
  2790   000954                     u1474:
  2791   000954  2E2A               	decfsz	??_pinMode^0,f,c
  2792   000956  EFA8  F004         	goto	u1475
  2793   00095A  502B               	movf	(??_pinMode+1)^0,w,c
  2794   00095C  1293               	iorwf	147,f,c	;volatile
  2795   00095E  EF76  F005         	goto	l113
  2796   000962                     l2418:
  2797   000962  C026  F02A         	movff	pinMode@pin,??_pinMode
  2798   000966  0EF8               	movlw	-8
  2799   000968  262A               	addwf	??_pinMode^0,f,c
  2800   00096A  0E01               	movlw	1
  2801   00096C  6E2B               	movwf	(??_pinMode+1)^0,c
  2802   00096E  2A2A               	incf	??_pinMode^0,f,c
  2803   000970  EFBC  F004         	goto	u1484
  2804   000974                     u1485:
  2805   000974  90D8               	bcf	status,0,c
  2806   000976  362B               	rlcf	(??_pinMode+1)^0,f,c
  2807   000978                     u1484:
  2808   000978  2E2A               	decfsz	??_pinMode^0,f,c
  2809   00097A  EFBA  F004         	goto	u1485
  2810   00097E  502B               	movf	(??_pinMode+1)^0,w,c
  2811   000980  0AFF               	xorlw	255
  2812   000982  1693               	andwf	147,f,c	;volatile
  2813   000984  EF76  F005         	goto	l113
  2814   000988                     l2420:
  2815   000988  BE27               	btfsc	(pinMode@pin+1)^0,7,c
  2816   00098A  EFD2  F004         	goto	u1490
  2817   00098E  5027               	movf	(pinMode@pin+1)^0,w,c
  2818   000990  E107               	bnz	u1491
  2819   000992  0E18               	movlw	24
  2820   000994  5C26               	subwf	pinMode@pin^0,w,c
  2821   000996  B0D8               	btfsc	status,0,c
  2822   000998  EFD0  F004         	goto	u1491
  2823   00099C  EFD2  F004         	goto	u1490
  2824   0009A0                     u1491:
  2825   0009A0  EF00  F005         	goto	l2428
  2826   0009A4                     u1490:
  2827   0009A4                     
  2828                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  2829   0009A4  5028               	movf	pinMode@type^0,w,c
  2830   0009A6  1029               	iorwf	(pinMode@type+1)^0,w,c
  2831   0009A8  B4D8               	btfsc	status,2,c
  2832   0009AA  EFD9  F004         	goto	u1501
  2833   0009AE  EFDB  F004         	goto	u1500
  2834   0009B2                     u1501:
  2835   0009B2  EFED  F004         	goto	l2426
  2836   0009B6                     u1500:
  2837   0009B6  C026  F02A         	movff	pinMode@pin,??_pinMode
  2838   0009BA  0EF0               	movlw	-16
  2839   0009BC  262A               	addwf	??_pinMode^0,f,c
  2840   0009BE  0E01               	movlw	1
  2841   0009C0  6E2B               	movwf	(??_pinMode+1)^0,c
  2842   0009C2  2A2A               	incf	??_pinMode^0,f,c
  2843   0009C4  EFE6  F004         	goto	u1514
  2844   0009C8                     u1515:
  2845   0009C8  90D8               	bcf	status,0,c
  2846   0009CA  362B               	rlcf	(??_pinMode+1)^0,f,c
  2847   0009CC                     u1514:
  2848   0009CC  2E2A               	decfsz	??_pinMode^0,f,c
  2849   0009CE  EFE4  F004         	goto	u1515
  2850   0009D2  502B               	movf	(??_pinMode+1)^0,w,c
  2851   0009D4  1294               	iorwf	148,f,c	;volatile
  2852   0009D6  EF76  F005         	goto	l113
  2853   0009DA                     l2426:
  2854   0009DA  C026  F02A         	movff	pinMode@pin,??_pinMode
  2855   0009DE  0EF0               	movlw	-16
  2856   0009E0  262A               	addwf	??_pinMode^0,f,c
  2857   0009E2  0E01               	movlw	1
  2858   0009E4  6E2B               	movwf	(??_pinMode+1)^0,c
  2859   0009E6  2A2A               	incf	??_pinMode^0,f,c
  2860   0009E8  EFF8  F004         	goto	u1524
  2861   0009EC                     u1525:
  2862   0009EC  90D8               	bcf	status,0,c
  2863   0009EE  362B               	rlcf	(??_pinMode+1)^0,f,c
  2864   0009F0                     u1524:
  2865   0009F0  2E2A               	decfsz	??_pinMode^0,f,c
  2866   0009F2  EFF6  F004         	goto	u1525
  2867   0009F6  502B               	movf	(??_pinMode+1)^0,w,c
  2868   0009F8  0AFF               	xorlw	255
  2869   0009FA  1694               	andwf	148,f,c	;volatile
  2870   0009FC  EF76  F005         	goto	l113
  2871   000A00                     l2428:
  2872   000A00  BE27               	btfsc	(pinMode@pin+1)^0,7,c
  2873   000A02  EF0E  F005         	goto	u1530
  2874   000A06  5027               	movf	(pinMode@pin+1)^0,w,c
  2875   000A08  E107               	bnz	u1531
  2876   000A0A  0E20               	movlw	32
  2877   000A0C  5C26               	subwf	pinMode@pin^0,w,c
  2878   000A0E  B0D8               	btfsc	status,0,c
  2879   000A10  EF0C  F005         	goto	u1531
  2880   000A14  EF0E  F005         	goto	u1530
  2881   000A18                     u1531:
  2882   000A18  EF3C  F005         	goto	l2436
  2883   000A1C                     u1530:
  2884   000A1C                     
  2885                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  2886   000A1C  5028               	movf	pinMode@type^0,w,c
  2887   000A1E  1029               	iorwf	(pinMode@type+1)^0,w,c
  2888   000A20  B4D8               	btfsc	status,2,c
  2889   000A22  EF15  F005         	goto	u1541
  2890   000A26  EF17  F005         	goto	u1540
  2891   000A2A                     u1541:
  2892   000A2A  EF29  F005         	goto	l2434
  2893   000A2E                     u1540:
  2894   000A2E  C026  F02A         	movff	pinMode@pin,??_pinMode
  2895   000A32  0EE8               	movlw	-24
  2896   000A34  262A               	addwf	??_pinMode^0,f,c
  2897   000A36  0E01               	movlw	1
  2898   000A38  6E2B               	movwf	(??_pinMode+1)^0,c
  2899   000A3A  2A2A               	incf	??_pinMode^0,f,c
  2900   000A3C  EF22  F005         	goto	u1554
  2901   000A40                     u1555:
  2902   000A40  90D8               	bcf	status,0,c
  2903   000A42  362B               	rlcf	(??_pinMode+1)^0,f,c
  2904   000A44                     u1554:
  2905   000A44  2E2A               	decfsz	??_pinMode^0,f,c
  2906   000A46  EF20  F005         	goto	u1555
  2907   000A4A  502B               	movf	(??_pinMode+1)^0,w,c
  2908   000A4C  1295               	iorwf	149,f,c	;volatile
  2909   000A4E  EF76  F005         	goto	l113
  2910   000A52                     l2434:
  2911   000A52  C026  F02A         	movff	pinMode@pin,??_pinMode
  2912   000A56  0EE8               	movlw	-24
  2913   000A58  262A               	addwf	??_pinMode^0,f,c
  2914   000A5A  0E01               	movlw	1
  2915   000A5C  6E2B               	movwf	(??_pinMode+1)^0,c
  2916   000A5E  2A2A               	incf	??_pinMode^0,f,c
  2917   000A60  EF34  F005         	goto	u1564
  2918   000A64                     u1565:
  2919   000A64  90D8               	bcf	status,0,c
  2920   000A66  362B               	rlcf	(??_pinMode+1)^0,f,c
  2921   000A68                     u1564:
  2922   000A68  2E2A               	decfsz	??_pinMode^0,f,c
  2923   000A6A  EF32  F005         	goto	u1565
  2924   000A6E  502B               	movf	(??_pinMode+1)^0,w,c
  2925   000A70  0AFF               	xorlw	255
  2926   000A72  1695               	andwf	149,f,c	;volatile
  2927   000A74  EF76  F005         	goto	l113
  2928   000A78                     l2436:
  2929   000A78  BE27               	btfsc	(pinMode@pin+1)^0,7,c
  2930   000A7A  EF4A  F005         	goto	u1570
  2931   000A7E  5027               	movf	(pinMode@pin+1)^0,w,c
  2932   000A80  E107               	bnz	u1571
  2933   000A82  0E28               	movlw	40
  2934   000A84  5C26               	subwf	pinMode@pin^0,w,c
  2935   000A86  B0D8               	btfsc	status,0,c
  2936   000A88  EF48  F005         	goto	u1571
  2937   000A8C  EF4A  F005         	goto	u1570
  2938   000A90                     u1571:
  2939   000A90  EF76  F005         	goto	l113
  2940   000A94                     u1570:
  2941   000A94                     
  2942                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  2943   000A94  5028               	movf	pinMode@type^0,w,c
  2944   000A96  1029               	iorwf	(pinMode@type+1)^0,w,c
  2945   000A98  B4D8               	btfsc	status,2,c
  2946   000A9A  EF51  F005         	goto	u1581
  2947   000A9E  EF53  F005         	goto	u1580
  2948   000AA2                     u1581:
  2949   000AA2  EF65  F005         	goto	l2442
  2950   000AA6                     u1580:
  2951   000AA6  C026  F02A         	movff	pinMode@pin,??_pinMode
  2952   000AAA  0EE0               	movlw	-32
  2953   000AAC  262A               	addwf	??_pinMode^0,f,c
  2954   000AAE  0E01               	movlw	1
  2955   000AB0  6E2B               	movwf	(??_pinMode+1)^0,c
  2956   000AB2  2A2A               	incf	??_pinMode^0,f,c
  2957   000AB4  EF5E  F005         	goto	u1594
  2958   000AB8                     u1595:
  2959   000AB8  90D8               	bcf	status,0,c
  2960   000ABA  362B               	rlcf	(??_pinMode+1)^0,f,c
  2961   000ABC                     u1594:
  2962   000ABC  2E2A               	decfsz	??_pinMode^0,f,c
  2963   000ABE  EF5C  F005         	goto	u1595
  2964   000AC2  502B               	movf	(??_pinMode+1)^0,w,c
  2965   000AC4  1296               	iorwf	150,f,c	;volatile
  2966   000AC6  EF76  F005         	goto	l113
  2967   000ACA                     l2442:
  2968   000ACA  C026  F02A         	movff	pinMode@pin,??_pinMode
  2969   000ACE  0EE0               	movlw	-32
  2970   000AD0  262A               	addwf	??_pinMode^0,f,c
  2971   000AD2  0E01               	movlw	1
  2972   000AD4  6E2B               	movwf	(??_pinMode+1)^0,c
  2973   000AD6  2A2A               	incf	??_pinMode^0,f,c
  2974   000AD8  EF70  F005         	goto	u1604
  2975   000ADC                     u1605:
  2976   000ADC  90D8               	bcf	status,0,c
  2977   000ADE  362B               	rlcf	(??_pinMode+1)^0,f,c
  2978   000AE0                     u1604:
  2979   000AE0  2E2A               	decfsz	??_pinMode^0,f,c
  2980   000AE2  EF6E  F005         	goto	u1605
  2981   000AE6  502B               	movf	(??_pinMode+1)^0,w,c
  2982   000AE8  0AFF               	xorlw	255
  2983   000AEA  1696               	andwf	150,f,c	;volatile
  2984   000AEC                     l113:
  2985   000AEC  0012               	return		;funcret
  2986   000AEE                     __end_of_pinMode:
  2987                           	callstack 0
  2988                           
  2989                           	psect	rparam
  2990   000000                     
  2991                           	psect	config
  2992                           
  2993                           ;Config register CONFIG1L @ 0x300000
  2994                           ;	unspecified, using default values
  2995                           ;	PLL Prescaler Selection bits
  2996                           ;	PLLDIV = 0x0, unprogrammed default
  2997                           ;	System Clock Postscaler Selection bits
  2998                           ;	CPUDIV = 0x0, unprogrammed default
  2999                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3000                           ;	USBDIV = 0x0, unprogrammed default
  3001   300000                     	org	3145728
  3002   300000  00                 	db	0
  3003                           
  3004                           ;Config register CONFIG1H @ 0x300001
  3005                           ;	Oscillator Selection bits
  3006                           ;	FOSC = HS, HS oscillator (HS)
  3007                           ;	Fail-Safe Clock Monitor Enable bit
  3008                           ;	FCMEN = 0x0, unprogrammed default
  3009                           ;	Internal/External Oscillator Switchover bit
  3010                           ;	IESO = 0x0, unprogrammed default
  3011   300001                     	org	3145729
  3012   300001  0C                 	db	12
  3013                           
  3014                           ;Config register CONFIG2L @ 0x300002
  3015                           ;	unspecified, using default values
  3016                           ;	Power-up Timer Enable bit
  3017                           ;	PWRT = 0x1, unprogrammed default
  3018                           ;	Brown-out Reset Enable bits
  3019                           ;	BOR = 0x3, unprogrammed default
  3020                           ;	Brown-out Reset Voltage bits
  3021                           ;	BORV = 0x3, unprogrammed default
  3022                           ;	USB Voltage Regulator Enable bit
  3023                           ;	VREGEN = 0x0, unprogrammed default
  3024   300002                     	org	3145730
  3025   300002  1F                 	db	31
  3026                           
  3027                           ;Config register CONFIG2H @ 0x300003
  3028                           ;	Watchdog Timer Enable bit
  3029                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3030                           ;	Watchdog Timer Postscale Select bits
  3031                           ;	WDTPS = 0xF, unprogrammed default
  3032   300003                     	org	3145731
  3033   300003  1E                 	db	30
  3034                           
  3035                           ; Padding undefined space
  3036   300004                     	org	3145732
  3037   300004  FF                 	db	255
  3038                           
  3039                           ;Config register CONFIG3H @ 0x300005
  3040                           ;	CCP2 MUX bit
  3041                           ;	CCP2MX = 0x1, unprogrammed default
  3042                           ;	PORTB A/D Enable bit
  3043                           ;	PBADEN = 0x1, unprogrammed default
  3044                           ;	Low-Power Timer 1 Oscillator Enable bit
  3045                           ;	LPT1OSC = 0x0, unprogrammed default
  3046                           ;	MCLR Pin Enable bit
  3047                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3048   300005                     	org	3145733
  3049   300005  83                 	db	131
  3050                           
  3051                           ;Config register CONFIG4L @ 0x300006
  3052                           ;	Stack Full/Underflow Reset Enable bit
  3053                           ;	STVREN = 0x1, unprogrammed default
  3054                           ;	Single-Supply ICSP Enable bit
  3055                           ;	LVP = OFF, Single-Supply ICSP disabled
  3056                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3057                           ;	ICPRT = 0x0, unprogrammed default
  3058                           ;	Extended Instruction Set Enable bit
  3059                           ;	XINST = 0x0, unprogrammed default
  3060                           ;	Background Debugger Enable bit
  3061                           ;	DEBUG = 0x1, unprogrammed default
  3062   300006                     	org	3145734
  3063   300006  81                 	db	129
  3064                           
  3065                           ; Padding undefined space
  3066   300007                     	org	3145735
  3067   300007  FF                 	db	255
  3068                           tosu	equ	0xFFF
  3069                           tosh	equ	0xFFE
  3070                           tosl	equ	0xFFD
  3071                           stkptr	equ	0xFFC
  3072                           pclatu	equ	0xFFB
  3073                           pclath	equ	0xFFA
  3074                           pcl	equ	0xFF9
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           indf0	equ	0xFEF
  3082                           postinc0	equ	0xFEE
  3083                           postdec0	equ	0xFED
  3084                           preinc0	equ	0xFEC
  3085                           plusw0	equ	0xFEB
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           postinc1	equ	0xFE6
  3091                           postdec1	equ	0xFE5
  3092                           preinc1	equ	0xFE4
  3093                           plusw1	equ	0xFE3
  3094                           fsr1h	equ	0xFE2
  3095                           fsr1l	equ	0xFE1
  3096                           bsr	equ	0xFE0
  3097                           indf2	equ	0xFDF
  3098                           postinc2	equ	0xFDE
  3099                           postdec2	equ	0xFDD
  3100                           preinc2	equ	0xFDC
  3101                           plusw2	equ	0xFDB
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        13
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      73
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    getProt@p	PTR unsigned char  size(1) Largest target is 4
		 -> eventRead@prot(COMRAM[4]), smLoop@prot(COMRAM[4]), 

    msgs	PTR unsigned char [2][3] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_eventRead
    _eventRead->_lcdData
    _lcdData->_lcdCommand4bits
    _smInit->_setState
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5928
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               8     8      0    2661
                                             15 COMRAM     8     8      0
                          _eventRead
                        _getLanguage
                            _getProt
                           _getState
                            _lcdData
                          _resetProt
                        _setLanguage
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                           12    10      2    1401
                                              3 COMRAM    12    10      2
                            _getProt
                             _kpRead
                            _lcdData
                         _serialRead
                         _serialSend
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcdData                                              1     1      0     792
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     1      1     241
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0      15
                          _eventInit
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1720
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (2) _lcdCommand                                           1     1      0     896
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (4) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay40us                                            1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay2ms                                             2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     180
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (3) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
   _smLoop
     _eventRead
       _getProt
       _kpRead
       _lcdData
         _Delay40us
         _lcdCommand4bits
       _serialRead
       _serialSend
       _setProt
     _getLanguage
     _getProt
     _getState
     _lcdData
     _resetProt
     _setLanguage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRhh         69      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      49       1       76.8%
BITBIGSFRl          20      0       0      23        0.0%
BITBIGSFRhlh         8      0       0      21        0.0%
BITBIGSFRhll         4      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      49      24        0.0%
DATA                 0      0      49       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jun 04 17:39:56 2024

                     l28 1166                       u10 10F4                       u11 10F0  
                     _v0 001E                       _v1 001D                       _v2 001C  
                     _v3 001B                       _de 0021                       _ev 0048  
                    l113 0AEC                      l141 112E                      l150 10F4  
                    l118 1172                      l136 0D2A                      l160 1160  
                    l138 0D3E                      l180 0F72                      l157 0FD6  
                    l173 0EE2                      l341 102E                      l333 10F8  
                    l501 0B46                      l183 10C2                      l344 10DC  
                    l336 110A                      l353 1084                      l188 0E6A  
                    l517 0C3A                      l519 0C42                      l616 116A  
                    l650 0F2A                      l634 116E                      l491 1120  
                    l619 115A                      l643 105A                      l580 1148  
                    l637 1152                      l591 0DF2                      l656 10A4  
                    u600 1016                      u601 1012                      u610 1028  
                    u611 1024                      u630 0F08                      u631 0F04  
                    u640 0F26                      u641 0F22                      u570 0FC4  
                    u571 0FC0                      u580 0FD6                      u581 0FD2  
                    u590 1106                      u591 1102                      u920 0D0A  
                    u904 0CCC                      u921 0D06                      u905 0CC8  
                    u930 0D1C                      u914 0CEC                      u850 10A4  
                    u931 0D18                      u915 0CE8                      u851 10A0  
                    u940 0D3A                      u941 0D36                      u861 0C4A  
                    u871 0C6E                      u890 0CBA                      u891 0CB6  
                    u884 0CA0                      u885 0C9C                      _key 0012  
                    wreg 0FE8                     l1340 10E2                     l1332 115C  
                   l1500 1124                     l1342 10E4                     l1334 10DE  
                   l1502 1126                     l1520 0FB4                     l1512 0FAE  
                   l2400 0EDC                     l1504 112A                     l2410 08EE  
                   l1522 0FC4                     l1506 0FAA                     l2402 0EDE  
                   l1530 1106                     l2420 0988                     l2412 0910  
                   l2404 08A0                     l1524 0FC6                     l1540 1028  
                   l1532 1004                     l2500 0B6A                     l2430 0A1C  
                   l2422 09A4                     l2414 092C                     l2406 08BC  
                   l1518 0FB2                     l1542 102C                     l1534 1008  
                   l2510 0B9E                     l2502 0B72                     l2440 0AA6  
                   l2432 0A2E                     l2424 09B6                     l2416 093E  
                   l2408 08CE                     l1536 1016                     l1528 10F8  
                   l1560 0F08                     l2512 0BAA                     l2600 0DAC  
                   l2442 0ACA                     l2434 0A52                     l2426 09DA  
                   l2418 0962                     l2450 1048                     l1538 101A  
                   l1562 0F14                     l1554 0EE6                     l2530 0C30  
                   l2514 0BB6                     l2506 0B86                     l2522 0BD4  
                   l2602 0DBA                     l2436 0A78                     l2428 0A00  
                   l2380 0E94                     l2372 0E6E                     l2460 0F56  
                   l2540 0E00                     l1740 1156                     l2452 104A  
                   l2444 10A8                     l1564 0F26                     l1556 0EEE  
                   l2516 0BC2                     l2508 0B92                     l2524 0C12  
                   l2532 0C3A                     l2604 0DBE                     l2438 0A94  
                   l2454 105C                     l2390 0EB2                     l2382 0E9A  
                   l2374 0E7E                     l2462 0F66                     l2550 0E0A  
                   l2446 1030                     l1494 1170                     l1558 0EF0  
                   l2526 0C18                     l2518 0BCA                     l1750 1168  
                   l1742 114C                     l2606 0DDA                     l2536 1162  
                   l1760 0C54                     l2392 0EC0                     l2384 0E9C  
                   l2376 0E84                     l2464 0F6E                     l2456 0F2E  
                   l2552 0E1A                     l1840 10C4                     l1672 110C  
                   l2448 1034                     l2528 0C28                     l2480 0AF6  
                   l1736 116C                     l1744 1086                     l2608 0DE2  
                   l1770 0C76                     l1762 0C58                     l2394 0EC6  
                   l2386 0EAA                     l2378 0E86                     l2458 0F44  
                   l2546 0E04                     l2538 0DF4                     l1842 10D8  
                   l1498 1122                     l1674 1110                     l2490 0B3E  
                   l2482 0B02                     l1746 108A                     l1780 0CDA  
                   l1764 0C5C                     l1756 0C44                     l2396 0EC8  
                   l2388 0EB0                     l2548 0E08                     l1844 10DA  
                   l1676 1118                     l1836 113E                     l2484 0B1A  
                   l1748 1094                     l2580 0D4C                     l2740 0FD8  
                   l1790 0D22                     l1782 0CF8                     l1766 0C60  
                   l1758 0C50                     l2398 0ED6                     l1838 1144  
                   l2494 0B4E                     l2486 0B28                     l2478 0AEE  
                   l2590 0D96                     l2582 0D5C                     l2742 0FEC  
                   l1792 0D26                     l1784 0CFA                     l1776 0C7A  
                   l1768 0C64                     l2496 0B54                     l2488 0B30  
                   l2592 0D9C                     l2584 0D68                     l2744 0FF0  
                   l1794 0D3A                     l1786 0D0A                     l1778 0CBA  
                   l2498 0B64                     l2594 0DA4                     l2586 0D78  
                   l2578 0D40                     l2746 0FF4                     l1788 0D1C  
                   l2588 0D84                     l2748 0FF8                     STR_1 0873  
                   STR_2 0843                     STR_3 0853                     STR_4 0833  
                   STR_5 0863                     STR_6 0883                     STR_7 0893  
                   STR_9 0822                     u1400 0ED6                     u1401 0ED2  
                   u1410 08BC                     u1411 08B8                     u1500 09B6  
                   u1420 08CE                     u1501 09B2                     u1421 08CA  
                   _LATA 0F89                     u1360 0E7E                     u1361 0E7A  
                   u1530 0A1C                     u1514 09CC                     u1450 092C  
                   u1434 08E0                     u1370 0E94                     u1610 105A  
                   u1531 0A18                     u1515 09C8                     u1451 0928  
                   u1435 08DC                     u1371 0E90                     u1611 1056  
                   u1604 0AE0                     u1540 0A2E                     u1524 09F0  
                   u1460 093E                     u1444 0900                     u1380 0EAA  
                   u1620 0F56                     u1700 0B3E                     u1605 0ADC  
                   u1541 0A2A                     u1525 09EC                     u1461 093A  
                   u1445 08FC                     u1381 0EA6                     u1621 0F52  
                   u1701 0B3A                     u1390 0EC0                     u1630 0F66  
                   u1710 0B64                     u1391 0EBC                     u1631 0F62  
                   u1711 0B60                     u1720 0B82                     u1800 0DDA  
                   u1721 0B7E                     u1801 0DD6                     u1570 0A94  
                   u1554 0A44                     u1490 09A4                     u1474 0954  
                   u1730 0C28                     u1571 0A90                     u1555 0A40  
                   u1491 09A0                     u1475 0950                     u1731 0C24  
                   u1580 0AA6                     u1564 0A68                     u1484 0978  
                   u1740 0E1A                     u1581 0AA2                     u1565 0A64  
                   u1485 0974                     u1741 0E16                     u1680 0B1A  
                   u1681 0B16                     u1594 0ABC                     u1690 0B28  
                   u1770 0D5C                     u1595 0AB8                     u1691 0B24  
                   u1771 0D58                     u1780 0D78                     u1781 0D74  
                   u1790 0D96                     u1791 0D92                     _main 0FD8  
                   _msgs 003D                     _time 000C                     _prot 0006  
                   fsr1h 0FE2                     fsr2h 0FDA                     indf1 0FE7  
                   indf2 0FDF                     fsr1l 0FE1                     fsr2l 0FD9  
                   start 0000             ___param_bank 0000          __end_of_i2cInit 1086  
                  ?_main 0026         ?_lcdCommand4bits 0026                    STR_10 0811  
                  _PORTA 0F80                    _PORTB 0F81                    _PORTC 0F82  
                  _PORTD 0F83                    _PORTE 0F84                    _TRISA 0F92  
                  _TRISB 0F93                    _TRISC 0F94                    _TRISD 0F95  
                  _TRISE 0F96          __end_of_lcdData 10C4          __end_of_lcdInit 0E6C  
        __end_of_getProt 105C           setProt@newChar 0026          __end_of_pinMode 0AEE  
                  _valor 0025                    _state 0019          __end_of_setProt 0F2C  
                  tablat 0FF5                    plusw1 0FE3                    plusw2 0FDB  
                  status 0FD8         __end_of_Delay2ms 0FD8          __initialization 0F74  
           __end_of_main 1004             ?_setLanguage 0026                   ??_main 003D  
          __activetblptr 0002              eventRead@ev 0030                ??_i2cInit 002C  
       __end_of_getState 116C                   _dTimer 0010                   _dsInit 1162  
                 _kpInit 1122                   _kpRead 1170                   _ev_ant 0016  
                 _smInit 113E                   clear_0 0F9A                   _smLoop 0D40  
              ??_lcdData 0028                   isa$std 0001                ??_lcdInit 0029  
              ??_getProt 0027         __end_of_setState 115C             __pdataCOMRAM 003D  
              ??_pinMode 002A             __mediumconst 0000                ??_setProt 0026  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
      __end_of_Delay40us 10F6               __accesstop 0060  __end_of__initialization 0FA0  
          ___rparam_used 0001             ?_pulseEnable 0026              pinMode@type 0028  
         __pcstackCOMRAM 0026                ?_Delay2ms 0026               _alarmLevel 000A  
             _lcdCommand 0F2C                  ?_dsInit 0026                  ?_kpInit 0026  
                ?_kpRead 0026             eventRead@key 0033                  ?_smInit 0026  
                ?_smLoop 0026               _kpDebounce 0C44               ??_Delay2ms 0026  
              ?_getState 0026                  _i2cInit 105C                  __Hparam 0000  
              ?_setState 0026                  __Lparam 0000          kpDebounce@tempo 0024  
           __psmallconst 0800                  __pcinit 0F74           serialRead@resp 0026  
                _lcdData 10A6                  __ramtop 0800                  _lcdInit 0DF4  
                __ptext0 0FD8                  __ptext1 0D40                  __ptext2 114A  
                __ptext3 1086                  __ptext4 1168                  __ptext5 116C  
                __ptext6 0AEE                  __ptext7 0EE4                  __ptext8 10F6  
                __ptext9 1004                  _getProt 1030        __end_of_eventInit 1122  
      __end_of_eventRead 0C44                  _display 001F                  _key_ant 0014  
                _pinMode 08A0              serialSend@c 0026                  _setProt 0EE4  
             ??_getState 0026                Delay2ms@j 0026                Delay2ms@k 0027  
                _started 0020      kpDebounce@valorNovo 0023     end_of_initialization 0FA0  
      __end_of_resetProt 10A6            __Lmediumconst 0000                  smLoop@i 003A  
             ??_setState 0026               _serialInit 10C4               _serialRead 1004  
             _serialSend 10F6                  postdec1 0FE5              ?_lcdCommand 0026  
                postinc0 0FEE                  postinc2 0FDE            ??_getLanguage 0026  
            ?_kpDebounce 0026           _valor@ssd$F312 0801               _prot_ready 001A  
              _Delay40us 10DE           __end_of_dsInit 1168            __pidataCOMRAM 1130  
         __end_of_kpInit 1130           __end_of_kpRead 1174   __end_of_valor@ssd$F312 0811  
         __end_of_smInit 114A           __end_of_smLoop 0DF4      start_initialization 0F74  
    __end_of_getLanguage 1170               ?_Delay40us 0026             smLoop@evento 003C  
      ??_lcdCommand4bits 0027              ?_serialInit 0026              ?_serialRead 0026  
            ?_serialSend 0026                 ??_dsInit 002C                 ??_kpInit 0026  
               ??_kpRead 0026                 ??_smInit 0027                 ??_smLoop 0035  
              _dTimerMax 000E              __pbssCOMRAM 0001               pinMode@pin 0026  
       setState@newState 0026               smLoop@prot 0036                 ?_i2cInit 0026  
            _getLanguage 116C                 ?_lcdData 0026            ??_setLanguage 0026  
               ?_lcdInit 0026                 ?_getProt 0026            lcdCommand@cmd 0028  
          eventRead@data 0032              __smallconst 0800            eventRead@prot 002C  
               ?_pinMode 0026                 ?_setProt 0026           kpDebounce@bits 0029  
              _eventInit 110C                _eventRead 0AEE               resetProt@i 0026  
            ??_Delay40us 0026                _resetProt 1086             ??_lcdCommand 0028  
           ??_kpDebounce 0026    kpDebounce@valorAntigo 0022                 _Delay2ms 0FAA  
             ?_eventInit 0026               ?_eventRead 0029      __end_of_setLanguage 1154  
              copy_data0 0F88       __end_of_lcdCommand 0F74             lcdData@valor 0028  
     __end_of_kpDebounce 0D40                 __Hrparam 0000               ?_resetProt 0026  
          ??_pulseEnable 0026                 __Lrparam 0000         kpDebounce@portes 002E  
        _lcdCommand4bits 0E6C                 __ptext10 10A6                 __ptext11 1170  
               __ptext20 0E6C                 __ptext12 1030                 __ptext21 115C  
               __ptext13 113E                 __ptext22 10DE                 __ptext14 1154  
               __ptext23 0FAA                 __ptext15 110C                 __ptext24 0C44  
               __ptext16 1122                 __ptext25 1162                 __ptext17 10C4  
               __ptext26 105C                 __ptext18 0DF4                 __ptext27 08A0  
               __ptext19 0F2C                 _getState 1168            kpDebounce@F13 0001  
          kpDebounce@F15 0043                 _language 0018             ??_serialInit 0026  
           ??_serialRead 0026             ??_serialSend 0026                 _setState 1154  
             Delay40us@j 0026                 lcdInit@i 0029                 isa$xinst 0000  
               getProt@i 0027                 getProt@p 0026      __end_of_pulseEnable 1162  
            _setLanguage 114A   setLanguage@newLanguage 0026              ??_eventInit 0026  
            ??_eventRead 002B       __end_of_serialInit 10DE       __end_of_serialRead 1030  
     __end_of_serialSend 110C                 setProt@i 0027              ??_resetProt 0026  
           ?_getLanguage 0026  __end_of_lcdCommand4bits 0EE4              kpDebounce@j 0033  
    lcdCommand4bits@data 0026       lcdCommand4bits@cmd 0027              _pulseEnable 115C  
