

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jun 18 17:26:51 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    72   000000                     
    73                           ; Generated 17/10/2023 GMT
    74                           ; 
    75                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4550 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107   000000                     
   108                           	psect	idataCOMRAM
   109   0021B8                     __pidataCOMRAM:
   110                           	callstack 0
   111                           
   112                           ;initializer for _ev
   113   0021B8  0062               	dw	98
   114                           
   115                           	psect	idataBANK0
   116   002162                     __pidataBANK0:
   117                           	callstack 0
   118                           
   119                           ;initializer for _msgs
   120   002162  73                 	db	low STR_1
   121   002163  43                 	db	low STR_2
   122   002164  73                 	db	low STR_1
   123   002165  43                 	db	low STR_2
   124   002166  53                 	db	low STR_5
   125   002167  33                 	db	low STR_6
   126   002168  63                 	db	low STR_7
   127   002169  83                 	db	low STR_8
   128   00216A  00                 	db	0
   129   00216B  00                 	db	0
   130                           
   131                           ;initializer for kpDebounce@F15
   132   00216C  02                 	db	2
   133   00216D  03                 	db	3
   134   00216E  05                 	db	5
   135   00216F  04                 	db	4
   136   002170  01                 	db	1
   137                           
   138                           	psect	smallconst
   139   000800                     __psmallconst:
   140                           	callstack 0
   141   000800  00                 	db	0
   142   000801                     _valor@ssd$F312:
   143                           	callstack 0
   144   000801  3F                 	db	63
   145   000802  06                 	db	6
   146   000803  5B                 	db	91
   147   000804  4F                 	db	79
   148   000805  66                 	db	102
   149   000806  6D                 	db	109
   150   000807  7D                 	db	125
   151   000808  07                 	db	7
   152   000809  7F                 	db	127
   153   00080A  6F                 	db	111
   154   00080B  77                 	db	119
   155   00080C  7C                 	db	124
   156   00080D  39                 	db	57
   157   00080E  5E                 	db	94
   158   00080F  79                 	db	121
   159   000810  71                 	db	113
   160   000811                     __end_of_valor@ssd$F312:
   161                           	callstack 0
   162   000000                     _PORTA	set	3968
   163   000000                     _LATA	set	3977
   164   000000                     _TRISA	set	3986
   165   000000                     _PORTE	set	3972
   166   000000                     _PORTD	set	3971
   167   000000                     _PORTC	set	3970
   168   000000                     _PORTB	set	3969
   169   000000                     _TRISE	set	3990
   170   000000                     _TRISD	set	3989
   171   000000                     _TRISC	set	3988
   172   000000                     _TRISB	set	3987
   173   000811                     STR_13:
   174   000811  45                 	db	69	;'E'
   175   000812  6E                 	db	110	;'n'
   176   000813  67                 	db	103	;'g'
   177   000814  6C                 	db	108	;'l'
   178   000815  69                 	db	105	;'i'
   179   000816  73                 	db	115	;'s'
   180   000817  68                 	db	104	;'h'
   181   000818  20                 	db	32
   182   000819  20                 	db	32
   183   00081A  20                 	db	32
   184   00081B  20                 	db	32
   185   00081C  20                 	db	32
   186   00081D  20                 	db	32
   187   00081E  20                 	db	32
   188   00081F  20                 	db	32
   189   000820  20                 	db	32
   190   000821  00                 	db	0
   191   000822                     STR_12:
   192   000822  50                 	db	80	;'P'
   193   000823  6F                 	db	111	;'o'
   194   000824  72                 	db	114	;'r'
   195   000825  74                 	db	116	;'t'
   196   000826  75                 	db	117	;'u'
   197   000827  67                 	db	103	;'g'
   198   000828  75                 	db	117	;'u'
   199   000829  65                 	db	101	;'e'
   200   00082A  73                 	db	115	;'s'
   201   00082B  20                 	db	32
   202   00082C  20                 	db	32
   203   00082D  20                 	db	32
   204   00082E  20                 	db	32
   205   00082F  20                 	db	32
   206   000830  20                 	db	32
   207   000831  20                 	db	32
   208   000832  00                 	db	0
   209   000833                     STR_6:
   210   000833  43                 	db	67	;'C'
   211   000834  68                 	db	104	;'h'
   212   000835  61                 	db	97	;'a'
   213   000836  6E                 	db	110	;'n'
   214   000837  67                 	db	103	;'g'
   215   000838  65                 	db	101	;'e'
   216   000839  20                 	db	32
   217   00083A  74                 	db	116	;'t'
   218   00083B  69                 	db	105	;'i'
   219   00083C  6D                 	db	109	;'m'
   220   00083D  65                 	db	101	;'e'
   221   00083E  20                 	db	32
   222   00083F  20                 	db	32
   223   000840  20                 	db	32
   224   000841  20                 	db	32
   225   000842  00                 	db	0
   226   000843                     STR_2:
   227   000843  43                 	db	67	;'C'
   228   000844  68                 	db	104	;'h'
   229   000845  61                 	db	97	;'a'
   230   000846  6E                 	db	110	;'n'
   231   000847  67                 	db	103	;'g'
   232   000848  65                 	db	101	;'e'
   233   000849  20                 	db	32
   234   00084A  61                 	db	97	;'a'
   235   00084B  6C                 	db	108	;'l'
   236   00084C  61                 	db	97	;'a'
   237   00084D  72                 	db	114	;'r'
   238   00084E  6D                 	db	109	;'m'
   239   00084F  20                 	db	32
   240   000850  20                 	db	32
   241   000851  20                 	db	32
   242   000852  00                 	db	0
   243   000853                     STR_5:
   244   000853  41                 	db	65	;'A'
   245   000854  6C                 	db	108	;'l'
   246   000855  74                 	db	116	;'t'
   247   000856  65                 	db	101	;'e'
   248   000857  72                 	db	114	;'r'
   249   000858  61                 	db	97	;'a'
   250   000859  72                 	db	114	;'r'
   251   00085A  20                 	db	32
   252   00085B  74                 	db	116	;'t'
   253   00085C  65                 	db	101	;'e'
   254   00085D  6D                 	db	109	;'m'
   255   00085E  70                 	db	112	;'p'
   256   00085F  6F                 	db	111	;'o'
   257   000860  20                 	db	32
   258   000861  20                 	db	32
   259   000862  00                 	db	0
   260   000863                     STR_7:
   261   000863  41                 	db	65	;'A'
   262   000864  6C                 	db	108	;'l'
   263   000865  74                 	db	116	;'t'
   264   000866  65                 	db	101	;'e'
   265   000867  72                 	db	114	;'r'
   266   000868  61                 	db	97	;'a'
   267   000869  72                 	db	114	;'r'
   268   00086A  20                 	db	32
   269   00086B  69                 	db	105	;'i'
   270   00086C  64                 	db	100	;'d'
   271   00086D  69                 	db	105	;'i'
   272   00086E  6F                 	db	111	;'o'
   273   00086F  6D                 	db	109	;'m'
   274   000870  61                 	db	97	;'a'
   275   000871  20                 	db	32
   276   000872  00                 	db	0
   277   000873                     STR_1:
   278   000873  41                 	db	65	;'A'
   279   000874  6C                 	db	108	;'l'
   280   000875  74                 	db	116	;'t'
   281   000876  65                 	db	101	;'e'
   282   000877  72                 	db	114	;'r'
   283   000878  61                 	db	97	;'a'
   284   000879  72                 	db	114	;'r'
   285   00087A  20                 	db	32
   286   00087B  61                 	db	97	;'a'
   287   00087C  6C                 	db	108	;'l'
   288   00087D  61                 	db	97	;'a'
   289   00087E  72                 	db	114	;'r'
   290   00087F  6D                 	db	109	;'m'
   291   000880  65                 	db	101	;'e'
   292   000881  20                 	db	32
   293   000882  00                 	db	0
   294   000883                     STR_8:
   295   000883  43                 	db	67	;'C'
   296   000884  68                 	db	104	;'h'
   297   000885  61                 	db	97	;'a'
   298   000886  6E                 	db	110	;'n'
   299   000887  67                 	db	103	;'g'
   300   000888  65                 	db	101	;'e'
   301   000889  20                 	db	32
   302   00088A  6C                 	db	108	;'l'
   303   00088B  61                 	db	97	;'a'
   304   00088C  6E                 	db	110	;'n'
   305   00088D  67                 	db	103	;'g'
   306   00088E  75                 	db	117	;'u'
   307   00088F  61                 	db	97	;'a'
   308   000890  67                 	db	103	;'g'
   309   000891  65                 	db	101	;'e'
   310   000892  00                 	db	0
   311   000893                     STR_9:
   312   000893  20                 	db	32
   313   000894  20                 	db	32
   314   000895  20                 	db	32
   315   000896  20                 	db	32
   316   000897  20                 	db	32
   317   000898  20                 	db	32
   318   000899  20                 	db	32
   319   00089A  20                 	db	32
   320   00089B  20                 	db	32
   321   00089C  20                 	db	32
   322   00089D  20                 	db	32
   323   00089E  00                 	db	0
   324   00089F  00                 	db	0	; dummy byte at the end
   325   000000                     
   326                           ; #config settings
   327                           
   328                           	psect	cinit
   329   001B8E                     __pcinit:
   330                           	callstack 0
   331   001B8E                     start_initialization:
   332                           	callstack 0
   333   001B8E                     __initialization:
   334                           	callstack 0
   335                           
   336                           ; Initialize objects allocated to BANK0 (15 bytes)
   337                           ; load TBLPTR registers with __pidataBANK0
   338   001B8E  0E62               	movlw	low __pidataBANK0
   339   001B90  6EF6               	movwf	tblptrl,c
   340   001B92  0E21               	movlw	high __pidataBANK0
   341   001B94  6EF7               	movwf	tblptrh,c
   342   001B96  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   343   001B98  6EF8               	movwf	tblptru,c
   344   001B9A  EE00  F060         	lfsr	0,__pdataBANK0
   345   001B9E  EE10 F00F          	lfsr	1,15
   346   001BA2                     copy_data0:
   347   001BA2  0009               	tblrd		*+
   348   001BA4  CFF5 FFEE          	movff	tablat,postinc0
   349   001BA8  50E5               	movf	postdec1,w,c
   350   001BAA  50E1               	movf	fsr1l,w,c
   351   001BAC  E1FA               	bnz	copy_data0
   352                           
   353                           ; Initialize objects allocated to COMRAM (2 bytes)
   354                           ; load TBLPTR registers with __pidataCOMRAM
   355   001BAE  0EB8               	movlw	low __pidataCOMRAM
   356   001BB0  6EF6               	movwf	tblptrl,c
   357   001BB2  0E21               	movlw	high __pidataCOMRAM
   358   001BB4  6EF7               	movwf	tblptrh,c
   359   001BB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   360   001BB8  6EF8               	movwf	tblptru,c
   361   001BBA  0009               	tblrd		*+	;fetch initializer
   362   001BBC  CFF5 F05A          	movff	tablat,__pdataCOMRAM
   363   001BC0  0009               	tblrd		*+	;fetch initializer
   364   001BC2  CFF5 F05B          	movff	tablat,__pdataCOMRAM+1
   365                           
   366                           ; Clear objects allocated to BANK0 (10 bytes)
   367   001BC6  EE00  F06F         	lfsr	0,__pbssBANK0
   368   001BCA  0E0A               	movlw	10
   369   001BCC                     clear_0:
   370   001BCC  6AEE               	clrf	postinc0,c
   371   001BCE  06E8               	decf	wreg,f,c
   372   001BD0  E1FD               	bnz	clear_0
   373                           
   374                           ; Clear objects allocated to COMRAM (30 bytes)
   375   001BD2  EE00  F03C         	lfsr	0,__pbssCOMRAM
   376   001BD6  0E1E               	movlw	30
   377   001BD8                     clear_1:
   378   001BD8  6AEE               	clrf	postinc0,c
   379   001BDA  06E8               	decf	wreg,f,c
   380   001BDC  E1FD               	bnz	clear_1
   381   001BDE                     end_of_initialization:
   382                           	callstack 0
   383   001BDE                     __end_of__initialization:
   384                           	callstack 0
   385   001BDE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   386   001BE0  6EF8               	movwf	tblptru,c
   387   001BE2  0100               	movlb	0
   388   001BE4  EF9C  F00F         	goto	_main	;jump to C main() function
   389                           
   390                           	psect	bssCOMRAM
   391   00003C                     __pbssCOMRAM:
   392                           	callstack 0
   393   00003C                     _time:
   394                           	callstack 0
   395   00003C                     	ds	2
   396   00003E                     	ds	2
   397   000040                     	ds	2
   398   000042                     _key:
   399                           	callstack 0
   400   000042                     	ds	2
   401   000044                     _key_ant:
   402                           	callstack 0
   403   000044                     	ds	2
   404   000046                     _ev_ant:
   405                           	callstack 0
   406   000046                     	ds	2
   407   000048                     _index:
   408                           	callstack 0
   409   000048                     	ds	1
   410   000049                     _alarmLevelLow:
   411                           	callstack 0
   412   000049                     	ds	1
   413   00004A                     _alarmLevelHigh:
   414                           	callstack 0
   415   00004A                     	ds	1
   416   00004B                     _language:
   417                           	callstack 0
   418   00004B                     	ds	1
   419   00004C                     _state:
   420                           	callstack 0
   421   00004C                     	ds	1
   422   00004D                     _estado_ant:
   423                           	callstack 0
   424   00004D                     	ds	1
   425   00004E                     _prot_ready:
   426                           	callstack 0
   427   00004E                     	ds	1
   428   00004F                     _v3:
   429                           	callstack 0
   430   00004F                     	ds	1
   431   000050                     _v2:
   432                           	callstack 0
   433   000050                     	ds	1
   434   000051                     _v1:
   435                           	callstack 0
   436   000051                     	ds	1
   437   000052                     _v0:
   438                           	callstack 0
   439   000052                     	ds	1
   440   000053                     _display:
   441                           	callstack 0
   442   000053                     	ds	1
   443   000054                     _started:
   444                           	callstack 0
   445   000054                     	ds	1
   446   000055                     _de:
   447                           	callstack 0
   448   000055                     	ds	1
   449   000056                     kpDebounce@valorAntigo:
   450                           	callstack 0
   451   000056                     	ds	1
   452   000057                     kpDebounce@valorNovo:
   453                           	callstack 0
   454   000057                     	ds	1
   455   000058                     kpDebounce@tempo:
   456                           	callstack 0
   457   000058                     	ds	1
   458   000059                     _valor:
   459                           	callstack 0
   460   000059                     	ds	1
   461                           
   462                           	psect	dataCOMRAM
   463   00005A                     __pdataCOMRAM:
   464                           	callstack 0
   465   00005A                     	ds	2
   466                           
   467                           	psect	bssBANK0
   468   00006F                     __pbssBANK0:
   469                           	callstack 0
   470   00006F                     	ds	5
   471   000074                     _prot:
   472                           	callstack 0
   473   000074                     	ds	5
   474                           
   475                           	psect	dataBANK0
   476   000060                     __pdataBANK0:
   477                           	callstack 0
   478   000060                     _msgs:
   479                           	callstack 0
   480   000060                     	ds	10
   481   00006A                     kpDebounce@F15:
   482                           	callstack 0
   483   00006A                     	ds	5
   484                           
   485                           	psect	cstackCOMRAM
   486   000001                     __pcstackCOMRAM:
   487                           	callstack 0
   488   000001                     ??_kpDebounce:
   489   000001                     ?_getTime:
   490                           	callstack 0
   491   000001                     ?_getAlarmLevel:
   492                           	callstack 0
   493   000001                     ?_digitalRead:
   494                           	callstack 0
   495   000001                     Delay40us@j:
   496                           	callstack 0
   497   000001                     Delay2ms@j:
   498                           	callstack 0
   499   000001                     lcdCommand4bits@data:
   500                           	callstack 0
   501   000001                     serialSend@c:
   502                           	callstack 0
   503   000001                     serialRead@resp:
   504                           	callstack 0
   505   000001                     setState@newState:
   506                           	callstack 0
   507   000001                     setLanguage@newLanguage:
   508                           	callstack 0
   509   000001                     setProt@newChar:
   510                           	callstack 0
   511   000001                     resetProt@i:
   512                           	callstack 0
   513   000001                     digitalWrite@pin:
   514                           	callstack 0
   515   000001                     digitalRead@pin:
   516                           	callstack 0
   517   000001                     pinMode@pin:
   518                           	callstack 0
   519   000001                     getAlarmLevel@lh:
   520                           	callstack 0
   521                           
   522                           ; 2 bytes @ 0x0
   523   000001                     	ds	1
   524   000002                     Delay2ms@k:
   525                           	callstack 0
   526   000002                     lcdCommand4bits@cmd:
   527                           	callstack 0
   528                           
   529                           ; 1 bytes @ 0x1
   530   000002                     	ds	1
   531   000003                     ??_digitalRead:
   532   000003                     ?_eventRead:
   533                           	callstack 0
   534   000003                     lcdCommand@cmd:
   535                           	callstack 0
   536   000003                     lcdData@valor:
   537                           	callstack 0
   538   000003                     digitalWrite@value:
   539                           	callstack 0
   540   000003                     pinMode@type:
   541                           	callstack 0
   542   000003                     getAlarmLevel@l:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x2
   546   000003                     	ds	1
   547   000004                     lcdInit@i:
   548                           	callstack 0
   549   000004                     lcdString@str:
   550                           	callstack 0
   551   000004                     kpDebounce@bits:
   552                           	callstack 0
   553                           
   554                           ; 5 bytes @ 0x3
   555   000004                     	ds	1
   556   000005                     ??_digitalWrite:
   557   000005                     ??_pinMode:
   558   000005                     ??_eventRead:
   559                           
   560                           ; 1 bytes @ 0x4
   561   000005                     	ds	1
   562   000006                     eventRead@prot:
   563                           	callstack 0
   564                           
   565                           ; 1 bytes @ 0x5
   566   000006                     	ds	1
   567   000007                     i2c_write_bit@bit:
   568                           	callstack 0
   569   000007                     i2c_read_bit@bit:
   570                           	callstack 0
   571   000007                     eventRead@ev:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x6
   575   000007                     	ds	1
   576   000008                     i2cWriteByte@send_stop:
   577                           	callstack 0
   578   000008                     i2cReadByte@send_stop:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x7
   582   000008                     	ds	1
   583   000009                     ??_i2cReadByte:
   584   000009                     i2cWriteByte@byte:
   585                           	callstack 0
   586   000009                     eventRead@data:
   587                           	callstack 0
   588   000009                     kpDebounce@portes:
   589                           	callstack 0
   590                           
   591                           ; 5 bytes @ 0x8
   592   000009                     	ds	1
   593   00000A                     i2cWriteByte@send_start:
   594                           	callstack 0
   595   00000A                     i2cReadByte@nack:
   596                           	callstack 0
   597   00000A                     eventRead@key:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x9
   601   00000A                     	ds	1
   602   00000B                     i2cWriteByte@bit:
   603                           	callstack 0
   604   00000B                     i2cReadByte@bit:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0xA
   608   00000B                     	ds	2
   609   00000D                     i2cReadByte@byte:
   610                           	callstack 0
   611                           
   612                           ; 1 bytes @ 0xC
   613   00000D                     	ds	1
   614   00000E                     ?_dsReadData:
   615                           	callstack 0
   616   00000E                     kpDebounce@j:
   617                           	callstack 0
   618   00000E                     dsReadData@address:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0xD
   622   00000E                     	ds	2
   623   000010                     ??_dsReadData:
   624                           
   625                           ; 1 bytes @ 0xF
   626   000010                     	ds	1
   627   000011                     dsReadData@result:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x10
   631   000011                     	ds	2
   632   000013                     ?___awdiv:
   633                           	callstack 0
   634   000013                     ___awdiv@dividend:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x12
   638   000013                     	ds	2
   639   000015                     ___awdiv@divisor:
   640                           	callstack 0
   641                           
   642                           ; 2 bytes @ 0x14
   643   000015                     	ds	2
   644   000017                     ___awdiv@counter:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0x16
   648   000017                     	ds	1
   649   000018                     ___awdiv@sign:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0x17
   653   000018                     	ds	1
   654   000019                     ___awdiv@quotient:
   655                           	callstack 0
   656                           
   657                           ; 2 bytes @ 0x18
   658   000019                     	ds	2
   659   00001B                     ?___wmul:
   660                           	callstack 0
   661   00001B                     ___wmul@multiplier:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x1A
   665   00001B                     	ds	2
   666   00001D                     ___wmul@multiplicand:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x1C
   670   00001D                     	ds	2
   671   00001F                     ___wmul@product:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x1E
   675   00001F                     	ds	2
   676   000021                     ?_bcd2dec:
   677                           	callstack 0
   678   000021                     bcd2dec@value:
   679                           	callstack 0
   680                           
   681                           ; 2 bytes @ 0x20
   682   000021                     	ds	2
   683   000023                     ??_bcd2dec:
   684                           
   685                           ; 1 bytes @ 0x22
   686   000023                     	ds	2
   687   000025                     ?___awmod:
   688                           	callstack 0
   689   000025                     ___awmod@dividend:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x24
   693   000025                     	ds	2
   694   000027                     ___awmod@divisor:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x26
   698   000027                     	ds	2
   699   000029                     ___awmod@counter:
   700                           	callstack 0
   701                           
   702                           ; 1 bytes @ 0x28
   703   000029                     	ds	1
   704   00002A                     ___awmod@sign:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x29
   708   00002A                     	ds	1
   709   00002B                     ?_dec2bcd:
   710                           	callstack 0
   711   00002B                     dec2bcd@value:
   712                           	callstack 0
   713   00002B                     lcdInt@val:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x2A
   717   00002B                     	ds	2
   718   00002D                     ??_dec2bcd:
   719   00002D                     outputPrint@numTela:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x2C
   723   00002D                     	ds	2
   724   00002F                     outputPrint@idioma:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x2E
   728   00002F                     	ds	2
   729   000031                     dsWriteData@address:
   730                           	callstack 0
   731   000031                     _outputPrint$1403:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x30
   735   000031                     	ds	2
   736   000033                     dsWriteData@value:
   737                           	callstack 0
   738   000033                     _outputPrint$1404:
   739                           	callstack 0
   740                           
   741                           ; 2 bytes @ 0x32
   742   000033                     	ds	1
   743   000034                     setAlarmLevel@newAlarmLevel:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x33
   747   000034                     	ds	2
   748   000036                     setAlarmLevel@lh:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x35
   752   000036                     	ds	1
   753   000037                     ??_smLoop:
   754   000037                     
   755                           ; 1 bytes @ 0x36
   756   000037                     	ds	1
   757   000038                     _smLoop$1405:
   758                           	callstack 0
   759                           
   760                           ; 2 bytes @ 0x37
   761   000038                     	ds	2
   762   00003A                     smLoop@prot:
   763                           	callstack 0
   764                           
   765                           ; 1 bytes @ 0x39
   766   00003A                     	ds	1
   767   00003B                     smLoop@evento:
   768                           	callstack 0
   769                           
   770                           ; 1 bytes @ 0x3A
   771   00003B                     	ds	1
   772   00003C                     
   773                           ; 1 bytes @ 0x3B
   774 ;;
   775 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   776 ;;
   777 ;; *************** function _main *****************
   778 ;; Defined at:
   779 ;;		line 23 in file "main.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   793 ;;      Params:         0       0       0       0       0       0       0       0       0
   794 ;;      Locals:         0       0       0       0       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0       0       0
   796 ;;      Totals:         0       0       0       0       0       0       0       0       0
   797 ;;Total ram usage:        0 bytes
   798 ;; Hardware stack levels required when called: 7
   799 ;; This function calls:
   800 ;;		_dsInit
   801 ;;		_kpDebounce
   802 ;;		_kpInit
   803 ;;		_lcdInit
   804 ;;		_serialInit
   805 ;;		_smInit
   806 ;;		_smLoop
   807 ;; This function is called by:
   808 ;;		Startup code after reset
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text0
   813   001F38                     __ptext0:
   814                           	callstack 0
   815   001F38                     _main:
   816                           	callstack 24
   817   001F38                     
   818                           ;main.c: 26:     kpInit();
   819   001F38  ECB9  F010         	call	_kpInit	;wreg free
   820                           
   821                           ;main.c: 27:     lcdInit();
   822   001F3C  ECEE  F00C         	call	_lcdInit	;wreg free
   823                           
   824                           ;main.c: 28:     dsInit();
   825   001F40  ECD1  F010         	call	_dsInit	;wreg free
   826                           
   827                           ;main.c: 29:     smInit();
   828   001F44  ECA9  F010         	call	_smInit	;wreg free
   829                           
   830                           ;main.c: 30:     serialInit();
   831   001F48  EC7A  F010         	call	_serialInit	;wreg free
   832   001F4C                     
   833                           ;main.c: 31:     TRISA = 0x00;
   834   001F4C  0E00               	movlw	0
   835   001F4E  6E92               	movwf	146,c	;volatile
   836   001F50                     
   837                           ;main.c: 32:     LATA = 0x00;
   838   001F50  0E00               	movlw	0
   839   001F52  6E89               	movwf	137,c	;volatile
   840   001F54                     l3465:
   841                           
   842                           ;main.c: 40:         kpDebounce();
   843   001F54  EC39  F00B         	call	_kpDebounce	;wreg free
   844   001F58                     
   845                           ;main.c: 42:         smLoop();
   846   001F58  EC50  F004         	call	_smLoop	;wreg free
   847   001F5C  EFAA  F00F         	goto	l3465
   848   001F60  EF00  F000         	goto	start
   849   001F64                     __end_of_main:
   850                           	callstack 0
   851                           
   852 ;; *************** function _smLoop *****************
   853 ;; Defined at:
   854 ;;		line 18 in file "stateMachine.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  prot            1   57[COMRAM] PTR unsigned char 
   859 ;;		 -> prot(5), 
   860 ;;  evento          1   58[COMRAM] unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   870 ;;      Params:         0       0       0       0       0       0       0       0       0
   871 ;;      Locals:         4       0       0       0       0       0       0       0       0
   872 ;;      Temps:          1       0       0       0       0       0       0       0       0
   873 ;;      Totals:         5       0       0       0       0       0       0       0       0
   874 ;;Total ram usage:        5 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; Hardware stack levels required when called: 6
   877 ;; This function calls:
   878 ;;		_bcd2dec
   879 ;;		_dec2bcd
   880 ;;		_dsReadData
   881 ;;		_dsWriteData
   882 ;;		_eventRead
   883 ;;		_getAlarmLevel
   884 ;;		_getLanguage
   885 ;;		_getProt
   886 ;;		_getState
   887 ;;		_outputPrint
   888 ;;		_resetProt
   889 ;;		_setAlarmLevel
   890 ;;		_setLanguage
   891 ;;		_setState
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text1
   898   0008A0                     __ptext1:
   899                           	callstack 0
   900   0008A0                     _smLoop:
   901                           	callstack 24
   902   0008A0                     
   903                           ;stateMachine.c: 19:     unsigned char evento;;stateMachine.c: 22:     evento = eventRea
      +                          d();
   904   0008A0  ECB9  F009         	call	_eventRead	;wreg free
   905   0008A4  5003               	movf	?_eventRead^0,w,c
   906   0008A6  6E3B               	movwf	smLoop@evento^0,c
   907                           
   908                           ;stateMachine.c: 24:     switch (getState()) {
   909   0008A8  EFC7  F005         	goto	l3449
   910   0008AC                     l3349:
   911                           
   912                           ;stateMachine.c: 26:             if (evento == EV_B_0) {
   913   0008AC  503B               	movf	smLoop@evento^0,w,c
   914   0008AE  A4D8               	btfss	status,2,c
   915   0008B0  EF5C  F004         	goto	u2941
   916   0008B4  EF5E  F004         	goto	u2940
   917   0008B8                     u2941:
   918   0008B8  EF6E  F004         	goto	l3353
   919   0008BC                     u2940:
   920   0008BC                     
   921                           ;stateMachine.c: 27:                 setAlarmLevel(getAlarmLevel(0) - 1, 0);
   922   0008BC  0E00               	movlw	0
   923   0008BE  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
   924   0008C0  0E00               	movlw	0
   925   0008C2  6E01               	movwf	getAlarmLevel@lh^0,c
   926   0008C4  ECC8  F00F         	call	_getAlarmLevel	;wreg free
   927   0008C8  0EFF               	movlw	255
   928   0008CA  2401               	addwf	?_getAlarmLevel^0,w,c
   929   0008CC  6E34               	movwf	setAlarmLevel@newAlarmLevel^0,c
   930   0008CE  0EFF               	movlw	255
   931   0008D0  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
   932   0008D2  6E35               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   933   0008D4  0E00               	movlw	0
   934   0008D6  6E36               	movwf	setAlarmLevel@lh^0,c
   935   0008D8  ECB2  F00F         	call	_setAlarmLevel	;wreg free
   936   0008DC                     l3353:
   937                           
   938                           ;stateMachine.c: 30:             if (evento == EV_B_1) {
   939   0008DC  043B               	decf	smLoop@evento^0,w,c
   940   0008DE  A4D8               	btfss	status,2,c
   941   0008E0  EF74  F004         	goto	u2951
   942   0008E4  EF76  F004         	goto	u2950
   943   0008E8                     u2951:
   944   0008E8  EF86  F004         	goto	l3357
   945   0008EC                     u2950:
   946   0008EC                     
   947                           ;stateMachine.c: 31:                 setAlarmLevel(getAlarmLevel(0) + 1, 0);
   948   0008EC  0E00               	movlw	0
   949   0008EE  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
   950   0008F0  0E00               	movlw	0
   951   0008F2  6E01               	movwf	getAlarmLevel@lh^0,c
   952   0008F4  ECC8  F00F         	call	_getAlarmLevel	;wreg free
   953   0008F8  0E01               	movlw	1
   954   0008FA  2401               	addwf	?_getAlarmLevel^0,w,c
   955   0008FC  6E34               	movwf	setAlarmLevel@newAlarmLevel^0,c
   956   0008FE  0E00               	movlw	0
   957   000900  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
   958   000902  6E35               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   959   000904  0E00               	movlw	0
   960   000906  6E36               	movwf	setAlarmLevel@lh^0,c
   961   000908  ECB2  F00F         	call	_setAlarmLevel	;wreg free
   962   00090C                     l3357:
   963                           
   964                           ;stateMachine.c: 34:             if (evento == EV_B_2) {
   965   00090C  0E02               	movlw	2
   966   00090E  183B               	xorwf	smLoop@evento^0,w,c
   967   000910  A4D8               	btfss	status,2,c
   968   000912  EF8D  F004         	goto	u2961
   969   000916  EF8F  F004         	goto	u2960
   970   00091A                     u2961:
   971   00091A  EF92  F004         	goto	l3361
   972   00091E                     u2960:
   973   00091E                     
   974                           ;stateMachine.c: 35:                 setState(STATE_TEMPO);
   975   00091E  0E02               	movlw	2
   976   000920  ECCA  F010         	call	_setState
   977   000924                     l3361:
   978                           
   979                           ;stateMachine.c: 38:             if (evento == EV_B_3) {
   980   000924  0E03               	movlw	3
   981   000926  183B               	xorwf	smLoop@evento^0,w,c
   982   000928  A4D8               	btfss	status,2,c
   983   00092A  EF99  F004         	goto	u2971
   984   00092E  EF9B  F004         	goto	u2970
   985   000932                     u2971:
   986   000932  EF9E  F004         	goto	l3365
   987   000936                     u2970:
   988   000936                     
   989                           ;stateMachine.c: 39:                 setState(STATE_ALARMEH);
   990   000936  0E01               	movlw	1
   991   000938  ECCA  F010         	call	_setState
   992   00093C                     l3365:
   993                           
   994                           ;stateMachine.c: 42:             if(evento == EV_B_4)
   995   00093C  0E04               	movlw	4
   996   00093E  183B               	xorwf	smLoop@evento^0,w,c
   997   000940  A4D8               	btfss	status,2,c
   998   000942  EFA5  F004         	goto	u2981
   999   000946  EFA7  F004         	goto	u2980
  1000   00094A                     u2981:
  1001   00094A  EFDF  F005         	goto	l3451
  1002   00094E                     u2980:
  1003   00094E                     
  1004                           ;stateMachine.c: 43:             {;stateMachine.c: 44:                 setState(STATE_MA
      +                          IN);
  1005   00094E  0E04               	movlw	4
  1006   000950  ECCA  F010         	call	_setState
  1007   000954                     
  1008                           ;stateMachine.c: 45:                 estado_ant = STATE_ALARMEL;
  1009   000954  0E00               	movlw	0
  1010   000956  6E4D               	movwf	_estado_ant^0,c
  1011   000958  EFDF  F005         	goto	l3451
  1012   00095C                     l3371:
  1013                           
  1014                           ;stateMachine.c: 50:             if (evento == EV_B_0) {
  1015   00095C  503B               	movf	smLoop@evento^0,w,c
  1016   00095E  A4D8               	btfss	status,2,c
  1017   000960  EFB4  F004         	goto	u2991
  1018   000964  EFB6  F004         	goto	u2990
  1019   000968                     u2991:
  1020   000968  EFC6  F004         	goto	l3375
  1021   00096C                     u2990:
  1022   00096C                     
  1023                           ;stateMachine.c: 51:                 setAlarmLevel(getAlarmLevel(1) - 1, 1);
  1024   00096C  0E00               	movlw	0
  1025   00096E  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1026   000970  0E01               	movlw	1
  1027   000972  6E01               	movwf	getAlarmLevel@lh^0,c
  1028   000974  ECC8  F00F         	call	_getAlarmLevel	;wreg free
  1029   000978  0EFF               	movlw	255
  1030   00097A  2401               	addwf	?_getAlarmLevel^0,w,c
  1031   00097C  6E34               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1032   00097E  0EFF               	movlw	255
  1033   000980  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1034   000982  6E35               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1035   000984  0E01               	movlw	1
  1036   000986  6E36               	movwf	setAlarmLevel@lh^0,c
  1037   000988  ECB2  F00F         	call	_setAlarmLevel	;wreg free
  1038   00098C                     l3375:
  1039                           
  1040                           ;stateMachine.c: 54:             if (evento == EV_B_1) {
  1041   00098C  043B               	decf	smLoop@evento^0,w,c
  1042   00098E  A4D8               	btfss	status,2,c
  1043   000990  EFCC  F004         	goto	u3001
  1044   000994  EFCE  F004         	goto	u3000
  1045   000998                     u3001:
  1046   000998  EFDE  F004         	goto	l3379
  1047   00099C                     u3000:
  1048   00099C                     
  1049                           ;stateMachine.c: 55:                 setAlarmLevel(getAlarmLevel(1) + 1, 1);
  1050   00099C  0E00               	movlw	0
  1051   00099E  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1052   0009A0  0E01               	movlw	1
  1053   0009A2  6E01               	movwf	getAlarmLevel@lh^0,c
  1054   0009A4  ECC8  F00F         	call	_getAlarmLevel	;wreg free
  1055   0009A8  0E01               	movlw	1
  1056   0009AA  2401               	addwf	?_getAlarmLevel^0,w,c
  1057   0009AC  6E34               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1058   0009AE  0E00               	movlw	0
  1059   0009B0  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1060   0009B2  6E35               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1061   0009B4  0E01               	movlw	1
  1062   0009B6  6E36               	movwf	setAlarmLevel@lh^0,c
  1063   0009B8  ECB2  F00F         	call	_setAlarmLevel	;wreg free
  1064   0009BC                     l3379:
  1065                           
  1066                           ;stateMachine.c: 58:             if (evento == EV_B_2) {
  1067   0009BC  0E02               	movlw	2
  1068   0009BE  183B               	xorwf	smLoop@evento^0,w,c
  1069   0009C0  A4D8               	btfss	status,2,c
  1070   0009C2  EFE5  F004         	goto	u3011
  1071   0009C6  EFE7  F004         	goto	u3010
  1072   0009CA                     u3011:
  1073   0009CA  EFEA  F004         	goto	l3383
  1074   0009CE                     u3010:
  1075   0009CE                     
  1076                           ;stateMachine.c: 59:                 setState(STATE_ALARMEL);
  1077   0009CE  0E00               	movlw	0
  1078   0009D0  ECCA  F010         	call	_setState
  1079   0009D4                     l3383:
  1080                           
  1081                           ;stateMachine.c: 62:             if (evento == EV_B_3) {
  1082   0009D4  0E03               	movlw	3
  1083   0009D6  183B               	xorwf	smLoop@evento^0,w,c
  1084   0009D8  A4D8               	btfss	status,2,c
  1085   0009DA  EFF1  F004         	goto	u3021
  1086   0009DE  EFF3  F004         	goto	u3020
  1087   0009E2                     u3021:
  1088   0009E2  EFF6  F004         	goto	l3387
  1089   0009E6                     u3020:
  1090   0009E6                     
  1091                           ;stateMachine.c: 63:                 setState(STATE_IDIOMA);
  1092   0009E6  0E03               	movlw	3
  1093   0009E8  ECCA  F010         	call	_setState
  1094   0009EC                     l3387:
  1095                           
  1096                           ;stateMachine.c: 66:             if(evento == EV_B_4)
  1097   0009EC  0E04               	movlw	4
  1098   0009EE  183B               	xorwf	smLoop@evento^0,w,c
  1099   0009F0  A4D8               	btfss	status,2,c
  1100   0009F2  EFFD  F004         	goto	u3031
  1101   0009F6  EFFF  F004         	goto	u3030
  1102   0009FA                     u3031:
  1103   0009FA  EFDF  F005         	goto	l3451
  1104   0009FE                     u3030:
  1105   0009FE                     
  1106                           ;stateMachine.c: 67:             {;stateMachine.c: 68:                 setState(STATE_MA
      +                          IN);
  1107   0009FE  0E04               	movlw	4
  1108   000A00  ECCA  F010         	call	_setState
  1109   000A04                     
  1110                           ;stateMachine.c: 69:                 estado_ant = STATE_ALARMEH;
  1111   000A04  0E01               	movlw	1
  1112   000A06  6E4D               	movwf	_estado_ant^0,c
  1113   000A08  EFDF  F005         	goto	l3451
  1114   000A0C                     l3393:
  1115                           
  1116                           ;stateMachine.c: 77:             if (evento == EV_B_2) {
  1117   000A0C  0E02               	movlw	2
  1118   000A0E  183B               	xorwf	smLoop@evento^0,w,c
  1119   000A10  A4D8               	btfss	status,2,c
  1120   000A12  EF0D  F005         	goto	u3041
  1121   000A16  EF0F  F005         	goto	u3040
  1122   000A1A                     u3041:
  1123   000A1A  EF12  F005         	goto	l3397
  1124   000A1E                     u3040:
  1125   000A1E                     
  1126                           ;stateMachine.c: 78:                 setState(STATE_ALARMEH);
  1127   000A1E  0E01               	movlw	1
  1128   000A20  ECCA  F010         	call	_setState
  1129   000A24                     l3397:
  1130                           
  1131                           ;stateMachine.c: 81:             if (evento == EV_B_3) {
  1132   000A24  0E03               	movlw	3
  1133   000A26  183B               	xorwf	smLoop@evento^0,w,c
  1134   000A28  A4D8               	btfss	status,2,c
  1135   000A2A  EF19  F005         	goto	u3051
  1136   000A2E  EF1B  F005         	goto	u3050
  1137   000A32                     u3051:
  1138   000A32  EF1E  F005         	goto	l3401
  1139   000A36                     u3050:
  1140   000A36                     
  1141                           ;stateMachine.c: 82:                 setState(STATE_TEMPO);
  1142   000A36  0E02               	movlw	2
  1143   000A38  ECCA  F010         	call	_setState
  1144   000A3C                     l3401:
  1145                           
  1146                           ;stateMachine.c: 85:             if(evento == EV_B_4)
  1147   000A3C  0E04               	movlw	4
  1148   000A3E  183B               	xorwf	smLoop@evento^0,w,c
  1149   000A40  A4D8               	btfss	status,2,c
  1150   000A42  EF25  F005         	goto	u3061
  1151   000A46  EF27  F005         	goto	u3060
  1152   000A4A                     u3061:
  1153   000A4A  EF2C  F005         	goto	l3407
  1154   000A4E                     u3060:
  1155   000A4E                     
  1156                           ;stateMachine.c: 86:             {;stateMachine.c: 87:                 setState(STATE_MA
      +                          IN);
  1157   000A4E  0E04               	movlw	4
  1158   000A50  ECCA  F010         	call	_setState
  1159   000A54                     
  1160                           ;stateMachine.c: 88:                 estado_ant = STATE_IDIOMA;
  1161   000A54  0E03               	movlw	3
  1162   000A56  6E4D               	movwf	_estado_ant^0,c
  1163   000A58                     l3407:
  1164                           
  1165                           ;stateMachine.c: 91:             if (evento == EV_B_0) {
  1166   000A58  503B               	movf	smLoop@evento^0,w,c
  1167   000A5A  A4D8               	btfss	status,2,c
  1168   000A5C  EF32  F005         	goto	u3071
  1169   000A60  EF34  F005         	goto	u3070
  1170   000A64                     u3071:
  1171   000A64  EF3A  F005         	goto	l3411
  1172   000A68                     u3070:
  1173   000A68                     
  1174                           ;stateMachine.c: 93:                 setLanguage(getLanguage() + 1);
  1175   000A68  ECD4  F010         	call	_getLanguage	;wreg free
  1176   000A6C  6E37               	movwf	??_smLoop^0,c
  1177   000A6E  2837               	incf	??_smLoop^0,w,c
  1178   000A70  ECC0  F010         	call	_setLanguage
  1179   000A74                     l3411:
  1180                           
  1181                           ;stateMachine.c: 97:             if (evento == EV_B_1) {
  1182   000A74  043B               	decf	smLoop@evento^0,w,c
  1183   000A76  A4D8               	btfss	status,2,c
  1184   000A78  EF40  F005         	goto	u3081
  1185   000A7C  EF42  F005         	goto	u3080
  1186   000A80                     u3081:
  1187   000A80  EF48  F005         	goto	l3415
  1188   000A84                     u3080:
  1189   000A84                     
  1190                           ;stateMachine.c: 98:                 setLanguage(getLanguage() - 1);
  1191   000A84  ECD4  F010         	call	_getLanguage	;wreg free
  1192   000A88  6E37               	movwf	??_smLoop^0,c
  1193   000A8A  0437               	decf	??_smLoop^0,w,c
  1194   000A8C  ECC0  F010         	call	_setLanguage
  1195   000A90                     l3415:
  1196                           
  1197                           ;stateMachine.c: 101:             if (evento == EV_PROT_SERIAL) {
  1198   000A90  0E05               	movlw	5
  1199   000A92  183B               	xorwf	smLoop@evento^0,w,c
  1200   000A94  A4D8               	btfss	status,2,c
  1201   000A96  EF4F  F005         	goto	u3091
  1202   000A9A  EF51  F005         	goto	u3090
  1203   000A9E                     u3091:
  1204   000A9E  EFDF  F005         	goto	l3451
  1205   000AA2                     u3090:
  1206   000AA2                     
  1207                           ;stateMachine.c: 102:                 unsigned char* prot;;stateMachine.c: 103:         
      +                                  prot = getProt();
  1208   000AA2  ECDA  F010         	call	_getProt	;wreg free
  1209   000AA6  6E3A               	movwf	smLoop@prot^0,c
  1210   000AA8                     
  1211                           ;stateMachine.c: 105:                 if (prot[1] == 'l') {
  1212   000AA8  503A               	movf	smLoop@prot^0,w,c
  1213   000AAA  6ED9               	movwf	fsr2l,c
  1214   000AAC  6ADA               	clrf	fsr2h,c
  1215   000AAE  0E01               	movlw	1
  1216   000AB0  26D9               	addwf	fsr2l,f,c
  1217   000AB2  0E6C               	movlw	108
  1218   000AB4  18DE               	xorwf	postinc2,w,c
  1219   000AB6  A4D8               	btfss	status,2,c
  1220   000AB8  EF60  F005         	goto	u3101
  1221   000ABC  EF62  F005         	goto	u3100
  1222   000AC0                     u3101:
  1223   000AC0  EF6A  F005         	goto	l621
  1224   000AC4                     u3100:
  1225   000AC4                     
  1226                           ;stateMachine.c: 106:                     setLanguage(prot[5 - 1]);
  1227   000AC4  503A               	movf	smLoop@prot^0,w,c
  1228   000AC6  6ED9               	movwf	fsr2l,c
  1229   000AC8  6ADA               	clrf	fsr2h,c
  1230   000ACA  0E04               	movlw	4
  1231   000ACC  26D9               	addwf	fsr2l,f,c
  1232   000ACE  50DF               	movf	indf2,w,c
  1233   000AD0  ECC0  F010         	call	_setLanguage
  1234   000AD4                     l621:
  1235                           
  1236                           ;stateMachine.c: 109:                 resetProt();
  1237   000AD4  EC57  F00F         	call	_resetProt	;wreg free
  1238   000AD8  EFDF  F005         	goto	l3451
  1239   000ADC                     l3423:
  1240                           
  1241                           ;stateMachine.c: 116:             if (evento == EV_B_2) {
  1242   000ADC  0E02               	movlw	2
  1243   000ADE  183B               	xorwf	smLoop@evento^0,w,c
  1244   000AE0  A4D8               	btfss	status,2,c
  1245   000AE2  EF75  F005         	goto	u3111
  1246   000AE6  EF77  F005         	goto	u3110
  1247   000AEA                     u3111:
  1248   000AEA  EF7A  F005         	goto	l3427
  1249   000AEE                     u3110:
  1250   000AEE                     
  1251                           ;stateMachine.c: 117:                 setState(STATE_IDIOMA);
  1252   000AEE  0E03               	movlw	3
  1253   000AF0  ECCA  F010         	call	_setState
  1254   000AF4                     l3427:
  1255                           
  1256                           ;stateMachine.c: 120:             if (evento == EV_B_3) {
  1257   000AF4  0E03               	movlw	3
  1258   000AF6  183B               	xorwf	smLoop@evento^0,w,c
  1259   000AF8  A4D8               	btfss	status,2,c
  1260   000AFA  EF81  F005         	goto	u3121
  1261   000AFE  EF83  F005         	goto	u3120
  1262   000B02                     u3121:
  1263   000B02  EF86  F005         	goto	l3431
  1264   000B06                     u3120:
  1265   000B06                     
  1266                           ;stateMachine.c: 121:                 setState(STATE_IDIOMA);
  1267   000B06  0E03               	movlw	3
  1268   000B08  ECCA  F010         	call	_setState
  1269   000B0C                     l3431:
  1270                           
  1271                           ;stateMachine.c: 124:             if(evento == EV_B_4)
  1272   000B0C  0E04               	movlw	4
  1273   000B0E  183B               	xorwf	smLoop@evento^0,w,c
  1274   000B10  A4D8               	btfss	status,2,c
  1275   000B12  EF8D  F005         	goto	u3131
  1276   000B16  EF8F  F005         	goto	u3130
  1277   000B1A                     u3131:
  1278   000B1A  EFDF  F005         	goto	l3451
  1279   000B1E                     u3130:
  1280   000B1E                     
  1281                           ;stateMachine.c: 125:             {;stateMachine.c: 126:                 setState(STATE_
      +                          MAIN);
  1282   000B1E  0E04               	movlw	4
  1283   000B20  ECCA  F010         	call	_setState
  1284   000B24                     
  1285                           ;stateMachine.c: 127:                 estado_ant = STATE_TEMPO;
  1286   000B24  0E02               	movlw	2
  1287   000B26  6E4D               	movwf	_estado_ant^0,c
  1288   000B28  EFDF  F005         	goto	l3451
  1289   000B2C                     l3437:
  1290                           
  1291                           ;stateMachine.c: 132:             if(evento == EV_B_4)
  1292   000B2C  0E04               	movlw	4
  1293   000B2E  183B               	xorwf	smLoop@evento^0,w,c
  1294   000B30  A4D8               	btfss	status,2,c
  1295   000B32  EF9D  F005         	goto	u3141
  1296   000B36  EF9F  F005         	goto	u3140
  1297   000B3A                     u3141:
  1298   000B3A  EFA2  F005         	goto	l3441
  1299   000B3E                     u3140:
  1300   000B3E                     
  1301                           ;stateMachine.c: 133:                 setState(estado_ant);
  1302   000B3E  504D               	movf	_estado_ant^0,w,c
  1303   000B40  ECCA  F010         	call	_setState
  1304   000B44                     l3441:
  1305                           
  1306                           ;stateMachine.c: 135:             if(evento == EV_B_0)
  1307   000B44  503B               	movf	smLoop@evento^0,w,c
  1308   000B46  A4D8               	btfss	status,2,c
  1309   000B48  EFA8  F005         	goto	u3151
  1310   000B4C  EFAA  F005         	goto	u3150
  1311   000B50                     u3151:
  1312   000B50  EFDF  F005         	goto	l3451
  1313   000B54                     u3150:
  1314   000B54                     
  1315                           ;stateMachine.c: 136:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) + 1),0x01));
  1316   000B54  0E00               	movlw	0
  1317   000B56  6E32               	movwf	(dsWriteData@address+1)^0,c
  1318   000B58  0E01               	movlw	1
  1319   000B5A  6E31               	movwf	dsWriteData@address^0,c
  1320   000B5C  0E00               	movlw	0
  1321   000B5E  6E0F               	movwf	(dsReadData@address+1)^0,c
  1322   000B60  0E01               	movlw	1
  1323   000B62  6E0E               	movwf	dsReadData@address^0,c
  1324   000B64  EC6E  F00E         	call	_dsReadData	;wreg free
  1325   000B68  0E7F               	movlw	127
  1326   000B6A  140E               	andwf	?_dsReadData^0,w,c
  1327   000B6C  6E21               	movwf	bcd2dec@value^0,c
  1328   000B6E  6A22               	clrf	(bcd2dec@value+1)^0,c
  1329   000B70  ECB4  F00E         	call	_bcd2dec	;wreg free
  1330   000B74  0E01               	movlw	1
  1331   000B76  2421               	addwf	?_bcd2dec^0,w,c
  1332   000B78  6E2B               	movwf	dec2bcd@value^0,c
  1333   000B7A  0E00               	movlw	0
  1334   000B7C  2022               	addwfc	(?_bcd2dec+1)^0,w,c
  1335   000B7E  6E2C               	movwf	(dec2bcd@value+1)^0,c
  1336   000B80  EC66  F00D         	call	_dec2bcd	;wreg free
  1337   000B84  502B               	movf	?_dec2bcd^0,w,c
  1338   000B86  EC40  F00F         	call	_dsWriteData
  1339   000B8A  EFDF  F005         	goto	l3451
  1340   000B8E                     l3449:
  1341   000B8E  ECD6  F010         	call	_getState	;wreg free
  1342                           
  1343                           ; Switch size 1, requested type "simple"
  1344                           ; Number of cases is 5, Range of values is 0 to 4
  1345                           ; switch strategies available:
  1346                           ; Name         Instructions Cycles
  1347                           ; simple_byte           16     9 (average)
  1348                           ;	Chosen strategy is simple_byte
  1349   000B92  0A00               	xorlw	0	; case 0
  1350   000B94  B4D8               	btfsc	status,2,c
  1351   000B96  EF56  F004         	goto	l3349
  1352   000B9A  0A01               	xorlw	1	; case 1
  1353   000B9C  B4D8               	btfsc	status,2,c
  1354   000B9E  EFAE  F004         	goto	l3371
  1355   000BA2  0A03               	xorlw	3	; case 2
  1356   000BA4  B4D8               	btfsc	status,2,c
  1357   000BA6  EF6E  F005         	goto	l3423
  1358   000BAA  0A01               	xorlw	1	; case 3
  1359   000BAC  B4D8               	btfsc	status,2,c
  1360   000BAE  EF06  F005         	goto	l3393
  1361   000BB2  0A07               	xorlw	7	; case 4
  1362   000BB4  B4D8               	btfsc	status,2,c
  1363   000BB6  EF96  F005         	goto	l3437
  1364   000BBA  EFDF  F005         	goto	l3451
  1365   000BBE                     l3451:
  1366                           
  1367                           ;stateMachine.c: 143:     outputPrint(getState(), getLanguage());
  1368   000BBE  ECD4  F010         	call	_getLanguage	;wreg free
  1369   000BC2  6E37               	movwf	??_smLoop^0,c
  1370   000BC4  5037               	movf	??_smLoop^0,w,c
  1371   000BC6  6E38               	movwf	_smLoop$1405^0,c
  1372   000BC8  6A39               	clrf	(_smLoop$1405+1)^0,c
  1373   000BCA                     
  1374                           ;stateMachine.c: 143:     outputPrint(getState(), getLanguage());
  1375   000BCA  ECD6  F010         	call	_getState	;wreg free
  1376   000BCE  6E37               	movwf	??_smLoop^0,c
  1377   000BD0  5037               	movf	??_smLoop^0,w,c
  1378   000BD2  6E2D               	movwf	outputPrint@numTela^0,c
  1379   000BD4  6A2E               	clrf	(outputPrint@numTela+1)^0,c
  1380   000BD6  C038  F02F         	movff	_smLoop$1405,outputPrint@idioma
  1381   000BDA  C039  F030         	movff	_smLoop$1405+1,outputPrint@idioma+1
  1382   000BDE  ECF2  F005         	call	_outputPrint	;wreg free
  1383   000BE2  0012               	return		;funcret
  1384   000BE4                     __end_of_smLoop:
  1385                           	callstack 0
  1386                           
  1387 ;; *************** function _setLanguage *****************
  1388 ;; Defined at:
  1389 ;;		line 66 in file "var.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  newLanguage     1    wreg     unsigned char 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  newLanguage     1    0[COMRAM] unsigned char 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, status,2, status,0
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1403 ;;      Params:         0       0       0       0       0       0       0       0       0
  1404 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1406 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1407 ;;Total ram usage:        1 bytes
  1408 ;; Hardware stack levels used: 1
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_smLoop
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text2
  1417   002180                     __ptext2:
  1418                           	callstack 0
  1419   002180                     _setLanguage:
  1420                           	callstack 29
  1421                           
  1422                           ;incstack = 0
  1423                           ;setLanguage@newLanguage stored from wreg
  1424   002180  6E01               	movwf	setLanguage@newLanguage^0,c
  1425   002182                     
  1426                           ;var.c: 69:     language = newLanguage % 2;
  1427   002182  5001               	movf	setLanguage@newLanguage^0,w,c
  1428   002184  0B01               	andlw	1
  1429   002186  6E4B               	movwf	_language^0,c
  1430   002188  0012               	return		;funcret
  1431   00218A                     __end_of_setLanguage:
  1432                           	callstack 0
  1433                           
  1434 ;; *************** function _setAlarmLevel *****************
  1435 ;; Defined at:
  1436 ;;		line 52 in file "var.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  newAlarmLeve    2   51[COMRAM] int 
  1439 ;;  lh              1   53[COMRAM] unsigned char 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;		None
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg, status,2, status,0, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1451 ;;      Params:         3       0       0       0       0       0       0       0       0
  1452 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1454 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1455 ;;Total ram usage:        3 bytes
  1456 ;; Hardware stack levels used: 1
  1457 ;; Hardware stack levels required when called: 5
  1458 ;; This function calls:
  1459 ;;		_dsWriteData
  1460 ;; This function is called by:
  1461 ;;		_smLoop
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text3
  1466   001F64                     __ptext3:
  1467                           	callstack 0
  1468   001F64                     _setAlarmLevel:
  1469                           	callstack 24
  1470   001F64                     
  1471                           ;var.c: 53:     if(lh == 1){
  1472   001F64  0436               	decf	setAlarmLevel@lh^0,w,c
  1473   001F66  A4D8               	btfss	status,2,c
  1474   001F68  EFB8  F00F         	goto	u2821
  1475   001F6C  EFBA  F00F         	goto	u2820
  1476   001F70                     u2821:
  1477   001F70  EFC5  F00F         	goto	l680
  1478   001F74                     u2820:
  1479   001F74                     
  1480                           ;var.c: 54:         alarmLevelHigh = newAlarmLevel;
  1481   001F74  C034  F04A         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelHigh
  1482   001F78                     
  1483                           ;var.c: 56:         dsWriteData(alarmLevelHigh, 0x20);
  1484   001F78  0E00               	movlw	0
  1485   001F7A  6E32               	movwf	(dsWriteData@address+1)^0,c
  1486   001F7C  0E20               	movlw	32
  1487   001F7E  6E31               	movwf	dsWriteData@address^0,c
  1488   001F80  504A               	movf	_alarmLevelHigh^0,w,c
  1489   001F82  EC40  F00F         	call	_dsWriteData
  1490                           
  1491                           ;var.c: 57:     }
  1492   001F86  EFC7  F00F         	goto	l682
  1493   001F8A                     l680:
  1494                           
  1495                           ;var.c: 59:         alarmLevelLow = newAlarmLevel;
  1496   001F8A  C034  F049         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelLow
  1497   001F8E                     l682:
  1498   001F8E  0012               	return		;funcret
  1499   001F90                     __end_of_setAlarmLevel:
  1500                           	callstack 0
  1501                           
  1502 ;; *************** function _dsWriteData *****************
  1503 ;; Defined at:
  1504 ;;		line 26 in file "ds1307.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  value           1    wreg     unsigned char 
  1507 ;;  address         2   48[COMRAM] int 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  value           1   50[COMRAM] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2, status,0, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1519 ;;      Params:         2       0       0       0       0       0       0       0       0
  1520 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1522 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1523 ;;Total ram usage:        3 bytes
  1524 ;; Hardware stack levels used: 1
  1525 ;; Hardware stack levels required when called: 4
  1526 ;; This function calls:
  1527 ;;		_i2cWriteByte
  1528 ;; This function is called by:
  1529 ;;		_smLoop
  1530 ;;		_setAlarmLevel
  1531 ;;		_dsStartClock
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text4
  1536   001E80                     __ptext4:
  1537                           	callstack 0
  1538   001E80                     _dsWriteData:
  1539                           	callstack 24
  1540                           
  1541                           ;incstack = 0
  1542                           ;dsWriteData@value stored from wreg
  1543   001E80  6E33               	movwf	dsWriteData@value^0,c
  1544   001E82                     
  1545                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  1546   001E82  0E00               	movlw	0
  1547   001E84  6E08               	movwf	i2cWriteByte@send_stop^0,c
  1548   001E86  0EDE               	movlw	222
  1549   001E88  6E09               	movwf	i2cWriteByte@byte^0,c
  1550   001E8A  0E01               	movlw	1
  1551   001E8C  EC97  F00D         	call	_i2cWriteByte
  1552                           
  1553                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  1554   001E90  0E00               	movlw	0
  1555   001E92  6E08               	movwf	i2cWriteByte@send_stop^0,c
  1556   001E94  C031  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  1557   001E98  0E00               	movlw	0
  1558   001E9A  EC97  F00D         	call	_i2cWriteByte
  1559                           
  1560                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  1561   001E9E  0E01               	movlw	1
  1562   001EA0  6E08               	movwf	i2cWriteByte@send_stop^0,c
  1563   001EA2  C033  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  1564   001EA6  0E00               	movlw	0
  1565   001EA8  EC97  F00D         	call	_i2cWriteByte
  1566   001EAC  0012               	return		;funcret
  1567   001EAE                     __end_of_dsWriteData:
  1568                           	callstack 0
  1569                           
  1570 ;; *************** function _resetProt *****************
  1571 ;; Defined at:
  1572 ;;		line 84 in file "var.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  i               1    0[COMRAM] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0
  1587 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1589 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels used: 1
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_smLoop
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text5
  1600   001EAE                     __ptext5:
  1601                           	callstack 0
  1602   001EAE                     _resetProt:
  1603                           	callstack 29
  1604   001EAE                     
  1605                           ;var.c: 86:     char i = 0;
  1606   001EAE  0E00               	movlw	0
  1607   001EB0  6E01               	movwf	resetProt@i^0,c
  1608                           
  1609                           ;var.c: 87:     while (i < 5)
  1610   001EB2  EF61  F00F         	goto	l3275
  1611   001EB6                     l3271:
  1612                           
  1613                           ;var.c: 88:     {;var.c: 89:         prot[i] = 0;
  1614   001EB6  5001               	movf	resetProt@i^0,w,c
  1615   001EB8  0F74               	addlw	low _prot
  1616   001EBA  6ED9               	movwf	fsr2l,c
  1617   001EBC  6ADA               	clrf	fsr2h,c
  1618   001EBE  6ADF               	clrf	indf2,c
  1619   001EC0                     
  1620                           ;var.c: 90:         i++;
  1621   001EC0  2A01               	incf	resetProt@i^0,f,c
  1622   001EC2                     l3275:
  1623                           
  1624                           ;var.c: 87:     while (i < 5)
  1625   001EC2  0E04               	movlw	4
  1626   001EC4  6401               	cpfsgt	resetProt@i^0,c
  1627   001EC6  EF67  F00F         	goto	u2831
  1628   001ECA  EF69  F00F         	goto	u2830
  1629   001ECE                     u2831:
  1630   001ECE  EF5B  F00F         	goto	l3271
  1631   001ED2                     u2830:
  1632   001ED2                     
  1633                           ;var.c: 92:     prot_ready = 0;
  1634   001ED2  0E00               	movlw	0
  1635   001ED4  6E4E               	movwf	_prot_ready^0,c
  1636                           
  1637                           ;var.c: 93:     index = 0;
  1638   001ED6  0E00               	movlw	0
  1639   001ED8  6E48               	movwf	_index^0,c
  1640   001EDA  0012               	return		;funcret
  1641   001EDC                     __end_of_resetProt:
  1642                           	callstack 0
  1643                           
  1644 ;; *************** function _outputPrint *****************
  1645 ;; Defined at:
  1646 ;;		line 22 in file "output.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  numTela         2   44[COMRAM] int 
  1649 ;;  idioma          2   46[COMRAM] int 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1661 ;;      Params:         4       0       0       0       0       0       0       0       0
  1662 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1664 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1665 ;;Total ram usage:        8 bytes
  1666 ;; Hardware stack levels used: 1
  1667 ;; Hardware stack levels required when called: 5
  1668 ;; This function calls:
  1669 ;;		___awdiv
  1670 ;;		___awmod
  1671 ;;		_bcd2dec
  1672 ;;		_dsReadData
  1673 ;;		_getAlarmLevel
  1674 ;;		_getLanguage
  1675 ;;		_getTime
  1676 ;;		_lcdCommand
  1677 ;;		_lcdData
  1678 ;;		_lcdInt
  1679 ;;		_lcdString
  1680 ;; This function is called by:
  1681 ;;		_smLoop
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text6
  1686   000BE4                     __ptext6:
  1687                           	callstack 0
  1688   000BE4                     _outputPrint:
  1689                           	callstack 24
  1690   000BE4                     
  1691                           ;output.c: 24:     if (numTela == STATE_TEMPO) {
  1692   000BE4  0E02               	movlw	2
  1693   000BE6  182D               	xorwf	outputPrint@numTela^0,w,c
  1694   000BE8  102E               	iorwf	(outputPrint@numTela+1)^0,w,c
  1695   000BEA  A4D8               	btfss	status,2,c
  1696   000BEC  EFFA  F005         	goto	u2751
  1697   000BF0  EFFC  F005         	goto	u2750
  1698   000BF4                     u2751:
  1699   000BF4  EF19  F006         	goto	l3193
  1700   000BF8                     u2750:
  1701   000BF8                     
  1702                           ;output.c: 25:         lcdCommand(0x80);
  1703   000BF8  0E80               	movlw	128
  1704   000BFA  EC4A  F00E         	call	_lcdCommand
  1705   000BFE                     
  1706                           ;output.c: 26:         lcdString(msgs[numTela][idioma]);
  1707   000BFE  502D               	movf	outputPrint@numTela^0,w,c
  1708   000C00  0D02               	mullw	2
  1709   000C02  50F3               	movf	243,w,c
  1710   000C04  0F60               	addlw	low _msgs
  1711   000C06  242F               	addwf	outputPrint@idioma^0,w,c
  1712   000C08  6ED9               	movwf	fsr2l,c
  1713   000C0A  6ADA               	clrf	fsr2h,c
  1714   000C0C  50DF               	movf	indf2,w,c
  1715   000C0E  6E04               	movwf	lcdString@str^0,c
  1716   000C10  EC0D  F00F         	call	_lcdString	;wreg free
  1717   000C14                     
  1718                           ;output.c: 27:         lcdCommand(0xC0);
  1719   000C14  0EC0               	movlw	192
  1720   000C16  EC4A  F00E         	call	_lcdCommand
  1721   000C1A                     
  1722                           ;output.c: 28:         lcdInt(getTime());
  1723   000C1A  ECC5  F010         	call	_getTime	;wreg free
  1724   000C1E  C001  F02B         	movff	?_getTime,lcdInt@val
  1725   000C22  C002  F02C         	movff	?_getTime+1,lcdInt@val+1
  1726   000C26  ECB7  F00B         	call	_lcdInt	;wreg free
  1727   000C2A                     
  1728                           ;output.c: 29:         lcdString("           ");
  1729   000C2A  0E93               	movlw	low STR_9
  1730   000C2C  6E04               	movwf	lcdString@str^0,c
  1731   000C2E  EC0D  F00F         	call	_lcdString	;wreg free
  1732   000C32                     l3193:
  1733                           
  1734                           ;output.c: 31:     if (numTela == STATE_ALARMEL) {
  1735   000C32  502D               	movf	outputPrint@numTela^0,w,c
  1736   000C34  102E               	iorwf	(outputPrint@numTela+1)^0,w,c
  1737   000C36  A4D8               	btfss	status,2,c
  1738   000C38  EF20  F006         	goto	u2761
  1739   000C3C  EF22  F006         	goto	u2760
  1740   000C40                     u2761:
  1741   000C40  EF43  F006         	goto	l3205
  1742   000C44                     u2760:
  1743   000C44                     
  1744                           ;output.c: 32:         lcdCommand(0x80);
  1745   000C44  0E80               	movlw	128
  1746   000C46  EC4A  F00E         	call	_lcdCommand
  1747   000C4A                     
  1748                           ;output.c: 33:         lcdString(msgs[numTela][idioma]);
  1749   000C4A  502D               	movf	outputPrint@numTela^0,w,c
  1750   000C4C  0D02               	mullw	2
  1751   000C4E  50F3               	movf	243,w,c
  1752   000C50  0F60               	addlw	low _msgs
  1753   000C52  242F               	addwf	outputPrint@idioma^0,w,c
  1754   000C54  6ED9               	movwf	fsr2l,c
  1755   000C56  6ADA               	clrf	fsr2h,c
  1756   000C58  50DF               	movf	indf2,w,c
  1757   000C5A  6E04               	movwf	lcdString@str^0,c
  1758   000C5C  EC0D  F00F         	call	_lcdString	;wreg free
  1759   000C60                     
  1760                           ;output.c: 34:         lcdCommand(0xC0);
  1761   000C60  0EC0               	movlw	192
  1762   000C62  EC4A  F00E         	call	_lcdCommand
  1763   000C66                     
  1764                           ;output.c: 35:         lcdInt(getAlarmLevel(0));
  1765   000C66  0E00               	movlw	0
  1766   000C68  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1767   000C6A  0E00               	movlw	0
  1768   000C6C  6E01               	movwf	getAlarmLevel@lh^0,c
  1769   000C6E  ECC8  F00F         	call	_getAlarmLevel	;wreg free
  1770   000C72  C001  F02B         	movff	?_getAlarmLevel,lcdInt@val
  1771   000C76  C002  F02C         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1772   000C7A  ECB7  F00B         	call	_lcdInt	;wreg free
  1773   000C7E                     
  1774                           ;output.c: 36:         lcdString("           ");
  1775   000C7E  0E93               	movlw	low STR_9
  1776   000C80  6E04               	movwf	lcdString@str^0,c
  1777   000C82  EC0D  F00F         	call	_lcdString	;wreg free
  1778   000C86                     l3205:
  1779                           
  1780                           ;output.c: 38:     if (numTela == STATE_ALARMEH) {
  1781   000C86  042D               	decf	outputPrint@numTela^0,w,c
  1782   000C88  102E               	iorwf	(outputPrint@numTela+1)^0,w,c
  1783   000C8A  A4D8               	btfss	status,2,c
  1784   000C8C  EF4A  F006         	goto	u2771
  1785   000C90  EF4C  F006         	goto	u2770
  1786   000C94                     u2771:
  1787   000C94  EF6D  F006         	goto	l3217
  1788   000C98                     u2770:
  1789   000C98                     
  1790                           ;output.c: 39:         lcdCommand(0x80);
  1791   000C98  0E80               	movlw	128
  1792   000C9A  EC4A  F00E         	call	_lcdCommand
  1793   000C9E                     
  1794                           ;output.c: 40:         lcdString(msgs[numTela][idioma]);
  1795   000C9E  502D               	movf	outputPrint@numTela^0,w,c
  1796   000CA0  0D02               	mullw	2
  1797   000CA2  50F3               	movf	243,w,c
  1798   000CA4  0F60               	addlw	low _msgs
  1799   000CA6  242F               	addwf	outputPrint@idioma^0,w,c
  1800   000CA8  6ED9               	movwf	fsr2l,c
  1801   000CAA  6ADA               	clrf	fsr2h,c
  1802   000CAC  50DF               	movf	indf2,w,c
  1803   000CAE  6E04               	movwf	lcdString@str^0,c
  1804   000CB0  EC0D  F00F         	call	_lcdString	;wreg free
  1805   000CB4                     
  1806                           ;output.c: 41:         lcdCommand(0xC0);
  1807   000CB4  0EC0               	movlw	192
  1808   000CB6  EC4A  F00E         	call	_lcdCommand
  1809   000CBA                     
  1810                           ;output.c: 42:         lcdInt(getAlarmLevel(1));
  1811   000CBA  0E00               	movlw	0
  1812   000CBC  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1813   000CBE  0E01               	movlw	1
  1814   000CC0  6E01               	movwf	getAlarmLevel@lh^0,c
  1815   000CC2  ECC8  F00F         	call	_getAlarmLevel	;wreg free
  1816   000CC6  C001  F02B         	movff	?_getAlarmLevel,lcdInt@val
  1817   000CCA  C002  F02C         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1818   000CCE  ECB7  F00B         	call	_lcdInt	;wreg free
  1819   000CD2                     
  1820                           ;output.c: 43:         lcdString("           ");
  1821   000CD2  0E93               	movlw	low STR_9
  1822   000CD4  6E04               	movwf	lcdString@str^0,c
  1823   000CD6  EC0D  F00F         	call	_lcdString	;wreg free
  1824   000CDA                     l3217:
  1825                           
  1826                           ;output.c: 45:     if (numTela == STATE_IDIOMA) {
  1827   000CDA  0E03               	movlw	3
  1828   000CDC  182D               	xorwf	outputPrint@numTela^0,w,c
  1829   000CDE  102E               	iorwf	(outputPrint@numTela+1)^0,w,c
  1830   000CE0  A4D8               	btfss	status,2,c
  1831   000CE2  EF75  F006         	goto	u2781
  1832   000CE6  EF77  F006         	goto	u2780
  1833   000CEA                     u2781:
  1834   000CEA  EFA4  F006         	goto	l3233
  1835   000CEE                     u2780:
  1836   000CEE                     
  1837                           ;output.c: 46:         lcdCommand(0x80);
  1838   000CEE  0E80               	movlw	128
  1839   000CF0  EC4A  F00E         	call	_lcdCommand
  1840   000CF4                     
  1841                           ;output.c: 47:         lcdString(msgs[numTela][idioma]);
  1842   000CF4  502D               	movf	outputPrint@numTela^0,w,c
  1843   000CF6  0D02               	mullw	2
  1844   000CF8  50F3               	movf	243,w,c
  1845   000CFA  0F60               	addlw	low _msgs
  1846   000CFC  242F               	addwf	outputPrint@idioma^0,w,c
  1847   000CFE  6ED9               	movwf	fsr2l,c
  1848   000D00  6ADA               	clrf	fsr2h,c
  1849   000D02  50DF               	movf	indf2,w,c
  1850   000D04  6E04               	movwf	lcdString@str^0,c
  1851   000D06  EC0D  F00F         	call	_lcdString	;wreg free
  1852   000D0A                     
  1853                           ;output.c: 48:         lcdCommand(0xC0);
  1854   000D0A  0EC0               	movlw	192
  1855   000D0C  EC4A  F00E         	call	_lcdCommand
  1856   000D10                     
  1857                           ;output.c: 49:         if (getLanguage() == 0) {
  1858   000D10  ECD4  F010         	call	_getLanguage	;wreg free
  1859   000D14  0900               	iorlw	0
  1860   000D16  A4D8               	btfss	status,2,c
  1861   000D18  EF90  F006         	goto	u2791
  1862   000D1C  EF92  F006         	goto	u2790
  1863   000D20                     u2791:
  1864   000D20  EF96  F006         	goto	l3229
  1865   000D24                     u2790:
  1866   000D24                     
  1867                           ;output.c: 50:             lcdString("Portugues       ");
  1868   000D24  0E22               	movlw	low STR_12
  1869   000D26  6E04               	movwf	lcdString@str^0,c
  1870   000D28  EC0D  F00F         	call	_lcdString	;wreg free
  1871   000D2C                     l3229:
  1872                           
  1873                           ;output.c: 52:         if (getLanguage() == 1) {
  1874   000D2C  ECD4  F010         	call	_getLanguage	;wreg free
  1875   000D30  06E8               	decf	wreg,f,c
  1876   000D32  A4D8               	btfss	status,2,c
  1877   000D34  EF9E  F006         	goto	u2801
  1878   000D38  EFA0  F006         	goto	u2800
  1879   000D3C                     u2801:
  1880   000D3C  EFA4  F006         	goto	l3233
  1881   000D40                     u2800:
  1882   000D40                     
  1883                           ;output.c: 53:             lcdString("English         ");
  1884   000D40  0E11               	movlw	low STR_13
  1885   000D42  6E04               	movwf	lcdString@str^0,c
  1886   000D44  EC0D  F00F         	call	_lcdString	;wreg free
  1887   000D48                     l3233:
  1888                           
  1889                           ;output.c: 58:     if (numTela == STATE_MAIN) {
  1890   000D48  0E04               	movlw	4
  1891   000D4A  182D               	xorwf	outputPrint@numTela^0,w,c
  1892   000D4C  102E               	iorwf	(outputPrint@numTela+1)^0,w,c
  1893   000D4E  A4D8               	btfss	status,2,c
  1894   000D50  EFAC  F006         	goto	u2811
  1895   000D54  EFAE  F006         	goto	u2810
  1896   000D58                     u2811:
  1897   000D58  EF6A  F007         	goto	l558
  1898   000D5C                     u2810:
  1899   000D5C                     
  1900                           ;output.c: 59:         lcdCommand(0x80);
  1901   000D5C  0E80               	movlw	128
  1902   000D5E  EC4A  F00E         	call	_lcdCommand
  1903   000D62                     
  1904                           ;output.c: 60:         lcdData((((bcd2dec(dsReadData(0x02)& 0x7f)) % 100) / 10) + 48);
  1905   000D62  0E00               	movlw	0
  1906   000D64  6E28               	movwf	(___awmod@divisor+1)^0,c
  1907   000D66  0E64               	movlw	100
  1908   000D68  6E27               	movwf	___awmod@divisor^0,c
  1909   000D6A  0E00               	movlw	0
  1910   000D6C  6E0F               	movwf	(dsReadData@address+1)^0,c
  1911   000D6E  0E02               	movlw	2
  1912   000D70  6E0E               	movwf	dsReadData@address^0,c
  1913   000D72  EC6E  F00E         	call	_dsReadData	;wreg free
  1914   000D76  0E7F               	movlw	127
  1915   000D78  140E               	andwf	?_dsReadData^0,w,c
  1916   000D7A  6E21               	movwf	bcd2dec@value^0,c
  1917   000D7C  6A22               	clrf	(bcd2dec@value+1)^0,c
  1918   000D7E  ECB4  F00E         	call	_bcd2dec	;wreg free
  1919   000D82  C021  F025         	movff	?_bcd2dec,___awmod@dividend
  1920   000D86  C022  F026         	movff	?_bcd2dec+1,___awmod@dividend+1
  1921   000D8A  EC96  F00C         	call	___awmod	;wreg free
  1922   000D8E  C025  F031         	movff	?___awmod,_outputPrint$1403
  1923   000D92  C026  F032         	movff	?___awmod+1,_outputPrint$1403+1
  1924   000D96                     
  1925                           ;output.c: 60:         lcdData((((bcd2dec(dsReadData(0x02)& 0x7f)) % 100) / 10) + 48);
  1926   000D96  C031  F013         	movff	_outputPrint$1403,___awdiv@dividend
  1927   000D9A  C032  F014         	movff	_outputPrint$1403+1,___awdiv@dividend+1
  1928   000D9E  0E00               	movlw	0
  1929   000DA0  6E16               	movwf	(___awdiv@divisor+1)^0,c
  1930   000DA2  0E0A               	movlw	10
  1931   000DA4  6E15               	movwf	___awdiv@divisor^0,c
  1932   000DA6  EC34  F00C         	call	___awdiv	;wreg free
  1933   000DAA  5013               	movf	?___awdiv^0,w,c
  1934   000DAC  0F30               	addlw	48
  1935   000DAE  EC6B  F010         	call	_lcdData
  1936                           
  1937                           ;output.c: 61:         lcdData((((bcd2dec(dsReadData(0x02)& 0x7f)) % 100) % 10) + 48);
  1938   000DB2  0E00               	movlw	0
  1939   000DB4  6E28               	movwf	(___awmod@divisor+1)^0,c
  1940   000DB6  0E64               	movlw	100
  1941   000DB8  6E27               	movwf	___awmod@divisor^0,c
  1942   000DBA  0E00               	movlw	0
  1943   000DBC  6E0F               	movwf	(dsReadData@address+1)^0,c
  1944   000DBE  0E02               	movlw	2
  1945   000DC0  6E0E               	movwf	dsReadData@address^0,c
  1946   000DC2  EC6E  F00E         	call	_dsReadData	;wreg free
  1947   000DC6  0E7F               	movlw	127
  1948   000DC8  140E               	andwf	?_dsReadData^0,w,c
  1949   000DCA  6E21               	movwf	bcd2dec@value^0,c
  1950   000DCC  6A22               	clrf	(bcd2dec@value+1)^0,c
  1951   000DCE  ECB4  F00E         	call	_bcd2dec	;wreg free
  1952   000DD2  C021  F025         	movff	?_bcd2dec,___awmod@dividend
  1953   000DD6  C022  F026         	movff	?_bcd2dec+1,___awmod@dividend+1
  1954   000DDA  EC96  F00C         	call	___awmod	;wreg free
  1955   000DDE  C025  F033         	movff	?___awmod,_outputPrint$1404
  1956   000DE2  C026  F034         	movff	?___awmod+1,_outputPrint$1404+1
  1957   000DE6                     
  1958                           ;output.c: 61:         lcdData((((bcd2dec(dsReadData(0x02)& 0x7f)) % 100) % 10) + 48);
  1959   000DE6  C033  F025         	movff	_outputPrint$1404,___awmod@dividend
  1960   000DEA  C034  F026         	movff	_outputPrint$1404+1,___awmod@dividend+1
  1961   000DEE  0E00               	movlw	0
  1962   000DF0  6E28               	movwf	(___awmod@divisor+1)^0,c
  1963   000DF2  0E0A               	movlw	10
  1964   000DF4  6E27               	movwf	___awmod@divisor^0,c
  1965   000DF6  EC96  F00C         	call	___awmod	;wreg free
  1966   000DFA  5025               	movf	?___awmod^0,w,c
  1967   000DFC  0F30               	addlw	48
  1968   000DFE  EC6B  F010         	call	_lcdData
  1969   000E02                     
  1970                           ;output.c: 62:         lcdData(':');
  1971   000E02  0E3A               	movlw	58
  1972   000E04  EC6B  F010         	call	_lcdData
  1973                           
  1974                           ;output.c: 63:         lcdData((((bcd2dec(dsReadData(0x01)& 0x7f)) % 100) / 10) + 48);
  1975   000E08  0E00               	movlw	0
  1976   000E0A  6E28               	movwf	(___awmod@divisor+1)^0,c
  1977   000E0C  0E64               	movlw	100
  1978   000E0E  6E27               	movwf	___awmod@divisor^0,c
  1979   000E10  0E00               	movlw	0
  1980   000E12  6E0F               	movwf	(dsReadData@address+1)^0,c
  1981   000E14  0E01               	movlw	1
  1982   000E16  6E0E               	movwf	dsReadData@address^0,c
  1983   000E18  EC6E  F00E         	call	_dsReadData	;wreg free
  1984   000E1C  0E7F               	movlw	127
  1985   000E1E  140E               	andwf	?_dsReadData^0,w,c
  1986   000E20  6E21               	movwf	bcd2dec@value^0,c
  1987   000E22  6A22               	clrf	(bcd2dec@value+1)^0,c
  1988   000E24  ECB4  F00E         	call	_bcd2dec	;wreg free
  1989   000E28  C021  F025         	movff	?_bcd2dec,___awmod@dividend
  1990   000E2C  C022  F026         	movff	?_bcd2dec+1,___awmod@dividend+1
  1991   000E30  EC96  F00C         	call	___awmod	;wreg free
  1992   000E34  C025  F031         	movff	?___awmod,_outputPrint$1403
  1993   000E38  C026  F032         	movff	?___awmod+1,_outputPrint$1403+1
  1994   000E3C                     
  1995                           ;output.c: 63:         lcdData((((bcd2dec(dsReadData(0x01)& 0x7f)) % 100) / 10) + 48);
  1996   000E3C  C031  F013         	movff	_outputPrint$1403,___awdiv@dividend
  1997   000E40  C032  F014         	movff	_outputPrint$1403+1,___awdiv@dividend+1
  1998   000E44  0E00               	movlw	0
  1999   000E46  6E16               	movwf	(___awdiv@divisor+1)^0,c
  2000   000E48  0E0A               	movlw	10
  2001   000E4A  6E15               	movwf	___awdiv@divisor^0,c
  2002   000E4C  EC34  F00C         	call	___awdiv	;wreg free
  2003   000E50  5013               	movf	?___awdiv^0,w,c
  2004   000E52  0F30               	addlw	48
  2005   000E54  EC6B  F010         	call	_lcdData
  2006   000E58                     
  2007                           ;output.c: 64:         lcdData((((bcd2dec(dsReadData(0x01)& 0x7f)) % 100) % 10) + 48);
  2008   000E58  0E00               	movlw	0
  2009   000E5A  6E28               	movwf	(___awmod@divisor+1)^0,c
  2010   000E5C  0E64               	movlw	100
  2011   000E5E  6E27               	movwf	___awmod@divisor^0,c
  2012   000E60  0E00               	movlw	0
  2013   000E62  6E0F               	movwf	(dsReadData@address+1)^0,c
  2014   000E64  0E01               	movlw	1
  2015   000E66  6E0E               	movwf	dsReadData@address^0,c
  2016   000E68  EC6E  F00E         	call	_dsReadData	;wreg free
  2017   000E6C  0E7F               	movlw	127
  2018   000E6E  140E               	andwf	?_dsReadData^0,w,c
  2019   000E70  6E21               	movwf	bcd2dec@value^0,c
  2020   000E72  6A22               	clrf	(bcd2dec@value+1)^0,c
  2021   000E74  ECB4  F00E         	call	_bcd2dec	;wreg free
  2022   000E78  C021  F025         	movff	?_bcd2dec,___awmod@dividend
  2023   000E7C  C022  F026         	movff	?_bcd2dec+1,___awmod@dividend+1
  2024   000E80  EC96  F00C         	call	___awmod	;wreg free
  2025   000E84  C025  F033         	movff	?___awmod,_outputPrint$1404
  2026   000E88  C026  F034         	movff	?___awmod+1,_outputPrint$1404+1
  2027                           
  2028                           ;output.c: 64:         lcdData((((bcd2dec(dsReadData(0x01)& 0x7f)) % 100) % 10) + 48);
  2029   000E8C  C033  F025         	movff	_outputPrint$1404,___awmod@dividend
  2030   000E90  C034  F026         	movff	_outputPrint$1404+1,___awmod@dividend+1
  2031   000E94  0E00               	movlw	0
  2032   000E96  6E28               	movwf	(___awmod@divisor+1)^0,c
  2033   000E98  0E0A               	movlw	10
  2034   000E9A  6E27               	movwf	___awmod@divisor^0,c
  2035   000E9C  EC96  F00C         	call	___awmod	;wreg free
  2036   000EA0  5025               	movf	?___awmod^0,w,c
  2037   000EA2  0F30               	addlw	48
  2038   000EA4  EC6B  F010         	call	_lcdData
  2039   000EA8                     
  2040                           ;output.c: 65:         lcdString("           ");
  2041   000EA8  0E93               	movlw	low STR_9
  2042   000EAA  6E04               	movwf	lcdString@str^0,c
  2043   000EAC  EC0D  F00F         	call	_lcdString	;wreg free
  2044   000EB0                     
  2045                           ;output.c: 67:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)));
  2046   000EB0  0E00               	movlw	0
  2047   000EB2  6E0F               	movwf	(dsReadData@address+1)^0,c
  2048   000EB4  0E00               	movlw	0
  2049   000EB6  6E0E               	movwf	dsReadData@address^0,c
  2050   000EB8  EC6E  F00E         	call	_dsReadData	;wreg free
  2051   000EBC  0E7F               	movlw	127
  2052   000EBE  140E               	andwf	?_dsReadData^0,w,c
  2053   000EC0  6E21               	movwf	bcd2dec@value^0,c
  2054   000EC2  6A22               	clrf	(bcd2dec@value+1)^0,c
  2055   000EC4  ECB4  F00E         	call	_bcd2dec	;wreg free
  2056   000EC8  C021  F02B         	movff	?_bcd2dec,lcdInt@val
  2057   000ECC  C022  F02C         	movff	?_bcd2dec+1,lcdInt@val+1
  2058   000ED0  ECB7  F00B         	call	_lcdInt	;wreg free
  2059   000ED4                     l558:
  2060   000ED4  0012               	return		;funcret
  2061   000ED6                     __end_of_outputPrint:
  2062                           	callstack 0
  2063                           
  2064 ;; *************** function _lcdString *****************
  2065 ;; Defined at:
  2066 ;;		line 168 in file "lcd.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  str             1    3[COMRAM] PTR const unsigned char 
  2069 ;;		 -> STR_14(12), STR_13(17), STR_12(17), STR_11(12), 
  2070 ;;		 -> STR_10(12), STR_9(12), STR_8(16), STR_7(16), 
  2071 ;;		 -> STR_6(16), STR_5(16), STR_4(16), STR_3(16), 
  2072 ;;		 -> STR_2(16), STR_1(16), 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2084 ;;      Params:         1       0       0       0       0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2087 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2088 ;;Total ram usage:        1 bytes
  2089 ;; Hardware stack levels used: 1
  2090 ;; Hardware stack levels required when called: 3
  2091 ;; This function calls:
  2092 ;;		_lcdData
  2093 ;; This function is called by:
  2094 ;;		_outputPrint
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text7
  2099   001E1A                     __ptext7:
  2100                           	callstack 0
  2101   001E1A                     _lcdString:
  2102                           	callstack 25
  2103   001E1A                     
  2104                           ;lcd.c: 169:     while(*str) {
  2105   001E1A  EF18  F00F         	goto	l3047
  2106   001E1E                     l3043:
  2107                           
  2108                           ;lcd.c: 170:         lcdData(*str++);
  2109   001E1E  C004  FFF6         	movff	lcdString@str,tblptrl
  2110   001E22                     	if	1	;There is more than 1 active tblptr byte
  2111   001E22  0E08               	movlw	high __smallconst
  2112   001E24  6EF7               	movwf	tblptrh,c
  2113   001E26                     	endif
  2114   001E26                     	if	0	;tblptru may be non-zero
  2115   001E26                     	endif
  2116   001E26                     	if	0	;tblptru may be non-zero
  2117   001E26                     	endif
  2118   001E26  0008               	tblrd		*
  2119   001E28  50F5               	movf	tablat,w,c
  2120   001E2A  EC6B  F010         	call	_lcdData
  2121   001E2E  2A04               	incf	lcdString@str^0,f,c
  2122   001E30                     l3047:
  2123                           
  2124                           ;lcd.c: 169:     while(*str) {
  2125   001E30  C004  FFF6         	movff	lcdString@str,tblptrl
  2126   001E34                     	if	1	;There is more than 1 active tblptr byte
  2127   001E34  0E08               	movlw	high __smallconst
  2128   001E36  6EF7               	movwf	tblptrh,c
  2129   001E38                     	endif
  2130   001E38                     	if	0	;tblptru may be non-zero
  2131   001E38                     	endif
  2132   001E38                     	if	0	;tblptru may be non-zero
  2133   001E38                     	endif
  2134   001E38  0008               	tblrd		*
  2135   001E3A  50F5               	movf	tablat,w,c
  2136   001E3C  0900               	iorlw	0
  2137   001E3E  A4D8               	btfss	status,2,c
  2138   001E40  EF24  F00F         	goto	u2591
  2139   001E44  EF26  F00F         	goto	u2590
  2140   001E48                     u2591:
  2141   001E48  EF0F  F00F         	goto	l3043
  2142   001E4C                     u2590:
  2143   001E4C  0012               	return		;funcret
  2144   001E4E                     __end_of_lcdString:
  2145                           	callstack 0
  2146                           
  2147 ;; *************** function _lcdInt *****************
  2148 ;; Defined at:
  2149 ;;		line 174 in file "lcd.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  val             2   42[COMRAM] int 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;		None
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      void 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2163 ;;      Params:         2       0       0       0       0       0       0       0       0
  2164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2166 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2167 ;;Total ram usage:        2 bytes
  2168 ;; Hardware stack levels used: 1
  2169 ;; Hardware stack levels required when called: 3
  2170 ;; This function calls:
  2171 ;;		___awdiv
  2172 ;;		___awmod
  2173 ;;		_lcdData
  2174 ;; This function is called by:
  2175 ;;		_outputPrint
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text8
  2180   00176E                     __ptext8:
  2181                           	callstack 0
  2182   00176E                     _lcdInt:
  2183                           	callstack 25
  2184   00176E                     
  2185                           ;lcd.c: 175:     if (val < 0) {
  2186   00176E  BE2C               	btfsc	(lcdInt@val+1)^0,7,c
  2187   001770  EFBE  F00B         	goto	u2600
  2188   001774  EFBC  F00B         	goto	u2601
  2189   001778                     u2601:
  2190   001778  EFC5  F00B         	goto	l3055
  2191   00177C                     u2600:
  2192   00177C                     
  2193                           ;lcd.c: 176:         val = val * (-1);
  2194   00177C  6C2B               	negf	lcdInt@val^0,c
  2195   00177E  1E2C               	comf	(lcdInt@val+1)^0,f,c
  2196   001780  B0D8               	btfsc	status,0,c
  2197   001782  2A2C               	incf	(lcdInt@val+1)^0,f,c
  2198   001784                     
  2199                           ;lcd.c: 177:         lcdData('-');
  2200   001784  0E2D               	movlw	45
  2201   001786  EC6B  F010         	call	_lcdData
  2202   00178A                     l3055:
  2203                           
  2204                           ;lcd.c: 179:     lcdData((val / 10000) % 10 + 48);
  2205   00178A  0E27               	movlw	39
  2206   00178C  6E16               	movwf	(___awdiv@divisor+1)^0,c
  2207   00178E  0E10               	movlw	16
  2208   001790  6E15               	movwf	___awdiv@divisor^0,c
  2209   001792  C02B  F013         	movff	lcdInt@val,___awdiv@dividend
  2210   001796  C02C  F014         	movff	lcdInt@val+1,___awdiv@dividend+1
  2211   00179A  EC34  F00C         	call	___awdiv	;wreg free
  2212   00179E  C013  F025         	movff	?___awdiv,___awmod@dividend
  2213   0017A2  C014  F026         	movff	?___awdiv+1,___awmod@dividend+1
  2214   0017A6  0E00               	movlw	0
  2215   0017A8  6E28               	movwf	(___awmod@divisor+1)^0,c
  2216   0017AA  0E0A               	movlw	10
  2217   0017AC  6E27               	movwf	___awmod@divisor^0,c
  2218   0017AE  EC96  F00C         	call	___awmod	;wreg free
  2219   0017B2  5025               	movf	?___awmod^0,w,c
  2220   0017B4  0F30               	addlw	48
  2221   0017B6  EC6B  F010         	call	_lcdData
  2222   0017BA                     
  2223                           ;lcd.c: 180:     lcdData((val / 1000) % 10 + 48);
  2224   0017BA  0E03               	movlw	3
  2225   0017BC  6E16               	movwf	(___awdiv@divisor+1)^0,c
  2226   0017BE  0EE8               	movlw	232
  2227   0017C0  6E15               	movwf	___awdiv@divisor^0,c
  2228   0017C2  C02B  F013         	movff	lcdInt@val,___awdiv@dividend
  2229   0017C6  C02C  F014         	movff	lcdInt@val+1,___awdiv@dividend+1
  2230   0017CA  EC34  F00C         	call	___awdiv	;wreg free
  2231   0017CE  C013  F025         	movff	?___awdiv,___awmod@dividend
  2232   0017D2  C014  F026         	movff	?___awdiv+1,___awmod@dividend+1
  2233   0017D6  0E00               	movlw	0
  2234   0017D8  6E28               	movwf	(___awmod@divisor+1)^0,c
  2235   0017DA  0E0A               	movlw	10
  2236   0017DC  6E27               	movwf	___awmod@divisor^0,c
  2237   0017DE  EC96  F00C         	call	___awmod	;wreg free
  2238   0017E2  5025               	movf	?___awmod^0,w,c
  2239   0017E4  0F30               	addlw	48
  2240   0017E6  EC6B  F010         	call	_lcdData
  2241   0017EA                     
  2242                           ;lcd.c: 181:     lcdData((val / 100) % 10 + 48);
  2243   0017EA  0E00               	movlw	0
  2244   0017EC  6E16               	movwf	(___awdiv@divisor+1)^0,c
  2245   0017EE  0E64               	movlw	100
  2246   0017F0  6E15               	movwf	___awdiv@divisor^0,c
  2247   0017F2  C02B  F013         	movff	lcdInt@val,___awdiv@dividend
  2248   0017F6  C02C  F014         	movff	lcdInt@val+1,___awdiv@dividend+1
  2249   0017FA  EC34  F00C         	call	___awdiv	;wreg free
  2250   0017FE  C013  F025         	movff	?___awdiv,___awmod@dividend
  2251   001802  C014  F026         	movff	?___awdiv+1,___awmod@dividend+1
  2252   001806  0E00               	movlw	0
  2253   001808  6E28               	movwf	(___awmod@divisor+1)^0,c
  2254   00180A  0E0A               	movlw	10
  2255   00180C  6E27               	movwf	___awmod@divisor^0,c
  2256   00180E  EC96  F00C         	call	___awmod	;wreg free
  2257   001812  5025               	movf	?___awmod^0,w,c
  2258   001814  0F30               	addlw	48
  2259   001816  EC6B  F010         	call	_lcdData
  2260   00181A                     
  2261                           ;lcd.c: 182:     lcdData((val / 10) % 10 + 48);
  2262   00181A  0E00               	movlw	0
  2263   00181C  6E16               	movwf	(___awdiv@divisor+1)^0,c
  2264   00181E  0E0A               	movlw	10
  2265   001820  6E15               	movwf	___awdiv@divisor^0,c
  2266   001822  C02B  F013         	movff	lcdInt@val,___awdiv@dividend
  2267   001826  C02C  F014         	movff	lcdInt@val+1,___awdiv@dividend+1
  2268   00182A  EC34  F00C         	call	___awdiv	;wreg free
  2269   00182E  C013  F025         	movff	?___awdiv,___awmod@dividend
  2270   001832  C014  F026         	movff	?___awdiv+1,___awmod@dividend+1
  2271   001836  0E00               	movlw	0
  2272   001838  6E28               	movwf	(___awmod@divisor+1)^0,c
  2273   00183A  0E0A               	movlw	10
  2274   00183C  6E27               	movwf	___awmod@divisor^0,c
  2275   00183E  EC96  F00C         	call	___awmod	;wreg free
  2276   001842  5025               	movf	?___awmod^0,w,c
  2277   001844  0F30               	addlw	48
  2278   001846  EC6B  F010         	call	_lcdData
  2279   00184A                     
  2280                           ;lcd.c: 183:     lcdData((val / 1) % 10 + 48);
  2281   00184A  C02B  F025         	movff	lcdInt@val,___awmod@dividend
  2282   00184E  C02C  F026         	movff	lcdInt@val+1,___awmod@dividend+1
  2283   001852  0E00               	movlw	0
  2284   001854  6E28               	movwf	(___awmod@divisor+1)^0,c
  2285   001856  0E0A               	movlw	10
  2286   001858  6E27               	movwf	___awmod@divisor^0,c
  2287   00185A  EC96  F00C         	call	___awmod	;wreg free
  2288   00185E  5025               	movf	?___awmod^0,w,c
  2289   001860  0F30               	addlw	48
  2290   001862  EC6B  F010         	call	_lcdData
  2291   001866  0012               	return		;funcret
  2292   001868                     __end_of_lcdInt:
  2293                           	callstack 0
  2294                           
  2295 ;; *************** function _lcdData *****************
  2296 ;; Defined at:
  2297 ;;		line 108 in file "lcd.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  valor           1    wreg     unsigned char 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  valor           1    2[COMRAM] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0
  2312 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2314 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2315 ;;Total ram usage:        1 bytes
  2316 ;; Hardware stack levels used: 1
  2317 ;; Hardware stack levels required when called: 2
  2318 ;; This function calls:
  2319 ;;		_Delay40us
  2320 ;;		_lcdCommand4bits
  2321 ;; This function is called by:
  2322 ;;		_lcdString
  2323 ;;		_lcdInt
  2324 ;;		_outputPrint
  2325 ;;		_printf
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text9
  2330   0020D6                     __ptext9:
  2331                           	callstack 0
  2332   0020D6                     _lcdData:
  2333                           	callstack 25
  2334                           
  2335                           ;incstack = 0
  2336                           ;lcdData@valor stored from wreg
  2337   0020D6  6E03               	movwf	lcdData@valor^0,c
  2338   0020D8                     
  2339                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  2340   0020D8  0E01               	movlw	1
  2341   0020DA  6E01               	movwf	lcdCommand4bits@data^0,c
  2342   0020DC  5003               	movf	lcdData@valor^0,w,c
  2343   0020DE  EC2A  F00D         	call	_lcdCommand4bits
  2344                           
  2345                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  2346   0020E2  0E01               	movlw	1
  2347   0020E4  6E01               	movwf	lcdCommand4bits@data^0,c
  2348   0020E6  3803               	swapf	lcdData@valor^0,w,c
  2349   0020E8  0BF0               	andlw	240
  2350   0020EA  EC2A  F00D         	call	_lcdCommand4bits
  2351                           
  2352                           ;lcd.c: 113:     Delay40us();
  2353   0020EE  EC87  F010         	call	_Delay40us	;wreg free
  2354   0020F2  0012               	return		;funcret
  2355   0020F4                     __end_of_lcdData:
  2356                           	callstack 0
  2357                           
  2358 ;; *************** function _getTime *****************
  2359 ;; Defined at:
  2360 ;;		line 32 in file "var.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  2    0[COMRAM] int 
  2367 ;; Registers used:
  2368 ;;		None
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2374 ;;      Params:         2       0       0       0       0       0       0       0       0
  2375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2377 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2378 ;;Total ram usage:        2 bytes
  2379 ;; Hardware stack levels used: 1
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_outputPrint
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text10
  2388   00218A                     __ptext10:
  2389                           	callstack 0
  2390   00218A                     _getTime:
  2391                           	callstack 28
  2392   00218A                     
  2393                           ;var.c: 33:     return time;
  2394   00218A  C03C  F001         	movff	_time,?_getTime
  2395   00218E  C03D  F002         	movff	_time+1,?_getTime+1
  2396   002192  0012               	return		;funcret
  2397   002194                     __end_of_getTime:
  2398                           	callstack 0
  2399                           
  2400 ;; *************** function _getLanguage *****************
  2401 ;; Defined at:
  2402 ;;		line 62 in file "var.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;		None
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      unsigned char 
  2409 ;; Registers used:
  2410 ;;		wreg, status,2
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2416 ;;      Params:         0       0       0       0       0       0       0       0       0
  2417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2419 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2420 ;;Total ram usage:        0 bytes
  2421 ;; Hardware stack levels used: 1
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_outputPrint
  2426 ;;		_smLoop
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text11
  2431   0021A8                     __ptext11:
  2432                           	callstack 0
  2433   0021A8                     _getLanguage:
  2434                           	callstack 28
  2435   0021A8                     
  2436                           ;var.c: 63:     return language;
  2437   0021A8  504B               	movf	_language^0,w,c
  2438   0021AA  0012               	return		;funcret
  2439   0021AC                     __end_of_getLanguage:
  2440                           	callstack 0
  2441                           
  2442 ;; *************** function _getAlarmLevel *****************
  2443 ;; Defined at:
  2444 ;;		line 40 in file "var.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  lh              2    0[COMRAM] int 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  l               2    2[COMRAM] int 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  2    0[COMRAM] int 
  2451 ;; Registers used:
  2452 ;;		wreg, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2458 ;;      Params:         2       0       0       0       0       0       0       0       0
  2459 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2461 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2462 ;;Total ram usage:        4 bytes
  2463 ;; Hardware stack levels used: 1
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_outputPrint
  2468 ;;		_smLoop
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text12
  2473   001F90                     __ptext12:
  2474                           	callstack 0
  2475   001F90                     _getAlarmLevel:
  2476                           	callstack 28
  2477   001F90                     
  2478                           ;var.c: 41:     int l;;var.c: 42:     if(lh == 0){
  2479   001F90  5001               	movf	getAlarmLevel@lh^0,w,c
  2480   001F92  1002               	iorwf	(getAlarmLevel@lh+1)^0,w,c
  2481   001F94  A4D8               	btfss	status,2,c
  2482   001F96  EFCF  F00F         	goto	u2651
  2483   001F9A  EFD1  F00F         	goto	u2650
  2484   001F9E                     u2651:
  2485   001F9E  EFD6  F00F         	goto	l675
  2486   001FA2                     u2650:
  2487   001FA2                     
  2488                           ;var.c: 43:         l = alarmLevelLow;
  2489   001FA2  C049  F003         	movff	_alarmLevelLow,getAlarmLevel@l
  2490   001FA6  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2491                           
  2492                           ;var.c: 44:     }
  2493   001FA8  EFD9  F00F         	goto	l676
  2494   001FAC                     l675:
  2495                           
  2496                           ;var.c: 46:     {;var.c: 47:         l = alarmLevelHigh;
  2497   001FAC  C04A  F003         	movff	_alarmLevelHigh,getAlarmLevel@l
  2498   001FB0  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2499   001FB2                     l676:
  2500                           
  2501                           ;var.c: 49:     return l;
  2502   001FB2  C003  F001         	movff	getAlarmLevel@l,?_getAlarmLevel
  2503   001FB6  C004  F002         	movff	getAlarmLevel@l+1,?_getAlarmLevel+1
  2504   001FBA  0012               	return		;funcret
  2505   001FBC                     __end_of_getAlarmLevel:
  2506                           	callstack 0
  2507                           
  2508 ;; *************** function _bcd2dec *****************
  2509 ;; Defined at:
  2510 ;;		line 14 in file "ds1307.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  value           2   32[COMRAM] int 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  2   32[COMRAM] int 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2524 ;;      Params:         2       0       0       0       0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2526 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2527 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2528 ;;Total ram usage:        4 bytes
  2529 ;; Hardware stack levels used: 1
  2530 ;; Hardware stack levels required when called: 1
  2531 ;; This function calls:
  2532 ;;		___awdiv
  2533 ;;		___wmul
  2534 ;; This function is called by:
  2535 ;;		_outputPrint
  2536 ;;		_smLoop
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text13
  2541   001D68                     __ptext13:
  2542                           	callstack 0
  2543   001D68                     _bcd2dec:
  2544                           	callstack 27
  2545   001D68                     
  2546                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  2547   001D68  0E0F               	movlw	15
  2548   001D6A  1421               	andwf	bcd2dec@value^0,w,c
  2549   001D6C  6E23               	movwf	??_bcd2dec^0,c
  2550   001D6E  0E00               	movlw	0
  2551   001D70  1422               	andwf	(bcd2dec@value+1)^0,w,c
  2552   001D72  6E24               	movwf	(??_bcd2dec+1)^0,c
  2553   001D74  0E00               	movlw	0
  2554   001D76  6E16               	movwf	(___awdiv@divisor+1)^0,c
  2555   001D78  0E10               	movlw	16
  2556   001D7A  6E15               	movwf	___awdiv@divisor^0,c
  2557   001D7C  C021  F013         	movff	bcd2dec@value,___awdiv@dividend
  2558   001D80  C022  F014         	movff	bcd2dec@value+1,___awdiv@dividend+1
  2559   001D84  EC34  F00C         	call	___awdiv	;wreg free
  2560   001D88  C013  F01B         	movff	?___awdiv,___wmul@multiplier
  2561   001D8C  C014  F01C         	movff	?___awdiv+1,___wmul@multiplier+1
  2562   001D90  0E00               	movlw	0
  2563   001D92  6E1E               	movwf	(___wmul@multiplicand+1)^0,c
  2564   001D94  0E0A               	movlw	10
  2565   001D96  6E1D               	movwf	___wmul@multiplicand^0,c
  2566   001D98  EC47  F010         	call	___wmul	;wreg free
  2567   001D9C  5023               	movf	??_bcd2dec^0,w,c
  2568   001D9E  241B               	addwf	?___wmul^0,w,c
  2569   001DA0  6E21               	movwf	?_bcd2dec^0,c
  2570   001DA2  5024               	movf	(??_bcd2dec+1)^0,w,c
  2571   001DA4  201C               	addwfc	(?___wmul+1)^0,w,c
  2572   001DA6  6E22               	movwf	(?_bcd2dec+1)^0,c
  2573   001DA8  0012               	return		;funcret
  2574   001DAA                     __end_of_bcd2dec:
  2575                           	callstack 0
  2576                           
  2577 ;; *************** function ___wmul *****************
  2578 ;; Defined at:
  2579 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  multiplier      2   26[COMRAM] unsigned int 
  2582 ;;  multiplicand    2   28[COMRAM] unsigned int 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  product         2   30[COMRAM] unsigned int 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  2   26[COMRAM] unsigned int 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, prodl, prodh
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2594 ;;      Params:         4       0       0       0       0       0       0       0       0
  2595 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2597 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2598 ;;Total ram usage:        6 bytes
  2599 ;; Hardware stack levels used: 1
  2600 ;; This function calls:
  2601 ;;		Nothing
  2602 ;; This function is called by:
  2603 ;;		_bcd2dec
  2604 ;;		_pwmSet1
  2605 ;;		_pwmSet2
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text14
  2610   00208E                     __ptext14:
  2611                           	callstack 0
  2612   00208E                     ___wmul:
  2613                           	callstack 27
  2614   00208E  501B               	movf	___wmul@multiplier^0,w,c
  2615   002090  021D               	mulwf	___wmul@multiplicand^0,c
  2616   002092  CFF3 F01F          	movff	prodl,___wmul@product
  2617   002096  CFF4 F020          	movff	prodh,___wmul@product+1
  2618   00209A  501B               	movf	___wmul@multiplier^0,w,c
  2619   00209C  021E               	mulwf	(___wmul@multiplicand+1)^0,c
  2620   00209E  50F3               	movf	243,w,c
  2621   0020A0  2620               	addwf	(___wmul@product+1)^0,f,c
  2622   0020A2  501C               	movf	(___wmul@multiplier+1)^0,w,c
  2623   0020A4  021D               	mulwf	___wmul@multiplicand^0,c
  2624   0020A6  50F3               	movf	243,w,c
  2625   0020A8  2620               	addwf	(___wmul@product+1)^0,f,c
  2626   0020AA  C01F  F01B         	movff	___wmul@product,?___wmul
  2627   0020AE  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  2628   0020B2  0012               	return		;funcret
  2629   0020B4                     __end_of___wmul:
  2630                           	callstack 0
  2631                           
  2632 ;; *************** function _getState *****************
  2633 ;; Defined at:
  2634 ;;		line 24 in file "var.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;		None
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      unsigned char 
  2641 ;; Registers used:
  2642 ;;		wreg, status,2
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2648 ;;      Params:         0       0       0       0       0       0       0       0       0
  2649 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2651 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2652 ;;Total ram usage:        0 bytes
  2653 ;; Hardware stack levels used: 1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_smLoop
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text15
  2662   0021AC                     __ptext15:
  2663                           	callstack 0
  2664   0021AC                     _getState:
  2665                           	callstack 29
  2666   0021AC                     
  2667                           ;var.c: 25:     return state;
  2668   0021AC  504C               	movf	_state^0,w,c
  2669   0021AE  0012               	return		;funcret
  2670   0021B0                     __end_of_getState:
  2671                           	callstack 0
  2672                           
  2673 ;; *************** function _eventRead *****************
  2674 ;; Defined at:
  2675 ;;		line 26 in file "event.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  key             2    9[COMRAM] int 
  2680 ;;  ev              2    6[COMRAM] int 
  2681 ;;  data            1    8[COMRAM] unsigned char 
  2682 ;;  prot            1    5[COMRAM] PTR unsigned char 
  2683 ;;		 -> prot(5), 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  2    2[COMRAM] unsigned int 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2693 ;;      Params:         2       0       0       0       0       0       0       0       0
  2694 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2695 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2696 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2697 ;;Total ram usage:        9 bytes
  2698 ;; Hardware stack levels used: 1
  2699 ;; Hardware stack levels required when called: 1
  2700 ;; This function calls:
  2701 ;;		_getProt
  2702 ;;		_kpRead
  2703 ;;		_serialRead
  2704 ;;		_serialSend
  2705 ;;		_setProt
  2706 ;; This function is called by:
  2707 ;;		_smLoop
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text16
  2712   001372                     __ptext16:
  2713                           	callstack 0
  2714   001372                     _eventRead:
  2715                           	callstack 28
  2716   001372                     
  2717                           ;event.c: 27:     int key;;event.c: 28:     int ev = EV_NOEVENT;
  2718   001372  0E00               	movlw	0
  2719   001374  6E08               	movwf	(eventRead@ev+1)^0,c
  2720   001376  0E06               	movlw	6
  2721   001378  6E07               	movwf	eventRead@ev^0,c
  2722   00137A                     
  2723                           ;event.c: 29:     key = kpRead();
  2724   00137A  ECD8  F010         	call	_kpRead	;wreg free
  2725   00137E  6E05               	movwf	??_eventRead^0,c
  2726   001380  5005               	movf	??_eventRead^0,w,c
  2727   001382  6E0A               	movwf	eventRead@key^0,c
  2728   001384  6A0B               	clrf	(eventRead@key+1)^0,c
  2729   001386                     
  2730                           ;event.c: 30:     if (key != key_ant) {
  2731   001386  5044               	movf	_key_ant^0,w,c
  2732   001388  180A               	xorwf	eventRead@key^0,w,c
  2733   00138A  E109               	bnz	u2660
  2734   00138C  5045               	movf	(_key_ant+1)^0,w,c
  2735   00138E  180B               	xorwf	(eventRead@key+1)^0,w,c
  2736   001390  B4D8               	btfsc	status,2,c
  2737   001392  EFCD  F009         	goto	u2661
  2738   001396  EFCF  F009         	goto	u2660
  2739   00139A                     u2661:
  2740   00139A  EF06  F00A         	goto	l3139
  2741   00139E                     u2660:
  2742   00139E                     
  2743                           ;event.c: 31:         if (((key) & (1<<0))) {
  2744   00139E  A00A               	btfss	eventRead@key^0,0,c
  2745   0013A0  EFD4  F009         	goto	u2671
  2746   0013A4  EFD6  F009         	goto	u2670
  2747   0013A8                     u2671:
  2748   0013A8  EFDA  F009         	goto	l3123
  2749   0013AC                     u2670:
  2750   0013AC                     
  2751                           ;event.c: 32:             ev = EV_B_0;
  2752   0013AC  0E00               	movlw	0
  2753   0013AE  6E08               	movwf	(eventRead@ev+1)^0,c
  2754   0013B0  0E00               	movlw	0
  2755   0013B2  6E07               	movwf	eventRead@ev^0,c
  2756   0013B4                     l3123:
  2757                           
  2758                           ;event.c: 35:         if (((key) & (1<<1))) {
  2759   0013B4  A20A               	btfss	eventRead@key^0,1,c
  2760   0013B6  EFDF  F009         	goto	u2681
  2761   0013BA  EFE1  F009         	goto	u2680
  2762   0013BE                     u2681:
  2763   0013BE  EFE5  F009         	goto	l3127
  2764   0013C2                     u2680:
  2765   0013C2                     
  2766                           ;event.c: 36:             ev = EV_B_1;
  2767   0013C2  0E00               	movlw	0
  2768   0013C4  6E08               	movwf	(eventRead@ev+1)^0,c
  2769   0013C6  0E01               	movlw	1
  2770   0013C8  6E07               	movwf	eventRead@ev^0,c
  2771   0013CA                     l3127:
  2772                           
  2773                           ;event.c: 39:         if (((key) & (1<<2))) {
  2774   0013CA  A40A               	btfss	eventRead@key^0,2,c
  2775   0013CC  EFEA  F009         	goto	u2691
  2776   0013D0  EFEC  F009         	goto	u2690
  2777   0013D4                     u2691:
  2778   0013D4  EFF0  F009         	goto	l3131
  2779   0013D8                     u2690:
  2780   0013D8                     
  2781                           ;event.c: 40:             ev = EV_B_2;
  2782   0013D8  0E00               	movlw	0
  2783   0013DA  6E08               	movwf	(eventRead@ev+1)^0,c
  2784   0013DC  0E02               	movlw	2
  2785   0013DE  6E07               	movwf	eventRead@ev^0,c
  2786   0013E0                     l3131:
  2787                           
  2788                           ;event.c: 43:         if (((key) & (1<<3))) {
  2789   0013E0  A60A               	btfss	eventRead@key^0,3,c
  2790   0013E2  EFF5  F009         	goto	u2701
  2791   0013E6  EFF7  F009         	goto	u2700
  2792   0013EA                     u2701:
  2793   0013EA  EFFB  F009         	goto	l3135
  2794   0013EE                     u2700:
  2795   0013EE                     
  2796                           ;event.c: 44:             ev = EV_B_3;
  2797   0013EE  0E00               	movlw	0
  2798   0013F0  6E08               	movwf	(eventRead@ev+1)^0,c
  2799   0013F2  0E03               	movlw	3
  2800   0013F4  6E07               	movwf	eventRead@ev^0,c
  2801   0013F6                     l3135:
  2802                           
  2803                           ;event.c: 47:         if (((key) & (1<<4))) {
  2804   0013F6  A80A               	btfss	eventRead@key^0,4,c
  2805   0013F8  EF00  F00A         	goto	u2711
  2806   0013FC  EF02  F00A         	goto	u2710
  2807   001400                     u2711:
  2808   001400  EF06  F00A         	goto	l3139
  2809   001404                     u2710:
  2810   001404                     
  2811                           ;event.c: 48:             ev = EV_B_4;
  2812   001404  0E00               	movlw	0
  2813   001406  6E08               	movwf	(eventRead@ev+1)^0,c
  2814   001408  0E04               	movlw	4
  2815   00140A  6E07               	movwf	eventRead@ev^0,c
  2816   00140C                     l3139:
  2817                           
  2818                           ;event.c: 52:     key_ant = key;
  2819   00140C  C00A  F044         	movff	eventRead@key,_key_ant
  2820   001410  C00B  F045         	movff	eventRead@key+1,_key_ant+1
  2821   001414                     
  2822                           ;event.c: 55:     unsigned char data = serialRead();
  2823   001414  ECDE  F00F         	call	_serialRead	;wreg free
  2824   001418  6E09               	movwf	eventRead@data^0,c
  2825   00141A                     
  2826                           ;event.c: 56:     serialSend(data);
  2827   00141A  5009               	movf	eventRead@data^0,w,c
  2828   00141C  EC93  F010         	call	_serialSend
  2829   001420                     
  2830                           ;event.c: 57:     unsigned char* prot;;event.c: 58:     if (data != 0) {
  2831   001420  5009               	movf	eventRead@data^0,w,c
  2832   001422  B4D8               	btfsc	status,2,c
  2833   001424  EF16  F00A         	goto	u2721
  2834   001428  EF18  F00A         	goto	u2720
  2835   00142C                     u2721:
  2836   00142C  EF7F  F00A         	goto	l3177
  2837   001430                     u2720:
  2838   001430                     
  2839                           ;event.c: 59:         prot = getProt();
  2840   001430  ECDA  F010         	call	_getProt	;wreg free
  2841   001434  6E06               	movwf	eventRead@prot^0,c
  2842   001436                     
  2843                           ;event.c: 60:         if (prot[0] == 0) {
  2844   001436  5006               	movf	eventRead@prot^0,w,c
  2845   001438  6ED9               	movwf	fsr2l,c
  2846   00143A  6ADA               	clrf	fsr2h,c
  2847   00143C  50DF               	movf	indf2,w,c
  2848   00143E  A4D8               	btfss	status,2,c
  2849   001440  EF24  F00A         	goto	u2731
  2850   001444  EF26  F00A         	goto	u2730
  2851   001448                     u2731:
  2852   001448  EF6E  F00A         	goto	l3171
  2853   00144C                     u2730:
  2854   00144C  EF4F  F00A         	goto	l3169
  2855   001450                     l3153:
  2856                           
  2857                           ;event.c: 63:                     ev = EV_B_0;
  2858   001450  0E00               	movlw	0
  2859   001452  6E08               	movwf	(eventRead@ev+1)^0,c
  2860   001454  0E00               	movlw	0
  2861   001456  6E07               	movwf	eventRead@ev^0,c
  2862                           
  2863                           ;event.c: 64:                     break;
  2864   001458  EF7F  F00A         	goto	l3177
  2865   00145C                     l3155:
  2866                           
  2867                           ;event.c: 66:                     ev = EV_B_1;
  2868   00145C  0E00               	movlw	0
  2869   00145E  6E08               	movwf	(eventRead@ev+1)^0,c
  2870   001460  0E01               	movlw	1
  2871   001462  6E07               	movwf	eventRead@ev^0,c
  2872                           
  2873                           ;event.c: 67:                     break;
  2874   001464  EF7F  F00A         	goto	l3177
  2875   001468                     l3157:
  2876                           
  2877                           ;event.c: 69:                     ev = EV_B_2;
  2878   001468  0E00               	movlw	0
  2879   00146A  6E08               	movwf	(eventRead@ev+1)^0,c
  2880   00146C  0E02               	movlw	2
  2881   00146E  6E07               	movwf	eventRead@ev^0,c
  2882                           
  2883                           ;event.c: 70:                     break;
  2884   001470  EF7F  F00A         	goto	l3177
  2885   001474                     l3159:
  2886                           
  2887                           ;event.c: 72:                     ev = EV_B_3;
  2888   001474  0E00               	movlw	0
  2889   001476  6E08               	movwf	(eventRead@ev+1)^0,c
  2890   001478  0E03               	movlw	3
  2891   00147A  6E07               	movwf	eventRead@ev^0,c
  2892                           
  2893                           ;event.c: 73:                     break;
  2894   00147C  EF7F  F00A         	goto	l3177
  2895   001480                     l3161:
  2896                           
  2897                           ;event.c: 75:                     ev = EV_B_4;
  2898   001480  0E00               	movlw	0
  2899   001482  6E08               	movwf	(eventRead@ev+1)^0,c
  2900   001484  0E04               	movlw	4
  2901   001486  6E07               	movwf	eventRead@ev^0,c
  2902                           
  2903                           ;event.c: 76:                     break;
  2904   001488  EF7F  F00A         	goto	l3177
  2905   00148C                     l3163:
  2906                           
  2907                           ;event.c: 78:                     ev = EV_NOEVENT;
  2908   00148C  0E00               	movlw	0
  2909   00148E  6E08               	movwf	(eventRead@ev+1)^0,c
  2910   001490  0E06               	movlw	6
  2911   001492  6E07               	movwf	eventRead@ev^0,c
  2912   001494                     
  2913                           ;event.c: 79:                     setProt('p');
  2914   001494  0E70               	movlw	112
  2915   001496  EC33  F010         	call	_setProt
  2916                           
  2917                           ;event.c: 81:                     break;
  2918   00149A  EF7F  F00A         	goto	l3177
  2919   00149E                     l3169:
  2920   00149E  5009               	movf	eventRead@data^0,w,c
  2921                           
  2922                           ; Switch size 1, requested type "simple"
  2923                           ; Number of cases is 7, Range of values is 49 to 112
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte           22    12 (average)
  2927                           ;	Chosen strategy is simple_byte
  2928   0014A0  0A31               	xorlw	49	; case 49
  2929   0014A2  B4D8               	btfsc	status,2,c
  2930   0014A4  EF2E  F00A         	goto	l3155
  2931   0014A8  0A03               	xorlw	3	; case 50
  2932   0014AA  B4D8               	btfsc	status,2,c
  2933   0014AC  EF34  F00A         	goto	l3157
  2934   0014B0  0A01               	xorlw	1	; case 51
  2935   0014B2  B4D8               	btfsc	status,2,c
  2936   0014B4  EF3A  F00A         	goto	l3159
  2937   0014B8  0A07               	xorlw	7	; case 52
  2938   0014BA  B4D8               	btfsc	status,2,c
  2939   0014BC  EF40  F00A         	goto	l3161
  2940   0014C0  0A0D               	xorlw	13	; case 57
  2941   0014C2  B4D8               	btfsc	status,2,c
  2942   0014C4  EF28  F00A         	goto	l3153
  2943   0014C8  0A69               	xorlw	105	; case 80
  2944   0014CA  B4D8               	btfsc	status,2,c
  2945   0014CC  EF46  F00A         	goto	l3163
  2946   0014D0  0A20               	xorlw	32	; case 112
  2947   0014D2  B4D8               	btfsc	status,2,c
  2948   0014D4  EF46  F00A         	goto	l3163
  2949   0014D8  EF7F  F00A         	goto	l510
  2950   0014DC                     l3171:
  2951                           
  2952                           ;event.c: 86:             setProt(data);
  2953   0014DC  5009               	movf	eventRead@data^0,w,c
  2954   0014DE  EC33  F010         	call	_setProt
  2955   0014E2                     
  2956                           ;event.c: 88:             if (prot_ready) {
  2957   0014E2  504E               	movf	_prot_ready^0,w,c
  2958   0014E4  B4D8               	btfsc	status,2,c
  2959   0014E6  EF77  F00A         	goto	u2741
  2960   0014EA  EF79  F00A         	goto	u2740
  2961   0014EE                     u2741:
  2962   0014EE  EF7F  F00A         	goto	l3177
  2963   0014F2                     u2740:
  2964   0014F2                     
  2965                           ;event.c: 89:                 ev = EV_PROT_SERIAL;
  2966   0014F2  0E00               	movlw	0
  2967   0014F4  6E08               	movwf	(eventRead@ev+1)^0,c
  2968   0014F6  0E05               	movlw	5
  2969   0014F8  6E07               	movwf	eventRead@ev^0,c
  2970   0014FA  EF7F  F00A         	goto	l3177
  2971   0014FE                     l510:
  2972   0014FE                     l3177:
  2973                           
  2974                           ;event.c: 95:     return ev;
  2975   0014FE  C007  F003         	movff	eventRead@ev,?_eventRead
  2976   001502  C008  F004         	movff	eventRead@ev+1,?_eventRead+1
  2977   001506  0012               	return		;funcret
  2978   001508                     __end_of_eventRead:
  2979                           	callstack 0
  2980                           
  2981 ;; *************** function _setProt *****************
  2982 ;; Defined at:
  2983 ;;		line 77 in file "var.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  newChar         1    wreg     unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  newChar         1    0[COMRAM] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0
  2998 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3000 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3001 ;;Total ram usage:        1 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_eventRead
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text17
  3011   002066                     __ptext17:
  3012                           	callstack 0
  3013   002066                     _setProt:
  3014                           	callstack 28
  3015                           
  3016                           ;incstack = 0
  3017                           ;setProt@newChar stored from wreg
  3018   002066  6E01               	movwf	setProt@newChar^0,c
  3019   002068                     
  3020                           ;var.c: 79:     prot[index++] = newChar;
  3021   002068  5048               	movf	_index^0,w,c
  3022   00206A  0F74               	addlw	low _prot
  3023   00206C  6ED9               	movwf	fsr2l,c
  3024   00206E  6ADA               	clrf	fsr2h,c
  3025   002070  C001  FFDF         	movff	setProt@newChar,indf2
  3026   002074  2A48               	incf	_index^0,f,c
  3027   002076                     
  3028                           ;var.c: 81:     if(index == 5) prot_ready = 1;
  3029   002076  0E05               	movlw	5
  3030   002078  1848               	xorwf	_index^0,w,c
  3031   00207A  A4D8               	btfss	status,2,c
  3032   00207C  EF42  F010         	goto	u2641
  3033   002080  EF44  F010         	goto	u2640
  3034   002084                     u2641:
  3035   002084  EF46  F010         	goto	l695
  3036   002088                     u2640:
  3037   002088  0E01               	movlw	1
  3038   00208A  6E4E               	movwf	_prot_ready^0,c
  3039   00208C                     l695:
  3040   00208C  0012               	return		;funcret
  3041   00208E                     __end_of_setProt:
  3042                           	callstack 0
  3043                           
  3044 ;; *************** function _serialSend *****************
  3045 ;; Defined at:
  3046 ;;		line 25 in file "serial.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  c               1    wreg     unsigned char 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  c               1    0[COMRAM] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      void 
  3053 ;; Registers used:
  3054 ;;		wreg
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3060 ;;      Params:         0       0       0       0       0       0       0       0       0
  3061 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3063 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3064 ;;Total ram usage:        1 bytes
  3065 ;; Hardware stack levels used: 1
  3066 ;; This function calls:
  3067 ;;		Nothing
  3068 ;; This function is called by:
  3069 ;;		_eventRead
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text18
  3074   002126                     __ptext18:
  3075                           	callstack 0
  3076   002126                     _serialSend:
  3077                           	callstack 28
  3078                           
  3079                           ;incstack = 0
  3080                           ;serialSend@c stored from wreg
  3081   002126  6E01               	movwf	serialSend@c^0,c
  3082   002128                     l333:
  3083   002128  A89E               	btfss	158,4,c	;volatile
  3084   00212A  EF99  F010         	goto	u2611
  3085   00212E  EF9B  F010         	goto	u2610
  3086   002132                     u2611:
  3087   002132  EF94  F010         	goto	l333
  3088   002136                     u2610:
  3089   002136                     
  3090                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  3091   002136  C001  FFAD         	movff	serialSend@c,4013	;volatile
  3092   00213A  0012               	return		;funcret
  3093   00213C                     __end_of_serialSend:
  3094                           	callstack 0
  3095                           
  3096 ;; *************** function _serialRead *****************
  3097 ;; Defined at:
  3098 ;;		line 30 in file "serial.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  resp            1    0[COMRAM] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      unsigned char 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0
  3113 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3115 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3116 ;;Total ram usage:        1 bytes
  3117 ;; Hardware stack levels used: 1
  3118 ;; This function calls:
  3119 ;;		Nothing
  3120 ;; This function is called by:
  3121 ;;		_eventRead
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text19
  3126   001FBC                     __ptext19:
  3127                           	callstack 0
  3128   001FBC                     _serialRead:
  3129                           	callstack 28
  3130   001FBC                     
  3131                           ;serial.c: 31:     char resp = 0;
  3132   001FBC  0E00               	movlw	0
  3133   001FBE  6E01               	movwf	serialRead@resp^0,c
  3134   001FC0                     
  3135                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  3136   001FC0  A2AB               	btfss	171,1,c	;volatile
  3137   001FC2  EFE5  F00F         	goto	u2621
  3138   001FC6  EFE7  F00F         	goto	u2620
  3139   001FCA                     u2621:
  3140   001FCA  EFE9  F00F         	goto	l3075
  3141   001FCE                     u2620:
  3142   001FCE                     
  3143                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  3144   001FCE  98AB               	bcf	171,4,c	;volatile
  3145                           
  3146                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  3147   001FD0  88AB               	bsf	171,4,c	;volatile
  3148   001FD2                     l3075:
  3149                           
  3150                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  3151   001FD2  AA9E               	btfss	158,5,c	;volatile
  3152   001FD4  EFEE  F00F         	goto	u2631
  3153   001FD8  EFF0  F00F         	goto	u2630
  3154   001FDC                     u2631:
  3155   001FDC  EFF2  F00F         	goto	l3079
  3156   001FE0                     u2630:
  3157   001FE0                     
  3158                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  3159   001FE0  CFAE F001          	movff	4014,serialRead@resp	;volatile
  3160   001FE4                     l3079:
  3161                           
  3162                           ;serial.c: 43:     return resp;
  3163   001FE4  5001               	movf	serialRead@resp^0,w,c
  3164   001FE6  0012               	return		;funcret
  3165   001FE8                     __end_of_serialRead:
  3166                           	callstack 0
  3167                           
  3168 ;; *************** function _kpRead *****************
  3169 ;; Defined at:
  3170 ;;		line 29 in file "keypad.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;		None
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;		None
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      unsigned char 
  3177 ;; Registers used:
  3178 ;;		wreg, status,2
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3184 ;;      Params:         0       0       0       0       0       0       0       0       0
  3185 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3187 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3188 ;;Total ram usage:        0 bytes
  3189 ;; Hardware stack levels used: 1
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_eventRead
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text20
  3198   0021B0                     __ptext20:
  3199                           	callstack 0
  3200   0021B0                     _kpRead:
  3201                           	callstack 28
  3202   0021B0                     
  3203                           ;keypad.c: 30:     return valor;
  3204   0021B0  5059               	movf	_valor^0,w,c
  3205   0021B2  0012               	return		;funcret
  3206   0021B4                     __end_of_kpRead:
  3207                           	callstack 0
  3208                           
  3209 ;; *************** function _getProt *****************
  3210 ;; Defined at:
  3211 ;;		line 72 in file "var.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      PTR unsigned char 
  3218 ;; Registers used:
  3219 ;;		wreg
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3225 ;;      Params:         2       0       0       0       0       0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3228 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3229 ;;Total ram usage:        2 bytes
  3230 ;; Hardware stack levels used: 1
  3231 ;; This function calls:
  3232 ;;		Nothing
  3233 ;; This function is called by:
  3234 ;;		_eventRead
  3235 ;;		_smLoop
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text21
  3240   0021B4                     __ptext21:
  3241                           	callstack 0
  3242   0021B4                     _getProt:
  3243                           	callstack 29
  3244   0021B4                     
  3245                           ;var.c: 74:     return prot;
  3246   0021B4  0E74               	movlw	_prot& (0+255)
  3247   0021B6  0012               	return		;funcret
  3248   0021B8                     __end_of_getProt:
  3249                           	callstack 0
  3250                           
  3251 ;; *************** function _dec2bcd *****************
  3252 ;; Defined at:
  3253 ;;		line 9 in file "ds1307.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  value           2   42[COMRAM] int 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  2   42[COMRAM] int 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3267 ;;      Params:         2       0       0       0       0       0       0       0       0
  3268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3269 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3270 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3271 ;;Total ram usage:        6 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; Hardware stack levels required when called: 1
  3274 ;; This function calls:
  3275 ;;		___awdiv
  3276 ;;		___awmod
  3277 ;; This function is called by:
  3278 ;;		_smLoop
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text22
  3283   001ACC                     __ptext22:
  3284                           	callstack 0
  3285   001ACC                     _dec2bcd:
  3286                           	callstack 28
  3287   001ACC                     
  3288                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  3289   001ACC  C02B  F013         	movff	dec2bcd@value,___awdiv@dividend
  3290   001AD0  C02C  F014         	movff	dec2bcd@value+1,___awdiv@dividend+1
  3291   001AD4  0E00               	movlw	0
  3292   001AD6  6E16               	movwf	(___awdiv@divisor+1)^0,c
  3293   001AD8  0E0A               	movlw	10
  3294   001ADA  6E15               	movwf	___awdiv@divisor^0,c
  3295   001ADC  EC34  F00C         	call	___awdiv	;wreg free
  3296   001AE0  C013  F02D         	movff	?___awdiv,??_dec2bcd
  3297   001AE4  C014  F02E         	movff	?___awdiv+1,??_dec2bcd+1
  3298   001AE8  3A2D               	swapf	??_dec2bcd^0,f,c
  3299   001AEA  3A2E               	swapf	(??_dec2bcd+1)^0,f,c
  3300   001AEC  0EF0               	movlw	240
  3301   001AEE  162E               	andwf	(??_dec2bcd+1)^0,f,c
  3302   001AF0  502D               	movf	??_dec2bcd^0,w,c
  3303   001AF2  0B0F               	andlw	15
  3304   001AF4  122E               	iorwf	(??_dec2bcd+1)^0,f,c
  3305   001AF6  0EF0               	movlw	240
  3306   001AF8  162D               	andwf	??_dec2bcd^0,f,c
  3307   001AFA  C02B  F025         	movff	dec2bcd@value,___awmod@dividend
  3308   001AFE  C02C  F026         	movff	dec2bcd@value+1,___awmod@dividend+1
  3309   001B02  0E00               	movlw	0
  3310   001B04  6E28               	movwf	(___awmod@divisor+1)^0,c
  3311   001B06  0E0A               	movlw	10
  3312   001B08  6E27               	movwf	___awmod@divisor^0,c
  3313   001B0A  EC96  F00C         	call	___awmod	;wreg free
  3314   001B0E  5025               	movf	?___awmod^0,w,c
  3315   001B10  242D               	addwf	??_dec2bcd^0,w,c
  3316   001B12  6E2F               	movwf	(??_dec2bcd+2)^0,c
  3317   001B14  5026               	movf	(?___awmod+1)^0,w,c
  3318   001B16  202E               	addwfc	(??_dec2bcd+1)^0,w,c
  3319   001B18  6E30               	movwf	(??_dec2bcd+3)^0,c
  3320   001B1A  0E80               	movlw	128
  3321   001B1C  102F               	iorwf	(??_dec2bcd+2)^0,w,c
  3322   001B1E  6E2B               	movwf	dec2bcd@value^0,c
  3323   001B20  5030               	movf	(??_dec2bcd+3)^0,w,c
  3324   001B22  6E2C               	movwf	(dec2bcd@value+1)^0,c
  3325   001B24                     
  3326                           ;ds1307.c: 11:     return value;
  3327   001B24  C02B  F02B         	movff	dec2bcd@value,?_dec2bcd
  3328   001B28  C02C  F02C         	movff	dec2bcd@value+1,?_dec2bcd+1
  3329   001B2C  0012               	return		;funcret
  3330   001B2E                     __end_of_dec2bcd:
  3331                           	callstack 0
  3332                           
  3333 ;; *************** function ___awmod *****************
  3334 ;; Defined at:
  3335 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;  dividend        2   36[COMRAM] int 
  3338 ;;  divisor         2   38[COMRAM] int 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  sign            1   41[COMRAM] unsigned char 
  3341 ;;  counter         1   40[COMRAM] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  2   36[COMRAM] int 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3351 ;;      Params:         4       0       0       0       0       0       0       0       0
  3352 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3354 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3355 ;;Total ram usage:        6 bytes
  3356 ;; Hardware stack levels used: 1
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_dec2bcd
  3361 ;;		_lcdInt
  3362 ;;		_outputPrint
  3363 ;;		_rtcPutSeconds
  3364 ;;		_rtcPutMinutes
  3365 ;;		_rtcPutHours
  3366 ;;		_rtcPutDate
  3367 ;;		_rtcPutMonth
  3368 ;;		_rtcPutYear
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           	psect	text23
  3373   00192C                     __ptext23:
  3374                           	callstack 0
  3375   00192C                     ___awmod:
  3376                           	callstack 27
  3377   00192C  0E00               	movlw	0
  3378   00192E  6E2A               	movwf	___awmod@sign^0,c
  3379   001930  BE26               	btfsc	(___awmod@dividend+1)^0,7,c
  3380   001932  EF9F  F00C         	goto	u2510
  3381   001936  EF9D  F00C         	goto	u2511
  3382   00193A                     u2511:
  3383   00193A  EFA5  F00C         	goto	l2987
  3384   00193E                     u2510:
  3385   00193E  6C25               	negf	___awmod@dividend^0,c
  3386   001940  1E26               	comf	(___awmod@dividend+1)^0,f,c
  3387   001942  B0D8               	btfsc	status,0,c
  3388   001944  2A26               	incf	(___awmod@dividend+1)^0,f,c
  3389   001946  0E01               	movlw	1
  3390   001948  6E2A               	movwf	___awmod@sign^0,c
  3391   00194A                     l2987:
  3392   00194A  BE28               	btfsc	(___awmod@divisor+1)^0,7,c
  3393   00194C  EFAC  F00C         	goto	u2520
  3394   001950  EFAA  F00C         	goto	u2521
  3395   001954                     u2521:
  3396   001954  EFB0  F00C         	goto	l2991
  3397   001958                     u2520:
  3398   001958  6C27               	negf	___awmod@divisor^0,c
  3399   00195A  1E28               	comf	(___awmod@divisor+1)^0,f,c
  3400   00195C  B0D8               	btfsc	status,0,c
  3401   00195E  2A28               	incf	(___awmod@divisor+1)^0,f,c
  3402   001960                     l2991:
  3403   001960  5027               	movf	___awmod@divisor^0,w,c
  3404   001962  1028               	iorwf	(___awmod@divisor+1)^0,w,c
  3405   001964  B4D8               	btfsc	status,2,c
  3406   001966  EFB7  F00C         	goto	u2531
  3407   00196A  EFB9  F00C         	goto	u2530
  3408   00196E                     u2531:
  3409   00196E  EFDD  F00C         	goto	l3007
  3410   001972                     u2530:
  3411   001972  0E01               	movlw	1
  3412   001974  6E29               	movwf	___awmod@counter^0,c
  3413   001976  EFC1  F00C         	goto	l2997
  3414   00197A                     l2995:
  3415   00197A  90D8               	bcf	status,0,c
  3416   00197C  3627               	rlcf	___awmod@divisor^0,f,c
  3417   00197E  3628               	rlcf	(___awmod@divisor+1)^0,f,c
  3418   001980  2A29               	incf	___awmod@counter^0,f,c
  3419   001982                     l2997:
  3420   001982  AE28               	btfss	(___awmod@divisor+1)^0,7,c
  3421   001984  EFC6  F00C         	goto	u2541
  3422   001988  EFC8  F00C         	goto	u2540
  3423   00198C                     u2541:
  3424   00198C  EFBD  F00C         	goto	l2995
  3425   001990                     u2540:
  3426   001990                     l2999:
  3427   001990  5027               	movf	___awmod@divisor^0,w,c
  3428   001992  5C25               	subwf	___awmod@dividend^0,w,c
  3429   001994  5028               	movf	(___awmod@divisor+1)^0,w,c
  3430   001996  5826               	subwfb	(___awmod@dividend+1)^0,w,c
  3431   001998  A0D8               	btfss	status,0,c
  3432   00199A  EFD1  F00C         	goto	u2551
  3433   00199E  EFD3  F00C         	goto	u2550
  3434   0019A2                     u2551:
  3435   0019A2  EFD7  F00C         	goto	l3003
  3436   0019A6                     u2550:
  3437   0019A6  5027               	movf	___awmod@divisor^0,w,c
  3438   0019A8  5E25               	subwf	___awmod@dividend^0,f,c
  3439   0019AA  5028               	movf	(___awmod@divisor+1)^0,w,c
  3440   0019AC  5A26               	subwfb	(___awmod@dividend+1)^0,f,c
  3441   0019AE                     l3003:
  3442   0019AE  90D8               	bcf	status,0,c
  3443   0019B0  3228               	rrcf	(___awmod@divisor+1)^0,f,c
  3444   0019B2  3227               	rrcf	___awmod@divisor^0,f,c
  3445   0019B4  2E29               	decfsz	___awmod@counter^0,f,c
  3446   0019B6  EFC8  F00C         	goto	l2999
  3447   0019BA                     l3007:
  3448   0019BA  502A               	movf	___awmod@sign^0,w,c
  3449   0019BC  B4D8               	btfsc	status,2,c
  3450   0019BE  EFE3  F00C         	goto	u2561
  3451   0019C2  EFE5  F00C         	goto	u2560
  3452   0019C6                     u2561:
  3453   0019C6  EFE9  F00C         	goto	l3011
  3454   0019CA                     u2560:
  3455   0019CA  6C25               	negf	___awmod@dividend^0,c
  3456   0019CC  1E26               	comf	(___awmod@dividend+1)^0,f,c
  3457   0019CE  B0D8               	btfsc	status,0,c
  3458   0019D0  2A26               	incf	(___awmod@dividend+1)^0,f,c
  3459   0019D2                     l3011:
  3460   0019D2  C025  F025         	movff	___awmod@dividend,?___awmod
  3461   0019D6  C026  F026         	movff	___awmod@dividend+1,?___awmod+1
  3462   0019DA  0012               	return		;funcret
  3463   0019DC                     __end_of___awmod:
  3464                           	callstack 0
  3465                           
  3466 ;; *************** function ___awdiv *****************
  3467 ;; Defined at:
  3468 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  dividend        2   18[COMRAM] int 
  3471 ;;  divisor         2   20[COMRAM] int 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  quotient        2   24[COMRAM] int 
  3474 ;;  sign            1   23[COMRAM] unsigned char 
  3475 ;;  counter         1   22[COMRAM] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  2   18[COMRAM] int 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3485 ;;      Params:         4       0       0       0       0       0       0       0       0
  3486 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3488 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3489 ;;Total ram usage:        8 bytes
  3490 ;; Hardware stack levels used: 1
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_dec2bcd
  3495 ;;		_bcd2dec
  3496 ;;		_lcdInt
  3497 ;;		_outputPrint
  3498 ;;		_rtcPutSeconds
  3499 ;;		_rtcPutMinutes
  3500 ;;		_rtcPutHours
  3501 ;;		_rtcPutDate
  3502 ;;		_rtcPutMonth
  3503 ;;		_rtcPutYear
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text24
  3508   001868                     __ptext24:
  3509                           	callstack 0
  3510   001868                     ___awdiv:
  3511                           	callstack 27
  3512   001868  0E00               	movlw	0
  3513   00186A  6E18               	movwf	___awdiv@sign^0,c
  3514   00186C  BE16               	btfsc	(___awdiv@divisor+1)^0,7,c
  3515   00186E  EF3D  F00C         	goto	u2450
  3516   001872  EF3B  F00C         	goto	u2451
  3517   001876                     u2451:
  3518   001876  EF43  F00C         	goto	l2943
  3519   00187A                     u2450:
  3520   00187A  6C15               	negf	___awdiv@divisor^0,c
  3521   00187C  1E16               	comf	(___awdiv@divisor+1)^0,f,c
  3522   00187E  B0D8               	btfsc	status,0,c
  3523   001880  2A16               	incf	(___awdiv@divisor+1)^0,f,c
  3524   001882  0E01               	movlw	1
  3525   001884  6E18               	movwf	___awdiv@sign^0,c
  3526   001886                     l2943:
  3527   001886  BE14               	btfsc	(___awdiv@dividend+1)^0,7,c
  3528   001888  EF4A  F00C         	goto	u2460
  3529   00188C  EF48  F00C         	goto	u2461
  3530   001890                     u2461:
  3531   001890  EF50  F00C         	goto	l2949
  3532   001894                     u2460:
  3533   001894  6C13               	negf	___awdiv@dividend^0,c
  3534   001896  1E14               	comf	(___awdiv@dividend+1)^0,f,c
  3535   001898  B0D8               	btfsc	status,0,c
  3536   00189A  2A14               	incf	(___awdiv@dividend+1)^0,f,c
  3537   00189C  0E01               	movlw	1
  3538   00189E  1A18               	xorwf	___awdiv@sign^0,f,c
  3539   0018A0                     l2949:
  3540   0018A0  0E00               	movlw	0
  3541   0018A2  6E1A               	movwf	(___awdiv@quotient+1)^0,c
  3542   0018A4  0E00               	movlw	0
  3543   0018A6  6E19               	movwf	___awdiv@quotient^0,c
  3544   0018A8  5015               	movf	___awdiv@divisor^0,w,c
  3545   0018AA  1016               	iorwf	(___awdiv@divisor+1)^0,w,c
  3546   0018AC  B4D8               	btfsc	status,2,c
  3547   0018AE  EF5B  F00C         	goto	u2471
  3548   0018B2  EF5D  F00C         	goto	u2470
  3549   0018B6                     u2471:
  3550   0018B6  EF85  F00C         	goto	l2971
  3551   0018BA                     u2470:
  3552   0018BA  0E01               	movlw	1
  3553   0018BC  6E17               	movwf	___awdiv@counter^0,c
  3554   0018BE  EF65  F00C         	goto	l2957
  3555   0018C2                     l2955:
  3556   0018C2  90D8               	bcf	status,0,c
  3557   0018C4  3615               	rlcf	___awdiv@divisor^0,f,c
  3558   0018C6  3616               	rlcf	(___awdiv@divisor+1)^0,f,c
  3559   0018C8  2A17               	incf	___awdiv@counter^0,f,c
  3560   0018CA                     l2957:
  3561   0018CA  AE16               	btfss	(___awdiv@divisor+1)^0,7,c
  3562   0018CC  EF6A  F00C         	goto	u2481
  3563   0018D0  EF6C  F00C         	goto	u2480
  3564   0018D4                     u2481:
  3565   0018D4  EF61  F00C         	goto	l2955
  3566   0018D8                     u2480:
  3567   0018D8                     l2959:
  3568   0018D8  90D8               	bcf	status,0,c
  3569   0018DA  3619               	rlcf	___awdiv@quotient^0,f,c
  3570   0018DC  361A               	rlcf	(___awdiv@quotient+1)^0,f,c
  3571   0018DE  5015               	movf	___awdiv@divisor^0,w,c
  3572   0018E0  5C13               	subwf	___awdiv@dividend^0,w,c
  3573   0018E2  5016               	movf	(___awdiv@divisor+1)^0,w,c
  3574   0018E4  5814               	subwfb	(___awdiv@dividend+1)^0,w,c
  3575   0018E6  A0D8               	btfss	status,0,c
  3576   0018E8  EF78  F00C         	goto	u2491
  3577   0018EC  EF7A  F00C         	goto	u2490
  3578   0018F0                     u2491:
  3579   0018F0  EF7F  F00C         	goto	l2967
  3580   0018F4                     u2490:
  3581   0018F4  5015               	movf	___awdiv@divisor^0,w,c
  3582   0018F6  5E13               	subwf	___awdiv@dividend^0,f,c
  3583   0018F8  5016               	movf	(___awdiv@divisor+1)^0,w,c
  3584   0018FA  5A14               	subwfb	(___awdiv@dividend+1)^0,f,c
  3585   0018FC  8019               	bsf	___awdiv@quotient^0,0,c
  3586   0018FE                     l2967:
  3587   0018FE  90D8               	bcf	status,0,c
  3588   001900  3216               	rrcf	(___awdiv@divisor+1)^0,f,c
  3589   001902  3215               	rrcf	___awdiv@divisor^0,f,c
  3590   001904  2E17               	decfsz	___awdiv@counter^0,f,c
  3591   001906  EF6C  F00C         	goto	l2959
  3592   00190A                     l2971:
  3593   00190A  5018               	movf	___awdiv@sign^0,w,c
  3594   00190C  B4D8               	btfsc	status,2,c
  3595   00190E  EF8B  F00C         	goto	u2501
  3596   001912  EF8D  F00C         	goto	u2500
  3597   001916                     u2501:
  3598   001916  EF91  F00C         	goto	l2975
  3599   00191A                     u2500:
  3600   00191A  6C19               	negf	___awdiv@quotient^0,c
  3601   00191C  1E1A               	comf	(___awdiv@quotient+1)^0,f,c
  3602   00191E  B0D8               	btfsc	status,0,c
  3603   001920  2A1A               	incf	(___awdiv@quotient+1)^0,f,c
  3604   001922                     l2975:
  3605   001922  C019  F013         	movff	___awdiv@quotient,?___awdiv
  3606   001926  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  3607   00192A  0012               	return		;funcret
  3608   00192C                     __end_of___awdiv:
  3609                           	callstack 0
  3610                           
  3611 ;; *************** function _smInit *****************
  3612 ;; Defined at:
  3613 ;;		line 11 in file "stateMachine.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used: 1
  3633 ;; Hardware stack levels required when called: 6
  3634 ;; This function calls:
  3635 ;;		_eventInit
  3636 ;;		_setState
  3637 ;;		_varInit
  3638 ;; This function is called by:
  3639 ;;		_main
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text25
  3644   002152                     __ptext25:
  3645                           	callstack 0
  3646   002152                     _smInit:
  3647                           	callstack 24
  3648   002152                     
  3649                           ;stateMachine.c: 12:     varInit();
  3650   002152  EC5A  F010         	call	_varInit	;wreg free
  3651   002156                     
  3652                           ;stateMachine.c: 13:     setState(STATE_MAIN);
  3653   002156  0E04               	movlw	4
  3654   002158  ECCA  F010         	call	_setState
  3655   00215C                     
  3656                           ;stateMachine.c: 14:     eventInit();
  3657   00215C  EC9E  F010         	call	_eventInit	;wreg free
  3658   002160  0012               	return		;funcret
  3659   002162                     __end_of_smInit:
  3660                           	callstack 0
  3661                           
  3662 ;; *************** function _varInit *****************
  3663 ;; Defined at:
  3664 ;;		line 16 in file "var.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;		None
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;		None
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3678 ;;      Params:         0       0       0       0       0       0       0       0       0
  3679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3682 ;;Total ram usage:        0 bytes
  3683 ;; Hardware stack levels used: 1
  3684 ;; Hardware stack levels required when called: 5
  3685 ;; This function calls:
  3686 ;;		_dsReadData
  3687 ;; This function is called by:
  3688 ;;		_smInit
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text26
  3693   0020B4                     __ptext26:
  3694                           	callstack 0
  3695   0020B4                     _varInit:
  3696                           	callstack 24
  3697   0020B4                     
  3698                           ;var.c: 17:     state = 0;
  3699   0020B4  0E00               	movlw	0
  3700   0020B6  6E4C               	movwf	_state^0,c
  3701                           
  3702                           ;var.c: 18:     time = 1000;
  3703   0020B8  0E03               	movlw	3
  3704   0020BA  6E3D               	movwf	(_time+1)^0,c
  3705   0020BC  0EE8               	movlw	232
  3706   0020BE  6E3C               	movwf	_time^0,c
  3707   0020C0                     
  3708                           ;var.c: 20:     alarmLevelHigh = dsReadData(0x20);
  3709   0020C0  0E00               	movlw	0
  3710   0020C2  6E0F               	movwf	(dsReadData@address+1)^0,c
  3711   0020C4  0E20               	movlw	32
  3712   0020C6  6E0E               	movwf	dsReadData@address^0,c
  3713   0020C8  EC6E  F00E         	call	_dsReadData	;wreg free
  3714   0020CC  500E               	movf	?_dsReadData^0,w,c
  3715   0020CE  6E4A               	movwf	_alarmLevelHigh^0,c
  3716   0020D0                     
  3717                           ;var.c: 21:     alarmLevelLow = 35;
  3718   0020D0  0E23               	movlw	35
  3719   0020D2  6E49               	movwf	_alarmLevelLow^0,c
  3720   0020D4  0012               	return		;funcret
  3721   0020D6                     __end_of_varInit:
  3722                           	callstack 0
  3723                           
  3724 ;; *************** function _dsReadData *****************
  3725 ;; Defined at:
  3726 ;;		line 31 in file "ds1307.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  address         2   13[COMRAM] int 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  result          2   16[COMRAM] int 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  2   13[COMRAM] int 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3740 ;;      Params:         2       0       0       0       0       0       0       0       0
  3741 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3742 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3743 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3744 ;;Total ram usage:        5 bytes
  3745 ;; Hardware stack levels used: 1
  3746 ;; Hardware stack levels required when called: 4
  3747 ;; This function calls:
  3748 ;;		_i2cReadByte
  3749 ;;		_i2cWriteByte
  3750 ;; This function is called by:
  3751 ;;		_outputPrint
  3752 ;;		_smLoop
  3753 ;;		_varInit
  3754 ;;		_dsStartClock
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text27
  3759   001CDC                     __ptext27:
  3760                           	callstack 0
  3761   001CDC                     _dsReadData:
  3762                           	callstack 24
  3763   001CDC                     
  3764                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  3765   001CDC  0E00               	movlw	0
  3766   001CDE  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3767   001CE0  0EDE               	movlw	222
  3768   001CE2  6E09               	movwf	i2cWriteByte@byte^0,c
  3769   001CE4  0E01               	movlw	1
  3770   001CE6  EC97  F00D         	call	_i2cWriteByte
  3771                           
  3772                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  3773   001CEA  0E00               	movlw	0
  3774   001CEC  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3775   001CEE  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  3776   001CF2  0E00               	movlw	0
  3777   001CF4  EC97  F00D         	call	_i2cWriteByte
  3778                           
  3779                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  3780   001CF8  0E00               	movlw	0
  3781   001CFA  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3782   001CFC  0EDF               	movlw	223
  3783   001CFE  6E09               	movwf	i2cWriteByte@byte^0,c
  3784   001D00  0E01               	movlw	1
  3785   001D02  EC97  F00D         	call	_i2cWriteByte
  3786                           
  3787                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  3788   001D06  0E01               	movlw	1
  3789   001D08  6E08               	movwf	i2cReadByte@send_stop^0,c
  3790   001D0A  0E01               	movlw	1
  3791   001D0C  EC20  F00E         	call	_i2cReadByte
  3792   001D10  6E10               	movwf	??_dsReadData^0,c
  3793   001D12  5010               	movf	??_dsReadData^0,w,c
  3794   001D14  6E11               	movwf	dsReadData@result^0,c
  3795   001D16  6A12               	clrf	(dsReadData@result+1)^0,c
  3796   001D18                     
  3797                           ;ds1307.c: 37:  return result;
  3798   001D18  C011  F00E         	movff	dsReadData@result,?_dsReadData
  3799   001D1C  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  3800   001D20  0012               	return		;funcret
  3801   001D22                     __end_of_dsReadData:
  3802                           	callstack 0
  3803                           
  3804 ;; *************** function _i2cWriteByte *****************
  3805 ;; Defined at:
  3806 ;;		line 113 in file "soft_i2c.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  send_start      1    wreg     unsigned char 
  3809 ;;  send_stop       1    7[COMRAM] unsigned char 
  3810 ;;  byte            1    8[COMRAM] unsigned char 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  send_start      1    9[COMRAM] unsigned char 
  3813 ;;  bit             1   10[COMRAM] unsigned char 
  3814 ;;  nack            1    0        unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      unsigned char 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3824 ;;      Params:         2       0       0       0       0       0       0       0       0
  3825 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3827 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3828 ;;Total ram usage:        4 bytes
  3829 ;; Hardware stack levels used: 1
  3830 ;; Hardware stack levels required when called: 3
  3831 ;; This function calls:
  3832 ;;		_i2c_read_bit
  3833 ;;		_i2c_start
  3834 ;;		_i2c_stop
  3835 ;;		_i2c_write_bit
  3836 ;; This function is called by:
  3837 ;;		_dsWriteData
  3838 ;;		_dsReadData
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text28
  3843   001B2E                     __ptext28:
  3844                           	callstack 0
  3845   001B2E                     _i2cWriteByte:
  3846                           	callstack 24
  3847                           
  3848                           ;incstack = 0
  3849                           ;i2cWriteByte@send_start stored from wreg
  3850   001B2E  6E0A               	movwf	i2cWriteByte@send_start^0,c
  3851   001B30                     
  3852                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  3853   001B30  500A               	movf	i2cWriteByte@send_start^0,w,c
  3854   001B32  B4D8               	btfsc	status,2,c
  3855   001B34  EF9E  F00D         	goto	u2361
  3856   001B38  EFA0  F00D         	goto	u2360
  3857   001B3C                     u2361:
  3858   001B3C  EFA2  F00D         	goto	l2863
  3859   001B40                     u2360:
  3860   001B40                     
  3861                           ;soft_i2c.c: 117:   i2c_start();
  3862   001B40  EC91  F00E         	call	_i2c_start	;wreg free
  3863   001B44                     l2863:
  3864                           
  3865                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  3866   001B44  0E00               	movlw	0
  3867   001B46  6E0B               	movwf	i2cWriteByte@bit^0,c
  3868   001B48                     l2869:
  3869                           
  3870                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  3871   001B48  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  3872   001B4A  EFA9  F00D         	goto	u2371
  3873   001B4E  EFAC  F00D         	goto	u2370
  3874   001B52                     u2371:
  3875   001B52  0E01               	movlw	1
  3876   001B54  EFAD  F00D         	goto	u2380
  3877   001B58                     u2370:
  3878   001B58  0E00               	movlw	0
  3879   001B5A                     u2380:
  3880   001B5A  ECF4  F00D         	call	_i2c_write_bit
  3881   001B5E                     
  3882                           ;soft_i2c.c: 121:   byte <<= 1;
  3883   001B5E  90D8               	bcf	status,0,c
  3884   001B60  3609               	rlcf	i2cWriteByte@byte^0,f,c
  3885   001B62                     
  3886                           ;soft_i2c.c: 122:  }
  3887   001B62  2A0B               	incf	i2cWriteByte@bit^0,f,c
  3888   001B64  0E07               	movlw	7
  3889   001B66  640B               	cpfsgt	i2cWriteByte@bit^0,c
  3890   001B68  EFB8  F00D         	goto	u2391
  3891   001B6C  EFBA  F00D         	goto	u2390
  3892   001B70                     u2391:
  3893   001B70  EFA4  F00D         	goto	l2869
  3894   001B74                     u2390:
  3895   001B74  EC27  F00F         	call	_i2c_read_bit	;wreg free
  3896   001B78                     
  3897                           ;soft_i2c.c: 124:  if (send_stop) {
  3898   001B78  5008               	movf	i2cWriteByte@send_stop^0,w,c
  3899   001B7A  B4D8               	btfsc	status,2,c
  3900   001B7C  EFC2  F00D         	goto	u2401
  3901   001B80  EFC4  F00D         	goto	u2400
  3902   001B84                     u2401:
  3903   001B84  EFC6  F00D         	goto	l407
  3904   001B88                     u2400:
  3905   001B88                     
  3906                           ;soft_i2c.c: 125:   i2c_stop();
  3907   001B88  EC6E  F00F         	call	_i2c_stop	;wreg free
  3908   001B8C                     l407:
  3909   001B8C  0012               	return		;funcret
  3910   001B8E                     __end_of_i2cWriteByte:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function _i2c_start *****************
  3914 ;; Defined at:
  3915 ;;		line 52 in file "soft_i2c.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3929 ;;      Params:         0       0       0       0       0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used: 1
  3935 ;; Hardware stack levels required when called: 2
  3936 ;; This function calls:
  3937 ;;		_I2C_delay
  3938 ;;		_clear_SCL
  3939 ;;		_clear_SDA
  3940 ;;		_read_SCL
  3941 ;;		_read_SDA
  3942 ;; This function is called by:
  3943 ;;		_i2cWriteByte
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text29
  3948   001D22                     __ptext29:
  3949                           	callstack 0
  3950   001D22                     _i2c_start:
  3951                           	callstack 24
  3952   001D22                     
  3953                           ;soft_i2c.c: 54:  if (started) {
  3954   001D22  5054               	movf	_started^0,w,c
  3955   001D24  B4D8               	btfsc	status,2,c
  3956   001D26  EF97  F00E         	goto	u2291
  3957   001D2A  EF99  F00E         	goto	u2290
  3958   001D2E                     u2291:
  3959   001D2E  EFA9  F00E         	goto	l2799
  3960   001D32                     u2290:
  3961   001D32                     
  3962                           ;soft_i2c.c: 55:   read_SDA();
  3963   001D32  ECD5  F00E         	call	_read_SDA	;wreg free
  3964   001D36                     
  3965                           ;soft_i2c.c: 56:   I2C_delay();
  3966   001D36  ECDD  F010         	call	_I2C_delay	;wreg free
  3967   001D3A                     l2795:
  3968   001D3A  ECF1  F00E         	call	_read_SCL	;wreg free
  3969   001D3E  0900               	iorlw	0
  3970   001D40  B4D8               	btfsc	status,2,c
  3971   001D42  EFA5  F00E         	goto	u2301
  3972   001D46  EFA7  F00E         	goto	u2300
  3973   001D4A                     u2301:
  3974   001D4A  EF9D  F00E         	goto	l2795
  3975   001D4E                     u2300:
  3976   001D4E                     
  3977                           ;soft_i2c.c: 59:   I2C_delay();
  3978   001D4E  ECDD  F010         	call	_I2C_delay	;wreg free
  3979   001D52                     l2799:
  3980                           
  3981                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  3982   001D52  ECD5  F00E         	call	_read_SDA	;wreg free
  3983   001D56                     
  3984                           ;soft_i2c.c: 65:  clear_SDA();
  3985   001D56  ECF4  F00F         	call	_clear_SDA	;wreg free
  3986   001D5A                     
  3987                           ;soft_i2c.c: 66:  I2C_delay();
  3988   001D5A  ECDD  F010         	call	_I2C_delay	;wreg free
  3989   001D5E                     
  3990                           ;soft_i2c.c: 67:  clear_SCL();
  3991   001D5E  EC09  F010         	call	_clear_SCL	;wreg free
  3992   001D62                     
  3993                           ;soft_i2c.c: 68:  started = 1;
  3994   001D62  0E01               	movlw	1
  3995   001D64  6E54               	movwf	_started^0,c
  3996   001D66  0012               	return		;funcret
  3997   001D68                     __end_of_i2c_start:
  3998                           	callstack 0
  3999                           
  4000 ;; *************** function _i2cReadByte *****************
  4001 ;; Defined at:
  4002 ;;		line 131 in file "soft_i2c.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  nack            1    wreg     unsigned char 
  4005 ;;  send_stop       1    7[COMRAM] unsigned char 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  nack            1    9[COMRAM] unsigned char 
  4008 ;;  bit             2   10[COMRAM] unsigned int 
  4009 ;;  byte            1   12[COMRAM] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      unsigned char 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4019 ;;      Params:         1       0       0       0       0       0       0       0       0
  4020 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4021 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4022 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4023 ;;Total ram usage:        6 bytes
  4024 ;; Hardware stack levels used: 1
  4025 ;; Hardware stack levels required when called: 3
  4026 ;; This function calls:
  4027 ;;		_i2c_read_bit
  4028 ;;		_i2c_stop
  4029 ;;		_i2c_write_bit
  4030 ;; This function is called by:
  4031 ;;		_dsReadData
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text30
  4036   001C40                     __ptext30:
  4037                           	callstack 0
  4038   001C40                     _i2cReadByte:
  4039                           	callstack 24
  4040                           
  4041                           ;incstack = 0
  4042                           ;i2cReadByte@nack stored from wreg
  4043   001C40  6E0A               	movwf	i2cReadByte@nack^0,c
  4044   001C42                     
  4045                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  4046   001C42  0E00               	movlw	0
  4047   001C44  6E0D               	movwf	i2cReadByte@byte^0,c
  4048                           
  4049                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  4050   001C46  0E00               	movlw	0
  4051   001C48  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  4052   001C4A  0E00               	movlw	0
  4053   001C4C  6E0B               	movwf	i2cReadByte@bit^0,c
  4054   001C4E                     l2891:
  4055                           
  4056                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  4057   001C4E  EC27  F00F         	call	_i2c_read_bit	;wreg free
  4058   001C52  6E09               	movwf	??_i2cReadByte^0,c
  4059   001C54  500D               	movf	i2cReadByte@byte^0,w,c
  4060   001C56  240D               	addwf	i2cReadByte@byte^0,w,c
  4061   001C58  1009               	iorwf	??_i2cReadByte^0,w,c
  4062   001C5A  6E0D               	movwf	i2cReadByte@byte^0,c
  4063   001C5C                     
  4064                           ;soft_i2c.c: 136:  }
  4065   001C5C  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  4066   001C5E  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  4067   001C60  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  4068   001C62  E109               	bnz	u2410
  4069   001C64  0E08               	movlw	8
  4070   001C66  5C0B               	subwf	i2cReadByte@bit^0,w,c
  4071   001C68  A0D8               	btfss	status,0,c
  4072   001C6A  EF39  F00E         	goto	u2411
  4073   001C6E  EF3B  F00E         	goto	u2410
  4074   001C72                     u2411:
  4075   001C72  EF27  F00E         	goto	l2891
  4076   001C76                     u2410:
  4077   001C76                     
  4078                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  4079   001C76  500A               	movf	i2cReadByte@nack^0,w,c
  4080   001C78  ECF4  F00D         	call	_i2c_write_bit
  4081   001C7C                     
  4082                           ;soft_i2c.c: 138:  if (send_stop) {
  4083   001C7C  5008               	movf	i2cReadByte@send_stop^0,w,c
  4084   001C7E  B4D8               	btfsc	status,2,c
  4085   001C80  EF44  F00E         	goto	u2421
  4086   001C84  EF46  F00E         	goto	u2420
  4087   001C88                     u2421:
  4088   001C88  EF48  F00E         	goto	l2903
  4089   001C8C                     u2420:
  4090   001C8C                     
  4091                           ;soft_i2c.c: 139:   i2c_stop();
  4092   001C8C  EC6E  F00F         	call	_i2c_stop	;wreg free
  4093   001C90                     l2903:
  4094                           
  4095                           ;soft_i2c.c: 141:  return byte;
  4096   001C90  500D               	movf	i2cReadByte@byte^0,w,c
  4097   001C92  0012               	return		;funcret
  4098   001C94                     __end_of_i2cReadByte:
  4099                           	callstack 0
  4100                           
  4101 ;; *************** function _i2c_write_bit *****************
  4102 ;; Defined at:
  4103 ;;		line 84 in file "soft_i2c.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  bit             1    wreg     unsigned char 
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  bit             1    6[COMRAM] unsigned char 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      void 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2, status,0, cstack
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4117 ;;      Params:         0       0       0       0       0       0       0       0       0
  4118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4120 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4121 ;;Total ram usage:        1 bytes
  4122 ;; Hardware stack levels used: 1
  4123 ;; Hardware stack levels required when called: 2
  4124 ;; This function calls:
  4125 ;;		_I2C_delay
  4126 ;;		_clear_SCL
  4127 ;;		_clear_SDA
  4128 ;;		_read_SCL
  4129 ;;		_read_SDA
  4130 ;; This function is called by:
  4131 ;;		_i2cWriteByte
  4132 ;;		_i2cReadByte
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           	psect	text31
  4137   001BE8                     __ptext31:
  4138                           	callstack 0
  4139   001BE8                     _i2c_write_bit:
  4140                           	callstack 24
  4141                           
  4142                           ;incstack = 0
  4143                           ;i2c_write_bit@bit stored from wreg
  4144   001BE8  6E07               	movwf	i2c_write_bit@bit^0,c
  4145   001BEA                     
  4146                           ;soft_i2c.c: 85:  if (bit) {
  4147   001BEA  5007               	movf	i2c_write_bit@bit^0,w,c
  4148   001BEC  B4D8               	btfsc	status,2,c
  4149   001BEE  EFFB  F00D         	goto	u2321
  4150   001BF2  EFFD  F00D         	goto	u2320
  4151   001BF6                     u2321:
  4152   001BF6  EF01  F00E         	goto	l2827
  4153   001BFA                     u2320:
  4154   001BFA                     
  4155                           ;soft_i2c.c: 86:   read_SDA();
  4156   001BFA  ECD5  F00E         	call	_read_SDA	;wreg free
  4157                           
  4158                           ;soft_i2c.c: 87:  } else {
  4159   001BFE  EF03  F00E         	goto	l2829
  4160   001C02                     l2827:
  4161                           
  4162                           ;soft_i2c.c: 88:   clear_SDA();
  4163   001C02  ECF4  F00F         	call	_clear_SDA	;wreg free
  4164   001C06                     l2829:
  4165                           
  4166                           ;soft_i2c.c: 90:  I2C_delay();
  4167   001C06  ECDD  F010         	call	_I2C_delay	;wreg free
  4168   001C0A                     l2831:
  4169   001C0A  ECF1  F00E         	call	_read_SCL	;wreg free
  4170   001C0E  0900               	iorlw	0
  4171   001C10  B4D8               	btfsc	status,2,c
  4172   001C12  EF0D  F00E         	goto	u2331
  4173   001C16  EF0F  F00E         	goto	u2330
  4174   001C1A                     u2331:
  4175   001C1A  EF05  F00E         	goto	l2831
  4176   001C1E                     u2330:
  4177   001C1E                     
  4178                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  4179   001C1E  5007               	movf	i2c_write_bit@bit^0,w,c
  4180   001C20  B4D8               	btfsc	status,2,c
  4181   001C22  EF15  F00E         	goto	u2341
  4182   001C26  EF17  F00E         	goto	u2340
  4183   001C2A                     u2341:
  4184   001C2A  EF19  F00E         	goto	l2837
  4185   001C2E                     u2340:
  4186   001C2E  ECD5  F00E         	call	_read_SDA	;wreg free
  4187   001C32                     l2837:
  4188                           
  4189                           ;soft_i2c.c: 95:  I2C_delay();
  4190   001C32  ECDD  F010         	call	_I2C_delay	;wreg free
  4191   001C36                     
  4192                           ;soft_i2c.c: 96:  clear_SCL();
  4193   001C36  EC09  F010         	call	_clear_SCL	;wreg free
  4194   001C3A                     
  4195                           ;soft_i2c.c: 97:  I2C_delay();
  4196   001C3A  ECDD  F010         	call	_I2C_delay	;wreg free
  4197   001C3E  0012               	return		;funcret
  4198   001C40                     __end_of_i2c_write_bit:
  4199                           	callstack 0
  4200                           
  4201 ;; *************** function _i2c_stop *****************
  4202 ;; Defined at:
  4203 ;;		line 71 in file "soft_i2c.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, status,0, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used: 1
  4223 ;; Hardware stack levels required when called: 2
  4224 ;; This function calls:
  4225 ;;		_I2C_delay
  4226 ;;		_clear_SDA
  4227 ;;		_read_SCL
  4228 ;;		_read_SDA
  4229 ;; This function is called by:
  4230 ;;		_i2cWriteByte
  4231 ;;		_i2cReadByte
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text32
  4236   001EDC                     __ptext32:
  4237                           	callstack 0
  4238   001EDC                     _i2c_stop:
  4239                           	callstack 24
  4240   001EDC                     
  4241                           ;soft_i2c.c: 73:  clear_SDA();
  4242   001EDC  ECF4  F00F         	call	_clear_SDA	;wreg free
  4243   001EE0                     
  4244                           ;soft_i2c.c: 74:  I2C_delay();
  4245   001EE0  ECDD  F010         	call	_I2C_delay	;wreg free
  4246   001EE4                     l2813:
  4247   001EE4  ECF1  F00E         	call	_read_SCL	;wreg free
  4248   001EE8  0900               	iorlw	0
  4249   001EEA  B4D8               	btfsc	status,2,c
  4250   001EEC  EF7A  F00F         	goto	u2311
  4251   001EF0  EF7C  F00F         	goto	u2310
  4252   001EF4                     u2311:
  4253   001EF4  EF72  F00F         	goto	l2813
  4254   001EF8                     u2310:
  4255   001EF8                     
  4256                           ;soft_i2c.c: 76:  I2C_delay();
  4257   001EF8  ECDD  F010         	call	_I2C_delay	;wreg free
  4258   001EFC                     
  4259                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  4260   001EFC  ECD5  F00E         	call	_read_SDA	;wreg free
  4261   001F00                     
  4262                           ;soft_i2c.c: 80:  I2C_delay();
  4263   001F00  ECDD  F010         	call	_I2C_delay	;wreg free
  4264   001F04                     
  4265                           ;soft_i2c.c: 81:  started = 0;
  4266   001F04  0E00               	movlw	0
  4267   001F06  6E54               	movwf	_started^0,c
  4268   001F08  0012               	return		;funcret
  4269   001F0A                     __end_of_i2c_stop:
  4270                           	callstack 0
  4271                           
  4272 ;; *************** function _clear_SDA *****************
  4273 ;; Defined at:
  4274 ;;		line 45 in file "soft_i2c.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4288 ;;      Params:         0       0       0       0       0       0       0       0       0
  4289 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4291 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4292 ;;Total ram usage:        0 bytes
  4293 ;; Hardware stack levels used: 1
  4294 ;; Hardware stack levels required when called: 1
  4295 ;; This function calls:
  4296 ;;		_digitalWrite
  4297 ;;		_pinMode
  4298 ;; This function is called by:
  4299 ;;		_i2c_start
  4300 ;;		_i2c_stop
  4301 ;;		_i2c_write_bit
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text33
  4306   001FE8                     __ptext33:
  4307                           	callstack 0
  4308   001FE8                     _clear_SDA:
  4309                           	callstack 24
  4310   001FE8                     
  4311                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  4312   001FE8  0E00               	movlw	0
  4313   001FEA  6E02               	movwf	(pinMode@pin+1)^0,c
  4314   001FEC  0E08               	movlw	8
  4315   001FEE  6E01               	movwf	pinMode@pin^0,c
  4316   001FF0  0E00               	movlw	0
  4317   001FF2  6E04               	movwf	(pinMode@type+1)^0,c
  4318   001FF4  0E00               	movlw	0
  4319   001FF6  6E03               	movwf	pinMode@type^0,c
  4320   001FF8  EC92  F008         	call	_pinMode	;wreg free
  4321                           
  4322                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  4323   001FFC  0E00               	movlw	0
  4324   001FFE  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4325   002000  0E08               	movlw	8
  4326   002002  6E01               	movwf	digitalWrite@pin^0,c
  4327   002004  0E00               	movlw	0
  4328   002006  6E04               	movwf	(digitalWrite@value+1)^0,c
  4329   002008  0E00               	movlw	0
  4330   00200A  6E03               	movwf	digitalWrite@value^0,c
  4331   00200C  EC6B  F007         	call	_digitalWrite	;wreg free
  4332   002010  0012               	return		;funcret
  4333   002012                     __end_of_clear_SDA:
  4334                           	callstack 0
  4335                           
  4336 ;; *************** function _i2c_read_bit *****************
  4337 ;; Defined at:
  4338 ;;		line 100 in file "soft_i2c.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  bit             1    6[COMRAM] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      unsigned char 
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0
  4353 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4355 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used: 1
  4358 ;; Hardware stack levels required when called: 2
  4359 ;; This function calls:
  4360 ;;		_I2C_delay
  4361 ;;		_clear_SCL
  4362 ;;		_read_SCL
  4363 ;;		_read_SDA
  4364 ;; This function is called by:
  4365 ;;		_i2cWriteByte
  4366 ;;		_i2cReadByte
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text34
  4371   001E4E                     __ptext34:
  4372                           	callstack 0
  4373   001E4E                     _i2c_read_bit:
  4374                           	callstack 24
  4375   001E4E                     
  4376                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  4377   001E4E  ECD5  F00E         	call	_read_SDA	;wreg free
  4378   001E52                     
  4379                           ;soft_i2c.c: 103:  I2C_delay();
  4380   001E52  ECDD  F010         	call	_I2C_delay	;wreg free
  4381   001E56                     l2847:
  4382   001E56  ECF1  F00E         	call	_read_SCL	;wreg free
  4383   001E5A  0900               	iorlw	0
  4384   001E5C  B4D8               	btfsc	status,2,c
  4385   001E5E  EF33  F00F         	goto	u2351
  4386   001E62  EF35  F00F         	goto	u2350
  4387   001E66                     u2351:
  4388   001E66  EF2B  F00F         	goto	l2847
  4389   001E6A                     u2350:
  4390   001E6A                     
  4391                           ;soft_i2c.c: 105:  bit = read_SDA();
  4392   001E6A  ECD5  F00E         	call	_read_SDA	;wreg free
  4393   001E6E  6E07               	movwf	i2c_read_bit@bit^0,c
  4394   001E70                     
  4395                           ;soft_i2c.c: 106:  I2C_delay();
  4396   001E70  ECDD  F010         	call	_I2C_delay	;wreg free
  4397   001E74                     
  4398                           ;soft_i2c.c: 107:  clear_SCL();
  4399   001E74  EC09  F010         	call	_clear_SCL	;wreg free
  4400                           
  4401                           ;soft_i2c.c: 108:  I2C_delay();
  4402   001E78  ECDD  F010         	call	_I2C_delay	;wreg free
  4403   001E7C                     
  4404                           ;soft_i2c.c: 109:  return bit;
  4405   001E7C  5007               	movf	i2c_read_bit@bit^0,w,c
  4406   001E7E  0012               	return		;funcret
  4407   001E80                     __end_of_i2c_read_bit:
  4408                           	callstack 0
  4409                           
  4410 ;; *************** function _read_SDA *****************
  4411 ;; Defined at:
  4412 ;;		line 34 in file "soft_i2c.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      unsigned char 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used: 1
  4432 ;; Hardware stack levels required when called: 1
  4433 ;; This function calls:
  4434 ;;		_digitalRead
  4435 ;;		_pinMode
  4436 ;; This function is called by:
  4437 ;;		_i2c_start
  4438 ;;		_i2c_stop
  4439 ;;		_i2c_write_bit
  4440 ;;		_i2c_read_bit
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text35
  4445   001DAA                     __ptext35:
  4446                           	callstack 0
  4447   001DAA                     _read_SDA:
  4448                           	callstack 24
  4449   001DAA                     
  4450                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  4451   001DAA  0E00               	movlw	0
  4452   001DAC  6E02               	movwf	(pinMode@pin+1)^0,c
  4453   001DAE  0E08               	movlw	8
  4454   001DB0  6E01               	movwf	pinMode@pin^0,c
  4455   001DB2  0E00               	movlw	0
  4456   001DB4  6E04               	movwf	(pinMode@type+1)^0,c
  4457   001DB6  0E01               	movlw	1
  4458   001DB8  6E03               	movwf	pinMode@type^0,c
  4459   001DBA  EC92  F008         	call	_pinMode	;wreg free
  4460                           
  4461                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  4462   001DBE  0E00               	movlw	0
  4463   001DC0  6E02               	movwf	(digitalRead@pin+1)^0,c
  4464   001DC2  0E08               	movlw	8
  4465   001DC4  6E01               	movwf	digitalRead@pin^0,c
  4466   001DC6  EC84  F00A         	call	_digitalRead	;wreg free
  4467   001DCA  5001               	movf	?_digitalRead^0,w,c
  4468   001DCC  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4469   001DCE  A4D8               	btfss	status,2,c
  4470   001DD0  EFEC  F00E         	goto	u2211
  4471   001DD4  EFEF  F00E         	goto	u2210
  4472   001DD8                     u2211:
  4473   001DD8  0E01               	movlw	1
  4474   001DDA  EFF0  F00E         	goto	u2220
  4475   001DDE                     u2210:
  4476   001DDE  0E00               	movlw	0
  4477   001DE0                     u2220:
  4478   001DE0  0012               	return		;funcret
  4479   001DE2                     __end_of_read_SDA:
  4480                           	callstack 0
  4481                           
  4482 ;; *************** function _read_SCL *****************
  4483 ;; Defined at:
  4484 ;;		line 29 in file "soft_i2c.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      unsigned char 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4498 ;;      Params:         0       0       0       0       0       0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4501 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4502 ;;Total ram usage:        0 bytes
  4503 ;; Hardware stack levels used: 1
  4504 ;; Hardware stack levels required when called: 1
  4505 ;; This function calls:
  4506 ;;		_digitalRead
  4507 ;;		_pinMode
  4508 ;; This function is called by:
  4509 ;;		_i2c_start
  4510 ;;		_i2c_stop
  4511 ;;		_i2c_write_bit
  4512 ;;		_i2c_read_bit
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text36
  4517   001DE2                     __ptext36:
  4518                           	callstack 0
  4519   001DE2                     _read_SCL:
  4520                           	callstack 24
  4521   001DE2                     
  4522                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  4523   001DE2  0E00               	movlw	0
  4524   001DE4  6E02               	movwf	(pinMode@pin+1)^0,c
  4525   001DE6  0E09               	movlw	9
  4526   001DE8  6E01               	movwf	pinMode@pin^0,c
  4527   001DEA  0E00               	movlw	0
  4528   001DEC  6E04               	movwf	(pinMode@type+1)^0,c
  4529   001DEE  0E01               	movlw	1
  4530   001DF0  6E03               	movwf	pinMode@type^0,c
  4531   001DF2  EC92  F008         	call	_pinMode	;wreg free
  4532                           
  4533                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  4534   001DF6  0E00               	movlw	0
  4535   001DF8  6E02               	movwf	(digitalRead@pin+1)^0,c
  4536   001DFA  0E09               	movlw	9
  4537   001DFC  6E01               	movwf	digitalRead@pin^0,c
  4538   001DFE  EC84  F00A         	call	_digitalRead	;wreg free
  4539   001E02  5001               	movf	?_digitalRead^0,w,c
  4540   001E04  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4541   001E06  A4D8               	btfss	status,2,c
  4542   001E08  EF08  F00F         	goto	u2191
  4543   001E0C  EF0B  F00F         	goto	u2190
  4544   001E10                     u2191:
  4545   001E10  0E01               	movlw	1
  4546   001E12  EF0C  F00F         	goto	u2200
  4547   001E16                     u2190:
  4548   001E16  0E00               	movlw	0
  4549   001E18                     u2200:
  4550   001E18  0012               	return		;funcret
  4551   001E1A                     __end_of_read_SCL:
  4552                           	callstack 0
  4553                           
  4554 ;; *************** function _digitalRead *****************
  4555 ;; Defined at:
  4556 ;;		line 39 in file "io.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  pin             2    0[COMRAM] int 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  2    0[COMRAM] int 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4570 ;;      Params:         2       0       0       0       0       0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4572 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4573 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4574 ;;Total ram usage:        5 bytes
  4575 ;; Hardware stack levels used: 1
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_read_SCL
  4580 ;;		_read_SDA
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text37
  4585   001508                     __ptext37:
  4586                           	callstack 0
  4587   001508                     _digitalRead:
  4588                           	callstack 24
  4589   001508                     
  4590                           ;io.c: 40:     if(pin <8){
  4591   001508  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4592   00150A  EF92  F00A         	goto	u1890
  4593   00150E  5002               	movf	(digitalRead@pin+1)^0,w,c
  4594   001510  E107               	bnz	u1891
  4595   001512  0E08               	movlw	8
  4596   001514  5C01               	subwf	digitalRead@pin^0,w,c
  4597   001516  B0D8               	btfsc	status,0,c
  4598   001518  EF90  F00A         	goto	u1891
  4599   00151C  EF92  F00A         	goto	u1890
  4600   001520                     u1891:
  4601   001520  EFA6  F00A         	goto	l2663
  4602   001524                     u1890:
  4603   001524                     
  4604                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  4605   001524  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4606   001528  0E01               	movlw	1
  4607   00152A  6E04               	movwf	(??_digitalRead+1)^0,c
  4608   00152C  2A03               	incf	??_digitalRead^0,f,c
  4609   00152E  EF9B  F00A         	goto	u1904
  4610   001532                     u1905:
  4611   001532  90D8               	bcf	status,0,c
  4612   001534  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4613   001536                     u1904:
  4614   001536  2E03               	decfsz	??_digitalRead^0,f,c
  4615   001538  EF99  F00A         	goto	u1905
  4616   00153C  5004               	movf	(??_digitalRead+1)^0,w,c
  4617   00153E  1480               	andwf	128,w,c	;volatile
  4618   001540  6E05               	movwf	(??_digitalRead+2)^0,c
  4619   001542  5005               	movf	(??_digitalRead+2)^0,w,c
  4620   001544  6E01               	movwf	?_digitalRead^0,c
  4621   001546  6A02               	clrf	(?_digitalRead+1)^0,c
  4622   001548  EF38  F00B         	goto	l83
  4623   00154C                     l2663:
  4624   00154C  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4625   00154E  EFB4  F00A         	goto	u1910
  4626   001552  5002               	movf	(digitalRead@pin+1)^0,w,c
  4627   001554  E107               	bnz	u1911
  4628   001556  0E10               	movlw	16
  4629   001558  5C01               	subwf	digitalRead@pin^0,w,c
  4630   00155A  B0D8               	btfsc	status,0,c
  4631   00155C  EFB2  F00A         	goto	u1911
  4632   001560  EFB4  F00A         	goto	u1910
  4633   001564                     u1911:
  4634   001564  EFCA  F00A         	goto	l2671
  4635   001568                     u1910:
  4636   001568                     
  4637                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  4638   001568  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4639   00156C  0EF8               	movlw	-8
  4640   00156E  2603               	addwf	??_digitalRead^0,f,c
  4641   001570  0E01               	movlw	1
  4642   001572  6E04               	movwf	(??_digitalRead+1)^0,c
  4643   001574  2A03               	incf	??_digitalRead^0,f,c
  4644   001576  EFBF  F00A         	goto	u1924
  4645   00157A                     u1925:
  4646   00157A  90D8               	bcf	status,0,c
  4647   00157C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4648   00157E                     u1924:
  4649   00157E  2E03               	decfsz	??_digitalRead^0,f,c
  4650   001580  EFBD  F00A         	goto	u1925
  4651   001584  5004               	movf	(??_digitalRead+1)^0,w,c
  4652   001586  1481               	andwf	129,w,c	;volatile
  4653   001588  6E05               	movwf	(??_digitalRead+2)^0,c
  4654   00158A  5005               	movf	(??_digitalRead+2)^0,w,c
  4655   00158C  6E01               	movwf	?_digitalRead^0,c
  4656   00158E  6A02               	clrf	(?_digitalRead+1)^0,c
  4657   001590  EF38  F00B         	goto	l83
  4658   001594                     l2671:
  4659   001594  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4660   001596  EFD8  F00A         	goto	u1930
  4661   00159A  5002               	movf	(digitalRead@pin+1)^0,w,c
  4662   00159C  E107               	bnz	u1931
  4663   00159E  0E18               	movlw	24
  4664   0015A0  5C01               	subwf	digitalRead@pin^0,w,c
  4665   0015A2  B0D8               	btfsc	status,0,c
  4666   0015A4  EFD6  F00A         	goto	u1931
  4667   0015A8  EFD8  F00A         	goto	u1930
  4668   0015AC                     u1931:
  4669   0015AC  EFEE  F00A         	goto	l2679
  4670   0015B0                     u1930:
  4671   0015B0                     
  4672                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  4673   0015B0  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4674   0015B4  0EF0               	movlw	-16
  4675   0015B6  2603               	addwf	??_digitalRead^0,f,c
  4676   0015B8  0E01               	movlw	1
  4677   0015BA  6E04               	movwf	(??_digitalRead+1)^0,c
  4678   0015BC  2A03               	incf	??_digitalRead^0,f,c
  4679   0015BE  EFE3  F00A         	goto	u1944
  4680   0015C2                     u1945:
  4681   0015C2  90D8               	bcf	status,0,c
  4682   0015C4  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4683   0015C6                     u1944:
  4684   0015C6  2E03               	decfsz	??_digitalRead^0,f,c
  4685   0015C8  EFE1  F00A         	goto	u1945
  4686   0015CC  5004               	movf	(??_digitalRead+1)^0,w,c
  4687   0015CE  1482               	andwf	130,w,c	;volatile
  4688   0015D0  6E05               	movwf	(??_digitalRead+2)^0,c
  4689   0015D2  5005               	movf	(??_digitalRead+2)^0,w,c
  4690   0015D4  6E01               	movwf	?_digitalRead^0,c
  4691   0015D6  6A02               	clrf	(?_digitalRead+1)^0,c
  4692   0015D8  EF38  F00B         	goto	l83
  4693   0015DC                     l2679:
  4694   0015DC  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4695   0015DE  EFFC  F00A         	goto	u1950
  4696   0015E2  5002               	movf	(digitalRead@pin+1)^0,w,c
  4697   0015E4  E107               	bnz	u1951
  4698   0015E6  0E20               	movlw	32
  4699   0015E8  5C01               	subwf	digitalRead@pin^0,w,c
  4700   0015EA  B0D8               	btfsc	status,0,c
  4701   0015EC  EFFA  F00A         	goto	u1951
  4702   0015F0  EFFC  F00A         	goto	u1950
  4703   0015F4                     u1951:
  4704   0015F4  EF12  F00B         	goto	l2687
  4705   0015F8                     u1950:
  4706   0015F8                     
  4707                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  4708   0015F8  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4709   0015FC  0EE8               	movlw	-24
  4710   0015FE  2603               	addwf	??_digitalRead^0,f,c
  4711   001600  0E01               	movlw	1
  4712   001602  6E04               	movwf	(??_digitalRead+1)^0,c
  4713   001604  2A03               	incf	??_digitalRead^0,f,c
  4714   001606  EF07  F00B         	goto	u1964
  4715   00160A                     u1965:
  4716   00160A  90D8               	bcf	status,0,c
  4717   00160C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4718   00160E                     u1964:
  4719   00160E  2E03               	decfsz	??_digitalRead^0,f,c
  4720   001610  EF05  F00B         	goto	u1965
  4721   001614  5004               	movf	(??_digitalRead+1)^0,w,c
  4722   001616  1483               	andwf	131,w,c	;volatile
  4723   001618  6E05               	movwf	(??_digitalRead+2)^0,c
  4724   00161A  5005               	movf	(??_digitalRead+2)^0,w,c
  4725   00161C  6E01               	movwf	?_digitalRead^0,c
  4726   00161E  6A02               	clrf	(?_digitalRead+1)^0,c
  4727   001620  EF38  F00B         	goto	l83
  4728   001624                     l2687:
  4729   001624  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4730   001626  EF20  F00B         	goto	u1970
  4731   00162A  5002               	movf	(digitalRead@pin+1)^0,w,c
  4732   00162C  E107               	bnz	u1971
  4733   00162E  0E28               	movlw	40
  4734   001630  5C01               	subwf	digitalRead@pin^0,w,c
  4735   001632  B0D8               	btfsc	status,0,c
  4736   001634  EF1E  F00B         	goto	u1971
  4737   001638  EF20  F00B         	goto	u1970
  4738   00163C                     u1971:
  4739   00163C  EF36  F00B         	goto	l88
  4740   001640                     u1970:
  4741   001640                     
  4742                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  4743   001640  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4744   001644  0EE0               	movlw	-32
  4745   001646  2603               	addwf	??_digitalRead^0,f,c
  4746   001648  0E01               	movlw	1
  4747   00164A  6E04               	movwf	(??_digitalRead+1)^0,c
  4748   00164C  2A03               	incf	??_digitalRead^0,f,c
  4749   00164E  EF2B  F00B         	goto	u1984
  4750   001652                     u1985:
  4751   001652  90D8               	bcf	status,0,c
  4752   001654  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4753   001656                     u1984:
  4754   001656  2E03               	decfsz	??_digitalRead^0,f,c
  4755   001658  EF29  F00B         	goto	u1985
  4756   00165C  5004               	movf	(??_digitalRead+1)^0,w,c
  4757   00165E  1484               	andwf	132,w,c	;volatile
  4758   001660  6E05               	movwf	(??_digitalRead+2)^0,c
  4759   001662  5005               	movf	(??_digitalRead+2)^0,w,c
  4760   001664  6E01               	movwf	?_digitalRead^0,c
  4761   001666  6A02               	clrf	(?_digitalRead+1)^0,c
  4762   001668  EF38  F00B         	goto	l83
  4763   00166C                     l88:
  4764   00166C                     
  4765                           ;io.c: 51:     return -1;
  4766   00166C  6801               	setf	?_digitalRead^0,c
  4767   00166E  6802               	setf	(?_digitalRead+1)^0,c
  4768   001670                     l83:
  4769   001670  0012               	return		;funcret
  4770   001672                     __end_of_digitalRead:
  4771                           	callstack 0
  4772                           
  4773 ;; *************** function _clear_SCL *****************
  4774 ;; Defined at:
  4775 ;;		line 39 in file "soft_i2c.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4792 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4793 ;;Total ram usage:        0 bytes
  4794 ;; Hardware stack levels used: 1
  4795 ;; Hardware stack levels required when called: 1
  4796 ;; This function calls:
  4797 ;;		_digitalWrite
  4798 ;;		_pinMode
  4799 ;; This function is called by:
  4800 ;;		_i2c_start
  4801 ;;		_i2c_write_bit
  4802 ;;		_i2c_read_bit
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text38
  4807   002012                     __ptext38:
  4808                           	callstack 0
  4809   002012                     _clear_SCL:
  4810                           	callstack 24
  4811   002012                     
  4812                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  4813   002012  0E00               	movlw	0
  4814   002014  6E02               	movwf	(pinMode@pin+1)^0,c
  4815   002016  0E09               	movlw	9
  4816   002018  6E01               	movwf	pinMode@pin^0,c
  4817   00201A  0E00               	movlw	0
  4818   00201C  6E04               	movwf	(pinMode@type+1)^0,c
  4819   00201E  0E00               	movlw	0
  4820   002020  6E03               	movwf	pinMode@type^0,c
  4821   002022  EC92  F008         	call	_pinMode	;wreg free
  4822                           
  4823                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  4824   002026  0E00               	movlw	0
  4825   002028  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4826   00202A  0E09               	movlw	9
  4827   00202C  6E01               	movwf	digitalWrite@pin^0,c
  4828   00202E  0E00               	movlw	0
  4829   002030  6E04               	movwf	(digitalWrite@value+1)^0,c
  4830   002032  0E00               	movlw	0
  4831   002034  6E03               	movwf	digitalWrite@value^0,c
  4832   002036  EC6B  F007         	call	_digitalWrite	;wreg free
  4833   00203A  0012               	return		;funcret
  4834   00203C                     __end_of_clear_SCL:
  4835                           	callstack 0
  4836                           
  4837 ;; *************** function _digitalWrite *****************
  4838 ;; Defined at:
  4839 ;;		line 14 in file "io.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  pin             2    0[COMRAM] int 
  4842 ;;  value           2    2[COMRAM] int 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4854 ;;      Params:         4       0       0       0       0       0       0       0       0
  4855 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4856 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4857 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4858 ;;Total ram usage:        6 bytes
  4859 ;; Hardware stack levels used: 1
  4860 ;; This function calls:
  4861 ;;		Nothing
  4862 ;; This function is called by:
  4863 ;;		_clear_SCL
  4864 ;;		_clear_SDA
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text39
  4869   000ED6                     __ptext39:
  4870                           	callstack 0
  4871   000ED6                     _digitalWrite:
  4872                           	callstack 24
  4873   000ED6                     
  4874                           ;io.c: 16:     if(pin <8){
  4875   000ED6  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4876   000ED8  EF79  F007         	goto	u1690
  4877   000EDC  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4878   000EDE  E107               	bnz	u1691
  4879   000EE0  0E08               	movlw	8
  4880   000EE2  5C01               	subwf	digitalWrite@pin^0,w,c
  4881   000EE4  B0D8               	btfsc	status,0,c
  4882   000EE6  EF77  F007         	goto	u1691
  4883   000EEA  EF79  F007         	goto	u1690
  4884   000EEE                     u1691:
  4885   000EEE  EFA3  F007         	goto	l2623
  4886   000EF2                     u1690:
  4887   000EF2                     
  4888                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  4889   000EF2  5003               	movf	digitalWrite@value^0,w,c
  4890   000EF4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4891   000EF6  B4D8               	btfsc	status,2,c
  4892   000EF8  EF80  F007         	goto	u1701
  4893   000EFC  EF82  F007         	goto	u1700
  4894   000F00                     u1701:
  4895   000F00  EF92  F007         	goto	l2621
  4896   000F04                     u1700:
  4897   000F04  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4898   000F08  0E01               	movlw	1
  4899   000F0A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4900   000F0C  2A05               	incf	??_digitalWrite^0,f,c
  4901   000F0E  EF8B  F007         	goto	u1714
  4902   000F12                     u1715:
  4903   000F12  90D8               	bcf	status,0,c
  4904   000F14  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4905   000F16                     u1714:
  4906   000F16  2E05               	decfsz	??_digitalWrite^0,f,c
  4907   000F18  EF89  F007         	goto	u1715
  4908   000F1C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4909   000F1E  1280               	iorwf	128,f,c	;volatile
  4910   000F20  EF91  F008         	goto	l79
  4911   000F24                     l2621:
  4912   000F24  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4913   000F28  0E01               	movlw	1
  4914   000F2A  6E06               	movwf	(??_digitalWrite+1)^0,c
  4915   000F2C  2A05               	incf	??_digitalWrite^0,f,c
  4916   000F2E  EF9B  F007         	goto	u1724
  4917   000F32                     u1725:
  4918   000F32  90D8               	bcf	status,0,c
  4919   000F34  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4920   000F36                     u1724:
  4921   000F36  2E05               	decfsz	??_digitalWrite^0,f,c
  4922   000F38  EF99  F007         	goto	u1725
  4923   000F3C  5006               	movf	(??_digitalWrite+1)^0,w,c
  4924   000F3E  0AFF               	xorlw	255
  4925   000F40  1680               	andwf	128,f,c	;volatile
  4926   000F42  EF91  F008         	goto	l79
  4927   000F46                     l2623:
  4928   000F46  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4929   000F48  EFB1  F007         	goto	u1730
  4930   000F4C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4931   000F4E  E107               	bnz	u1731
  4932   000F50  0E10               	movlw	16
  4933   000F52  5C01               	subwf	digitalWrite@pin^0,w,c
  4934   000F54  B0D8               	btfsc	status,0,c
  4935   000F56  EFAF  F007         	goto	u1731
  4936   000F5A  EFB1  F007         	goto	u1730
  4937   000F5E                     u1731:
  4938   000F5E  EFDF  F007         	goto	l2631
  4939   000F62                     u1730:
  4940   000F62                     
  4941                           ;io.c: 20:         pin -=8;
  4942   000F62  0EF8               	movlw	248
  4943   000F64  2601               	addwf	digitalWrite@pin^0,f,c
  4944   000F66  0EFF               	movlw	255
  4945   000F68  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4946                           
  4947                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  4948   000F6A  5003               	movf	digitalWrite@value^0,w,c
  4949   000F6C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4950   000F6E  B4D8               	btfsc	status,2,c
  4951   000F70  EFBC  F007         	goto	u1741
  4952   000F74  EFBE  F007         	goto	u1740
  4953   000F78                     u1741:
  4954   000F78  EFCE  F007         	goto	l2629
  4955   000F7C                     u1740:
  4956   000F7C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4957   000F80  0E01               	movlw	1
  4958   000F82  6E06               	movwf	(??_digitalWrite+1)^0,c
  4959   000F84  2A05               	incf	??_digitalWrite^0,f,c
  4960   000F86  EFC7  F007         	goto	u1754
  4961   000F8A                     u1755:
  4962   000F8A  90D8               	bcf	status,0,c
  4963   000F8C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4964   000F8E                     u1754:
  4965   000F8E  2E05               	decfsz	??_digitalWrite^0,f,c
  4966   000F90  EFC5  F007         	goto	u1755
  4967   000F94  5006               	movf	(??_digitalWrite+1)^0,w,c
  4968   000F96  1281               	iorwf	129,f,c	;volatile
  4969   000F98  EF91  F008         	goto	l79
  4970   000F9C                     l2629:
  4971   000F9C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4972   000FA0  0E01               	movlw	1
  4973   000FA2  6E06               	movwf	(??_digitalWrite+1)^0,c
  4974   000FA4  2A05               	incf	??_digitalWrite^0,f,c
  4975   000FA6  EFD7  F007         	goto	u1764
  4976   000FAA                     u1765:
  4977   000FAA  90D8               	bcf	status,0,c
  4978   000FAC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4979   000FAE                     u1764:
  4980   000FAE  2E05               	decfsz	??_digitalWrite^0,f,c
  4981   000FB0  EFD5  F007         	goto	u1765
  4982   000FB4  5006               	movf	(??_digitalWrite+1)^0,w,c
  4983   000FB6  0AFF               	xorlw	255
  4984   000FB8  1681               	andwf	129,f,c	;volatile
  4985   000FBA  EF91  F008         	goto	l79
  4986   000FBE                     l2631:
  4987   000FBE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4988   000FC0  EFED  F007         	goto	u1770
  4989   000FC4  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4990   000FC6  E107               	bnz	u1771
  4991   000FC8  0E18               	movlw	24
  4992   000FCA  5C01               	subwf	digitalWrite@pin^0,w,c
  4993   000FCC  B0D8               	btfsc	status,0,c
  4994   000FCE  EFEB  F007         	goto	u1771
  4995   000FD2  EFED  F007         	goto	u1770
  4996   000FD6                     u1771:
  4997   000FD6  EF1B  F008         	goto	l2639
  4998   000FDA                     u1770:
  4999   000FDA                     
  5000                           ;io.c: 24:         pin -=16;
  5001   000FDA  0EF0               	movlw	240
  5002   000FDC  2601               	addwf	digitalWrite@pin^0,f,c
  5003   000FDE  0EFF               	movlw	255
  5004   000FE0  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5005                           
  5006                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  5007   000FE2  5003               	movf	digitalWrite@value^0,w,c
  5008   000FE4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5009   000FE6  B4D8               	btfsc	status,2,c
  5010   000FE8  EFF8  F007         	goto	u1781
  5011   000FEC  EFFA  F007         	goto	u1780
  5012   000FF0                     u1781:
  5013   000FF0  EF0A  F008         	goto	l2637
  5014   000FF4                     u1780:
  5015   000FF4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5016   000FF8  0E01               	movlw	1
  5017   000FFA  6E06               	movwf	(??_digitalWrite+1)^0,c
  5018   000FFC  2A05               	incf	??_digitalWrite^0,f,c
  5019   000FFE  EF03  F008         	goto	u1794
  5020   001002                     u1795:
  5021   001002  90D8               	bcf	status,0,c
  5022   001004  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5023   001006                     u1794:
  5024   001006  2E05               	decfsz	??_digitalWrite^0,f,c
  5025   001008  EF01  F008         	goto	u1795
  5026   00100C  5006               	movf	(??_digitalWrite+1)^0,w,c
  5027   00100E  1282               	iorwf	130,f,c	;volatile
  5028   001010  EF91  F008         	goto	l79
  5029   001014                     l2637:
  5030   001014  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5031   001018  0E01               	movlw	1
  5032   00101A  6E06               	movwf	(??_digitalWrite+1)^0,c
  5033   00101C  2A05               	incf	??_digitalWrite^0,f,c
  5034   00101E  EF13  F008         	goto	u1804
  5035   001022                     u1805:
  5036   001022  90D8               	bcf	status,0,c
  5037   001024  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5038   001026                     u1804:
  5039   001026  2E05               	decfsz	??_digitalWrite^0,f,c
  5040   001028  EF11  F008         	goto	u1805
  5041   00102C  5006               	movf	(??_digitalWrite+1)^0,w,c
  5042   00102E  0AFF               	xorlw	255
  5043   001030  1682               	andwf	130,f,c	;volatile
  5044   001032  EF91  F008         	goto	l79
  5045   001036                     l2639:
  5046   001036  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5047   001038  EF29  F008         	goto	u1810
  5048   00103C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5049   00103E  E107               	bnz	u1811
  5050   001040  0E20               	movlw	32
  5051   001042  5C01               	subwf	digitalWrite@pin^0,w,c
  5052   001044  B0D8               	btfsc	status,0,c
  5053   001046  EF27  F008         	goto	u1811
  5054   00104A  EF29  F008         	goto	u1810
  5055   00104E                     u1811:
  5056   00104E  EF57  F008         	goto	l2647
  5057   001052                     u1810:
  5058   001052                     
  5059                           ;io.c: 28:         pin -=24;
  5060   001052  0EE8               	movlw	232
  5061   001054  2601               	addwf	digitalWrite@pin^0,f,c
  5062   001056  0EFF               	movlw	255
  5063   001058  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5064                           
  5065                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  5066   00105A  5003               	movf	digitalWrite@value^0,w,c
  5067   00105C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5068   00105E  B4D8               	btfsc	status,2,c
  5069   001060  EF34  F008         	goto	u1821
  5070   001064  EF36  F008         	goto	u1820
  5071   001068                     u1821:
  5072   001068  EF46  F008         	goto	l2645
  5073   00106C                     u1820:
  5074   00106C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5075   001070  0E01               	movlw	1
  5076   001072  6E06               	movwf	(??_digitalWrite+1)^0,c
  5077   001074  2A05               	incf	??_digitalWrite^0,f,c
  5078   001076  EF3F  F008         	goto	u1834
  5079   00107A                     u1835:
  5080   00107A  90D8               	bcf	status,0,c
  5081   00107C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5082   00107E                     u1834:
  5083   00107E  2E05               	decfsz	??_digitalWrite^0,f,c
  5084   001080  EF3D  F008         	goto	u1835
  5085   001084  5006               	movf	(??_digitalWrite+1)^0,w,c
  5086   001086  1283               	iorwf	131,f,c	;volatile
  5087   001088  EF91  F008         	goto	l79
  5088   00108C                     l2645:
  5089   00108C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5090   001090  0E01               	movlw	1
  5091   001092  6E06               	movwf	(??_digitalWrite+1)^0,c
  5092   001094  2A05               	incf	??_digitalWrite^0,f,c
  5093   001096  EF4F  F008         	goto	u1844
  5094   00109A                     u1845:
  5095   00109A  90D8               	bcf	status,0,c
  5096   00109C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5097   00109E                     u1844:
  5098   00109E  2E05               	decfsz	??_digitalWrite^0,f,c
  5099   0010A0  EF4D  F008         	goto	u1845
  5100   0010A4  5006               	movf	(??_digitalWrite+1)^0,w,c
  5101   0010A6  0AFF               	xorlw	255
  5102   0010A8  1683               	andwf	131,f,c	;volatile
  5103   0010AA  EF91  F008         	goto	l79
  5104   0010AE                     l2647:
  5105   0010AE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5106   0010B0  EF65  F008         	goto	u1850
  5107   0010B4  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5108   0010B6  E107               	bnz	u1851
  5109   0010B8  0E28               	movlw	40
  5110   0010BA  5C01               	subwf	digitalWrite@pin^0,w,c
  5111   0010BC  B0D8               	btfsc	status,0,c
  5112   0010BE  EF63  F008         	goto	u1851
  5113   0010C2  EF65  F008         	goto	u1850
  5114   0010C6                     u1851:
  5115   0010C6  EF91  F008         	goto	l79
  5116   0010CA                     u1850:
  5117   0010CA                     
  5118                           ;io.c: 32:         pin -=32;
  5119   0010CA  0EE0               	movlw	224
  5120   0010CC  2601               	addwf	digitalWrite@pin^0,f,c
  5121   0010CE  0EFF               	movlw	255
  5122   0010D0  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5123                           
  5124                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  5125   0010D2  5003               	movf	digitalWrite@value^0,w,c
  5126   0010D4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5127   0010D6  B4D8               	btfsc	status,2,c
  5128   0010D8  EF70  F008         	goto	u1861
  5129   0010DC  EF72  F008         	goto	u1860
  5130   0010E0                     u1861:
  5131   0010E0  EF82  F008         	goto	l2653
  5132   0010E4                     u1860:
  5133   0010E4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5134   0010E8  0E01               	movlw	1
  5135   0010EA  6E06               	movwf	(??_digitalWrite+1)^0,c
  5136   0010EC  2A05               	incf	??_digitalWrite^0,f,c
  5137   0010EE  EF7B  F008         	goto	u1874
  5138   0010F2                     u1875:
  5139   0010F2  90D8               	bcf	status,0,c
  5140   0010F4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5141   0010F6                     u1874:
  5142   0010F6  2E05               	decfsz	??_digitalWrite^0,f,c
  5143   0010F8  EF79  F008         	goto	u1875
  5144   0010FC  5006               	movf	(??_digitalWrite+1)^0,w,c
  5145   0010FE  1284               	iorwf	132,f,c	;volatile
  5146   001100  EF91  F008         	goto	l79
  5147   001104                     l2653:
  5148   001104  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5149   001108  0E01               	movlw	1
  5150   00110A  6E06               	movwf	(??_digitalWrite+1)^0,c
  5151   00110C  2A05               	incf	??_digitalWrite^0,f,c
  5152   00110E  EF8B  F008         	goto	u1884
  5153   001112                     u1885:
  5154   001112  90D8               	bcf	status,0,c
  5155   001114  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5156   001116                     u1884:
  5157   001116  2E05               	decfsz	??_digitalWrite^0,f,c
  5158   001118  EF89  F008         	goto	u1885
  5159   00111C  5006               	movf	(??_digitalWrite+1)^0,w,c
  5160   00111E  0AFF               	xorlw	255
  5161   001120  1684               	andwf	132,f,c	;volatile
  5162   001122                     l79:
  5163   001122  0012               	return		;funcret
  5164   001124                     __end_of_digitalWrite:
  5165                           	callstack 0
  5166                           
  5167 ;; *************** function _I2C_delay *****************
  5168 ;; Defined at:
  5169 ;;		line 22 in file "soft_i2c.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  i               2    0        int 
  5174 ;;  v               2    0        volatile int 
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      void 
  5177 ;; Registers used:
  5178 ;;		None
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5184 ;;      Params:         0       0       0       0       0       0       0       0       0
  5185 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5187 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used: 1
  5190 ;; This function calls:
  5191 ;;		Nothing
  5192 ;; This function is called by:
  5193 ;;		_i2c_start
  5194 ;;		_i2c_stop
  5195 ;;		_i2c_write_bit
  5196 ;;		_i2c_read_bit
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text40
  5201   0021BA                     __ptext40:
  5202                           	callstack 0
  5203   0021BA                     _I2C_delay:
  5204                           	callstack 25
  5205   0021BA  0012               	return		;funcret
  5206   0021BC                     __end_of_I2C_delay:
  5207                           	callstack 0
  5208                           
  5209 ;; *************** function _setState *****************
  5210 ;; Defined at:
  5211 ;;		line 28 in file "var.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  newState        1    wreg     unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  newState        1    0[COMRAM] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5225 ;;      Params:         0       0       0       0       0       0       0       0       0
  5226 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5228 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5229 ;;Total ram usage:        1 bytes
  5230 ;; Hardware stack levels used: 1
  5231 ;; This function calls:
  5232 ;;		Nothing
  5233 ;; This function is called by:
  5234 ;;		_smInit
  5235 ;;		_smLoop
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text41
  5240   002194                     __ptext41:
  5241                           	callstack 0
  5242   002194                     _setState:
  5243                           	callstack 29
  5244                           
  5245                           ;incstack = 0
  5246                           ;setState@newState stored from wreg
  5247   002194  6E01               	movwf	setState@newState^0,c
  5248   002196                     
  5249                           ;var.c: 29:     state = newState;
  5250   002196  C001  F04C         	movff	setState@newState,_state
  5251   00219A  0012               	return		;funcret
  5252   00219C                     __end_of_setState:
  5253                           	callstack 0
  5254                           
  5255 ;; *************** function _eventInit *****************
  5256 ;; Defined at:
  5257 ;;		line 18 in file "event.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      void 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5271 ;;      Params:         0       0       0       0       0       0       0       0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5275 ;;Total ram usage:        0 bytes
  5276 ;; Hardware stack levels used: 1
  5277 ;; Hardware stack levels required when called: 1
  5278 ;; This function calls:
  5279 ;;		_kpInit
  5280 ;; This function is called by:
  5281 ;;		_smInit
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text42
  5286   00213C                     __ptext42:
  5287                           	callstack 0
  5288   00213C                     _eventInit:
  5289                           	callstack 28
  5290   00213C                     
  5291                           ;event.c: 19:     kpInit();
  5292   00213C  ECB9  F010         	call	_kpInit	;wreg free
  5293   002140                     
  5294                           ;event.c: 21:     ev_ant = 0;
  5295   002140  0E00               	movlw	0
  5296   002142  6E47               	movwf	(_ev_ant+1)^0,c
  5297   002144  0E00               	movlw	0
  5298   002146  6E46               	movwf	_ev_ant^0,c
  5299   002148                     
  5300                           ;event.c: 22:     key = 1;
  5301   002148  0E00               	movlw	0
  5302   00214A  6E43               	movwf	(_key+1)^0,c
  5303   00214C  0E01               	movlw	1
  5304   00214E  6E42               	movwf	_key^0,c
  5305   002150  0012               	return		;funcret
  5306   002152                     __end_of_eventInit:
  5307                           	callstack 0
  5308                           
  5309 ;; *************** function _kpInit *****************
  5310 ;; Defined at:
  5311 ;;		line 81 in file "keypad.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      void 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used: 1
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_main
  5335 ;;		_eventInit
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text43
  5340   002172                     __ptext43:
  5341                           	callstack 0
  5342   002172                     _kpInit:
  5343                           	callstack 28
  5344   002172                     
  5345                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  5346   002172  6893               	setf	147,c	;volatile
  5347   002174                     
  5348                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  5349   002174  9EF1               	bcf	241,7,c	;volatile
  5350   002176                     
  5351                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  5352   002176  0E0E               	movlw	14
  5353   002178  6EC1               	movwf	193,c	;volatile
  5354   00217A                     
  5355                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  5356   00217A  0E00               	movlw	0
  5357   00217C  6E63               	movwf	99,c	;volatile
  5358   00217E  0012               	return		;funcret
  5359   002180                     __end_of_kpInit:
  5360                           	callstack 0
  5361                           
  5362 ;; *************** function _serialInit *****************
  5363 ;; Defined at:
  5364 ;;		line 48 in file "serial.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0
  5379 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5381 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used: 1
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_main
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text44
  5392   0020F4                     __ptext44:
  5393                           	callstack 0
  5394   0020F4                     _serialInit:
  5395                           	callstack 30
  5396   0020F4                     
  5397                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  5398   0020F4  0E2C               	movlw	44
  5399   0020F6  6EAC               	movwf	172,c	;volatile
  5400                           
  5401                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  5402   0020F8  0E90               	movlw	144
  5403   0020FA  6EAB               	movwf	171,c	;volatile
  5404                           
  5405                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  5406   0020FC  0E08               	movlw	8
  5407   0020FE  6EB8               	movwf	184,c	;volatile
  5408                           
  5409                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  5410   002100  0E00               	movlw	0
  5411   002102  6EB0               	movwf	176,c	;volatile
  5412                           
  5413                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  5414   002104  0E22               	movlw	34
  5415   002106  6EAF               	movwf	175,c	;volatile
  5416   002108                     
  5417                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  5418   002108  8C94               	bsf	148,6,c	;volatile
  5419   00210A                     
  5420                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  5421   00210A  8E94               	bsf	148,7,c	;volatile
  5422   00210C  0012               	return		;funcret
  5423   00210E                     __end_of_serialInit:
  5424                           	callstack 0
  5425                           
  5426 ;; *************** function _lcdInit *****************
  5427 ;; Defined at:
  5428 ;;		line 117 in file "lcd.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;		None
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  i               1    3[COMRAM] unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5442 ;;      Params:         0       0       0       0       0       0       0       0       0
  5443 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5445 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5446 ;;Total ram usage:        1 bytes
  5447 ;; Hardware stack levels used: 1
  5448 ;; Hardware stack levels required when called: 3
  5449 ;; This function calls:
  5450 ;;		_Delay2ms
  5451 ;;		_lcdCommand
  5452 ;;		_lcdCommand4bits
  5453 ;; This function is called by:
  5454 ;;		_main
  5455 ;;		_outputInit
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text45
  5460   0019DC                     __ptext45:
  5461                           	callstack 0
  5462   0019DC                     _lcdInit:
  5463                           	callstack 27
  5464   0019DC                     
  5465                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  5466   0019DC  9095               	bcf	149,0,c	;volatile
  5467                           
  5468                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  5469   0019DE  9E95               	bcf	149,7,c	;volatile
  5470                           
  5471                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  5472   0019E0  9C95               	bcf	149,6,c	;volatile
  5473                           
  5474                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  5475   0019E2  9A95               	bcf	149,5,c	;volatile
  5476                           
  5477                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  5478   0019E4  9895               	bcf	149,4,c	;volatile
  5479                           
  5480                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  5481   0019E6  9495               	bcf	149,2,c	;volatile
  5482   0019E8                     
  5483                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  5484   0019E8  0E00               	movlw	0
  5485   0019EA  6E04               	movwf	lcdInit@i^0,c
  5486   0019EC                     l3333:
  5487                           
  5488                           ;lcd.c: 133:         Delay2ms();
  5489   0019EC  EC85  F00F         	call	_Delay2ms	;wreg free
  5490   0019F0  2A04               	incf	lcdInit@i^0,f,c
  5491   0019F2  0E06               	movlw	6
  5492   0019F4  6404               	cpfsgt	lcdInit@i^0,c
  5493   0019F6  EFFF  F00C         	goto	u2931
  5494   0019FA  EF01  F00D         	goto	u2930
  5495   0019FE                     u2931:
  5496   0019FE  EFF6  F00C         	goto	l3333
  5497   001A02                     u2930:
  5498   001A02                     
  5499                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  5500   001A02  0E00               	movlw	0
  5501   001A04  6E01               	movwf	lcdCommand4bits@data^0,c
  5502   001A06  0E30               	movlw	48
  5503   001A08  EC2A  F00D         	call	_lcdCommand4bits
  5504                           
  5505                           ;lcd.c: 138:     Delay2ms();
  5506   001A0C  EC85  F00F         	call	_Delay2ms	;wreg free
  5507                           
  5508                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  5509   001A10  0E00               	movlw	0
  5510   001A12  6E01               	movwf	lcdCommand4bits@data^0,c
  5511   001A14  0E30               	movlw	48
  5512   001A16  EC2A  F00D         	call	_lcdCommand4bits
  5513                           
  5514                           ;lcd.c: 142:     Delay2ms();
  5515   001A1A  EC85  F00F         	call	_Delay2ms	;wreg free
  5516                           
  5517                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  5518   001A1E  0E00               	movlw	0
  5519   001A20  6E01               	movwf	lcdCommand4bits@data^0,c
  5520   001A22  0E30               	movlw	48
  5521   001A24  EC2A  F00D         	call	_lcdCommand4bits
  5522                           
  5523                           ;lcd.c: 146:     Delay2ms();
  5524   001A28  EC85  F00F         	call	_Delay2ms	;wreg free
  5525                           
  5526                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  5527   001A2C  0E00               	movlw	0
  5528   001A2E  6E01               	movwf	lcdCommand4bits@data^0,c
  5529   001A30  0E20               	movlw	32
  5530   001A32  EC2A  F00D         	call	_lcdCommand4bits
  5531                           
  5532                           ;lcd.c: 150:     Delay2ms();
  5533   001A36  EC85  F00F         	call	_Delay2ms	;wreg free
  5534                           
  5535                           ;lcd.c: 153:     lcdCommand(0x28);
  5536   001A3A  0E28               	movlw	40
  5537   001A3C  EC4A  F00E         	call	_lcdCommand
  5538                           
  5539                           ;lcd.c: 154:     lcdCommand(0x06);
  5540   001A40  0E06               	movlw	6
  5541   001A42  EC4A  F00E         	call	_lcdCommand
  5542                           
  5543                           ;lcd.c: 156:     lcdCommand(0x0C);
  5544   001A46  0E0C               	movlw	12
  5545   001A48  EC4A  F00E         	call	_lcdCommand
  5546                           
  5547                           ;lcd.c: 157:     lcdCommand(0x01);
  5548   001A4C  0E01               	movlw	1
  5549   001A4E  EC4A  F00E         	call	_lcdCommand
  5550   001A52  0012               	return		;funcret
  5551   001A54                     __end_of_lcdInit:
  5552                           	callstack 0
  5553                           
  5554 ;; *************** function _lcdCommand *****************
  5555 ;; Defined at:
  5556 ;;		line 93 in file "lcd.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  cmd             1    wreg     unsigned char 
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;  cmd             1    2[COMRAM] unsigned char 
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2, status,0, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5570 ;;      Params:         0       0       0       0       0       0       0       0       0
  5571 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5573 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5574 ;;Total ram usage:        1 bytes
  5575 ;; Hardware stack levels used: 1
  5576 ;; Hardware stack levels required when called: 2
  5577 ;; This function calls:
  5578 ;;		_Delay2ms
  5579 ;;		_Delay40us
  5580 ;;		_lcdCommand4bits
  5581 ;; This function is called by:
  5582 ;;		_lcdInit
  5583 ;;		_outputPrint
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text46
  5588   001C94                     __ptext46:
  5589                           	callstack 0
  5590   001C94                     _lcdCommand:
  5591                           	callstack 26
  5592                           
  5593                           ;incstack = 0
  5594                           ;lcdCommand@cmd stored from wreg
  5595   001C94  6E03               	movwf	lcdCommand@cmd^0,c
  5596   001C96                     
  5597                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  5598   001C96  0E00               	movlw	0
  5599   001C98  6E01               	movwf	lcdCommand4bits@data^0,c
  5600   001C9A  5003               	movf	lcdCommand@cmd^0,w,c
  5601   001C9C  EC2A  F00D         	call	_lcdCommand4bits
  5602                           
  5603                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  5604   001CA0  0E00               	movlw	0
  5605   001CA2  6E01               	movwf	lcdCommand4bits@data^0,c
  5606   001CA4  3803               	swapf	lcdCommand@cmd^0,w,c
  5607   001CA6  0BF0               	andlw	240
  5608   001CA8  EC2A  F00D         	call	_lcdCommand4bits
  5609   001CAC                     
  5610                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  5611   001CAC  0E02               	movlw	2
  5612   001CAE  1803               	xorwf	lcdCommand@cmd^0,w,c
  5613   001CB0  B4D8               	btfsc	status,2,c
  5614   001CB2  EF5D  F00E         	goto	u2571
  5615   001CB6  EF5F  F00E         	goto	u2570
  5616   001CBA                     u2571:
  5617   001CBA  EF67  F00E         	goto	l3037
  5618   001CBE                     u2570:
  5619   001CBE  0403               	decf	lcdCommand@cmd^0,w,c
  5620   001CC0  A4D8               	btfss	status,2,c
  5621   001CC2  EF65  F00E         	goto	u2581
  5622   001CC6  EF67  F00E         	goto	u2580
  5623   001CCA                     u2581:
  5624   001CCA  EF6B  F00E         	goto	l3039
  5625   001CCE                     u2580:
  5626   001CCE                     l3037:
  5627                           
  5628                           ;lcd.c: 100:         Delay2ms();
  5629   001CCE  EC85  F00F         	call	_Delay2ms	;wreg free
  5630                           
  5631                           ;lcd.c: 102:     } else {
  5632   001CD2  EF6D  F00E         	goto	l180
  5633   001CD6                     l3039:
  5634                           
  5635                           ;lcd.c: 103:         Delay40us();
  5636   001CD6  EC87  F010         	call	_Delay40us	;wreg free
  5637   001CDA                     l180:
  5638   001CDA  0012               	return		;funcret
  5639   001CDC                     __end_of_lcdCommand:
  5640                           	callstack 0
  5641                           
  5642 ;; *************** function _lcdCommand4bits *****************
  5643 ;; Defined at:
  5644 ;;		line 52 in file "lcd.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  cmd             1    wreg     unsigned char 
  5647 ;;  data            1    0[COMRAM] unsigned char 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  cmd             1    1[COMRAM] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  1    wreg      void 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0, cstack
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5659 ;;      Params:         1       0       0       0       0       0       0       0       0
  5660 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5662 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5663 ;;Total ram usage:        2 bytes
  5664 ;; Hardware stack levels used: 1
  5665 ;; Hardware stack levels required when called: 1
  5666 ;; This function calls:
  5667 ;;		_pulseEnable
  5668 ;; This function is called by:
  5669 ;;		_lcdCommand
  5670 ;;		_lcdData
  5671 ;;		_lcdInit
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           	psect	text47
  5676   001A54                     __ptext47:
  5677                           	callstack 0
  5678   001A54                     _lcdCommand4bits:
  5679                           	callstack 25
  5680                           
  5681                           ;incstack = 0
  5682                           ;lcdCommand4bits@cmd stored from wreg
  5683   001A54  6E02               	movwf	lcdCommand4bits@cmd^0,c
  5684   001A56                     
  5685                           ;lcd.c: 54:     if (data) {
  5686   001A56  5001               	movf	lcdCommand4bits@data^0,w,c
  5687   001A58  B4D8               	btfsc	status,2,c
  5688   001A5A  EF31  F00D         	goto	u2241
  5689   001A5E  EF33  F00D         	goto	u2240
  5690   001A62                     u2241:
  5691   001A62  EF36  F00D         	goto	l2761
  5692   001A66                     u2240:
  5693   001A66                     
  5694                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  5695   001A66  8083               	bsf	131,0,c	;volatile
  5696                           
  5697                           ;lcd.c: 56:     } else {
  5698   001A68  EF37  F00D         	goto	l2763
  5699   001A6C                     l2761:
  5700                           
  5701                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  5702   001A6C  9083               	bcf	131,0,c	;volatile
  5703   001A6E                     l2763:
  5704                           
  5705                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  5706   001A6E  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  5707   001A70  EF3C  F00D         	goto	u2251
  5708   001A74  EF3E  F00D         	goto	u2250
  5709   001A78                     u2251:
  5710   001A78  EF41  F00D         	goto	l2767
  5711   001A7C                     u2250:
  5712   001A7C                     
  5713                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  5714   001A7C  8483               	bsf	131,2,c	;volatile
  5715                           
  5716                           ;lcd.c: 65:     } else {
  5717   001A7E  EF42  F00D         	goto	l2769
  5718   001A82                     l2767:
  5719                           
  5720                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  5721   001A82  9483               	bcf	131,2,c	;volatile
  5722   001A84                     l2769:
  5723                           
  5724                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  5725   001A84  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  5726   001A86  EF47  F00D         	goto	u2261
  5727   001A8A  EF49  F00D         	goto	u2260
  5728   001A8E                     u2261:
  5729   001A8E  EF4C  F00D         	goto	l2773
  5730   001A92                     u2260:
  5731   001A92                     
  5732                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  5733   001A92  8883               	bsf	131,4,c	;volatile
  5734                           
  5735                           ;lcd.c: 72:     } else {
  5736   001A94  EF4D  F00D         	goto	l2775
  5737   001A98                     l2773:
  5738                           
  5739                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  5740   001A98  9883               	bcf	131,4,c	;volatile
  5741   001A9A                     l2775:
  5742                           
  5743                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  5744   001A9A  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  5745   001A9C  EF52  F00D         	goto	u2271
  5746   001AA0  EF54  F00D         	goto	u2270
  5747   001AA4                     u2271:
  5748   001AA4  EF57  F00D         	goto	l2779
  5749   001AA8                     u2270:
  5750   001AA8                     
  5751                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  5752   001AA8  8A83               	bsf	131,5,c	;volatile
  5753                           
  5754                           ;lcd.c: 79:     } else {
  5755   001AAA  EF58  F00D         	goto	l2781
  5756   001AAE                     l2779:
  5757                           
  5758                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  5759   001AAE  9A83               	bcf	131,5,c	;volatile
  5760   001AB0                     l2781:
  5761                           
  5762                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  5763   001AB0  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  5764   001AB2  EF5D  F00D         	goto	u2281
  5765   001AB6  EF5F  F00D         	goto	u2280
  5766   001ABA                     u2281:
  5767   001ABA  EF62  F00D         	goto	l2785
  5768   001ABE                     u2280:
  5769   001ABE                     
  5770                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  5771   001ABE  8C83               	bsf	131,6,c	;volatile
  5772                           
  5773                           ;lcd.c: 86:     } else {
  5774   001AC0  EF63  F00D         	goto	l2787
  5775   001AC4                     l2785:
  5776                           
  5777                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  5778   001AC4  9C83               	bcf	131,6,c	;volatile
  5779   001AC6                     l2787:
  5780                           
  5781                           ;lcd.c: 90:     pulseEnable();
  5782   001AC6  ECCE  F010         	call	_pulseEnable	;wreg free
  5783   001ACA  0012               	return		;funcret
  5784   001ACC                     __end_of_lcdCommand4bits:
  5785                           	callstack 0
  5786                           
  5787 ;; *************** function _pulseEnable *****************
  5788 ;; Defined at:
  5789 ;;		line 47 in file "lcd.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0
  5804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5806 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5807 ;;Total ram usage:        0 bytes
  5808 ;; Hardware stack levels used: 1
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_lcdCommand4bits
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text48
  5817   00219C                     __ptext48:
  5818                           	callstack 0
  5819   00219C                     _pulseEnable:
  5820                           	callstack 25
  5821   00219C                     
  5822                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  5823   00219C  8E83               	bsf	131,7,c	;volatile
  5824                           
  5825                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  5826   00219E  9E83               	bcf	131,7,c	;volatile
  5827   0021A0  0012               	return		;funcret
  5828   0021A2                     __end_of_pulseEnable:
  5829                           	callstack 0
  5830                           
  5831 ;; *************** function _Delay40us *****************
  5832 ;; Defined at:
  5833 ;;		line 36 in file "lcd.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;		None
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  j               1    0[COMRAM] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      void 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5847 ;;      Params:         0       0       0       0       0       0       0       0       0
  5848 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5850 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5851 ;;Total ram usage:        1 bytes
  5852 ;; Hardware stack levels used: 1
  5853 ;; This function calls:
  5854 ;;		Nothing
  5855 ;; This function is called by:
  5856 ;;		_lcdCommand
  5857 ;;		_lcdData
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text49
  5862   00210E                     __ptext49:
  5863                           	callstack 0
  5864   00210E                     _Delay40us:
  5865                           	callstack 26
  5866   00210E                     
  5867                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  5868   00210E  0E00               	movlw	0
  5869   002110  6E01               	movwf	Delay40us@j^0,c
  5870   002112                     l2753:
  5871   002112  2A01               	incf	Delay40us@j^0,f,c
  5872   002114  0E43               	movlw	67
  5873   002116  6401               	cpfsgt	Delay40us@j^0,c
  5874   002118  EF90  F010         	goto	u2231
  5875   00211C  EF92  F010         	goto	u2230
  5876   002120                     u2231:
  5877   002120  EF89  F010         	goto	l2753
  5878   002124                     u2230:
  5879   002124  0012               	return		;funcret
  5880   002126                     __end_of_Delay40us:
  5881                           	callstack 0
  5882                           
  5883 ;; *************** function _Delay2ms *****************
  5884 ;; Defined at:
  5885 ;;		line 41 in file "lcd.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  k               1    1[COMRAM] unsigned char 
  5890 ;;  j               1    0[COMRAM] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5900 ;;      Params:         0       0       0       0       0       0       0       0       0
  5901 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5903 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5904 ;;Total ram usage:        2 bytes
  5905 ;; Hardware stack levels used: 1
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_lcdCommand
  5910 ;;		_lcdInit
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text50
  5915   001F0A                     __ptext50:
  5916                           	callstack 0
  5917   001F0A                     _Delay2ms:
  5918                           	callstack 27
  5919   001F0A                     
  5920                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  5921   001F0A  0E00               	movlw	0
  5922   001F0C  6E01               	movwf	Delay2ms@j^0,c
  5923   001F0E                     l2913:
  5924                           
  5925                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  5926   001F0E  0E00               	movlw	0
  5927   001F10  6E02               	movwf	Delay2ms@k^0,c
  5928   001F12                     l2919:
  5929   001F12  2A02               	incf	Delay2ms@k^0,f,c
  5930   001F14  0EB1               	movlw	177
  5931   001F16  6402               	cpfsgt	Delay2ms@k^0,c
  5932   001F18  EF90  F00F         	goto	u2431
  5933   001F1C  EF92  F00F         	goto	u2430
  5934   001F20                     u2431:
  5935   001F20  EF89  F00F         	goto	l2919
  5936   001F24                     u2430:
  5937   001F24  2A01               	incf	Delay2ms@j^0,f,c
  5938   001F26  0E13               	movlw	19
  5939   001F28  6401               	cpfsgt	Delay2ms@j^0,c
  5940   001F2A  EF99  F00F         	goto	u2441
  5941   001F2E  EF9B  F00F         	goto	u2440
  5942   001F32                     u2441:
  5943   001F32  EF87  F00F         	goto	l2913
  5944   001F36                     u2440:
  5945   001F36  0012               	return		;funcret
  5946   001F38                     __end_of_Delay2ms:
  5947                           	callstack 0
  5948                           
  5949 ;; *************** function _kpDebounce *****************
  5950 ;; Defined at:
  5951 ;;		line 33 in file "keypad.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  portes          5    8[COMRAM] unsigned char [5]
  5956 ;;  bits            5    3[COMRAM] unsigned char [5]
  5957 ;;  j               1   13[COMRAM] unsigned char 
  5958 ;;  i               1    0        unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      void 
  5961 ;; Registers used:
  5962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5968 ;;      Params:         0       0       0       0       0       0       0       0       0
  5969 ;;      Locals:        11       0       0       0       0       0       0       0       0
  5970 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5971 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5972 ;;Total ram usage:       14 bytes
  5973 ;; Hardware stack levels used: 1
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text51
  5982   001672                     __ptext51:
  5983                           	callstack 0
  5984   001672                     _kpDebounce:
  5985                           	callstack 30
  5986   001672                     
  5987                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  5988   001672  EE20  F009         	lfsr	2,kpDebounce@portes
  5989   001676  0E04               	movlw	4
  5990   001678                     u2841:
  5991   001678  6ADE               	clrf	postinc2,c
  5992   00167A  06E8               	decf	wreg,f,c
  5993   00167C  E2FD               	bc	u2841
  5994   00167E  CF81 F009          	movff	3969,kpDebounce@portes	;volatile
  5995   001682  CF81 F00A          	movff	3969,kpDebounce@portes+1	;volatile
  5996   001686  CF81 F00B          	movff	3969,kpDebounce@portes+2	;volatile
  5997   00168A  CF81 F00C          	movff	3969,kpDebounce@portes+3	;volatile
  5998   00168E  CF84 F00D          	movff	3972,kpDebounce@portes+4	;volatile
  5999   001692                     
  6000                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  6001   001692  EE20  F06A         	lfsr	2,kpDebounce@F15
  6002   001696  EE10  F004         	lfsr	1,kpDebounce@bits
  6003   00169A  0E04               	movlw	4
  6004   00169C                     u2851:
  6005   00169C  CFDB FFE3          	movff	plusw2,plusw1
  6006   0016A0  06E8               	decf	wreg,f,c
  6007   0016A2  E2FC               	bc	u2851
  6008   0016A4                     
  6009                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  6010   0016A4  0E00               	movlw	0
  6011   0016A6  6E0E               	movwf	kpDebounce@j^0,c
  6012   0016A8                     l3305:
  6013                           
  6014                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  6015   0016A8  500E               	movf	kpDebounce@j^0,w,c
  6016   0016AA  0F09               	addlw	low kpDebounce@portes
  6017   0016AC  6ED9               	movwf	fsr2l,c
  6018   0016AE  6ADA               	clrf	fsr2h,c
  6019   0016B0  50DF               	movf	indf2,w,c
  6020   0016B2  6E01               	movwf	??_kpDebounce^0,c
  6021   0016B4  500E               	movf	kpDebounce@j^0,w,c
  6022   0016B6  0F04               	addlw	low kpDebounce@bits
  6023   0016B8  6ED9               	movwf	fsr2l,c
  6024   0016BA  6ADA               	clrf	fsr2h,c
  6025   0016BC  50DF               	movf	indf2,w,c
  6026   0016BE  6E02               	movwf	(??_kpDebounce+1)^0,c
  6027   0016C0  0E01               	movlw	1
  6028   0016C2  6E03               	movwf	(??_kpDebounce+2)^0,c
  6029   0016C4  2A02               	incf	(??_kpDebounce+1)^0,f,c
  6030   0016C6  EF67  F00B         	goto	u2864
  6031   0016CA                     u2865:
  6032   0016CA  90D8               	bcf	status,0,c
  6033   0016CC  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  6034   0016CE                     u2864:
  6035   0016CE  2E02               	decfsz	(??_kpDebounce+1)^0,f,c
  6036   0016D0  EF65  F00B         	goto	u2865
  6037   0016D4  5003               	movf	(??_kpDebounce+2)^0,w,c
  6038   0016D6  1401               	andwf	??_kpDebounce^0,w,c
  6039   0016D8  0900               	iorlw	0
  6040   0016DA  A4D8               	btfss	status,2,c
  6041   0016DC  EF72  F00B         	goto	u2871
  6042   0016E0  EF74  F00B         	goto	u2870
  6043   0016E4                     u2871:
  6044   0016E4  EF84  F00B         	goto	l3309
  6045   0016E8                     u2870:
  6046   0016E8                     
  6047                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  6048   0016E8  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  6049   0016EC  0E01               	movlw	1
  6050   0016EE  6E02               	movwf	(??_kpDebounce+1)^0,c
  6051   0016F0  2A01               	incf	??_kpDebounce^0,f,c
  6052   0016F2  EF7D  F00B         	goto	u2884
  6053   0016F6                     u2885:
  6054   0016F6  90D8               	bcf	status,0,c
  6055   0016F8  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  6056   0016FA                     u2884:
  6057   0016FA  2E01               	decfsz	??_kpDebounce^0,f,c
  6058   0016FC  EF7B  F00B         	goto	u2885
  6059   001700  5002               	movf	(??_kpDebounce+1)^0,w,c
  6060   001702  1257               	iorwf	kpDebounce@valorNovo^0,f,c
  6061                           
  6062                           ;keypad.c: 65:             } else {
  6063   001704  EF93  F00B         	goto	l3311
  6064   001708                     l3309:
  6065                           
  6066                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  6067   001708  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  6068   00170C  0E01               	movlw	1
  6069   00170E  6E02               	movwf	(??_kpDebounce+1)^0,c
  6070   001710  2A01               	incf	??_kpDebounce^0,f,c
  6071   001712  EF8D  F00B         	goto	u2894
  6072   001716                     u2895:
  6073   001716  90D8               	bcf	status,0,c
  6074   001718  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  6075   00171A                     u2894:
  6076   00171A  2E01               	decfsz	??_kpDebounce^0,f,c
  6077   00171C  EF8B  F00B         	goto	u2895
  6078   001720  5002               	movf	(??_kpDebounce+1)^0,w,c
  6079   001722  0AFF               	xorlw	255
  6080   001724  1657               	andwf	kpDebounce@valorNovo^0,f,c
  6081   001726                     l3311:
  6082                           
  6083                           ;keypad.c: 68:         }
  6084   001726  2A0E               	incf	kpDebounce@j^0,f,c
  6085   001728  0E04               	movlw	4
  6086   00172A  640E               	cpfsgt	kpDebounce@j^0,c
  6087   00172C  EF9A  F00B         	goto	u2901
  6088   001730  EF9C  F00B         	goto	u2900
  6089   001734                     u2901:
  6090   001734  EF54  F00B         	goto	l3305
  6091   001738                     u2900:
  6092   001738                     
  6093                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  6094   001738  5057               	movf	kpDebounce@valorNovo^0,w,c
  6095   00173A  1856               	xorwf	kpDebounce@valorAntigo^0,w,c
  6096   00173C  A4D8               	btfss	status,2,c
  6097   00173E  EFA3  F00B         	goto	u2911
  6098   001742  EFA5  F00B         	goto	u2910
  6099   001746                     u2911:
  6100   001746  EFA8  F00B         	goto	l3319
  6101   00174A                     u2910:
  6102   00174A                     
  6103                           ;keypad.c: 70:         tempo--;
  6104   00174A  0658               	decf	kpDebounce@tempo^0,f,c
  6105                           
  6106                           ;keypad.c: 71:     } else {
  6107   00174C  EFAC  F00B         	goto	l136
  6108   001750                     l3319:
  6109                           
  6110                           ;keypad.c: 72:         tempo = 10;
  6111   001750  0E0A               	movlw	10
  6112   001752  6E58               	movwf	kpDebounce@tempo^0,c
  6113   001754                     
  6114                           ;keypad.c: 73:         valorAntigo = valorNovo;
  6115   001754  C057  F056         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  6116   001758                     l136:
  6117                           
  6118                           ;keypad.c: 75:     if (tempo == 0) {
  6119   001758  5058               	movf	kpDebounce@tempo^0,w,c
  6120   00175A  A4D8               	btfss	status,2,c
  6121   00175C  EFB2  F00B         	goto	u2921
  6122   001760  EFB4  F00B         	goto	u2920
  6123   001764                     u2921:
  6124   001764  EFB6  F00B         	goto	l138
  6125   001768                     u2920:
  6126   001768                     
  6127                           ;keypad.c: 76:         valor = valorAntigo;
  6128   001768  C056  F059         	movff	kpDebounce@valorAntigo,_valor
  6129   00176C                     l138:
  6130   00176C  0012               	return		;funcret
  6131   00176E                     __end_of_kpDebounce:
  6132                           	callstack 0
  6133                           
  6134 ;; *************** function _dsInit *****************
  6135 ;; Defined at:
  6136 ;;		line 17 in file "ds1307.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;                  1    wreg      void 
  6143 ;; Registers used:
  6144 ;;		wreg, status,2, status,0, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0
  6151 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6153 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6154 ;;Total ram usage:        0 bytes
  6155 ;; Hardware stack levels used: 1
  6156 ;; Hardware stack levels required when called: 2
  6157 ;; This function calls:
  6158 ;;		_i2cInit
  6159 ;; This function is called by:
  6160 ;;		_main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text52
  6165   0021A2                     __ptext52:
  6166                           	callstack 0
  6167   0021A2                     _dsInit:
  6168                           	callstack 28
  6169   0021A2                     
  6170                           ;ds1307.c: 18:  i2cInit();
  6171   0021A2  EC1E  F010         	call	_i2cInit	;wreg free
  6172   0021A6  0012               	return		;funcret
  6173   0021A8                     __end_of_dsInit:
  6174                           	callstack 0
  6175                           
  6176 ;; *************** function _i2cInit *****************
  6177 ;; Defined at:
  6178 ;;		line 14 in file "soft_i2c.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;		None
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6192 ;;      Params:         0       0       0       0       0       0       0       0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6195 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6196 ;;Total ram usage:        0 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; Hardware stack levels required when called: 1
  6199 ;; This function calls:
  6200 ;;		_pinMode
  6201 ;; This function is called by:
  6202 ;;		_dsInit
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text53
  6207   00203C                     __ptext53:
  6208                           	callstack 0
  6209   00203C                     _i2cInit:
  6210                           	callstack 28
  6211   00203C                     
  6212                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  6213   00203C  0E00               	movlw	0
  6214   00203E  6E02               	movwf	(pinMode@pin+1)^0,c
  6215   002040  0E08               	movlw	8
  6216   002042  6E01               	movwf	pinMode@pin^0,c
  6217   002044  0E00               	movlw	0
  6218   002046  6E04               	movwf	(pinMode@type+1)^0,c
  6219   002048  0E01               	movlw	1
  6220   00204A  6E03               	movwf	pinMode@type^0,c
  6221   00204C  EC92  F008         	call	_pinMode	;wreg free
  6222                           
  6223                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  6224   002050  0E00               	movlw	0
  6225   002052  6E02               	movwf	(pinMode@pin+1)^0,c
  6226   002054  0E09               	movlw	9
  6227   002056  6E01               	movwf	pinMode@pin^0,c
  6228   002058  0E00               	movlw	0
  6229   00205A  6E04               	movwf	(pinMode@type+1)^0,c
  6230   00205C  0E01               	movlw	1
  6231   00205E  6E03               	movwf	pinMode@type^0,c
  6232   002060  EC92  F008         	call	_pinMode	;wreg free
  6233   002064  0012               	return		;funcret
  6234   002066                     __end_of_i2cInit:
  6235                           	callstack 0
  6236                           
  6237 ;; *************** function _pinMode *****************
  6238 ;; Defined at:
  6239 ;;		line 54 in file "io.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  pin             2    0[COMRAM] int 
  6242 ;;  type            2    2[COMRAM] int 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;		None
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  1    wreg      void 
  6247 ;; Registers used:
  6248 ;;		wreg, status,2, status,0
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6254 ;;      Params:         4       0       0       0       0       0       0       0       0
  6255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6256 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6257 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6258 ;;Total ram usage:        6 bytes
  6259 ;; Hardware stack levels used: 1
  6260 ;; This function calls:
  6261 ;;		Nothing
  6262 ;; This function is called by:
  6263 ;;		_i2cInit
  6264 ;;		_read_SCL
  6265 ;;		_read_SDA
  6266 ;;		_clear_SCL
  6267 ;;		_clear_SDA
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text54
  6272   001124                     __ptext54:
  6273                           	callstack 0
  6274   001124                     _pinMode:
  6275                           	callstack 24
  6276   001124                     
  6277                           ;io.c: 56:     if(pin <8){
  6278   001124  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6279   001126  EFA0  F008         	goto	u1990
  6280   00112A  5002               	movf	(pinMode@pin+1)^0,w,c
  6281   00112C  E107               	bnz	u1991
  6282   00112E  0E08               	movlw	8
  6283   001130  5C01               	subwf	pinMode@pin^0,w,c
  6284   001132  B0D8               	btfsc	status,0,c
  6285   001134  EF9E  F008         	goto	u1991
  6286   001138  EFA0  F008         	goto	u1990
  6287   00113C                     u1991:
  6288   00113C  EFCA  F008         	goto	l2701
  6289   001140                     u1990:
  6290   001140                     
  6291                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  6292   001140  5003               	movf	pinMode@type^0,w,c
  6293   001142  1004               	iorwf	(pinMode@type+1)^0,w,c
  6294   001144  B4D8               	btfsc	status,2,c
  6295   001146  EFA7  F008         	goto	u2001
  6296   00114A  EFA9  F008         	goto	u2000
  6297   00114E                     u2001:
  6298   00114E  EFB9  F008         	goto	l2699
  6299   001152                     u2000:
  6300   001152  C001  F005         	movff	pinMode@pin,??_pinMode
  6301   001156  0E01               	movlw	1
  6302   001158  6E06               	movwf	(??_pinMode+1)^0,c
  6303   00115A  2A05               	incf	??_pinMode^0,f,c
  6304   00115C  EFB2  F008         	goto	u2014
  6305   001160                     u2015:
  6306   001160  90D8               	bcf	status,0,c
  6307   001162  3606               	rlcf	(??_pinMode+1)^0,f,c
  6308   001164                     u2014:
  6309   001164  2E05               	decfsz	??_pinMode^0,f,c
  6310   001166  EFB0  F008         	goto	u2015
  6311   00116A  5006               	movf	(??_pinMode+1)^0,w,c
  6312   00116C  1292               	iorwf	146,f,c	;volatile
  6313   00116E  EFB8  F009         	goto	l113
  6314   001172                     l2699:
  6315   001172  C001  F005         	movff	pinMode@pin,??_pinMode
  6316   001176  0E01               	movlw	1
  6317   001178  6E06               	movwf	(??_pinMode+1)^0,c
  6318   00117A  2A05               	incf	??_pinMode^0,f,c
  6319   00117C  EFC2  F008         	goto	u2024
  6320   001180                     u2025:
  6321   001180  90D8               	bcf	status,0,c
  6322   001182  3606               	rlcf	(??_pinMode+1)^0,f,c
  6323   001184                     u2024:
  6324   001184  2E05               	decfsz	??_pinMode^0,f,c
  6325   001186  EFC0  F008         	goto	u2025
  6326   00118A  5006               	movf	(??_pinMode+1)^0,w,c
  6327   00118C  0AFF               	xorlw	255
  6328   00118E  1692               	andwf	146,f,c	;volatile
  6329   001190  EFB8  F009         	goto	l113
  6330   001194                     l2701:
  6331   001194  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6332   001196  EFD8  F008         	goto	u2030
  6333   00119A  5002               	movf	(pinMode@pin+1)^0,w,c
  6334   00119C  E107               	bnz	u2031
  6335   00119E  0E10               	movlw	16
  6336   0011A0  5C01               	subwf	pinMode@pin^0,w,c
  6337   0011A2  B0D8               	btfsc	status,0,c
  6338   0011A4  EFD6  F008         	goto	u2031
  6339   0011A8  EFD8  F008         	goto	u2030
  6340   0011AC                     u2031:
  6341   0011AC  EF06  F009         	goto	l2709
  6342   0011B0                     u2030:
  6343   0011B0                     
  6344                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  6345   0011B0  5003               	movf	pinMode@type^0,w,c
  6346   0011B2  1004               	iorwf	(pinMode@type+1)^0,w,c
  6347   0011B4  B4D8               	btfsc	status,2,c
  6348   0011B6  EFDF  F008         	goto	u2041
  6349   0011BA  EFE1  F008         	goto	u2040
  6350   0011BE                     u2041:
  6351   0011BE  EFF3  F008         	goto	l2707
  6352   0011C2                     u2040:
  6353   0011C2  C001  F005         	movff	pinMode@pin,??_pinMode
  6354   0011C6  0EF8               	movlw	-8
  6355   0011C8  2605               	addwf	??_pinMode^0,f,c
  6356   0011CA  0E01               	movlw	1
  6357   0011CC  6E06               	movwf	(??_pinMode+1)^0,c
  6358   0011CE  2A05               	incf	??_pinMode^0,f,c
  6359   0011D0  EFEC  F008         	goto	u2054
  6360   0011D4                     u2055:
  6361   0011D4  90D8               	bcf	status,0,c
  6362   0011D6  3606               	rlcf	(??_pinMode+1)^0,f,c
  6363   0011D8                     u2054:
  6364   0011D8  2E05               	decfsz	??_pinMode^0,f,c
  6365   0011DA  EFEA  F008         	goto	u2055
  6366   0011DE  5006               	movf	(??_pinMode+1)^0,w,c
  6367   0011E0  1293               	iorwf	147,f,c	;volatile
  6368   0011E2  EFB8  F009         	goto	l113
  6369   0011E6                     l2707:
  6370   0011E6  C001  F005         	movff	pinMode@pin,??_pinMode
  6371   0011EA  0EF8               	movlw	-8
  6372   0011EC  2605               	addwf	??_pinMode^0,f,c
  6373   0011EE  0E01               	movlw	1
  6374   0011F0  6E06               	movwf	(??_pinMode+1)^0,c
  6375   0011F2  2A05               	incf	??_pinMode^0,f,c
  6376   0011F4  EFFE  F008         	goto	u2064
  6377   0011F8                     u2065:
  6378   0011F8  90D8               	bcf	status,0,c
  6379   0011FA  3606               	rlcf	(??_pinMode+1)^0,f,c
  6380   0011FC                     u2064:
  6381   0011FC  2E05               	decfsz	??_pinMode^0,f,c
  6382   0011FE  EFFC  F008         	goto	u2065
  6383   001202  5006               	movf	(??_pinMode+1)^0,w,c
  6384   001204  0AFF               	xorlw	255
  6385   001206  1693               	andwf	147,f,c	;volatile
  6386   001208  EFB8  F009         	goto	l113
  6387   00120C                     l2709:
  6388   00120C  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6389   00120E  EF14  F009         	goto	u2070
  6390   001212  5002               	movf	(pinMode@pin+1)^0,w,c
  6391   001214  E107               	bnz	u2071
  6392   001216  0E18               	movlw	24
  6393   001218  5C01               	subwf	pinMode@pin^0,w,c
  6394   00121A  B0D8               	btfsc	status,0,c
  6395   00121C  EF12  F009         	goto	u2071
  6396   001220  EF14  F009         	goto	u2070
  6397   001224                     u2071:
  6398   001224  EF42  F009         	goto	l2717
  6399   001228                     u2070:
  6400   001228                     
  6401                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  6402   001228  5003               	movf	pinMode@type^0,w,c
  6403   00122A  1004               	iorwf	(pinMode@type+1)^0,w,c
  6404   00122C  B4D8               	btfsc	status,2,c
  6405   00122E  EF1B  F009         	goto	u2081
  6406   001232  EF1D  F009         	goto	u2080
  6407   001236                     u2081:
  6408   001236  EF2F  F009         	goto	l2715
  6409   00123A                     u2080:
  6410   00123A  C001  F005         	movff	pinMode@pin,??_pinMode
  6411   00123E  0EF0               	movlw	-16
  6412   001240  2605               	addwf	??_pinMode^0,f,c
  6413   001242  0E01               	movlw	1
  6414   001244  6E06               	movwf	(??_pinMode+1)^0,c
  6415   001246  2A05               	incf	??_pinMode^0,f,c
  6416   001248  EF28  F009         	goto	u2094
  6417   00124C                     u2095:
  6418   00124C  90D8               	bcf	status,0,c
  6419   00124E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6420   001250                     u2094:
  6421   001250  2E05               	decfsz	??_pinMode^0,f,c
  6422   001252  EF26  F009         	goto	u2095
  6423   001256  5006               	movf	(??_pinMode+1)^0,w,c
  6424   001258  1294               	iorwf	148,f,c	;volatile
  6425   00125A  EFB8  F009         	goto	l113
  6426   00125E                     l2715:
  6427   00125E  C001  F005         	movff	pinMode@pin,??_pinMode
  6428   001262  0EF0               	movlw	-16
  6429   001264  2605               	addwf	??_pinMode^0,f,c
  6430   001266  0E01               	movlw	1
  6431   001268  6E06               	movwf	(??_pinMode+1)^0,c
  6432   00126A  2A05               	incf	??_pinMode^0,f,c
  6433   00126C  EF3A  F009         	goto	u2104
  6434   001270                     u2105:
  6435   001270  90D8               	bcf	status,0,c
  6436   001272  3606               	rlcf	(??_pinMode+1)^0,f,c
  6437   001274                     u2104:
  6438   001274  2E05               	decfsz	??_pinMode^0,f,c
  6439   001276  EF38  F009         	goto	u2105
  6440   00127A  5006               	movf	(??_pinMode+1)^0,w,c
  6441   00127C  0AFF               	xorlw	255
  6442   00127E  1694               	andwf	148,f,c	;volatile
  6443   001280  EFB8  F009         	goto	l113
  6444   001284                     l2717:
  6445   001284  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6446   001286  EF50  F009         	goto	u2110
  6447   00128A  5002               	movf	(pinMode@pin+1)^0,w,c
  6448   00128C  E107               	bnz	u2111
  6449   00128E  0E20               	movlw	32
  6450   001290  5C01               	subwf	pinMode@pin^0,w,c
  6451   001292  B0D8               	btfsc	status,0,c
  6452   001294  EF4E  F009         	goto	u2111
  6453   001298  EF50  F009         	goto	u2110
  6454   00129C                     u2111:
  6455   00129C  EF7E  F009         	goto	l2725
  6456   0012A0                     u2110:
  6457   0012A0                     
  6458                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  6459   0012A0  5003               	movf	pinMode@type^0,w,c
  6460   0012A2  1004               	iorwf	(pinMode@type+1)^0,w,c
  6461   0012A4  B4D8               	btfsc	status,2,c
  6462   0012A6  EF57  F009         	goto	u2121
  6463   0012AA  EF59  F009         	goto	u2120
  6464   0012AE                     u2121:
  6465   0012AE  EF6B  F009         	goto	l2723
  6466   0012B2                     u2120:
  6467   0012B2  C001  F005         	movff	pinMode@pin,??_pinMode
  6468   0012B6  0EE8               	movlw	-24
  6469   0012B8  2605               	addwf	??_pinMode^0,f,c
  6470   0012BA  0E01               	movlw	1
  6471   0012BC  6E06               	movwf	(??_pinMode+1)^0,c
  6472   0012BE  2A05               	incf	??_pinMode^0,f,c
  6473   0012C0  EF64  F009         	goto	u2134
  6474   0012C4                     u2135:
  6475   0012C4  90D8               	bcf	status,0,c
  6476   0012C6  3606               	rlcf	(??_pinMode+1)^0,f,c
  6477   0012C8                     u2134:
  6478   0012C8  2E05               	decfsz	??_pinMode^0,f,c
  6479   0012CA  EF62  F009         	goto	u2135
  6480   0012CE  5006               	movf	(??_pinMode+1)^0,w,c
  6481   0012D0  1295               	iorwf	149,f,c	;volatile
  6482   0012D2  EFB8  F009         	goto	l113
  6483   0012D6                     l2723:
  6484   0012D6  C001  F005         	movff	pinMode@pin,??_pinMode
  6485   0012DA  0EE8               	movlw	-24
  6486   0012DC  2605               	addwf	??_pinMode^0,f,c
  6487   0012DE  0E01               	movlw	1
  6488   0012E0  6E06               	movwf	(??_pinMode+1)^0,c
  6489   0012E2  2A05               	incf	??_pinMode^0,f,c
  6490   0012E4  EF76  F009         	goto	u2144
  6491   0012E8                     u2145:
  6492   0012E8  90D8               	bcf	status,0,c
  6493   0012EA  3606               	rlcf	(??_pinMode+1)^0,f,c
  6494   0012EC                     u2144:
  6495   0012EC  2E05               	decfsz	??_pinMode^0,f,c
  6496   0012EE  EF74  F009         	goto	u2145
  6497   0012F2  5006               	movf	(??_pinMode+1)^0,w,c
  6498   0012F4  0AFF               	xorlw	255
  6499   0012F6  1695               	andwf	149,f,c	;volatile
  6500   0012F8  EFB8  F009         	goto	l113
  6501   0012FC                     l2725:
  6502   0012FC  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6503   0012FE  EF8C  F009         	goto	u2150
  6504   001302  5002               	movf	(pinMode@pin+1)^0,w,c
  6505   001304  E107               	bnz	u2151
  6506   001306  0E28               	movlw	40
  6507   001308  5C01               	subwf	pinMode@pin^0,w,c
  6508   00130A  B0D8               	btfsc	status,0,c
  6509   00130C  EF8A  F009         	goto	u2151
  6510   001310  EF8C  F009         	goto	u2150
  6511   001314                     u2151:
  6512   001314  EFB8  F009         	goto	l113
  6513   001318                     u2150:
  6514   001318                     
  6515                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  6516   001318  5003               	movf	pinMode@type^0,w,c
  6517   00131A  1004               	iorwf	(pinMode@type+1)^0,w,c
  6518   00131C  B4D8               	btfsc	status,2,c
  6519   00131E  EF93  F009         	goto	u2161
  6520   001322  EF95  F009         	goto	u2160
  6521   001326                     u2161:
  6522   001326  EFA7  F009         	goto	l2731
  6523   00132A                     u2160:
  6524   00132A  C001  F005         	movff	pinMode@pin,??_pinMode
  6525   00132E  0EE0               	movlw	-32
  6526   001330  2605               	addwf	??_pinMode^0,f,c
  6527   001332  0E01               	movlw	1
  6528   001334  6E06               	movwf	(??_pinMode+1)^0,c
  6529   001336  2A05               	incf	??_pinMode^0,f,c
  6530   001338  EFA0  F009         	goto	u2174
  6531   00133C                     u2175:
  6532   00133C  90D8               	bcf	status,0,c
  6533   00133E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6534   001340                     u2174:
  6535   001340  2E05               	decfsz	??_pinMode^0,f,c
  6536   001342  EF9E  F009         	goto	u2175
  6537   001346  5006               	movf	(??_pinMode+1)^0,w,c
  6538   001348  1296               	iorwf	150,f,c	;volatile
  6539   00134A  EFB8  F009         	goto	l113
  6540   00134E                     l2731:
  6541   00134E  C001  F005         	movff	pinMode@pin,??_pinMode
  6542   001352  0EE0               	movlw	-32
  6543   001354  2605               	addwf	??_pinMode^0,f,c
  6544   001356  0E01               	movlw	1
  6545   001358  6E06               	movwf	(??_pinMode+1)^0,c
  6546   00135A  2A05               	incf	??_pinMode^0,f,c
  6547   00135C  EFB2  F009         	goto	u2184
  6548   001360                     u2185:
  6549   001360  90D8               	bcf	status,0,c
  6550   001362  3606               	rlcf	(??_pinMode+1)^0,f,c
  6551   001364                     u2184:
  6552   001364  2E05               	decfsz	??_pinMode^0,f,c
  6553   001366  EFB0  F009         	goto	u2185
  6554   00136A  5006               	movf	(??_pinMode+1)^0,w,c
  6555   00136C  0AFF               	xorlw	255
  6556   00136E  1696               	andwf	150,f,c	;volatile
  6557   001370                     l113:
  6558   001370  0012               	return		;funcret
  6559   001372                     __end_of_pinMode:
  6560                           	callstack 0
  6561                           
  6562                           	psect	rparam
  6563   000000                     
  6564                           	psect	config
  6565                           
  6566                           ;Config register CONFIG1L @ 0x300000
  6567                           ;	unspecified, using default values
  6568                           ;	PLL Prescaler Selection bits
  6569                           ;	PLLDIV = 0x0, unprogrammed default
  6570                           ;	System Clock Postscaler Selection bits
  6571                           ;	CPUDIV = 0x0, unprogrammed default
  6572                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  6573                           ;	USBDIV = 0x0, unprogrammed default
  6574   300000                     	org	3145728
  6575   300000  00                 	db	0
  6576                           
  6577                           ;Config register CONFIG1H @ 0x300001
  6578                           ;	Oscillator Selection bits
  6579                           ;	FOSC = HS, HS oscillator (HS)
  6580                           ;	Fail-Safe Clock Monitor Enable bit
  6581                           ;	FCMEN = 0x0, unprogrammed default
  6582                           ;	Internal/External Oscillator Switchover bit
  6583                           ;	IESO = 0x0, unprogrammed default
  6584   300001                     	org	3145729
  6585   300001  0C                 	db	12
  6586                           
  6587                           ;Config register CONFIG2L @ 0x300002
  6588                           ;	unspecified, using default values
  6589                           ;	Power-up Timer Enable bit
  6590                           ;	PWRT = 0x1, unprogrammed default
  6591                           ;	Brown-out Reset Enable bits
  6592                           ;	BOR = 0x3, unprogrammed default
  6593                           ;	Brown-out Reset Voltage bits
  6594                           ;	BORV = 0x3, unprogrammed default
  6595                           ;	USB Voltage Regulator Enable bit
  6596                           ;	VREGEN = 0x0, unprogrammed default
  6597   300002                     	org	3145730
  6598   300002  1F                 	db	31
  6599                           
  6600                           ;Config register CONFIG2H @ 0x300003
  6601                           ;	Watchdog Timer Enable bit
  6602                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6603                           ;	Watchdog Timer Postscale Select bits
  6604                           ;	WDTPS = 0xF, unprogrammed default
  6605   300003                     	org	3145731
  6606   300003  1E                 	db	30
  6607                           
  6608                           ; Padding undefined space
  6609   300004                     	org	3145732
  6610   300004  FF                 	db	255
  6611                           
  6612                           ;Config register CONFIG3H @ 0x300005
  6613                           ;	CCP2 MUX bit
  6614                           ;	CCP2MX = 0x1, unprogrammed default
  6615                           ;	PORTB A/D Enable bit
  6616                           ;	PBADEN = 0x1, unprogrammed default
  6617                           ;	Low-Power Timer 1 Oscillator Enable bit
  6618                           ;	LPT1OSC = 0x0, unprogrammed default
  6619                           ;	MCLR Pin Enable bit
  6620                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6621   300005                     	org	3145733
  6622   300005  83                 	db	131
  6623                           
  6624                           ;Config register CONFIG4L @ 0x300006
  6625                           ;	Stack Full/Underflow Reset Enable bit
  6626                           ;	STVREN = 0x1, unprogrammed default
  6627                           ;	Single-Supply ICSP Enable bit
  6628                           ;	LVP = OFF, Single-Supply ICSP disabled
  6629                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  6630                           ;	ICPRT = 0x0, unprogrammed default
  6631                           ;	Extended Instruction Set Enable bit
  6632                           ;	XINST = 0x0, unprogrammed default
  6633                           ;	Background Debugger Enable bit
  6634                           ;	DEBUG = 0x1, unprogrammed default
  6635   300006                     	org	3145734
  6636   300006  81                 	db	129
  6637                           
  6638                           ; Padding undefined space
  6639   300007                     	org	3145735
  6640   300007  FF                 	db	255
  6641                           tosu	equ	0xFFF
  6642                           tosh	equ	0xFFE
  6643                           tosl	equ	0xFFD
  6644                           stkptr	equ	0xFFC
  6645                           pclatu	equ	0xFFB
  6646                           pclath	equ	0xFFA
  6647                           pcl	equ	0xFF9
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           indf0	equ	0xFEF
  6655                           postinc0	equ	0xFEE
  6656                           postdec0	equ	0xFED
  6657                           preinc0	equ	0xFEC
  6658                           plusw0	equ	0xFEB
  6659                           fsr0h	equ	0xFEA
  6660                           fsr0l	equ	0xFE9
  6661                           wreg	equ	0xFE8
  6662                           indf1	equ	0xFE7
  6663                           postinc1	equ	0xFE6
  6664                           postdec1	equ	0xFE5
  6665                           preinc1	equ	0xFE4
  6666                           plusw1	equ	0xFE3
  6667                           fsr1h	equ	0xFE2
  6668                           fsr1l	equ	0xFE1
  6669                           bsr	equ	0xFE0
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           preinc2	equ	0xFDC
  6674                           plusw2	equ	0xFDB
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        17
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     59      91
    BANK0           160      0      25
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eventRead@prot	PTR unsigned char  size(1) Largest target is 5
		 -> prot(BANK0[5]), 

    lcdString@str	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[12]), STR_11(CODE[12]), STR_12(CODE[17]), 
		 -> STR_13(CODE[17]), STR_14(CODE[12]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), 
		 -> STR_8(CODE[16]), STR_9(CODE[12]), 

    msgs	PTR unsigned char [2][5] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), STR_8(CODE[16]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 5
		 -> prot(BANK0[5]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 5
		 -> prot(BANK0[5]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_setAlarmLevel
    _setAlarmLevel->_dsWriteData
    _dsWriteData->_dec2bcd
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->___awmod
    _lcdData->_lcdCommand4bits
    _bcd2dec->___wmul
    ___wmul->___awdiv
    _eventRead->_getProt
    _dec2bcd->___awmod
    ___awmod->_bcd2dec
    ___awdiv->_dsReadData
    _varInit->_dsReadData
    _dsReadData->_i2cReadByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  234342
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               5     5      0  183722
                                             54 COMRAM     5     5      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                            _getProt
                           _getState
                        _outputPrint
                          _resetProt
                      _setAlarmLevel
                        _setLanguage
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        3     0      3   28437
                                             51 COMRAM     3     0      3
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   27763
                                             48 COMRAM     3     1      2
                            _bcd2dec (ARG)
                            _dec2bcd (ARG)
                         _dsReadData (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          8     4      4   68494
                                             44 COMRAM     8     4      4
                            ___awdiv
                            ___awmod
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            1     0      1    1613
                                              3 COMRAM     1     0      1
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    6727
                                             42 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getTime                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        4     2      2     502
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _bcd2dec                                              4     2      2    4743
                                             32 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1815
                                             26 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            9     7      2     370
                                              2 COMRAM     9     7      2
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _dec2bcd                                              6     4      2    5603
                                             42 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    3032
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2428
                                             18 COMRAM     8     4      4
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0   47189
                          _eventInit
                           _setState
                            _varInit
 ---------------------------------------------------------------------------------
 (2) _varInit                                              0     0      0   47167
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   47167
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     279
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
     _varInit
       _dsReadData
         _i2cReadByte
           _i2c_read_bit
             _I2C_delay
             _clear_SCL
               _digitalWrite
               _pinMode
             _read_SCL
               _digitalRead
               _pinMode
             _read_SDA
               _digitalRead
               _pinMode
           _i2c_stop
             _I2C_delay
             _clear_SDA
               _digitalWrite
               _pinMode
             _read_SCL
             _read_SDA
           _i2c_write_bit
             _I2C_delay
             _clear_SCL
             _clear_SDA
             _read_SCL
             _read_SDA
         _i2cWriteByte
           _i2c_read_bit
           _i2c_start
             _I2C_delay
             _clear_SCL
             _clear_SDA
             _read_SCL
             _read_SDA
           _i2c_stop
           _i2c_write_bit
   _smLoop
     _bcd2dec
       ___awdiv
         _dsReadData (ARG)
       ___wmul
         ___awdiv (ARG)
       _dsReadData (ARG)
     _dec2bcd
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         _bcd2dec (ARG)
         _dsReadData (ARG)
       _bcd2dec (ARG)
       _dsReadData (ARG)
     _dsReadData
     _dsWriteData
       _bcd2dec (ARG)
       _dec2bcd (ARG)
       _dsReadData (ARG)
       _i2cWriteByte (ARG)
     _eventRead
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setProt
     _getAlarmLevel
     _getLanguage
     _getProt
     _getState
     _outputPrint
       ___awdiv
       ___awmod
       _bcd2dec
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _getTime (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _resetProt
     _setAlarmLevel
       _dsWriteData
       _getAlarmLevel (ARG)
     _setLanguage
     _setState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      19       5       15.6%
BITBIGSFRhh         69      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3B      5B       1       95.8%
BITBIGSFRl          20      0       0      23        0.0%
BITBIGSFRhlh         8      0       0      21        0.0%
BITBIGSFRhll         4      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      24        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jun 18 17:26:51 2024

     __end_of_setAlarmLevel 1F90                          l22 1B2C                          l25 1DA8  
                        l34 1EAC                          l28 21A6                          l37 1D20  
                        l83 1670                          l84 166C                          l79 1122  
                        l88 166C                lcdString@str 0004                ___awdiv@sign 0018  
                        _v0 0052                          _v1 0051                          _v2 0050  
                        _v3 004F                          _de 0055                          _ev 005A  
       ___wmul@multiplicand 001D               ??_i2cReadByte 0009       i2cWriteByte@send_stop 0008  
            i2cReadByte@bit 000B                         l113 1370                         l141 217E  
                       l150 2124                         l118 21B2                         l136 1758  
                       l160 21A0                         l400 1E7E                         l138 176C  
                       l180 1CDA                         l157 1F36                         l173 1ACA  
                       l413 1C92                         l341 1FE6                         l333 2128  
                       l510 14FE                         l407 1B8C                         l183 20F2  
                       l344 210C                         l336 213A                         l512 1506  
                       l353 2064                         l362 1DE0                         l194 1E4C  
                       l188 1A52                         l356 21BA                         l365 203A  
                       l701 1EDA                         l621 0AD4                         l198 1866  
                       l630 0BE2                         l359 1E18                         l368 2010  
                       l704 20B2                         l385 1F08                         l394 1C3E  
                       l378 1D66                         l660 20D4                         l558 0ED4  
                       l663 21AE                         l680 1F8A                         l489 2150  
                       l666 219A                         l682 1F8E                         l691 21B6  
                       l675 1FAC                         l676 1FB2                         l597 2160  
                       l677 1FBA                         l685 21AA                         l669 2192  
                       l935 192A                         l695 208C                         l688 2188  
                       l948 19DA                         _key 0042                ___awmod@sign 002A  
                       wreg 0FE8            i2c_write_bit@bit 0007               ?_i2cWriteByte 0008  
    i2cWriteByte@send_start 000A             i2cReadByte@nack 000A             i2cReadByte@byte 000D  
                      l3001 19A6                        l3011 19D2                        l3003 19AE  
                      l2205 20F4                        l3021 1D18                        l3005 19B4  
                      l3101 21A8                        l3111 203C                        l3031 1C96  
                      l2207 2108                        l3007 19BA                        l3015 1D68  
                      l3033 1CAC                        l2209 210A                        l3009 19CA  
                      l3105 1ACC                        l3121 13AC                        l3113 1372  
                      l3041 1E1A                        l3201 0C66                        l3025 1E82  
                      l3035 1CBE                        l3019 1CDC                        l3107 1B24  
                      l3027 21B0                        l3131 13E0                        l3123 13B4  
                      l3115 137A                        l3051 177C                        l3043 1E1E  
                      l3211 0CB4                        l3203 0C7E                        l3037 1CCE  
                      l3141 1414                        l3133 13EE                        l3125 13C2  
                      l3117 1386                        l3061 181A                        l3053 1784  
                      l3045 1E2E                        l3221 0CF4                        l3213 0CBA  
                      l3205 0C86                        l3311 1726                        l3039 1CD6  
                      l3071 1FC0                        l3143 141A                        l3135 13F6  
                      l3127 13CA                        l3119 139E                        l3063 184A  
                      l3055 178A                        l3047 1E30                        l3231 0D40  
                      l3223 0D0A                        l3215 0CD2                        l3207 0C98  
                      l3321 1754                        l3313 1728                        l3305 16A8  
                      l3073 1FCE                        l3065 2128                        l3161 1480  
                      l3153 1450                        l3145 1420                        l3137 1404  
                      l3129 13D8                        l3057 17BA                        l3049 176E  
                      l3241 0DE6                        l3225 0D10                        l3233 0D48  
                      l3209 0C9E                        l3217 0CDA                        l3401 0A3C  
                      l3323 1768                        l3315 1738                        l3307 16E8  
                      l3083 21B4                        l3075 1FD2                        l3067 2136  
                      l3091 2076                        l3163 148C                        l3155 145C  
                      l3171 14DC                        l3147 1430                        l3139 140C  
                      l3059 17EA                        l3251 0EB0                        l3243 0E02  
                      l3235 0D5C                        l3227 0D24                        l3219 0CEE  
                      l3411 0A74                        l3403 0A4E                        l2701 1194  
                      l3317 174A                        l3309 1708                        l3333 19EC  
                      l3325 19DC                        l2621 0F24                        l3253 20B4  
                      l3341 2152                        l3077 1FE0                        l3069 1FBC  
                      l3093 2088                        l3173 14E2                        l3165 1494  
                      l3157 1468                        l3149 1436                        l3245 0E3C  
                      l3237 0D62                        l3229 0D2C                        l3181 0BE4  
                      l3261 1F64                        l3421 0AC4                        l3413 0A84  
                      l3405 0A54                        l2711 1228                        l2703 11B0  
                      l3319 1750                        l3335 19F0                        l3327 19E8  
                      l2631 0FBE                        l2623 0F46                        l2615 0ED6  
                      l3255 20C0                        l3343 2156                        l3079 1FE4  
                      l3087 2068                        l3175 14F2                        l3159 1474  
                      l3095 218A                        l3247 0E58                        l3239 0D96  
                      l3191 0C2A                        l3183 0BF8                        l3271 1EB6  
                      l3263 1F74                        l3431 0B0C                        l3423 0ADC  
                      l3415 0A90                        l3407 0A58                        l3351 08BC  
                      l2721 12B2                        l2713 123A                        l2705 11C2  
                      l3337 19F2                        l2641 1052                        l2633 0FDA  
                      l2625 0F62                        l2617 0EF2                        l2801 1D56  
                      l3257 20D0                        l3345 215C                        l3089 2074  
                      l3169 149E                        l3177 14FE                        l3097 1F90  
                      l3249 0EA8                        l3185 0BFE                        l3193 0C32  
                      l3273 1EC0                        l3265 1F78                        l3441 0B44  
                      l3433 0B1E                        l3425 0AEE                        l3417 0AA2  
                      l3409 0A68                        l3361 0924                        l3353 08DC  
                      l2731 134E                        l2723 12D6                        l2715 125E  
                      l2707 11E6                        l3283 21A2                        l3291 1686  
                      l3339 1A02                        l3259 2196                        l2651 10E4  
                      l2643 106C                        l2635 0FF4                        l2627 0F7C  
                      l2619 0F04                        l2811 1EE0                        l2803 1D5A  
                      l3099 1FA2                        l3195 0C44                        l3187 0C14  
                      l3275 1EC2                        l3267 2182                        l3443 0B54  
                      l3435 0B24                        l3427 0AF4                        l3419 0AA8  
                      l3371 095C                        l3451 0BBE                        l3363 0936  
                      l3355 08EC                        l3347 08A0                        l2725 12FC  
                      l2717 1284                        l2709 120C                        l3293 168A  
                      l3285 1672                        l2733 219C                        l2653 1104  
                      l2645 108C                        l2637 1014                        l2629 0F9C  
                      l2821 1F04                        l2813 1EE4                        l2901 1C8C  
                      l2805 1D5E                        l3197 0C4A                        l3189 0C1A  
                      l3277 1ED2                        l3269 1EAE                        l3453 0BCA  
                      l3437 0B2C                        l3429 0B06                        l3381 09CE  
                      l3373 096C                        l3365 093C                        l3357 090C  
                      l3349 08AC                        l3461 1F4C                        l2727 1318  
                      l2719 12A0                        l3295 168E                        l3287 167E  
                      l2647 10AE                        l2639 1036                        l2743 2012  
                      l2671 1594                        l2663 154C                        l2655 1508  
                      l2735 1DE2                        l2815 1EF8                        l2831 1C0A  
                      l2823 1BEA                        l2903 1C90                        l2807 1D62  
                      l3279 21AC                        l3199 0C60                        l3439 0B3E  
                      l3391 0A04                        l3383 09D4                        l3375 098C  
                      l3367 094E                        l3359 091E                        l3463 1F50  
                      l2729 132A                        l3297 1692                        l3289 1682  
                      l2921 1F14                        l2913 1F0E                        l2753 2112  
                      l2761 1A6C                        l1793 2172                        l2649 10CA  
                      l2681 15F8                        l2673 15B0                        l2665 1568  
                      l2657 1524                        l2745 1FE8                        l2817 1EFC  
                      l2809 1EDC                        l2841 1C3A                        l2833 1C1E  
                      l2825 1BFA                        l3393 0A0C                        l3385 09E6  
                      l3377 099C                        l3369 0954                        l3449 0B8E  
                      l3465 1F54                        l3299 16A4                        l2923 1F24  
                      l2907 1F0A                        l2755 2114                        l2747 210E  
                      l2771 1A92                        l2763 1A6E                        l1795 2174  
                      l2739 1DAA                        l2851 1E70                        l2843 1E4E  
                      l2819 1F00                        l2835 1C2E                        l2827 1C02  
                      l2931 20AA                        l3395 0A1E                        l3387 09EC  
                      l3379 09BC                        l3467 1F58                        l3459 1F38  
                      l2693 1124                        l2925 1F26                        l2781 1AB0  
                      l2773 1A98                        l2765 1A7C                        l2757 1A56  
                      l1797 2176                        l1965 213C                        l2853 1E74  
                      l2845 1E52                        l2837 1C32                        l2829 1C06  
                      l2861 1B40                        l2941 1882                        l3397 0A24  
                      l3389 09FE                        l2695 1140                        l2919 1F12  
                      l2783 1ABE                        l2775 1A9A                        l2767 1A82  
                      l2759 1A66                        l1799 217A                        l1967 2140  
                      l2687 1624                        l2679 15DC                        l2855 1E7C  
                      l2847 1E56                        l2839 1C36                        l2791 1D32  
                      l2871 1B5E                        l2863 1B44                        l2951 18A8  
                      l2943 1886                        l2935 1868                        l2927 20D8  
                      l3399 0A36                        l2697 1152                        l2785 1AC4  
                      l2777 1AA8                        l2769 1A84                        l1969 2148  
                      l2689 1640                        l2849 1E6A                        l2793 1D36  
                      l2881 1B88                        l2873 1B62                        l2961 18DE  
                      l2953 18BA                        l2945 1894                        l2937 186C  
                      l2929 208E                        l2699 1172                        l2787 1AC6  
                      l2779 1AAE                        l2891 1C4E                        l2795 1D3A  
                      l2875 1B64                        l2859 1B30                        l2963 18F4  
                      l2955 18C2                        l2971 190A                        l2947 189C  
                      l2939 187A                        l2893 1C5C                        l2885 1C42  
                      l2797 1D4E                        l2789 1D22                        l2877 1B74  
                      l2869 1B48                        l2973 191A                        l2965 18FC  
                      l2957 18CA                        l2949 18A0                        l2981 1930  
                      l2895 1C60                        l2799 1D52                        l2879 1B78  
                      l2975 1922                        l2967 18FE                        l2959 18D8  
                      l2991 1960                        l2983 193E                        l2897 1C76  
                      l2969 1904                        l2993 1972                        l2985 1946  
                      l2899 1C7C                        l2995 197A                        l2987 194A  
                      l2979 192C                        l2997 1982                        l2989 1958  
                      l2999 1990                        STR_1 0873                        STR_2 0843  
                      STR_3 0873                        STR_4 0843                        STR_5 0853  
                      STR_6 0833                        STR_7 0863                        STR_8 0883  
                      STR_9 0893                        u2000 1152                        u2001 114E  
                      u2110 12A0                        u2030 11B0                        u2014 1164  
                      u2111 129C                        u2031 11AC                        u2015 1160  
                      u2120 12B2                        u2104 1274                        u2040 11C2  
                      u2024 1184                        u2200 1E18                        u3000 099C  
                      u2121 12AE                        u2105 1270                        u2041 11BE  
                      u2025 1180                        u3001 0998                        u2210 1DDE  
                      u3010 09CE                        u2211 1DD8                        u3011 09CA  
                      u2220 1DE0                        u2300 1D4E                        u3100 0AC4  
                      u3020 09E6                        u2301 1D4A                        u3101 0AC0  
                      u3021 09E2                        _LATA 0F89                        u2150 1318  
                      u2134 12C8                        u2070 1228                        u2054 11D8  
                      u2230 2124                        u2310 1EF8                        u3110 0AEE  
                      u3030 09FE                        u2151 1314                        u2135 12C4  
                      u2071 1224                        u2055 11D4                        u2231 2120  
                      u2311 1EF4                        u3111 0AEA                        u3031 09FA  
                      u2160 132A                        u2144 12EC                        u2080 123A  
                      u2064 11FC                        u2240 1A66                        u2320 1BFA  
                      u2400 1B88                        u3120 0B06                        u3040 0A1E  
                      u2161 1326                        u2145 12E8                        u2081 1236  
                      u2065 11F8                        u2241 1A62                        u2321 1BF6  
                      u2401 1B84                        u3121 0B02                        u3041 0A1A  
                      u2250 1A7C                        u2330 1C1E                        u2410 1C76  
                      u3130 0B1E                        u3050 0A36                        u2251 1A78  
                      u2331 1C1A                        u2411 1C72                        u3131 0B1A  
                      u3051 0A32                        u2260 1A92                        u1700 0F04  
                      u2340 1C2E                        u2420 1C8C                        u2500 191A  
                      u3140 0B3E                        u3060 0A4E                        u2261 1A8E  
                      u1701 0F00                        u2341 1C2A                        u2421 1C88  
                      u2501 1916                        u3141 0B3A                        u3061 0A4A  
                      u2174 1340                        u2094 1250                        u2430 1F24  
                      u2270 1AA8                        u2190 1E16                        u2350 1E6A  
                      u2510 193E                        u3150 0B54                        u3070 0A68  
                      u2175 133C                        u2095 124C                        u2431 1F20  
                      u2271 1AA4                        u2191 1E10                        u2351 1E66  
                      u2511 193A                        u3151 0B50                        u3071 0A64  
                      u2184 1364                        u2440 1F36                        u2280 1ABE  
                      u2360 1B40                        u2520 1958                        u2600 177C  
                      u3080 0A84                        u2185 1360                        u2441 1F32  
                      u2281 1ABA                        u2361 1B3C                        u2521 1954  
                      u2601 1778                        u3081 0A80                        u1810 1052  
                      u1730 0F62                        u1714 0F16                        u2290 1D32  
                      u2370 1B58                        u2450 187A                        u2530 1972  
                      u2610 2136                        u3090 0AA2                        u1811 104E  
                      u1731 0F5E                        u1715 0F12                        u2291 1D2E  
                      u2371 1B52                        u2451 1876                        u2531 196E  
                      u2611 2132                        u3091 0A9E                        u1820 106C  
                      u1804 1026                        u1740 0F7C                        u1724 0F36  
                      u2380 1B5A                        u2460 1894                        u2540 1990  
                      u2620 1FCE                        u2700 13EE                        u1821 1068  
                      u1805 1022                        u1741 0F78                        u1725 0F32  
                      u2461 1890                        u2541 198C                        u2621 1FCA  
                      u2701 13EA                        u1910 1568                        u2390 1B74  
                      u2470 18BA                        u2550 19A6                        u2630 1FE0  
                      u2710 1404                        u1911 1564                        u2391 1B70  
                      u2471 18B6                        u2551 19A2                        u2631 1FDC  
                      u2711 1400                        u1904 1536                        u2480 18D8  
                      u2560 19CA                        u2640 2088                        u2720 1430  
                      u2800 0D40                        u1905 1532                        u2481 18D4  
                      u2561 19C6                        u2641 2084                        u2721 142C  
                      u2801 0D3C                        u2570 1CBE                        u1850 10CA  
                      u1834 107E                        u1770 0FDA                        u1754 0F8E  
                      u1690 0EF2                        u1930 15B0                        u2490 18F4  
                      u2730 144C                        u2650 1FA2                        u2810 0D5C  
                      u2571 1CBA                        u1851 10C6                        u1835 107A  
                      u1771 0FD6                        u1755 0F8A                        u1691 0EEE  
                      u1931 15AC                        u2491 18F0                        u2731 1448  
                      u2651 1F9E                        u2811 0D58                        u2900 1738  
                      u2580 1CCE                        u1860 10E4                        u1844 109E  
                      u1780 0FF4                        u1764 0FAE                        u1924 157E  
                      u2740 14F2                        u2660 139E                        u2820 1F74  
                      u2901 1734                        u2581 1CCA                        u1861 10E0  
                      u1845 109A                        u1781 0FF0                        u1765 0FAA  
                      u1925 157A                        u2741 14EE                        u2661 139A  
                      u2821 1F70                        u2910 174A                        u1950 15F8  
                      u2670 13AC                        u2590 1E4C                        u2750 0BF8  
                      u2830 1ED2                        u2911 1746                        u1951 15F4  
                      u2671 13A8                        u2591 1E48                        u2751 0BF4  
                      u2831 1ECE                        u2920 1768                        u1944 15C6  
                      u2680 13C2                        u2760 0C44                        u2921 1764  
                      u2841 1678                        u1945 15C2                        u2681 13BE  
                      u2761 0C40                        u2930 1A02                        u1874 10F6  
                      u1794 1006                        u1970 1640                        u1890 1524  
                      u2690 13D8                        u2770 0C98                        u2851 169C  
                      u2931 19FE                        u1875 10F2                        u1795 1002  
                      u1971 163C                        u1891 1520                        u2691 13D4  
                      u2771 0C94                        u1884 1116                        u1964 160E  
                      u2780 0CEE                        u2940 08BC                        u1885 1112  
                      u1965 160A                        u2781 0CEA                        u2941 08B8  
                      u1990 1140                        u2870 16E8                        u2790 0D24  
                      u2950 08EC                        u1991 113C                        u2871 16E4  
                      u2791 0D20                        u2951 08E8                        u2864 16CE  
                      u1984 1656                        u2960 091E                        u2865 16CA  
                      u1985 1652                        u2961 091A                        u2970 0936  
                      u2971 0932                        u2884 16FA                        u2980 094E  
                      u2885 16F6                        u2981 094A                        u2894 171A  
                      u2990 096C                        u2895 1716                        u2991 0968  
               _outputPrint 0BE4                        _main 1F38                        _msgs 0060  
                      _time 003C                        _prot 0074                        fsr2h 0FDA  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
             ?_i2c_read_bit 0001                        prodh 0FF4                        prodl 0FF3  
                      start 0000                ___param_bank 0000             __end_of_i2cInit 2066  
            _alarmLevelHigh 004A             __end_of_bcd2dec 1DAA                       ?_main 0001  
           __end_of_dec2bcd 1B2E             __end_of___awdiv 192C            ?_lcdCommand4bits 0001  
                     STR_10 0893                       STR_11 0893                       STR_12 0822  
                     STR_13 0811                       STR_14 0893             __end_of___awmod 19DC  
           ___awdiv@divisor 0015             ___awdiv@counter 0017                       _PORTA 0F80  
                     _PORTB 0F81                       _PORTC 0F82                       _PORTD 0F83  
                     _PORTE 0F84                       _TRISA 0F92                       _TRISB 0F93  
                     _TRISC 0F94                       _TRISD 0F95                       _TRISE 0F96  
           __end_of_lcdData 20F4             __end_of_lcdInit 1A54              ??_i2cWriteByte 000A  
           __end_of_getTime 2194             __end_of_getProt 21B8         __end_of_i2cReadByte 1C94  
        outputPrint@numTela 002D                       _index 0048              setProt@newChar 0001  
           __end_of_pinMode 1372                       _valor 0059                       _state 004C  
           __end_of_varInit 20D6                dec2bcd@value 002B             __end_of_setProt 208E  
                     tablat 0FF5           __end_of_I2C_delay 21BC               _i2c_write_bit 1BE8  
                     plusw1 0FE3                       plusw2 0FDB                       status 0FD8  
            ??_i2c_read_bit 0007            __end_of_Delay2ms 1F38        __end_of_digitalWrite 1124  
           __initialization 1B8E                __end_of_main 1F64             i2cWriteByte@bit 000B  
          __end_of_i2c_stop 1F0A                ?_setLanguage 0001                      ??_main 003C  
             __activetblptr 0002                 eventRead@ev 0007            ___awdiv@dividend 0013  
            ?_i2c_write_bit 0001              getAlarmLevel@l 0003                   ??_i2cInit 0007  
     __end_of_getAlarmLevel 1FBC          dsWriteData@address 0031            __end_of_getState 21B0  
                 ??_bcd2dec 0023                      _dTimer 0040                   ??_dec2bcd 002D  
                    ___wmul 208E                   ??___awdiv 0017                   ??___awmod 0029  
                    _dsInit 21A2                      _lcdInt 176E                      _kpInit 2172  
                    _kpRead 21B0            __end_of_read_SDA 1DE2            __end_of_read_SCL 1E1A  
                    _ev_ant 0046                      _smInit 2152                      clear_0 1BCC  
                    clear_1 1BD8                      _smLoop 08A0            ___awdiv@quotient 0019  
           ___awmod@divisor 0027                   ??_lcdData 0003                      isa$std 0001  
               _i2cReadByte 1C40                   ??_lcdInit 0004             ___awmod@counter 0029  
                 ??_getTime 0003                   ??_getProt 0003            __end_of_setState 219C  
              __pdataCOMRAM 005A                   ??_pinMode 0005                __mediumconst 0000  
                 ??_varInit 0013                   ??_setProt 0001                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8           __end_of_Delay40us 2126  
                __accesstop 0060     __end_of__initialization 1BDE               ___rparam_used 0001  
              ?_pulseEnable 0001                 pinMode@type 0003        __end_of_i2cWriteByte 1B8E  
            __pcstackCOMRAM 0001                __pidataBANK0 2162            i2cWriteByte@byte 0009  
         __end_of_i2c_start 1D68        __end_of_i2c_read_bit 1E80                   ?_Delay2ms 0001  
           ??_i2c_write_bit 0007                  __pbssBANK0 006F                ?_outputPrint 002D  
                 ?_i2c_stop 0001                  _dsReadData 1CDC            dsReadData@result 0011  
                _lcdCommand 1C94                     ?___wmul 001B                     ?_dsInit 0001  
                   ?_lcdInt 002B                     ?_kpInit 0001                     ?_kpRead 0001  
              eventRead@key 000A                     ?_smInit 0001                     ?_smLoop 0001  
                _kpDebounce 1672                  ??_Delay2ms 0001        i2cReadByte@send_stop 0008  
           getAlarmLevel@lh 0001                _digitalWrite 0ED6                   ?_getState 0001  
         __end_of_clear_SDA 2012           __end_of_clear_SCL 203C                   ?_read_SDA 0001  
                 ?_read_SCL 0001                  ??_i2c_stop 0007                     _i2cInit 203C  
                 _I2C_delay 21BA                     __Hparam 0000                   ?_setState 0001  
                   __Lparam 0000           __end_of_lcdString 1E4E             kpDebounce@tempo 0058  
                   _bcd2dec 1D68                     _dec2bcd 1ACC                  _estado_ant 004D  
                   ___awdiv 1868                     ___awmod 192C                __psmallconst 0800  
                   __pcinit 1B8E              serialRead@resp 0001                     _lcdData 20D6  
                   __ramtop 0800                     _lcdInit 19DC                     __ptext0 1F38  
                   __ptext1 08A0                     __ptext2 2180                     __ptext3 1F64  
                   _getTime 218A                     __ptext4 1E80                     __ptext5 1EAE  
                   __ptext6 0BE4                     __ptext7 1E1A                     __ptext8 176E  
                   __ptext9 20D6                     _getProt 21B4           __end_of_eventInit 2152  
         __end_of_eventRead 1508                     _display 0053                     _key_ant 0044  
                   _pinMode 1124            ___awmod@dividend 0025                 serialSend@c 0001  
                   _varInit 20B4                     _setProt 2066                  ??_getState 0001  
                 Delay2ms@j 0001                   Delay2ms@k 0002                     _started 0054  
       kpDebounce@valorNovo 0057        end_of_initialization 1BDE                  ??_read_SDA 0007  
                ??_read_SCL 0007           __end_of_resetProt 1EDC               __Lmediumconst 0000  
               ?_dsReadData 000E              digitalRead@pin 0001                  ?_I2C_delay 0001  
                ??_setState 0001                  _serialInit 20F4                  _serialRead 1FBC  
                _serialSend 2126                     postdec1 0FE5                 ?_lcdCommand 0001  
                   postinc0 0FEE                     postinc2 0FDE               _setAlarmLevel 1F64  
             ??_digitalRead 0003               ??_getLanguage 0001                 ?_kpDebounce 0001  
              ?_i2cReadByte 0008             i2c_read_bit@bit 0007              _valor@ssd$F312 0801  
                _prot_ready 004E                _i2cWriteByte 1B2E               ??_dsWriteData 0033  
                 _Delay40us 210E                _i2c_read_bit 1E4E            _outputPrint$1403 0031  
          _outputPrint$1404 0033              ?_setAlarmLevel 0034               _alarmLevelLow 0049  
         outputPrint@idioma 002F              __end_of___wmul 20B4              __end_of_dsInit 21A8  
             __pidataCOMRAM 21B8              __end_of_lcdInt 1868              __end_of_kpInit 2180  
            __end_of_kpRead 21B4      __end_of_valor@ssd$F312 0811              __end_of_smInit 2162  
            __end_of_smLoop 0BE4         start_initialization 1B8E         __end_of_digitalRead 1672  
       __end_of_getLanguage 21AC                   _i2c_start 1D22                  ?_Delay40us 0001  
              smLoop@evento 003B           ??_lcdCommand4bits 0002                 ??_I2C_delay 0001  
       __end_of_dsWriteData 1EAE                 ?_serialInit 0001                 ?_serialRead 0001  
               ?_serialSend 0001                    ??___wmul 001F                    ??_dsInit 0007  
                  ??_lcdInt 002D                    ??_kpInit 0001                    ??_kpRead 0001  
               __pdataBANK0 0060                    ??_smInit 0013                    ??_smLoop 0037  
         dsReadData@address 000E                   _dTimerMax 003E                 __pbssCOMRAM 003C  
                pinMode@pin 0001                  ?_i2c_start 0001            setState@newState 0001  
     __end_of_i2c_write_bit 1C40                  smLoop@prot 003A                    ?_i2cInit 0001  
             _getAlarmLevel 1F90             ??_setAlarmLevel 0037                   _clear_SDA 1FE8  
                 _clear_SCL 2012                    ?_bcd2dec 0021                    ?_dec2bcd 002B  
                  ?___awdiv 0013                    ?___awmod 0025                   _lcdString 1E1A  
               _digitalRead 1508                 _getLanguage 21A8                    ?_lcdData 0001  
             ??_setLanguage 0001                    ?_lcdInit 0001                    ?_getTime 0001  
                  ?_getProt 0001               lcdCommand@cmd 0003               eventRead@data 0009  
               __smallconst 0800               eventRead@prot 0006                    ?_pinMode 0001  
                  ?_varInit 0001                    ?_setProt 0001              kpDebounce@bits 0004  
                 _eventInit 213C                   _eventRead 1372                  resetProt@i 0001  
               _dsWriteData 1E80  setAlarmLevel@newAlarmLevel 0034                 ??_Delay40us 0001  
            ___wmul@product 001F                ??_dsReadData 0010              ?_getAlarmLevel 0001  
                ?_clear_SDA 0001                  ?_clear_SCL 0001                   _resetProt 1EAE  
                 lcdInt@val 002B                ??_lcdCommand 0003                  ?_lcdString 0004  
              ??_kpDebounce 0001           ___wmul@multiplier 001B       kpDebounce@valorAntigo 0056  
                  _Delay2ms 1F0A          __end_of_dsReadData 1D22                  ?_eventInit 0001  
                ?_eventRead 0003                 ??_i2c_start 0007         __end_of_setLanguage 218A  
                 copy_data0 1BA2          __end_of_lcdCommand 1CDC                lcdData@valor 0003  
                  _i2c_stop 1EDC          __end_of_kpDebounce 176E                    __Hrparam 0000  
                ?_resetProt 0001               ??_pulseEnable 0001                    __Lrparam 0000  
          dsWriteData@value 0033            kpDebounce@portes 0009             _lcdCommand4bits 1A54  
                  __ptext10 218A                    __ptext11 21A8                    __ptext20 21B0  
                  __ptext12 1F90                    __ptext21 21B4                    __ptext13 1D68  
                  __ptext30 1C40                    __ptext22 1ACC                    __ptext14 208E  
                  __ptext31 1BE8                    __ptext23 192C                    __ptext15 21AC  
                  __ptext40 21BA                    __ptext32 1EDC                    __ptext24 1868  
                  __ptext16 1372                    __ptext41 2194                    __ptext33 1FE8  
                  __ptext25 2152                    __ptext17 2066                    __ptext50 1F0A  
                  __ptext42 213C                    __ptext34 1E4E                    __ptext26 20B4  
                  __ptext18 2126                    __ptext51 1672                    __ptext43 2172  
                  __ptext35 1DAA                    __ptext27 1CDC                    __ptext19 1FBC  
                  __ptext52 21A2                    __ptext44 20F4                    __ptext36 1DE2  
                  __ptext28 1B2E                    __ptext53 203C                    __ptext45 19DC  
                  __ptext37 1508                    __ptext29 1D22                    __ptext54 1124  
                  __ptext46 1C94                    __ptext38 2012                    __ptext47 1A54  
                  __ptext39 0ED6                    __ptext48 219C                    __ptext49 210E  
                  _getState 21AC                 _smLoop$1405 0038               kpDebounce@F13 006F  
             kpDebounce@F15 006A               ??_outputPrint 0031                    _language 004B  
           ??_getAlarmLevel 0003                    _read_SDA 1DAA                    _read_SCL 1DE2  
               ??_clear_SDA 0007                 ??_clear_SCL 0007                ??_serialInit 0001  
              ??_serialRead 0001                ??_serialSend 0001                    _setState 2194  
                Delay40us@j 0001             setAlarmLevel@lh 0036                    lcdInit@i 0004  
                  isa$xinst 0000                 ??_lcdString 0005         __end_of_pulseEnable 21A2  
               _setLanguage 2180      setLanguage@newLanguage 0001                 ??_eventInit 0001  
               ??_eventRead 0005               ?_digitalWrite 0001          __end_of_serialInit 210E  
        __end_of_serialRead 1FE8          __end_of_serialSend 213C           digitalWrite@value 0003  
               ??_resetProt 0001         __end_of_outputPrint 0ED6                bcd2dec@value 0021  
              ?_digitalRead 0001                ?_getLanguage 0001     __end_of_lcdCommand4bits 1ACC  
               kpDebounce@j 000E              ??_digitalWrite 0005             digitalWrite@pin 0001  
              ?_dsWriteData 0031         lcdCommand4bits@data 0001          lcdCommand4bits@cmd 0002  
               _pulseEnable 219C  
