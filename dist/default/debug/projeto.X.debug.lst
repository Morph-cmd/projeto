

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue May 28 17:07:24 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    43   000000                     
    44                           ; Generated 17/10/2023 GMT
    45                           ; 
    46                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78   000000                     
    79                           	psect	idataCOMRAM
    80   007241                     __pidataCOMRAM:
    81                           	callstack 0
    82                           
    83                           ;initializer for _msgs
    84   007241  13                 	db	low STR_1
    85   007242  7D                 	db	high STR_1
    86   007243  E3                 	db	low STR_2
    87   007244  7C                 	db	high STR_2
    88   007245  F3                 	db	low STR_3
    89   007246  7C                 	db	high STR_3
    90   007247  D3                 	db	low STR_4
    91   007248  7C                 	db	high STR_4
    92   007249  03                 	db	low STR_5
    93   00724A  7D                 	db	high STR_5
    94   00724B  23                 	db	low STR_6
    95   00724C  7D                 	db	high STR_6
    96                           
    97                           ;initializer for kpDebounce@F15
    98   00724D  02                 	db	2
    99   00724E  03                 	db	3
   100   00724F  05                 	db	5
   101   007250  04                 	db	4
   102   007251  01                 	db	1
   103                           
   104                           ;initializer for _ev
   105   007252  0062               	dw	98
   106                           
   107                           	psect	mediumconst
   108   007CA0                     __pmediumconst:
   109                           	callstack 0
   110   007CA0  00                 	db	0
   111   007CA1                     _valor@ssd$F308:
   112                           	callstack 0
   113   007CA1  3F                 	db	63
   114   007CA2  06                 	db	6
   115   007CA3  5B                 	db	91
   116   007CA4  4F                 	db	79
   117   007CA5  66                 	db	102
   118   007CA6  6D                 	db	109
   119   007CA7  7D                 	db	125
   120   007CA8  07                 	db	7
   121   007CA9  7F                 	db	127
   122   007CAA  6F                 	db	111
   123   007CAB  77                 	db	119
   124   007CAC  7C                 	db	124
   125   007CAD  39                 	db	57
   126   007CAE  5E                 	db	94
   127   007CAF  79                 	db	121
   128   007CB0  71                 	db	113
   129   007CB1                     __end_of_valor@ssd$F308:
   130                           	callstack 0
   131   000000                     _PORTA	set	3968
   132   000000                     _LATA	set	3977
   133   000000                     _TRISA	set	3986
   134   000000                     _PORTE	set	3972
   135   000000                     _PORTD	set	3971
   136   000000                     _PORTC	set	3970
   137   000000                     _PORTB	set	3969
   138   000000                     _TRISE	set	3990
   139   000000                     _TRISD	set	3989
   140   000000                     _TRISC	set	3988
   141   000000                     _TRISB	set	3987
   142   007CB1                     STR_10:
   143   007CB1  45                 	db	69	;'E'
   144   007CB2  6E                 	db	110	;'n'
   145   007CB3  67                 	db	103	;'g'
   146   007CB4  6C                 	db	108	;'l'
   147   007CB5  69                 	db	105	;'i'
   148   007CB6  73                 	db	115	;'s'
   149   007CB7  68                 	db	104	;'h'
   150   007CB8  20                 	db	32
   151   007CB9  20                 	db	32
   152   007CBA  20                 	db	32
   153   007CBB  20                 	db	32
   154   007CBC  20                 	db	32
   155   007CBD  20                 	db	32
   156   007CBE  20                 	db	32
   157   007CBF  20                 	db	32
   158   007CC0  20                 	db	32
   159   007CC1  00                 	db	0
   160   007CC2                     STR_9:
   161   007CC2  50                 	db	80	;'P'
   162   007CC3  6F                 	db	111	;'o'
   163   007CC4  72                 	db	114	;'r'
   164   007CC5  74                 	db	116	;'t'
   165   007CC6  75                 	db	117	;'u'
   166   007CC7  67                 	db	103	;'g'
   167   007CC8  75                 	db	117	;'u'
   168   007CC9  65                 	db	101	;'e'
   169   007CCA  73                 	db	115	;'s'
   170   007CCB  20                 	db	32
   171   007CCC  20                 	db	32
   172   007CCD  20                 	db	32
   173   007CCE  20                 	db	32
   174   007CCF  20                 	db	32
   175   007CD0  20                 	db	32
   176   007CD1  20                 	db	32
   177   007CD2  00                 	db	0
   178   007CD3                     STR_4:
   179   007CD3  43                 	db	67	;'C'
   180   007CD4  68                 	db	104	;'h'
   181   007CD5  61                 	db	97	;'a'
   182   007CD6  6E                 	db	110	;'n'
   183   007CD7  67                 	db	103	;'g'
   184   007CD8  65                 	db	101	;'e'
   185   007CD9  20                 	db	32
   186   007CDA  74                 	db	116	;'t'
   187   007CDB  69                 	db	105	;'i'
   188   007CDC  6D                 	db	109	;'m'
   189   007CDD  65                 	db	101	;'e'
   190   007CDE  20                 	db	32
   191   007CDF  20                 	db	32
   192   007CE0  20                 	db	32
   193   007CE1  20                 	db	32
   194   007CE2  00                 	db	0
   195   007CE3                     STR_2:
   196   007CE3  43                 	db	67	;'C'
   197   007CE4  68                 	db	104	;'h'
   198   007CE5  61                 	db	97	;'a'
   199   007CE6  6E                 	db	110	;'n'
   200   007CE7  67                 	db	103	;'g'
   201   007CE8  65                 	db	101	;'e'
   202   007CE9  20                 	db	32
   203   007CEA  61                 	db	97	;'a'
   204   007CEB  6C                 	db	108	;'l'
   205   007CEC  61                 	db	97	;'a'
   206   007CED  72                 	db	114	;'r'
   207   007CEE  6D                 	db	109	;'m'
   208   007CEF  20                 	db	32
   209   007CF0  20                 	db	32
   210   007CF1  20                 	db	32
   211   007CF2  00                 	db	0
   212   007CF3                     STR_3:
   213   007CF3  41                 	db	65	;'A'
   214   007CF4  6C                 	db	108	;'l'
   215   007CF5  74                 	db	116	;'t'
   216   007CF6  65                 	db	101	;'e'
   217   007CF7  72                 	db	114	;'r'
   218   007CF8  61                 	db	97	;'a'
   219   007CF9  72                 	db	114	;'r'
   220   007CFA  20                 	db	32
   221   007CFB  74                 	db	116	;'t'
   222   007CFC  65                 	db	101	;'e'
   223   007CFD  6D                 	db	109	;'m'
   224   007CFE  70                 	db	112	;'p'
   225   007CFF  6F                 	db	111	;'o'
   226   007D00  20                 	db	32
   227   007D01  20                 	db	32
   228   007D02  00                 	db	0
   229   007D03                     STR_5:
   230   007D03  41                 	db	65	;'A'
   231   007D04  6C                 	db	108	;'l'
   232   007D05  74                 	db	116	;'t'
   233   007D06  65                 	db	101	;'e'
   234   007D07  72                 	db	114	;'r'
   235   007D08  61                 	db	97	;'a'
   236   007D09  72                 	db	114	;'r'
   237   007D0A  20                 	db	32
   238   007D0B  69                 	db	105	;'i'
   239   007D0C  64                 	db	100	;'d'
   240   007D0D  69                 	db	105	;'i'
   241   007D0E  6F                 	db	111	;'o'
   242   007D0F  6D                 	db	109	;'m'
   243   007D10  61                 	db	97	;'a'
   244   007D11  20                 	db	32
   245   007D12  00                 	db	0
   246   007D13                     STR_1:
   247   007D13  41                 	db	65	;'A'
   248   007D14  6C                 	db	108	;'l'
   249   007D15  74                 	db	116	;'t'
   250   007D16  65                 	db	101	;'e'
   251   007D17  72                 	db	114	;'r'
   252   007D18  61                 	db	97	;'a'
   253   007D19  72                 	db	114	;'r'
   254   007D1A  20                 	db	32
   255   007D1B  61                 	db	97	;'a'
   256   007D1C  6C                 	db	108	;'l'
   257   007D1D  61                 	db	97	;'a'
   258   007D1E  72                 	db	114	;'r'
   259   007D1F  6D                 	db	109	;'m'
   260   007D20  65                 	db	101	;'e'
   261   007D21  20                 	db	32
   262   007D22  00                 	db	0
   263   007D23                     STR_6:
   264   007D23  43                 	db	67	;'C'
   265   007D24  68                 	db	104	;'h'
   266   007D25  61                 	db	97	;'a'
   267   007D26  6E                 	db	110	;'n'
   268   007D27  67                 	db	103	;'g'
   269   007D28  65                 	db	101	;'e'
   270   007D29  20                 	db	32
   271   007D2A  6C                 	db	108	;'l'
   272   007D2B  61                 	db	97	;'a'
   273   007D2C  6E                 	db	110	;'n'
   274   007D2D  67                 	db	103	;'g'
   275   007D2E  75                 	db	117	;'u'
   276   007D2F  61                 	db	97	;'a'
   277   007D30  67                 	db	103	;'g'
   278   007D31  65                 	db	101	;'e'
   279   007D32  00                 	db	0
   280   007D33                     STR_7:
   281   007D33  20                 	db	32
   282   007D34  20                 	db	32
   283   007D35  20                 	db	32
   284   007D36  20                 	db	32
   285   007D37  20                 	db	32
   286   007D38  20                 	db	32
   287   007D39  20                 	db	32
   288   007D3A  20                 	db	32
   289   007D3B  20                 	db	32
   290   007D3C  20                 	db	32
   291   007D3D  20                 	db	32
   292   007D3E  00                 	db	0
   293   007D3F  00                 	db	0	; dummy byte at the end
   294   000000                     
   295                           ; #config settings
   296                           
   297                           	psect	cinit
   298   007356                     __pcinit:
   299                           	callstack 0
   300   007356                     start_initialization:
   301                           	callstack 0
   302   007356                     __initialization:
   303                           	callstack 0
   304                           
   305                           ; Initialize objects allocated to COMRAM (19 bytes)
   306                           ; load TBLPTR registers with __pidataCOMRAM
   307   007356  0E41               	movlw	low __pidataCOMRAM
   308   007358  6EF6               	movwf	tblptrl,c
   309   00735A  0E72               	movlw	high __pidataCOMRAM
   310   00735C  6EF7               	movwf	tblptrh,c
   311   00735E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   312   007360  6EF8               	movwf	tblptru,c
   313   007362  EE00  F03A         	lfsr	0,__pdataCOMRAM
   314   007366  EE10 F013          	lfsr	1,19
   315   00736A                     copy_data0:
   316   00736A  0009               	tblrd		*+
   317   00736C  CFF5 FFEE          	movff	tablat,postinc0
   318   007370  50E5               	movf	postdec1,w,c
   319   007372  50E1               	movf	fsr1l,w,c
   320   007374  E1FA               	bnz	copy_data0
   321                           
   322                           ; Clear objects allocated to COMRAM (32 bytes)
   323   007376  EE00  F001         	lfsr	0,__pbssCOMRAM
   324   00737A  0E20               	movlw	32
   325   00737C                     clear_0:
   326   00737C  6AEE               	clrf	postinc0,c
   327   00737E  06E8               	decf	wreg,f,c
   328   007380  E1FD               	bnz	clear_0
   329   007382                     end_of_initialization:
   330                           	callstack 0
   331   007382                     __end_of__initialization:
   332                           	callstack 0
   333   007382  0E00               	movlw	low (__Lmediumconst shr (0+16))
   334   007384  6EF8               	movwf	tblptru,c
   335   007386  0100               	movlb	0
   336   007388  EF50  F039         	goto	_main	;jump to C main() function
   337                           
   338                           	psect	bssCOMRAM
   339   000001                     __pbssCOMRAM:
   340                           	callstack 0
   341   000001                     	ds	5
   342   000006                     _alarmLevel:
   343                           	callstack 0
   344   000006                     	ds	2
   345   000008                     _time:
   346                           	callstack 0
   347   000008                     	ds	2
   348   00000A                     	ds	2
   349   00000C                     	ds	2
   350   00000E                     _key:
   351                           	callstack 0
   352   00000E                     	ds	2
   353   000010                     _key_ant:
   354                           	callstack 0
   355   000010                     	ds	2
   356   000012                     _ev_ant:
   357                           	callstack 0
   358   000012                     	ds	2
   359   000014                     _language:
   360                           	callstack 0
   361   000014                     	ds	1
   362   000015                     _state:
   363                           	callstack 0
   364   000015                     	ds	1
   365   000016                     _v3:
   366                           	callstack 0
   367   000016                     	ds	1
   368   000017                     _v2:
   369                           	callstack 0
   370   000017                     	ds	1
   371   000018                     _v1:
   372                           	callstack 0
   373   000018                     	ds	1
   374   000019                     _v0:
   375                           	callstack 0
   376   000019                     	ds	1
   377   00001A                     _display:
   378                           	callstack 0
   379   00001A                     	ds	1
   380   00001B                     _started:
   381                           	callstack 0
   382   00001B                     	ds	1
   383   00001C                     _de:
   384                           	callstack 0
   385   00001C                     	ds	1
   386   00001D                     kpDebounce@valorAntigo:
   387                           	callstack 0
   388   00001D                     	ds	1
   389   00001E                     kpDebounce@valorNovo:
   390                           	callstack 0
   391   00001E                     	ds	1
   392   00001F                     kpDebounce@tempo:
   393                           	callstack 0
   394   00001F                     	ds	1
   395   000020                     _valor:
   396                           	callstack 0
   397   000020                     	ds	1
   398                           
   399                           	psect	dataCOMRAM
   400   00003A                     __pdataCOMRAM:
   401                           	callstack 0
   402   00003A                     _msgs:
   403                           	callstack 0
   404   00003A                     	ds	12
   405   000046                     kpDebounce@F15:
   406                           	callstack 0
   407   000046                     	ds	5
   408   00004B                     	ds	2
   409                           
   410                           	psect	cstackCOMRAM
   411   000021                     __pcstackCOMRAM:
   412                           	callstack 0
   413   000021                     ??_kpDebounce:
   414   000021                     ?_getTime:
   415                           	callstack 0
   416   000021                     ?_getAlarmLevel:
   417                           	callstack 0
   418   000021                     ?_eventRead:
   419                           	callstack 0
   420   000021                     ?___awdiv:
   421                           	callstack 0
   422   000021                     Delay40us@j:
   423                           	callstack 0
   424   000021                     Delay2ms@j:
   425                           	callstack 0
   426   000021                     lcdCommand4bits@data:
   427                           	callstack 0
   428   000021                     setState@newState:
   429                           	callstack 0
   430   000021                     setLanguage@newLanguage:
   431                           	callstack 0
   432   000021                     pinMode@pin:
   433                           	callstack 0
   434   000021                     ___awdiv@dividend:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x0
   438   000021                     	ds	1
   439   000022                     Delay2ms@k:
   440                           	callstack 0
   441   000022                     lcdCommand4bits@cmd:
   442                           	callstack 0
   443                           
   444                           ; 1 bytes @ 0x1
   445   000022                     	ds	1
   446   000023                     ??_eventRead:
   447   000023                     lcdCommand@cmd:
   448                           	callstack 0
   449   000023                     lcdData@valor:
   450                           	callstack 0
   451   000023                     pinMode@type:
   452                           	callstack 0
   453   000023                     ___awdiv@divisor:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x2
   457   000023                     	ds	1
   458   000024                     lcdInit@i:
   459                           	callstack 0
   460   000024                     lcdString@str:
   461                           	callstack 0
   462   000024                     eventRead@ev:
   463                           	callstack 0
   464   000024                     kpDebounce@bits:
   465                           	callstack 0
   466                           
   467                           ; 5 bytes @ 0x3
   468   000024                     	ds	1
   469   000025                     ??_pinMode:
   470   000025                     ___awdiv@counter:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0x4
   474   000025                     	ds	1
   475   000026                     ___awdiv@sign:
   476                           	callstack 0
   477   000026                     eventRead@key:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x5
   481   000026                     	ds	1
   482   000027                     ___awdiv@quotient:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x6
   486   000027                     	ds	2
   487   000029                     ?___awmod:
   488                           	callstack 0
   489   000029                     ___awmod@dividend:
   490                           	callstack 0
   491   000029                     kpDebounce@portes:
   492                           	callstack 0
   493                           
   494                           ; 5 bytes @ 0x8
   495   000029                     	ds	2
   496   00002B                     ___awmod@divisor:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0xA
   500   00002B                     	ds	2
   501   00002D                     ___awmod@counter:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0xC
   505   00002D                     	ds	1
   506   00002E                     kpDebounce@j:
   507                           	callstack 0
   508   00002E                     ___awmod@sign:
   509                           	callstack 0
   510                           
   511                           ; 1 bytes @ 0xD
   512   00002E                     	ds	1
   513   00002F                     lcdInt@val:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0xE
   517   00002F                     	ds	2
   518   000031                     outputPrint@numTela:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x10
   522   000031                     	ds	2
   523   000033                     outputPrint@idioma:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x12
   527   000033                     	ds	2
   528   000035                     ??_outputPrint:
   529                           
   530                           ; 1 bytes @ 0x14
   531   000035                     	ds	1
   532   000036                     ??_smLoop:
   533                           
   534                           ; 1 bytes @ 0x15
   535   000036                     	ds	1
   536   000037                     _smLoop$1348:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0x16
   540   000037                     	ds	2
   541   000039                     smLoop@evento:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x18
   545   000039                     	ds	1
   546   00003A                     
   547                           ; 1 bytes @ 0x19
   548 ;;
   549 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   550 ;;
   551 ;; *************** function _main *****************
   552 ;; Defined at:
   553 ;;		line 22 in file "main.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   567 ;;      Params:         0       0       0       0       0       0       0       0       0
   568 ;;      Locals:         0       0       0       0       0       0       0       0       0
   569 ;;      Temps:          0       0       0       0       0       0       0       0       0
   570 ;;      Totals:         0       0       0       0       0       0       0       0       0
   571 ;;Total ram usage:        0 bytes
   572 ;; Hardware stack levels required when called: 6
   573 ;; This function calls:
   574 ;;		_dsInit
   575 ;;		_kpDebounce
   576 ;;		_kpInit
   577 ;;		_lcdInit
   578 ;;		_smInit
   579 ;;		_smLoop
   580 ;; This function is called by:
   581 ;;		Startup code after reset
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	text0
   586   0072A0                     __ptext0:
   587                           	callstack 0
   588   0072A0                     _main:
   589                           	callstack 25
   590   0072A0                     
   591                           ;main.c: 25:     kpInit();
   592   0072A0  EC19  F039         	call	_kpInit	;wreg free
   593                           
   594                           ;main.c: 26:     lcdInit();
   595   0072A4  EC5B  F03A         	call	_lcdInit	;wreg free
   596                           
   597                           ;main.c: 27:     dsInit();
   598   0072A8  ECFA  F038         	call	_dsInit	;wreg free
   599                           
   600                           ;main.c: 28:     smInit();
   601   0072AC  EC13  F039         	call	_smInit	;wreg free
   602   0072B0                     
   603                           ;main.c: 29:     TRISA = 0x00;
   604   0072B0  0E00               	movlw	0
   605   0072B2  6E92               	movwf	146,c	;volatile
   606   0072B4                     
   607                           ;main.c: 30:     LATA = 0x00;
   608   0072B4  0E00               	movlw	0
   609   0072B6  6E89               	movwf	137,c	;volatile
   610   0072B8                     l2788:
   611                           
   612                           ;main.c: 33:         kpDebounce();
   613   0072B8  EC0D  F03C         	call	_kpDebounce	;wreg free
   614   0072BC                     
   615                           ;main.c: 35:         smLoop();
   616   0072BC  EC97  F03A         	call	_smLoop	;wreg free
   617   0072C0  EF5C  F039         	goto	l2788
   618   0072C4  EF01  F000         	goto	start
   619   0072C8                     __end_of_main:
   620                           	callstack 0
   621                           
   622 ;; *************** function _smLoop *****************
   623 ;; Defined at:
   624 ;;		line 13 in file "stateMachine.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;		None
   627 ;; Auto vars:     Size  Location     Type
   628 ;;  evento          1   24[COMRAM] unsigned char 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   638 ;;      Params:         0       0       0       0       0       0       0       0       0
   639 ;;      Locals:         3       0       0       0       0       0       0       0       0
   640 ;;      Temps:          1       0       0       0       0       0       0       0       0
   641 ;;      Totals:         4       0       0       0       0       0       0       0       0
   642 ;;Total ram usage:        4 bytes
   643 ;; Hardware stack levels used: 1
   644 ;; Hardware stack levels required when called: 5
   645 ;; This function calls:
   646 ;;		_eventRead
   647 ;;		_getLanguage
   648 ;;		_getState
   649 ;;		_outputPrint
   650 ;;		_setLanguage
   651 ;; This function is called by:
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text1
   657   00752E                     __ptext1:
   658                           	callstack 0
   659   00752E                     _smLoop:
   660                           	callstack 25
   661   00752E                     
   662                           ;stateMachine.c: 14:     unsigned char evento;;stateMachine.c: 17:     evento = eventRea
      +                          d();
   663   00752E  ECEA  F039         	call	_eventRead	;wreg free
   664   007532  5021               	movf	?_eventRead^0,w,c
   665   007534  6E39               	movwf	smLoop@evento^0,c
   666                           
   667                           ;stateMachine.c: 19:     switch (getState()) {
   668   007536  EFBB  F03A         	goto	l2638
   669   00753A                     l2630:
   670                           
   671                           ;stateMachine.c: 22:             if (evento == EV_0) {
   672   00753A  5039               	movf	smLoop@evento^0,w,c
   673   00753C  A4D8               	btfss	status,2,c
   674   00753E  EFA3  F03A         	goto	u1961
   675   007542  EFA5  F03A         	goto	u1960
   676   007546                     u1961:
   677   007546  EFAB  F03A         	goto	l2634
   678   00754A                     u1960:
   679   00754A                     
   680                           ;stateMachine.c: 24:                 setLanguage(getLanguage() + 1);
   681   00754A  ECF8  F038         	call	_getLanguage	;wreg free
   682   00754E  6E36               	movwf	??_smLoop^0,c
   683   007550  2836               	incf	??_smLoop^0,w,c
   684   007552  EC0E  F039         	call	_setLanguage
   685   007556                     l2634:
   686                           
   687                           ;stateMachine.c: 28:             if (evento == EV_1) {
   688   007556  0439               	decf	smLoop@evento^0,w,c
   689   007558  A4D8               	btfss	status,2,c
   690   00755A  EFB1  F03A         	goto	u1971
   691   00755E  EFB3  F03A         	goto	u1970
   692   007562                     u1971:
   693   007562  EFC3  F03A         	goto	l2640
   694   007566                     u1970:
   695   007566                     
   696                           ;stateMachine.c: 29:                 setLanguage(getLanguage() - 1);
   697   007566  ECF8  F038         	call	_getLanguage	;wreg free
   698   00756A  6E36               	movwf	??_smLoop^0,c
   699   00756C  0436               	decf	??_smLoop^0,w,c
   700   00756E  EC0E  F039         	call	_setLanguage
   701   007572  EFC3  F03A         	goto	l2640
   702   007576                     l2638:
   703   007576  ECF6  F038         	call	_getState	;wreg free
   704                           
   705                           ; Switch size 1, requested type "simple"
   706                           ; Number of cases is 1, Range of values is 0 to 0
   707                           ; switch strategies available:
   708                           ; Name         Instructions Cycles
   709                           ; simple_byte            4     3 (average)
   710                           ;	Chosen strategy is simple_byte
   711   00757A  0A00               	xorlw	0	; case 0
   712   00757C  B4D8               	btfsc	status,2,c
   713   00757E  EF9D  F03A         	goto	l2630
   714   007582  EFC3  F03A         	goto	l2640
   715   007586                     l2640:
   716                           
   717                           ;stateMachine.c: 71:     outputPrint(getState(), getLanguage());
   718   007586  ECF8  F038         	call	_getLanguage	;wreg free
   719   00758A  6E36               	movwf	??_smLoop^0,c
   720   00758C  5036               	movf	??_smLoop^0,w,c
   721   00758E  6E37               	movwf	_smLoop$1348^0,c
   722   007590  6A38               	clrf	(_smLoop$1348+1)^0,c
   723   007592                     
   724                           ;stateMachine.c: 71:     outputPrint(getState(), getLanguage());
   725   007592  ECF6  F038         	call	_getState	;wreg free
   726   007596  6E36               	movwf	??_smLoop^0,c
   727   007598  5036               	movf	??_smLoop^0,w,c
   728   00759A  6E31               	movwf	outputPrint@numTela^0,c
   729   00759C  6A32               	clrf	(outputPrint@numTela+1)^0,c
   730   00759E  C037  F033         	movff	_smLoop$1348,outputPrint@idioma
   731   0075A2  C038  F034         	movff	_smLoop$1348+1,outputPrint@idioma+1
   732   0075A6  EC8B  F03C         	call	_outputPrint	;wreg free
   733   0075AA  0012               	return		;funcret
   734   0075AC                     __end_of_smLoop:
   735                           	callstack 0
   736                           
   737 ;; *************** function _setLanguage *****************
   738 ;; Defined at:
   739 ;;		line 43 in file "var.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  newLanguage     1    wreg     unsigned char 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  newLanguage     1    0[COMRAM] unsigned char 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, status,2, status,0
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   753 ;;      Params:         0       0       0       0       0       0       0       0       0
   754 ;;      Locals:         1       0       0       0       0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0       0       0       0       0
   756 ;;      Totals:         1       0       0       0       0       0       0       0       0
   757 ;;Total ram usage:        1 bytes
   758 ;; Hardware stack levels used: 1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_smLoop
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text2
   767   00721C                     __ptext2:
   768                           	callstack 0
   769   00721C                     _setLanguage:
   770                           	callstack 29
   771                           
   772                           ;incstack = 0
   773                           ;setLanguage@newLanguage stored from wreg
   774   00721C  6E21               	movwf	setLanguage@newLanguage^0,c
   775   00721E                     
   776                           ;var.c: 46:     language = newLanguage%2;
   777   00721E  5021               	movf	setLanguage@newLanguage^0,w,c
   778   007220  0B01               	andlw	1
   779   007222  6E14               	movwf	_language^0,c
   780   007224  0012               	return		;funcret
   781   007226                     __end_of_setLanguage:
   782                           	callstack 0
   783                           
   784 ;; *************** function _outputPrint *****************
   785 ;; Defined at:
   786 ;;		line 20 in file "output.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  numTela         2   16[COMRAM] int 
   789 ;;  idioma          2   18[COMRAM] int 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   801 ;;      Params:         4       0       0       0       0       0       0       0       0
   802 ;;      Locals:         0       0       0       0       0       0       0       0       0
   803 ;;      Temps:          1       0       0       0       0       0       0       0       0
   804 ;;      Totals:         5       0       0       0       0       0       0       0       0
   805 ;;Total ram usage:        5 bytes
   806 ;; Hardware stack levels used: 1
   807 ;; Hardware stack levels required when called: 4
   808 ;; This function calls:
   809 ;;		_getAlarmLevel
   810 ;;		_getLanguage
   811 ;;		_getTime
   812 ;;		_lcdCommand
   813 ;;		_lcdInt
   814 ;;		_lcdString
   815 ;; This function is called by:
   816 ;;		_smLoop
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text3
   821   007916                     __ptext3:
   822                           	callstack 0
   823   007916                     _outputPrint:
   824                           	callstack 25
   825   007916                     
   826                           ;output.c: 22:     if (numTela == STATE_TEMPO) {
   827   007916  0431               	decf	outputPrint@numTela^0,w,c
   828   007918  1032               	iorwf	(outputPrint@numTela+1)^0,w,c
   829   00791A  A4D8               	btfss	status,2,c
   830   00791C  EF92  F03C         	goto	u1901
   831   007920  EF94  F03C         	goto	u1900
   832   007924                     u1901:
   833   007924  EFB9  F03C         	goto	l2576
   834   007928                     u1900:
   835   007928                     
   836                           ;output.c: 23:         lcdCommand(0x80);
   837   007928  0E80               	movlw	128
   838   00792A  ECC6  F039         	call	_lcdCommand
   839   00792E                     
   840                           ;output.c: 24:         lcdString(msgs[numTela][idioma]);
   841   00792E  5033               	movf	outputPrint@idioma^0,w,c
   842   007930  0D02               	mullw	2
   843   007932  CFF3 F035          	movff	prodl,??_outputPrint
   844   007936  5031               	movf	outputPrint@numTela^0,w,c
   845   007938  0D04               	mullw	4
   846   00793A  50F3               	movf	243,w,c
   847   00793C  0F3A               	addlw	low _msgs
   848   00793E  2435               	addwf	??_outputPrint^0,w,c
   849   007940  6ED9               	movwf	fsr2l,c
   850   007942  6ADA               	clrf	fsr2h,c
   851   007944  CFDE F024          	movff	postinc2,lcdString@str
   852   007948  CFDD F025          	movff	postdec2,lcdString@str+1
   853   00794C  EC90  F039         	call	_lcdString	;wreg free
   854   007950                     
   855                           ;output.c: 25:         lcdCommand(0xC0);
   856   007950  0EC0               	movlw	192
   857   007952  ECC6  F039         	call	_lcdCommand
   858   007956                     
   859                           ;output.c: 26:         lcdInt(getTime());
   860   007956  EC09  F039         	call	_getTime	;wreg free
   861   00795A  C021  F02F         	movff	?_getTime,lcdInt@val
   862   00795E  C022  F030         	movff	?_getTime+1,lcdInt@val+1
   863   007962  EC90  F03B         	call	_lcdInt	;wreg free
   864   007966                     
   865                           ;output.c: 27:         lcdString("           ");
   866   007966  0E33               	movlw	low STR_7
   867   007968  6E24               	movwf	lcdString@str^0,c
   868   00796A  0E7D               	movlw	high STR_7
   869   00796C  6E25               	movwf	(lcdString@str+1)^0,c
   870   00796E  EC90  F039         	call	_lcdString	;wreg free
   871   007972                     l2576:
   872                           
   873                           ;output.c: 29:     if (numTela == STATE_ALARME) {
   874   007972  5031               	movf	outputPrint@numTela^0,w,c
   875   007974  1032               	iorwf	(outputPrint@numTela+1)^0,w,c
   876   007976  A4D8               	btfss	status,2,c
   877   007978  EFC0  F03C         	goto	u1911
   878   00797C  EFC2  F03C         	goto	u1910
   879   007980                     u1911:
   880   007980  EFE7  F03C         	goto	l2588
   881   007984                     u1910:
   882   007984                     
   883                           ;output.c: 30:         lcdCommand(0x80);
   884   007984  0E80               	movlw	128
   885   007986  ECC6  F039         	call	_lcdCommand
   886   00798A                     
   887                           ;output.c: 31:         lcdString(msgs[numTela][idioma]);
   888   00798A  5033               	movf	outputPrint@idioma^0,w,c
   889   00798C  0D02               	mullw	2
   890   00798E  CFF3 F035          	movff	prodl,??_outputPrint
   891   007992  5031               	movf	outputPrint@numTela^0,w,c
   892   007994  0D04               	mullw	4
   893   007996  50F3               	movf	243,w,c
   894   007998  0F3A               	addlw	low _msgs
   895   00799A  2435               	addwf	??_outputPrint^0,w,c
   896   00799C  6ED9               	movwf	fsr2l,c
   897   00799E  6ADA               	clrf	fsr2h,c
   898   0079A0  CFDE F024          	movff	postinc2,lcdString@str
   899   0079A4  CFDD F025          	movff	postdec2,lcdString@str+1
   900   0079A8  EC90  F039         	call	_lcdString	;wreg free
   901   0079AC                     
   902                           ;output.c: 32:         lcdCommand(0xC0);
   903   0079AC  0EC0               	movlw	192
   904   0079AE  ECC6  F039         	call	_lcdCommand
   905   0079B2                     
   906                           ;output.c: 33:         lcdInt(getAlarmLevel());
   907   0079B2  EC04  F039         	call	_getAlarmLevel	;wreg free
   908   0079B6  C021  F02F         	movff	?_getAlarmLevel,lcdInt@val
   909   0079BA  C022  F030         	movff	?_getAlarmLevel+1,lcdInt@val+1
   910   0079BE  EC90  F03B         	call	_lcdInt	;wreg free
   911   0079C2                     
   912                           ;output.c: 34:         lcdString("           ");
   913   0079C2  0E33               	movlw	low STR_7
   914   0079C4  6E24               	movwf	lcdString@str^0,c
   915   0079C6  0E7D               	movlw	high STR_7
   916   0079C8  6E25               	movwf	(lcdString@str+1)^0,c
   917   0079CA  EC90  F039         	call	_lcdString	;wreg free
   918   0079CE                     l2588:
   919                           
   920                           ;output.c: 36:     if (numTela == STATE_IDIOMA) {
   921   0079CE  0E02               	movlw	2
   922   0079D0  1831               	xorwf	outputPrint@numTela^0,w,c
   923   0079D2  1032               	iorwf	(outputPrint@numTela+1)^0,w,c
   924   0079D4  A4D8               	btfss	status,2,c
   925   0079D6  EFEF  F03C         	goto	u1921
   926   0079DA  EFF1  F03C         	goto	u1920
   927   0079DE                     u1921:
   928   0079DE  EF28  F03D         	goto	l527
   929   0079E2                     u1920:
   930   0079E2                     
   931                           ;output.c: 37:         lcdCommand(0x80);
   932   0079E2  0E80               	movlw	128
   933   0079E4  ECC6  F039         	call	_lcdCommand
   934   0079E8                     
   935                           ;output.c: 38:         lcdString(msgs[numTela][idioma]);
   936   0079E8  5033               	movf	outputPrint@idioma^0,w,c
   937   0079EA  0D02               	mullw	2
   938   0079EC  CFF3 F035          	movff	prodl,??_outputPrint
   939   0079F0  5031               	movf	outputPrint@numTela^0,w,c
   940   0079F2  0D04               	mullw	4
   941   0079F4  50F3               	movf	243,w,c
   942   0079F6  0F3A               	addlw	low _msgs
   943   0079F8  2435               	addwf	??_outputPrint^0,w,c
   944   0079FA  6ED9               	movwf	fsr2l,c
   945   0079FC  6ADA               	clrf	fsr2h,c
   946   0079FE  CFDE F024          	movff	postinc2,lcdString@str
   947   007A02  CFDD F025          	movff	postdec2,lcdString@str+1
   948   007A06  EC90  F039         	call	_lcdString	;wreg free
   949   007A0A                     
   950                           ;output.c: 39:         lcdCommand(0xC0);
   951   007A0A  0EC0               	movlw	192
   952   007A0C  ECC6  F039         	call	_lcdCommand
   953   007A10                     
   954                           ;output.c: 40:         if (getLanguage() == 0) {
   955   007A10  ECF8  F038         	call	_getLanguage	;wreg free
   956   007A14  0900               	iorlw	0
   957   007A16  A4D8               	btfss	status,2,c
   958   007A18  EF10  F03D         	goto	u1931
   959   007A1C  EF12  F03D         	goto	u1930
   960   007A20                     u1931:
   961   007A20  EF18  F03D         	goto	l2600
   962   007A24                     u1930:
   963   007A24                     
   964                           ;output.c: 41:             lcdString("Portugues       ");
   965   007A24  0EC2               	movlw	low STR_9
   966   007A26  6E24               	movwf	lcdString@str^0,c
   967   007A28  0E7C               	movlw	high STR_9
   968   007A2A  6E25               	movwf	(lcdString@str+1)^0,c
   969   007A2C  EC90  F039         	call	_lcdString	;wreg free
   970   007A30                     l2600:
   971                           
   972                           ;output.c: 43:         if (getLanguage() == 1) {
   973   007A30  ECF8  F038         	call	_getLanguage	;wreg free
   974   007A34  06E8               	decf	wreg,f,c
   975   007A36  A4D8               	btfss	status,2,c
   976   007A38  EF20  F03D         	goto	u1941
   977   007A3C  EF22  F03D         	goto	u1940
   978   007A40                     u1941:
   979   007A40  EF28  F03D         	goto	l527
   980   007A44                     u1940:
   981   007A44                     
   982                           ;output.c: 44:             lcdString("English         ");
   983   007A44  0EB1               	movlw	low STR_10
   984   007A46  6E24               	movwf	lcdString@str^0,c
   985   007A48  0E7C               	movlw	high STR_10
   986   007A4A  6E25               	movwf	(lcdString@str+1)^0,c
   987   007A4C  EC90  F039         	call	_lcdString	;wreg free
   988   007A50                     l527:
   989   007A50  0012               	return		;funcret
   990   007A52                     __end_of_outputPrint:
   991                           	callstack 0
   992                           
   993 ;; *************** function _lcdString *****************
   994 ;; Defined at:
   995 ;;		line 168 in file "lcd.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  str             2    3[COMRAM] PTR const unsigned char 
   998 ;;		 -> STR_10(17), STR_9(17), STR_8(12), STR_7(12), 
   999 ;;		 -> STR_6(16), STR_5(16), STR_4(16), STR_3(16), 
  1000 ;;		 -> STR_2(16), STR_1(16), 
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1012 ;;      Params:         2       0       0       0       0       0       0       0       0
  1013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1015 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1016 ;;Total ram usage:        2 bytes
  1017 ;; Hardware stack levels used: 1
  1018 ;; Hardware stack levels required when called: 3
  1019 ;; This function calls:
  1020 ;;		_lcdData
  1021 ;; This function is called by:
  1022 ;;		_outputPrint
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text4
  1027   007320                     __ptext4:
  1028                           	callstack 0
  1029   007320                     _lcdString:
  1030                           	callstack 25
  1031   007320                     
  1032                           ;lcd.c: 169:     while(*str) {
  1033   007320  EF9C  F039         	goto	l2508
  1034   007324                     l2504:
  1035                           
  1036                           ;lcd.c: 170:         lcdData(*str++);
  1037   007324  C024  FFF6         	movff	lcdString@str,tblptrl
  1038   007328  C025  FFF7         	movff	lcdString@str+1,tblptrh
  1039   00732C                     	if	0	;tblptru may be non-zero
  1040   00732C                     	endif
  1041   00732C                     	if	0	;tblptru may be non-zero
  1042   00732C                     	endif
  1043   00732C  0008               	tblrd		*
  1044   00732E  50F5               	movf	tablat,w,c
  1045   007330  EC41  F039         	call	_lcdData
  1046   007334  4A24               	infsnz	lcdString@str^0,f,c
  1047   007336  2A25               	incf	(lcdString@str+1)^0,f,c
  1048   007338                     l2508:
  1049                           
  1050                           ;lcd.c: 169:     while(*str) {
  1051   007338  C024  FFF6         	movff	lcdString@str,tblptrl
  1052   00733C  C025  FFF7         	movff	lcdString@str+1,tblptrh
  1053   007340                     	if	0	;tblptru may be non-zero
  1054   007340                     	endif
  1055   007340                     	if	0	;tblptru may be non-zero
  1056   007340                     	endif
  1057   007340  0008               	tblrd		*
  1058   007342  50F5               	movf	tablat,w,c
  1059   007344  0900               	iorlw	0
  1060   007346  A4D8               	btfss	status,2,c
  1061   007348  EFA8  F039         	goto	u1811
  1062   00734C  EFAA  F039         	goto	u1810
  1063   007350                     u1811:
  1064   007350  EF92  F039         	goto	l2504
  1065   007354                     u1810:
  1066   007354  0012               	return		;funcret
  1067   007356                     __end_of_lcdString:
  1068                           	callstack 0
  1069                           
  1070 ;; *************** function _lcdInt *****************
  1071 ;; Defined at:
  1072 ;;		line 174 in file "lcd.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  val             2   14[COMRAM] int 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1086 ;;      Params:         2       0       0       0       0       0       0       0       0
  1087 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1089 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1090 ;;Total ram usage:        2 bytes
  1091 ;; Hardware stack levels used: 1
  1092 ;; Hardware stack levels required when called: 3
  1093 ;; This function calls:
  1094 ;;		___awdiv
  1095 ;;		___awmod
  1096 ;;		_lcdData
  1097 ;; This function is called by:
  1098 ;;		_outputPrint
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text5
  1103   007720                     __ptext5:
  1104                           	callstack 0
  1105   007720                     _lcdInt:
  1106                           	callstack 25
  1107   007720                     
  1108                           ;lcd.c: 175:     if (val < 0) {
  1109   007720  BE30               	btfsc	(lcdInt@val+1)^0,7,c
  1110   007722  EF97  F03B         	goto	u1820
  1111   007726  EF95  F03B         	goto	u1821
  1112   00772A                     u1821:
  1113   00772A  EF9E  F03B         	goto	l2516
  1114   00772E                     u1820:
  1115   00772E                     
  1116                           ;lcd.c: 176:         val = val * (-1);
  1117   00772E  6C2F               	negf	lcdInt@val^0,c
  1118   007730  1E30               	comf	(lcdInt@val+1)^0,f,c
  1119   007732  B0D8               	btfsc	status,0,c
  1120   007734  2A30               	incf	(lcdInt@val+1)^0,f,c
  1121   007736                     
  1122                           ;lcd.c: 177:         lcdData('-');
  1123   007736  0E2D               	movlw	45
  1124   007738  EC41  F039         	call	_lcdData
  1125   00773C                     l2516:
  1126                           
  1127                           ;lcd.c: 179:     lcdData((val / 10000) % 10 + 48);
  1128   00773C  0E27               	movlw	39
  1129   00773E  6E24               	movwf	(___awdiv@divisor+1)^0,c
  1130   007740  0E10               	movlw	16
  1131   007742  6E23               	movwf	___awdiv@divisor^0,c
  1132   007744  C02F  F021         	movff	lcdInt@val,___awdiv@dividend
  1133   007748  C030  F022         	movff	lcdInt@val+1,___awdiv@dividend+1
  1134   00774C  EC2E  F03B         	call	___awdiv	;wreg free
  1135   007750  C021  F029         	movff	?___awdiv,___awmod@dividend
  1136   007754  C022  F02A         	movff	?___awdiv+1,___awmod@dividend+1
  1137   007758  0E00               	movlw	0
  1138   00775A  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1139   00775C  0E0A               	movlw	10
  1140   00775E  6E2B               	movwf	___awmod@divisor^0,c
  1141   007760  ECD6  F03A         	call	___awmod	;wreg free
  1142   007764  5029               	movf	?___awmod^0,w,c
  1143   007766  0F30               	addlw	48
  1144   007768  EC41  F039         	call	_lcdData
  1145   00776C                     
  1146                           ;lcd.c: 180:     lcdData((val / 1000) % 10 + 48);
  1147   00776C  0E03               	movlw	3
  1148   00776E  6E24               	movwf	(___awdiv@divisor+1)^0,c
  1149   007770  0EE8               	movlw	232
  1150   007772  6E23               	movwf	___awdiv@divisor^0,c
  1151   007774  C02F  F021         	movff	lcdInt@val,___awdiv@dividend
  1152   007778  C030  F022         	movff	lcdInt@val+1,___awdiv@dividend+1
  1153   00777C  EC2E  F03B         	call	___awdiv	;wreg free
  1154   007780  C021  F029         	movff	?___awdiv,___awmod@dividend
  1155   007784  C022  F02A         	movff	?___awdiv+1,___awmod@dividend+1
  1156   007788  0E00               	movlw	0
  1157   00778A  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1158   00778C  0E0A               	movlw	10
  1159   00778E  6E2B               	movwf	___awmod@divisor^0,c
  1160   007790  ECD6  F03A         	call	___awmod	;wreg free
  1161   007794  5029               	movf	?___awmod^0,w,c
  1162   007796  0F30               	addlw	48
  1163   007798  EC41  F039         	call	_lcdData
  1164   00779C                     
  1165                           ;lcd.c: 181:     lcdData((val / 100) % 10 + 48);
  1166   00779C  0E00               	movlw	0
  1167   00779E  6E24               	movwf	(___awdiv@divisor+1)^0,c
  1168   0077A0  0E64               	movlw	100
  1169   0077A2  6E23               	movwf	___awdiv@divisor^0,c
  1170   0077A4  C02F  F021         	movff	lcdInt@val,___awdiv@dividend
  1171   0077A8  C030  F022         	movff	lcdInt@val+1,___awdiv@dividend+1
  1172   0077AC  EC2E  F03B         	call	___awdiv	;wreg free
  1173   0077B0  C021  F029         	movff	?___awdiv,___awmod@dividend
  1174   0077B4  C022  F02A         	movff	?___awdiv+1,___awmod@dividend+1
  1175   0077B8  0E00               	movlw	0
  1176   0077BA  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1177   0077BC  0E0A               	movlw	10
  1178   0077BE  6E2B               	movwf	___awmod@divisor^0,c
  1179   0077C0  ECD6  F03A         	call	___awmod	;wreg free
  1180   0077C4  5029               	movf	?___awmod^0,w,c
  1181   0077C6  0F30               	addlw	48
  1182   0077C8  EC41  F039         	call	_lcdData
  1183   0077CC                     
  1184                           ;lcd.c: 182:     lcdData((val / 10) % 10 + 48);
  1185   0077CC  0E00               	movlw	0
  1186   0077CE  6E24               	movwf	(___awdiv@divisor+1)^0,c
  1187   0077D0  0E0A               	movlw	10
  1188   0077D2  6E23               	movwf	___awdiv@divisor^0,c
  1189   0077D4  C02F  F021         	movff	lcdInt@val,___awdiv@dividend
  1190   0077D8  C030  F022         	movff	lcdInt@val+1,___awdiv@dividend+1
  1191   0077DC  EC2E  F03B         	call	___awdiv	;wreg free
  1192   0077E0  C021  F029         	movff	?___awdiv,___awmod@dividend
  1193   0077E4  C022  F02A         	movff	?___awdiv+1,___awmod@dividend+1
  1194   0077E8  0E00               	movlw	0
  1195   0077EA  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1196   0077EC  0E0A               	movlw	10
  1197   0077EE  6E2B               	movwf	___awmod@divisor^0,c
  1198   0077F0  ECD6  F03A         	call	___awmod	;wreg free
  1199   0077F4  5029               	movf	?___awmod^0,w,c
  1200   0077F6  0F30               	addlw	48
  1201   0077F8  EC41  F039         	call	_lcdData
  1202   0077FC                     
  1203                           ;lcd.c: 183:     lcdData((val / 1) % 10 + 48);
  1204   0077FC  C02F  F029         	movff	lcdInt@val,___awmod@dividend
  1205   007800  C030  F02A         	movff	lcdInt@val+1,___awmod@dividend+1
  1206   007804  0E00               	movlw	0
  1207   007806  6E2C               	movwf	(___awmod@divisor+1)^0,c
  1208   007808  0E0A               	movlw	10
  1209   00780A  6E2B               	movwf	___awmod@divisor^0,c
  1210   00780C  ECD6  F03A         	call	___awmod	;wreg free
  1211   007810  5029               	movf	?___awmod^0,w,c
  1212   007812  0F30               	addlw	48
  1213   007814  EC41  F039         	call	_lcdData
  1214   007818  0012               	return		;funcret
  1215   00781A                     __end_of_lcdInt:
  1216                           	callstack 0
  1217                           
  1218 ;; *************** function _lcdData *****************
  1219 ;; Defined at:
  1220 ;;		line 108 in file "lcd.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  valor           1    wreg     unsigned char 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  valor           1    2[COMRAM] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         0       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        1 bytes
  1239 ;; Hardware stack levels used: 1
  1240 ;; Hardware stack levels required when called: 2
  1241 ;; This function calls:
  1242 ;;		_Delay40us
  1243 ;;		_lcdCommand4bits
  1244 ;; This function is called by:
  1245 ;;		_lcdString
  1246 ;;		_lcdInt
  1247 ;;		_printf
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text6
  1252   007282                     __ptext6:
  1253                           	callstack 0
  1254   007282                     _lcdData:
  1255                           	callstack 25
  1256                           
  1257                           ;incstack = 0
  1258                           ;lcdData@valor stored from wreg
  1259   007282  6E23               	movwf	lcdData@valor^0,c
  1260   007284                     
  1261                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  1262   007284  0E01               	movlw	1
  1263   007286  6E21               	movwf	lcdCommand4bits@data^0,c
  1264   007288  5023               	movf	lcdData@valor^0,w,c
  1265   00728A  EC1F  F03A         	call	_lcdCommand4bits
  1266                           
  1267                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  1268   00728E  0E01               	movlw	1
  1269   007290  6E21               	movwf	lcdCommand4bits@data^0,c
  1270   007292  3823               	swapf	lcdData@valor^0,w,c
  1271   007294  0BF0               	andlw	240
  1272   007296  EC1F  F03A         	call	_lcdCommand4bits
  1273                           
  1274                           ;lcd.c: 113:     Delay40us();
  1275   00729A  EC35  F039         	call	_Delay40us	;wreg free
  1276   00729E  0012               	return		;funcret
  1277   0072A0                     __end_of_lcdData:
  1278                           	callstack 0
  1279                           
  1280 ;; *************** function ___awmod *****************
  1281 ;; Defined at:
  1282 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  dividend        2    8[COMRAM] int 
  1285 ;;  divisor         2   10[COMRAM] int 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  sign            1   13[COMRAM] unsigned char 
  1288 ;;  counter         1   12[COMRAM] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  2    8[COMRAM] int 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2, status,0
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1298 ;;      Params:         4       0       0       0       0       0       0       0       0
  1299 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1301 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1302 ;;Total ram usage:        6 bytes
  1303 ;; Hardware stack levels used: 1
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_lcdInt
  1308 ;;		_dec2bcd
  1309 ;;		_rtcPutSeconds
  1310 ;;		_rtcPutMinutes
  1311 ;;		_rtcPutHours
  1312 ;;		_rtcPutDate
  1313 ;;		_rtcPutMonth
  1314 ;;		_rtcPutYear
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           	psect	text7
  1319   0075AC                     __ptext7:
  1320                           	callstack 0
  1321   0075AC                     ___awmod:
  1322                           	callstack 27
  1323   0075AC  0E00               	movlw	0
  1324   0075AE  6E2E               	movwf	___awmod@sign^0,c
  1325   0075B0  BE2A               	btfsc	(___awmod@dividend+1)^0,7,c
  1326   0075B2  EFDF  F03A         	goto	u1530
  1327   0075B6  EFDD  F03A         	goto	u1531
  1328   0075BA                     u1531:
  1329   0075BA  EFE5  F03A         	goto	l2420
  1330   0075BE                     u1530:
  1331   0075BE  6C29               	negf	___awmod@dividend^0,c
  1332   0075C0  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  1333   0075C2  B0D8               	btfsc	status,0,c
  1334   0075C4  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  1335   0075C6  0E01               	movlw	1
  1336   0075C8  6E2E               	movwf	___awmod@sign^0,c
  1337   0075CA                     l2420:
  1338   0075CA  BE2C               	btfsc	(___awmod@divisor+1)^0,7,c
  1339   0075CC  EFEC  F03A         	goto	u1540
  1340   0075D0  EFEA  F03A         	goto	u1541
  1341   0075D4                     u1541:
  1342   0075D4  EFF0  F03A         	goto	l2424
  1343   0075D8                     u1540:
  1344   0075D8  6C2B               	negf	___awmod@divisor^0,c
  1345   0075DA  1E2C               	comf	(___awmod@divisor+1)^0,f,c
  1346   0075DC  B0D8               	btfsc	status,0,c
  1347   0075DE  2A2C               	incf	(___awmod@divisor+1)^0,f,c
  1348   0075E0                     l2424:
  1349   0075E0  502B               	movf	___awmod@divisor^0,w,c
  1350   0075E2  102C               	iorwf	(___awmod@divisor+1)^0,w,c
  1351   0075E4  B4D8               	btfsc	status,2,c
  1352   0075E6  EFF7  F03A         	goto	u1551
  1353   0075EA  EFF9  F03A         	goto	u1550
  1354   0075EE                     u1551:
  1355   0075EE  EF1D  F03B         	goto	l2440
  1356   0075F2                     u1550:
  1357   0075F2  0E01               	movlw	1
  1358   0075F4  6E2D               	movwf	___awmod@counter^0,c
  1359   0075F6  EF01  F03B         	goto	l2430
  1360   0075FA                     l2428:
  1361   0075FA  90D8               	bcf	status,0,c
  1362   0075FC  362B               	rlcf	___awmod@divisor^0,f,c
  1363   0075FE  362C               	rlcf	(___awmod@divisor+1)^0,f,c
  1364   007600  2A2D               	incf	___awmod@counter^0,f,c
  1365   007602                     l2430:
  1366   007602  AE2C               	btfss	(___awmod@divisor+1)^0,7,c
  1367   007604  EF06  F03B         	goto	u1561
  1368   007608  EF08  F03B         	goto	u1560
  1369   00760C                     u1561:
  1370   00760C  EFFD  F03A         	goto	l2428
  1371   007610                     u1560:
  1372   007610                     l2432:
  1373   007610  502B               	movf	___awmod@divisor^0,w,c
  1374   007612  5C29               	subwf	___awmod@dividend^0,w,c
  1375   007614  502C               	movf	(___awmod@divisor+1)^0,w,c
  1376   007616  582A               	subwfb	(___awmod@dividend+1)^0,w,c
  1377   007618  A0D8               	btfss	status,0,c
  1378   00761A  EF11  F03B         	goto	u1571
  1379   00761E  EF13  F03B         	goto	u1570
  1380   007622                     u1571:
  1381   007622  EF17  F03B         	goto	l2436
  1382   007626                     u1570:
  1383   007626  502B               	movf	___awmod@divisor^0,w,c
  1384   007628  5E29               	subwf	___awmod@dividend^0,f,c
  1385   00762A  502C               	movf	(___awmod@divisor+1)^0,w,c
  1386   00762C  5A2A               	subwfb	(___awmod@dividend+1)^0,f,c
  1387   00762E                     l2436:
  1388   00762E  90D8               	bcf	status,0,c
  1389   007630  322C               	rrcf	(___awmod@divisor+1)^0,f,c
  1390   007632  322B               	rrcf	___awmod@divisor^0,f,c
  1391   007634  2E2D               	decfsz	___awmod@counter^0,f,c
  1392   007636  EF08  F03B         	goto	l2432
  1393   00763A                     l2440:
  1394   00763A  502E               	movf	___awmod@sign^0,w,c
  1395   00763C  B4D8               	btfsc	status,2,c
  1396   00763E  EF23  F03B         	goto	u1581
  1397   007642  EF25  F03B         	goto	u1580
  1398   007646                     u1581:
  1399   007646  EF29  F03B         	goto	l2444
  1400   00764A                     u1580:
  1401   00764A  6C29               	negf	___awmod@dividend^0,c
  1402   00764C  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  1403   00764E  B0D8               	btfsc	status,0,c
  1404   007650  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  1405   007652                     l2444:
  1406   007652  C029  F029         	movff	___awmod@dividend,?___awmod
  1407   007656  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  1408   00765A  0012               	return		;funcret
  1409   00765C                     __end_of___awmod:
  1410                           	callstack 0
  1411                           
  1412 ;; *************** function ___awdiv *****************
  1413 ;; Defined at:
  1414 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  dividend        2    0[COMRAM] int 
  1417 ;;  divisor         2    2[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  quotient        2    6[COMRAM] int 
  1420 ;;  sign            1    5[COMRAM] unsigned char 
  1421 ;;  counter         1    4[COMRAM] unsigned char 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  2    0[COMRAM] int 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1431 ;;      Params:         4       0       0       0       0       0       0       0       0
  1432 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1434 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1435 ;;Total ram usage:        8 bytes
  1436 ;; Hardware stack levels used: 1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_lcdInt
  1441 ;;		_dec2bcd
  1442 ;;		_bcd2dec
  1443 ;;		_rtcPutSeconds
  1444 ;;		_rtcPutMinutes
  1445 ;;		_rtcPutHours
  1446 ;;		_rtcPutDate
  1447 ;;		_rtcPutMonth
  1448 ;;		_rtcPutYear
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text8
  1453   00765C                     __ptext8:
  1454                           	callstack 0
  1455   00765C                     ___awdiv:
  1456                           	callstack 27
  1457   00765C  0E00               	movlw	0
  1458   00765E  6E26               	movwf	___awdiv@sign^0,c
  1459   007660  BE24               	btfsc	(___awdiv@divisor+1)^0,7,c
  1460   007662  EF37  F03B         	goto	u1470
  1461   007666  EF35  F03B         	goto	u1471
  1462   00766A                     u1471:
  1463   00766A  EF3D  F03B         	goto	l2376
  1464   00766E                     u1470:
  1465   00766E  6C23               	negf	___awdiv@divisor^0,c
  1466   007670  1E24               	comf	(___awdiv@divisor+1)^0,f,c
  1467   007672  B0D8               	btfsc	status,0,c
  1468   007674  2A24               	incf	(___awdiv@divisor+1)^0,f,c
  1469   007676  0E01               	movlw	1
  1470   007678  6E26               	movwf	___awdiv@sign^0,c
  1471   00767A                     l2376:
  1472   00767A  BE22               	btfsc	(___awdiv@dividend+1)^0,7,c
  1473   00767C  EF44  F03B         	goto	u1480
  1474   007680  EF42  F03B         	goto	u1481
  1475   007684                     u1481:
  1476   007684  EF4A  F03B         	goto	l2382
  1477   007688                     u1480:
  1478   007688  6C21               	negf	___awdiv@dividend^0,c
  1479   00768A  1E22               	comf	(___awdiv@dividend+1)^0,f,c
  1480   00768C  B0D8               	btfsc	status,0,c
  1481   00768E  2A22               	incf	(___awdiv@dividend+1)^0,f,c
  1482   007690  0E01               	movlw	1
  1483   007692  1A26               	xorwf	___awdiv@sign^0,f,c
  1484   007694                     l2382:
  1485   007694  0E00               	movlw	0
  1486   007696  6E28               	movwf	(___awdiv@quotient+1)^0,c
  1487   007698  0E00               	movlw	0
  1488   00769A  6E27               	movwf	___awdiv@quotient^0,c
  1489   00769C  5023               	movf	___awdiv@divisor^0,w,c
  1490   00769E  1024               	iorwf	(___awdiv@divisor+1)^0,w,c
  1491   0076A0  B4D8               	btfsc	status,2,c
  1492   0076A2  EF55  F03B         	goto	u1491
  1493   0076A6  EF57  F03B         	goto	u1490
  1494   0076AA                     u1491:
  1495   0076AA  EF7F  F03B         	goto	l2404
  1496   0076AE                     u1490:
  1497   0076AE  0E01               	movlw	1
  1498   0076B0  6E25               	movwf	___awdiv@counter^0,c
  1499   0076B2  EF5F  F03B         	goto	l2390
  1500   0076B6                     l2388:
  1501   0076B6  90D8               	bcf	status,0,c
  1502   0076B8  3623               	rlcf	___awdiv@divisor^0,f,c
  1503   0076BA  3624               	rlcf	(___awdiv@divisor+1)^0,f,c
  1504   0076BC  2A25               	incf	___awdiv@counter^0,f,c
  1505   0076BE                     l2390:
  1506   0076BE  AE24               	btfss	(___awdiv@divisor+1)^0,7,c
  1507   0076C0  EF64  F03B         	goto	u1501
  1508   0076C4  EF66  F03B         	goto	u1500
  1509   0076C8                     u1501:
  1510   0076C8  EF5B  F03B         	goto	l2388
  1511   0076CC                     u1500:
  1512   0076CC                     l2392:
  1513   0076CC  90D8               	bcf	status,0,c
  1514   0076CE  3627               	rlcf	___awdiv@quotient^0,f,c
  1515   0076D0  3628               	rlcf	(___awdiv@quotient+1)^0,f,c
  1516   0076D2  5023               	movf	___awdiv@divisor^0,w,c
  1517   0076D4  5C21               	subwf	___awdiv@dividend^0,w,c
  1518   0076D6  5024               	movf	(___awdiv@divisor+1)^0,w,c
  1519   0076D8  5822               	subwfb	(___awdiv@dividend+1)^0,w,c
  1520   0076DA  A0D8               	btfss	status,0,c
  1521   0076DC  EF72  F03B         	goto	u1511
  1522   0076E0  EF74  F03B         	goto	u1510
  1523   0076E4                     u1511:
  1524   0076E4  EF79  F03B         	goto	l2400
  1525   0076E8                     u1510:
  1526   0076E8  5023               	movf	___awdiv@divisor^0,w,c
  1527   0076EA  5E21               	subwf	___awdiv@dividend^0,f,c
  1528   0076EC  5024               	movf	(___awdiv@divisor+1)^0,w,c
  1529   0076EE  5A22               	subwfb	(___awdiv@dividend+1)^0,f,c
  1530   0076F0  8027               	bsf	___awdiv@quotient^0,0,c
  1531   0076F2                     l2400:
  1532   0076F2  90D8               	bcf	status,0,c
  1533   0076F4  3224               	rrcf	(___awdiv@divisor+1)^0,f,c
  1534   0076F6  3223               	rrcf	___awdiv@divisor^0,f,c
  1535   0076F8  2E25               	decfsz	___awdiv@counter^0,f,c
  1536   0076FA  EF66  F03B         	goto	l2392
  1537   0076FE                     l2404:
  1538   0076FE  5026               	movf	___awdiv@sign^0,w,c
  1539   007700  B4D8               	btfsc	status,2,c
  1540   007702  EF85  F03B         	goto	u1521
  1541   007706  EF87  F03B         	goto	u1520
  1542   00770A                     u1521:
  1543   00770A  EF8B  F03B         	goto	l2408
  1544   00770E                     u1520:
  1545   00770E  6C27               	negf	___awdiv@quotient^0,c
  1546   007710  1E28               	comf	(___awdiv@quotient+1)^0,f,c
  1547   007712  B0D8               	btfsc	status,0,c
  1548   007714  2A28               	incf	(___awdiv@quotient+1)^0,f,c
  1549   007716                     l2408:
  1550   007716  C027  F021         	movff	___awdiv@quotient,?___awdiv
  1551   00771A  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  1552   00771E  0012               	return		;funcret
  1553   007720                     __end_of___awdiv:
  1554                           	callstack 0
  1555                           
  1556 ;; *************** function _getTime *****************
  1557 ;; Defined at:
  1558 ;;		line 24 in file "var.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;		None
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  2    0[COMRAM] int 
  1565 ;; Registers used:
  1566 ;;		None
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1572 ;;      Params:         2       0       0       0       0       0       0       0       0
  1573 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1575 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1576 ;;Total ram usage:        2 bytes
  1577 ;; Hardware stack levels used: 1
  1578 ;; This function calls:
  1579 ;;		Nothing
  1580 ;; This function is called by:
  1581 ;;		_outputPrint
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text9
  1586   007212                     __ptext9:
  1587                           	callstack 0
  1588   007212                     _getTime:
  1589                           	callstack 28
  1590   007212                     
  1591                           ;var.c: 25:     return time;
  1592   007212  C008  F021         	movff	_time,?_getTime
  1593   007216  C009  F022         	movff	_time+1,?_getTime+1
  1594   00721A  0012               	return		;funcret
  1595   00721C                     __end_of_getTime:
  1596                           	callstack 0
  1597                           
  1598 ;; *************** function _getLanguage *****************
  1599 ;; Defined at:
  1600 ;;		line 40 in file "var.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      unsigned char 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1614 ;;      Params:         0       0       0       0       0       0       0       0       0
  1615 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1617 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1618 ;;Total ram usage:        0 bytes
  1619 ;; Hardware stack levels used: 1
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_outputPrint
  1624 ;;		_smLoop
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text10
  1629   0071F0                     __ptext10:
  1630                           	callstack 0
  1631   0071F0                     _getLanguage:
  1632                           	callstack 28
  1633   0071F0                     
  1634                           ;var.c: 41:     return language;
  1635   0071F0  5014               	movf	_language^0,w,c
  1636   0071F2  0012               	return		;funcret
  1637   0071F4                     __end_of_getLanguage:
  1638                           	callstack 0
  1639                           
  1640 ;; *************** function _getAlarmLevel *****************
  1641 ;; Defined at:
  1642 ;;		line 32 in file "var.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2    0[COMRAM] int 
  1649 ;; Registers used:
  1650 ;;		None
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1656 ;;      Params:         2       0       0       0       0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1659 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1660 ;;Total ram usage:        2 bytes
  1661 ;; Hardware stack levels used: 1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_outputPrint
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text11
  1670   007208                     __ptext11:
  1671                           	callstack 0
  1672   007208                     _getAlarmLevel:
  1673                           	callstack 28
  1674   007208                     
  1675                           ;var.c: 33:     return alarmLevel;
  1676   007208  C006  F021         	movff	_alarmLevel,?_getAlarmLevel
  1677   00720C  C007  F022         	movff	_alarmLevel+1,?_getAlarmLevel+1
  1678   007210  0012               	return		;funcret
  1679   007212                     __end_of_getAlarmLevel:
  1680                           	callstack 0
  1681                           
  1682 ;; *************** function _getState *****************
  1683 ;; Defined at:
  1684 ;;		line 16 in file "var.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      unsigned char 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       0       0       0       0       0       0       0       0
  1699 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1701 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1702 ;;Total ram usage:        0 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_smLoop
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text12
  1712   0071EC                     __ptext12:
  1713                           	callstack 0
  1714   0071EC                     _getState:
  1715                           	callstack 29
  1716   0071EC                     
  1717                           ;var.c: 17:     return state;
  1718   0071EC  5015               	movf	_state^0,w,c
  1719   0071EE  0012               	return		;funcret
  1720   0071F0                     __end_of_getState:
  1721                           	callstack 0
  1722                           
  1723 ;; *************** function _eventRead *****************
  1724 ;; Defined at:
  1725 ;;		line 28 in file "event.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  key             2    5[COMRAM] int 
  1730 ;;  ev              2    3[COMRAM] int 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  2    0[COMRAM] unsigned int 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1740 ;;      Params:         2       0       0       0       0       0       0       0       0
  1741 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1742 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1743 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1744 ;;Total ram usage:        7 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 1
  1747 ;; This function calls:
  1748 ;;		_kpRead
  1749 ;; This function is called by:
  1750 ;;		_smLoop
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text13
  1755   0073D4                     __ptext13:
  1756                           	callstack 0
  1757   0073D4                     _eventRead:
  1758                           	callstack 28
  1759   0073D4                     
  1760                           ;event.c: 29:     int key;;event.c: 30:     int ev = EV_5;
  1761   0073D4  0E00               	movlw	0
  1762   0073D6  6E25               	movwf	(eventRead@ev+1)^0,c
  1763   0073D8  0E05               	movlw	5
  1764   0073DA  6E24               	movwf	eventRead@ev^0,c
  1765   0073DC                     
  1766                           ;event.c: 31:     key = kpRead();
  1767   0073DC  ECF4  F038         	call	_kpRead	;wreg free
  1768   0073E0  6E23               	movwf	??_eventRead^0,c
  1769   0073E2  5023               	movf	??_eventRead^0,w,c
  1770   0073E4  6E26               	movwf	eventRead@key^0,c
  1771   0073E6  6A27               	clrf	(eventRead@key+1)^0,c
  1772   0073E8                     
  1773                           ;event.c: 32:     if (key != key_ant) {
  1774   0073E8  5010               	movf	_key_ant^0,w,c
  1775   0073EA  1826               	xorwf	eventRead@key^0,w,c
  1776   0073EC  E109               	bnz	u1870
  1777   0073EE  5011               	movf	(_key_ant+1)^0,w,c
  1778   0073F0  1827               	xorwf	(eventRead@key+1)^0,w,c
  1779   0073F2  B4D8               	btfsc	status,2,c
  1780   0073F4  EFFE  F039         	goto	u1871
  1781   0073F8  EF00  F03A         	goto	u1870
  1782   0073FC                     u1871:
  1783   0073FC  EF16  F03A         	goto	l487
  1784   007400                     u1870:
  1785   007400                     
  1786                           ;event.c: 33:         if (((key) & (1<<0))) {
  1787   007400  A026               	btfss	eventRead@key^0,0,c
  1788   007402  EF05  F03A         	goto	u1881
  1789   007406  EF07  F03A         	goto	u1880
  1790   00740A                     u1881:
  1791   00740A  EF0B  F03A         	goto	l2558
  1792   00740E                     u1880:
  1793   00740E                     
  1794                           ;event.c: 34:             ev = EV_0;
  1795   00740E  0E00               	movlw	0
  1796   007410  6E25               	movwf	(eventRead@ev+1)^0,c
  1797   007412  0E00               	movlw	0
  1798   007414  6E24               	movwf	eventRead@ev^0,c
  1799   007416                     l2558:
  1800                           
  1801                           ;event.c: 37:         if (((key) & (1<<1))) {
  1802   007416  A226               	btfss	eventRead@key^0,1,c
  1803   007418  EF10  F03A         	goto	u1891
  1804   00741C  EF12  F03A         	goto	u1890
  1805   007420                     u1891:
  1806   007420  EF16  F03A         	goto	l487
  1807   007424                     u1890:
  1808   007424                     
  1809                           ;event.c: 38:             ev = EV_1;
  1810   007424  0E00               	movlw	0
  1811   007426  6E25               	movwf	(eventRead@ev+1)^0,c
  1812   007428  0E01               	movlw	1
  1813   00742A  6E24               	movwf	eventRead@ev^0,c
  1814   00742C                     l487:
  1815                           
  1816                           ;event.c: 46:     key_ant = key;
  1817   00742C  C026  F010         	movff	eventRead@key,_key_ant
  1818   007430  C027  F011         	movff	eventRead@key+1,_key_ant+1
  1819                           
  1820                           ;event.c: 47:     return ev;
  1821   007434  C024  F021         	movff	eventRead@ev,?_eventRead
  1822   007438  C025  F022         	movff	eventRead@ev+1,?_eventRead+1
  1823   00743C  0012               	return		;funcret
  1824   00743E                     __end_of_eventRead:
  1825                           	callstack 0
  1826                           
  1827 ;; *************** function _kpRead *****************
  1828 ;; Defined at:
  1829 ;;		line 29 in file "keypad.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      unsigned char 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1846 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used: 1
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_eventRead
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text14
  1857   0071E8                     __ptext14:
  1858                           	callstack 0
  1859   0071E8                     _kpRead:
  1860                           	callstack 28
  1861   0071E8                     
  1862                           ;keypad.c: 30:     return valor;
  1863   0071E8  5020               	movf	_valor^0,w,c
  1864   0071EA  0012               	return		;funcret
  1865   0071EC                     __end_of_kpRead:
  1866                           	callstack 0
  1867                           
  1868 ;; *************** function _smInit *****************
  1869 ;; Defined at:
  1870 ;;		line 8 in file "stateMachine.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;		None
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;		None
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      void 
  1877 ;; Registers used:
  1878 ;;		wreg, status,2, status,0, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1884 ;;      Params:         0       0       0       0       0       0       0       0       0
  1885 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1887 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1888 ;;Total ram usage:        0 bytes
  1889 ;; Hardware stack levels used: 1
  1890 ;; Hardware stack levels required when called: 2
  1891 ;; This function calls:
  1892 ;;		_eventInit
  1893 ;;		_setState
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text15
  1900   007226                     __ptext15:
  1901                           	callstack 0
  1902   007226                     _smInit:
  1903                           	callstack 28
  1904   007226                     
  1905                           ;stateMachine.c: 9:     setState(STATE_ALARME);
  1906   007226  0E00               	movlw	0
  1907   007228  EC00  F039         	call	_setState
  1908   00722C                     
  1909                           ;stateMachine.c: 10:     eventInit();
  1910   00722C  EC2A  F039         	call	_eventInit	;wreg free
  1911   007230  0012               	return		;funcret
  1912   007232                     __end_of_smInit:
  1913                           	callstack 0
  1914                           
  1915 ;; *************** function _setState *****************
  1916 ;; Defined at:
  1917 ;;		line 19 in file "var.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  newState        1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  newState        1    0[COMRAM] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1931 ;;      Params:         0       0       0       0       0       0       0       0       0
  1932 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1934 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1935 ;;Total ram usage:        1 bytes
  1936 ;; Hardware stack levels used: 1
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_smInit
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text16
  1945   007200                     __ptext16:
  1946                           	callstack 0
  1947   007200                     _setState:
  1948                           	callstack 29
  1949                           
  1950                           ;incstack = 0
  1951                           ;setState@newState stored from wreg
  1952   007200  6E21               	movwf	setState@newState^0,c
  1953   007202                     
  1954                           ;var.c: 20:     state = newState;
  1955   007202  C021  F015         	movff	setState@newState,_state
  1956   007206  0012               	return		;funcret
  1957   007208                     __end_of_setState:
  1958                           	callstack 0
  1959                           
  1960 ;; *************** function _eventInit *****************
  1961 ;; Defined at:
  1962 ;;		line 15 in file "event.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used: 1
  1982 ;; Hardware stack levels required when called: 1
  1983 ;; This function calls:
  1984 ;;		_kpInit
  1985 ;; This function is called by:
  1986 ;;		_smInit
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text17
  1991   007254                     __ptext17:
  1992                           	callstack 0
  1993   007254                     _eventInit:
  1994                           	callstack 28
  1995   007254                     
  1996                           ;event.c: 16:     kpInit();
  1997   007254  EC19  F039         	call	_kpInit	;wreg free
  1998   007258                     
  1999                           ;event.c: 18:     ev_ant = 0;
  2000   007258  0E00               	movlw	0
  2001   00725A  6E13               	movwf	(_ev_ant+1)^0,c
  2002   00725C  0E00               	movlw	0
  2003   00725E  6E12               	movwf	_ev_ant^0,c
  2004   007260                     
  2005                           ;event.c: 19:     key = 1;
  2006   007260  0E00               	movlw	0
  2007   007262  6E0F               	movwf	(_key+1)^0,c
  2008   007264  0E01               	movlw	1
  2009   007266  6E0E               	movwf	_key^0,c
  2010   007268  0012               	return		;funcret
  2011   00726A                     __end_of_eventInit:
  2012                           	callstack 0
  2013                           
  2014 ;; *************** function _kpInit *****************
  2015 ;; Defined at:
  2016 ;;		line 81 in file "keypad.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         0       0       0       0       0       0       0       0       0
  2031 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2033 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used: 1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_main
  2040 ;;		_eventInit
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text18
  2045   007232                     __ptext18:
  2046                           	callstack 0
  2047   007232                     _kpInit:
  2048                           	callstack 28
  2049   007232                     
  2050                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  2051   007232  6893               	setf	147,c	;volatile
  2052   007234                     
  2053                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  2054   007234  9EF1               	bcf	241,7,c	;volatile
  2055   007236                     
  2056                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  2057   007236  0E0E               	movlw	14
  2058   007238  6EC1               	movwf	193,c	;volatile
  2059   00723A                     
  2060                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  2061   00723A  0E00               	movlw	0
  2062   00723C  6E63               	movwf	99,c	;volatile
  2063   00723E  0012               	return		;funcret
  2064   007240                     __end_of_kpInit:
  2065                           	callstack 0
  2066                           
  2067 ;; *************** function _lcdInit *****************
  2068 ;; Defined at:
  2069 ;;		line 117 in file "lcd.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  i               1    3[COMRAM] unsigned char 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0
  2084 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2086 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2087 ;;Total ram usage:        1 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; Hardware stack levels required when called: 3
  2090 ;; This function calls:
  2091 ;;		_Delay2ms
  2092 ;;		_lcdCommand
  2093 ;;		_lcdCommand4bits
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;;		_outputInit
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text19
  2101   0074B6                     __ptext19:
  2102                           	callstack 0
  2103   0074B6                     _lcdInit:
  2104                           	callstack 27
  2105   0074B6                     
  2106                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  2107   0074B6  9095               	bcf	149,0,c	;volatile
  2108                           
  2109                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  2110   0074B8  9E95               	bcf	149,7,c	;volatile
  2111                           
  2112                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  2113   0074BA  9C95               	bcf	149,6,c	;volatile
  2114                           
  2115                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  2116   0074BC  9A95               	bcf	149,5,c	;volatile
  2117                           
  2118                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  2119   0074BE  9895               	bcf	149,4,c	;volatile
  2120                           
  2121                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  2122   0074C0  9495               	bcf	149,2,c	;volatile
  2123   0074C2                     
  2124                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  2125   0074C2  0E00               	movlw	0
  2126   0074C4  6E24               	movwf	lcdInit@i^0,c
  2127   0074C6                     l2620:
  2128                           
  2129                           ;lcd.c: 133:         Delay2ms();
  2130   0074C6  EC79  F039         	call	_Delay2ms	;wreg free
  2131   0074CA  2A24               	incf	lcdInit@i^0,f,c
  2132   0074CC  0E06               	movlw	6
  2133   0074CE  6424               	cpfsgt	lcdInit@i^0,c
  2134   0074D0  EF6C  F03A         	goto	u1951
  2135   0074D4  EF6E  F03A         	goto	u1950
  2136   0074D8                     u1951:
  2137   0074D8  EF63  F03A         	goto	l2620
  2138   0074DC                     u1950:
  2139   0074DC                     
  2140                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  2141   0074DC  0E00               	movlw	0
  2142   0074DE  6E21               	movwf	lcdCommand4bits@data^0,c
  2143   0074E0  0E30               	movlw	48
  2144   0074E2  EC1F  F03A         	call	_lcdCommand4bits
  2145                           
  2146                           ;lcd.c: 138:     Delay2ms();
  2147   0074E6  EC79  F039         	call	_Delay2ms	;wreg free
  2148                           
  2149                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  2150   0074EA  0E00               	movlw	0
  2151   0074EC  6E21               	movwf	lcdCommand4bits@data^0,c
  2152   0074EE  0E30               	movlw	48
  2153   0074F0  EC1F  F03A         	call	_lcdCommand4bits
  2154                           
  2155                           ;lcd.c: 142:     Delay2ms();
  2156   0074F4  EC79  F039         	call	_Delay2ms	;wreg free
  2157                           
  2158                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  2159   0074F8  0E00               	movlw	0
  2160   0074FA  6E21               	movwf	lcdCommand4bits@data^0,c
  2161   0074FC  0E30               	movlw	48
  2162   0074FE  EC1F  F03A         	call	_lcdCommand4bits
  2163                           
  2164                           ;lcd.c: 146:     Delay2ms();
  2165   007502  EC79  F039         	call	_Delay2ms	;wreg free
  2166                           
  2167                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  2168   007506  0E00               	movlw	0
  2169   007508  6E21               	movwf	lcdCommand4bits@data^0,c
  2170   00750A  0E20               	movlw	32
  2171   00750C  EC1F  F03A         	call	_lcdCommand4bits
  2172                           
  2173                           ;lcd.c: 150:     Delay2ms();
  2174   007510  EC79  F039         	call	_Delay2ms	;wreg free
  2175                           
  2176                           ;lcd.c: 153:     lcdCommand(0x28);
  2177   007514  0E28               	movlw	40
  2178   007516  ECC6  F039         	call	_lcdCommand
  2179                           
  2180                           ;lcd.c: 154:     lcdCommand(0x06);
  2181   00751A  0E06               	movlw	6
  2182   00751C  ECC6  F039         	call	_lcdCommand
  2183                           
  2184                           ;lcd.c: 156:     lcdCommand(0x0C);
  2185   007520  0E0C               	movlw	12
  2186   007522  ECC6  F039         	call	_lcdCommand
  2187                           
  2188                           ;lcd.c: 157:     lcdCommand(0x01);
  2189   007526  0E01               	movlw	1
  2190   007528  ECC6  F039         	call	_lcdCommand
  2191   00752C  0012               	return		;funcret
  2192   00752E                     __end_of_lcdInit:
  2193                           	callstack 0
  2194                           
  2195 ;; *************** function _lcdCommand *****************
  2196 ;; Defined at:
  2197 ;;		line 93 in file "lcd.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  cmd             1    wreg     unsigned char 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  cmd             1    2[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  1    wreg      void 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2211 ;;      Params:         0       0       0       0       0       0       0       0       0
  2212 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2214 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2215 ;;Total ram usage:        1 bytes
  2216 ;; Hardware stack levels used: 1
  2217 ;; Hardware stack levels required when called: 2
  2218 ;; This function calls:
  2219 ;;		_Delay2ms
  2220 ;;		_Delay40us
  2221 ;;		_lcdCommand4bits
  2222 ;; This function is called by:
  2223 ;;		_lcdInit
  2224 ;;		_outputPrint
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text20
  2229   00738C                     __ptext20:
  2230                           	callstack 0
  2231   00738C                     _lcdCommand:
  2232                           	callstack 26
  2233                           
  2234                           ;incstack = 0
  2235                           ;lcdCommand@cmd stored from wreg
  2236   00738C  6E23               	movwf	lcdCommand@cmd^0,c
  2237   00738E                     
  2238                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  2239   00738E  0E00               	movlw	0
  2240   007390  6E21               	movwf	lcdCommand4bits@data^0,c
  2241   007392  5023               	movf	lcdCommand@cmd^0,w,c
  2242   007394  EC1F  F03A         	call	_lcdCommand4bits
  2243                           
  2244                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  2245   007398  0E00               	movlw	0
  2246   00739A  6E21               	movwf	lcdCommand4bits@data^0,c
  2247   00739C  3823               	swapf	lcdCommand@cmd^0,w,c
  2248   00739E  0BF0               	andlw	240
  2249   0073A0  EC1F  F03A         	call	_lcdCommand4bits
  2250   0073A4                     
  2251                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  2252   0073A4  0E02               	movlw	2
  2253   0073A6  1823               	xorwf	lcdCommand@cmd^0,w,c
  2254   0073A8  B4D8               	btfsc	status,2,c
  2255   0073AA  EFD9  F039         	goto	u1791
  2256   0073AE  EFDB  F039         	goto	u1790
  2257   0073B2                     u1791:
  2258   0073B2  EFE3  F039         	goto	l2498
  2259   0073B6                     u1790:
  2260   0073B6  0423               	decf	lcdCommand@cmd^0,w,c
  2261   0073B8  A4D8               	btfss	status,2,c
  2262   0073BA  EFE1  F039         	goto	u1801
  2263   0073BE  EFE3  F039         	goto	u1800
  2264   0073C2                     u1801:
  2265   0073C2  EFE7  F039         	goto	l2500
  2266   0073C6                     u1800:
  2267   0073C6                     l2498:
  2268                           
  2269                           ;lcd.c: 100:         Delay2ms();
  2270   0073C6  EC79  F039         	call	_Delay2ms	;wreg free
  2271                           
  2272                           ;lcd.c: 102:     } else {
  2273   0073CA  EFE9  F039         	goto	l180
  2274   0073CE                     l2500:
  2275                           
  2276                           ;lcd.c: 103:         Delay40us();
  2277   0073CE  EC35  F039         	call	_Delay40us	;wreg free
  2278   0073D2                     l180:
  2279   0073D2  0012               	return		;funcret
  2280   0073D4                     __end_of_lcdCommand:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _lcdCommand4bits *****************
  2284 ;; Defined at:
  2285 ;;		line 52 in file "lcd.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  cmd             1    wreg     unsigned char 
  2288 ;;  data            1    0[COMRAM] unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  cmd             1    1[COMRAM] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2300 ;;      Params:         1       0       0       0       0       0       0       0       0
  2301 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2303 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2304 ;;Total ram usage:        2 bytes
  2305 ;; Hardware stack levels used: 1
  2306 ;; Hardware stack levels required when called: 1
  2307 ;; This function calls:
  2308 ;;		_pulseEnable
  2309 ;; This function is called by:
  2310 ;;		_lcdCommand
  2311 ;;		_lcdData
  2312 ;;		_lcdInit
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text21
  2317   00743E                     __ptext21:
  2318                           	callstack 0
  2319   00743E                     _lcdCommand4bits:
  2320                           	callstack 25
  2321                           
  2322                           ;incstack = 0
  2323                           ;lcdCommand4bits@cmd stored from wreg
  2324   00743E  6E22               	movwf	lcdCommand4bits@cmd^0,c
  2325   007440                     
  2326                           ;lcd.c: 54:     if (data) {
  2327   007440  5021               	movf	lcdCommand4bits@data^0,w,c
  2328   007442  B4D8               	btfsc	status,2,c
  2329   007444  EF26  F03A         	goto	u1401
  2330   007448  EF28  F03A         	goto	u1400
  2331   00744C                     u1401:
  2332   00744C  EF2B  F03A         	goto	l2318
  2333   007450                     u1400:
  2334   007450                     
  2335                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  2336   007450  8083               	bsf	131,0,c	;volatile
  2337                           
  2338                           ;lcd.c: 56:     } else {
  2339   007452  EF2C  F03A         	goto	l2320
  2340   007456                     l2318:
  2341                           
  2342                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  2343   007456  9083               	bcf	131,0,c	;volatile
  2344   007458                     l2320:
  2345                           
  2346                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  2347   007458  AE22               	btfss	lcdCommand4bits@cmd^0,7,c
  2348   00745A  EF31  F03A         	goto	u1411
  2349   00745E  EF33  F03A         	goto	u1410
  2350   007462                     u1411:
  2351   007462  EF36  F03A         	goto	l2324
  2352   007466                     u1410:
  2353   007466                     
  2354                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  2355   007466  8483               	bsf	131,2,c	;volatile
  2356                           
  2357                           ;lcd.c: 65:     } else {
  2358   007468  EF37  F03A         	goto	l2326
  2359   00746C                     l2324:
  2360                           
  2361                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  2362   00746C  9483               	bcf	131,2,c	;volatile
  2363   00746E                     l2326:
  2364                           
  2365                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  2366   00746E  AC22               	btfss	lcdCommand4bits@cmd^0,6,c
  2367   007470  EF3C  F03A         	goto	u1421
  2368   007474  EF3E  F03A         	goto	u1420
  2369   007478                     u1421:
  2370   007478  EF41  F03A         	goto	l2330
  2371   00747C                     u1420:
  2372   00747C                     
  2373                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  2374   00747C  8883               	bsf	131,4,c	;volatile
  2375                           
  2376                           ;lcd.c: 72:     } else {
  2377   00747E  EF42  F03A         	goto	l2332
  2378   007482                     l2330:
  2379                           
  2380                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  2381   007482  9883               	bcf	131,4,c	;volatile
  2382   007484                     l2332:
  2383                           
  2384                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  2385   007484  AA22               	btfss	lcdCommand4bits@cmd^0,5,c
  2386   007486  EF47  F03A         	goto	u1431
  2387   00748A  EF49  F03A         	goto	u1430
  2388   00748E                     u1431:
  2389   00748E  EF4C  F03A         	goto	l2336
  2390   007492                     u1430:
  2391   007492                     
  2392                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  2393   007492  8A83               	bsf	131,5,c	;volatile
  2394                           
  2395                           ;lcd.c: 79:     } else {
  2396   007494  EF4D  F03A         	goto	l2338
  2397   007498                     l2336:
  2398                           
  2399                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  2400   007498  9A83               	bcf	131,5,c	;volatile
  2401   00749A                     l2338:
  2402                           
  2403                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  2404   00749A  A822               	btfss	lcdCommand4bits@cmd^0,4,c
  2405   00749C  EF52  F03A         	goto	u1441
  2406   0074A0  EF54  F03A         	goto	u1440
  2407   0074A4                     u1441:
  2408   0074A4  EF57  F03A         	goto	l2342
  2409   0074A8                     u1440:
  2410   0074A8                     
  2411                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  2412   0074A8  8C83               	bsf	131,6,c	;volatile
  2413                           
  2414                           ;lcd.c: 86:     } else {
  2415   0074AA  EF58  F03A         	goto	l2344
  2416   0074AE                     l2342:
  2417                           
  2418                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  2419   0074AE  9C83               	bcf	131,6,c	;volatile
  2420   0074B0                     l2344:
  2421                           
  2422                           ;lcd.c: 90:     pulseEnable();
  2423   0074B0  ECFD  F038         	call	_pulseEnable	;wreg free
  2424   0074B4  0012               	return		;funcret
  2425   0074B6                     __end_of_lcdCommand4bits:
  2426                           	callstack 0
  2427                           
  2428 ;; *************** function _pulseEnable *****************
  2429 ;; Defined at:
  2430 ;;		line 47 in file "lcd.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;		None
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;		None
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      void 
  2437 ;; Registers used:
  2438 ;;		status,2, status,0
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2444 ;;      Params:         0       0       0       0       0       0       0       0       0
  2445 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2447 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2448 ;;Total ram usage:        0 bytes
  2449 ;; Hardware stack levels used: 1
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_lcdCommand4bits
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text22
  2458   0071FA                     __ptext22:
  2459                           	callstack 0
  2460   0071FA                     _pulseEnable:
  2461                           	callstack 25
  2462   0071FA                     
  2463                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  2464   0071FA  8E83               	bsf	131,7,c	;volatile
  2465                           
  2466                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  2467   0071FC  9E83               	bcf	131,7,c	;volatile
  2468   0071FE  0012               	return		;funcret
  2469   007200                     __end_of_pulseEnable:
  2470                           	callstack 0
  2471                           
  2472 ;; *************** function _Delay40us *****************
  2473 ;; Defined at:
  2474 ;;		line 36 in file "lcd.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  j               1    0[COMRAM] unsigned char 
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2, status,0
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0
  2489 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2491 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2492 ;;Total ram usage:        1 bytes
  2493 ;; Hardware stack levels used: 1
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_lcdCommand
  2498 ;;		_lcdData
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text23
  2503   00726A                     __ptext23:
  2504                           	callstack 0
  2505   00726A                     _Delay40us:
  2506                           	callstack 26
  2507   00726A                     
  2508                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  2509   00726A  0E00               	movlw	0
  2510   00726C  6E21               	movwf	Delay40us@j^0,c
  2511   00726E                     l2310:
  2512   00726E  2A21               	incf	Delay40us@j^0,f,c
  2513   007270  0E43               	movlw	67
  2514   007272  6421               	cpfsgt	Delay40us@j^0,c
  2515   007274  EF3E  F039         	goto	u1391
  2516   007278  EF40  F039         	goto	u1390
  2517   00727C                     u1391:
  2518   00727C  EF37  F039         	goto	l2310
  2519   007280                     u1390:
  2520   007280  0012               	return		;funcret
  2521   007282                     __end_of_Delay40us:
  2522                           	callstack 0
  2523                           
  2524 ;; *************** function _Delay2ms *****************
  2525 ;; Defined at:
  2526 ;;		line 41 in file "lcd.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;		None
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  k               1    1[COMRAM] unsigned char 
  2531 ;;  j               1    0[COMRAM] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2541 ;;      Params:         0       0       0       0       0       0       0       0       0
  2542 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2544 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2545 ;;Total ram usage:        2 bytes
  2546 ;; Hardware stack levels used: 1
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_lcdCommand
  2551 ;;		_lcdInit
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text24
  2556   0072F2                     __ptext24:
  2557                           	callstack 0
  2558   0072F2                     _Delay2ms:
  2559                           	callstack 27
  2560   0072F2                     
  2561                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  2562   0072F2  0E00               	movlw	0
  2563   0072F4  6E21               	movwf	Delay2ms@j^0,c
  2564   0072F6                     l2352:
  2565                           
  2566                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  2567   0072F6  0E00               	movlw	0
  2568   0072F8  6E22               	movwf	Delay2ms@k^0,c
  2569   0072FA                     l2358:
  2570   0072FA  2A22               	incf	Delay2ms@k^0,f,c
  2571   0072FC  0EB1               	movlw	177
  2572   0072FE  6422               	cpfsgt	Delay2ms@k^0,c
  2573   007300  EF84  F039         	goto	u1451
  2574   007304  EF86  F039         	goto	u1450
  2575   007308                     u1451:
  2576   007308  EF7D  F039         	goto	l2358
  2577   00730C                     u1450:
  2578   00730C  2A21               	incf	Delay2ms@j^0,f,c
  2579   00730E  0E13               	movlw	19
  2580   007310  6421               	cpfsgt	Delay2ms@j^0,c
  2581   007312  EF8D  F039         	goto	u1461
  2582   007316  EF8F  F039         	goto	u1460
  2583   00731A                     u1461:
  2584   00731A  EF7B  F039         	goto	l2352
  2585   00731E                     u1460:
  2586   00731E  0012               	return		;funcret
  2587   007320                     __end_of_Delay2ms:
  2588                           	callstack 0
  2589                           
  2590 ;; *************** function _kpDebounce *****************
  2591 ;; Defined at:
  2592 ;;		line 33 in file "keypad.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  portes          5    8[COMRAM] unsigned char [5]
  2597 ;;  bits            5    3[COMRAM] unsigned char [5]
  2598 ;;  j               1   13[COMRAM] unsigned char 
  2599 ;;  i               1    0        unsigned char 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0
  2610 ;;      Locals:        11       0       0       0       0       0       0       0       0
  2611 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2612 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2613 ;;Total ram usage:       14 bytes
  2614 ;; Hardware stack levels used: 1
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text25
  2623   00781A                     __ptext25:
  2624                           	callstack 0
  2625   00781A                     _kpDebounce:
  2626                           	callstack 30
  2627   00781A                     
  2628                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  2629   00781A  EE20  F029         	lfsr	2,kpDebounce@portes
  2630   00781E  0E04               	movlw	4
  2631   007820                     u951:
  2632   007820  6ADE               	clrf	postinc2,c
  2633   007822  06E8               	decf	wreg,f,c
  2634   007824  E2FD               	bc	u951
  2635   007826  CF81 F029          	movff	3969,kpDebounce@portes	;volatile
  2636   00782A  CF81 F02A          	movff	3969,kpDebounce@portes+1	;volatile
  2637   00782E  CF81 F02B          	movff	3969,kpDebounce@portes+2	;volatile
  2638   007832  CF81 F02C          	movff	3969,kpDebounce@portes+3	;volatile
  2639   007836  CF84 F02D          	movff	3972,kpDebounce@portes+4	;volatile
  2640   00783A                     
  2641                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  2642   00783A  EE20  F046         	lfsr	2,kpDebounce@F15
  2643   00783E  EE10  F024         	lfsr	1,kpDebounce@bits
  2644   007842  0E04               	movlw	4
  2645   007844                     u961:
  2646   007844  CFDB FFE3          	movff	plusw2,plusw1
  2647   007848  06E8               	decf	wreg,f,c
  2648   00784A  E2FC               	bc	u961
  2649   00784C                     
  2650                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  2651   00784C  0E00               	movlw	0
  2652   00784E  6E2E               	movwf	kpDebounce@j^0,c
  2653   007850                     l1776:
  2654                           
  2655                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  2656   007850  502E               	movf	kpDebounce@j^0,w,c
  2657   007852  0F29               	addlw	low kpDebounce@portes
  2658   007854  6ED9               	movwf	fsr2l,c
  2659   007856  6ADA               	clrf	fsr2h,c
  2660   007858  50DF               	movf	indf2,w,c
  2661   00785A  6E21               	movwf	??_kpDebounce^0,c
  2662   00785C  502E               	movf	kpDebounce@j^0,w,c
  2663   00785E  0F24               	addlw	low kpDebounce@bits
  2664   007860  6ED9               	movwf	fsr2l,c
  2665   007862  6ADA               	clrf	fsr2h,c
  2666   007864  50DF               	movf	indf2,w,c
  2667   007866  6E22               	movwf	(??_kpDebounce+1)^0,c
  2668   007868  0E01               	movlw	1
  2669   00786A  6E23               	movwf	(??_kpDebounce+2)^0,c
  2670   00786C  2A22               	incf	(??_kpDebounce+1)^0,f,c
  2671   00786E  EF3B  F03C         	goto	u974
  2672   007872                     u975:
  2673   007872  90D8               	bcf	status,0,c
  2674   007874  3623               	rlcf	(??_kpDebounce+2)^0,f,c
  2675   007876                     u974:
  2676   007876  2E22               	decfsz	(??_kpDebounce+1)^0,f,c
  2677   007878  EF39  F03C         	goto	u975
  2678   00787C  5023               	movf	(??_kpDebounce+2)^0,w,c
  2679   00787E  1421               	andwf	??_kpDebounce^0,w,c
  2680   007880  0900               	iorlw	0
  2681   007882  A4D8               	btfss	status,2,c
  2682   007884  EF46  F03C         	goto	u981
  2683   007888  EF48  F03C         	goto	u980
  2684   00788C                     u981:
  2685   00788C  EF58  F03C         	goto	l1780
  2686   007890                     u980:
  2687   007890                     
  2688                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  2689   007890  C02E  F021         	movff	kpDebounce@j,??_kpDebounce
  2690   007894  0E01               	movlw	1
  2691   007896  6E22               	movwf	(??_kpDebounce+1)^0,c
  2692   007898  2A21               	incf	??_kpDebounce^0,f,c
  2693   00789A  EF51  F03C         	goto	u994
  2694   00789E                     u995:
  2695   00789E  90D8               	bcf	status,0,c
  2696   0078A0  3622               	rlcf	(??_kpDebounce+1)^0,f,c
  2697   0078A2                     u994:
  2698   0078A2  2E21               	decfsz	??_kpDebounce^0,f,c
  2699   0078A4  EF4F  F03C         	goto	u995
  2700   0078A8  5022               	movf	(??_kpDebounce+1)^0,w,c
  2701   0078AA  121E               	iorwf	kpDebounce@valorNovo^0,f,c
  2702                           
  2703                           ;keypad.c: 65:             } else {
  2704   0078AC  EF67  F03C         	goto	l1782
  2705   0078B0                     l1780:
  2706                           
  2707                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  2708   0078B0  C02E  F021         	movff	kpDebounce@j,??_kpDebounce
  2709   0078B4  0E01               	movlw	1
  2710   0078B6  6E22               	movwf	(??_kpDebounce+1)^0,c
  2711   0078B8  2A21               	incf	??_kpDebounce^0,f,c
  2712   0078BA  EF61  F03C         	goto	u1004
  2713   0078BE                     u1005:
  2714   0078BE  90D8               	bcf	status,0,c
  2715   0078C0  3622               	rlcf	(??_kpDebounce+1)^0,f,c
  2716   0078C2                     u1004:
  2717   0078C2  2E21               	decfsz	??_kpDebounce^0,f,c
  2718   0078C4  EF5F  F03C         	goto	u1005
  2719   0078C8  5022               	movf	(??_kpDebounce+1)^0,w,c
  2720   0078CA  0AFF               	xorlw	255
  2721   0078CC  161E               	andwf	kpDebounce@valorNovo^0,f,c
  2722   0078CE                     l1782:
  2723                           
  2724                           ;keypad.c: 68:         }
  2725   0078CE  2A2E               	incf	kpDebounce@j^0,f,c
  2726   0078D0  0E04               	movlw	4
  2727   0078D2  642E               	cpfsgt	kpDebounce@j^0,c
  2728   0078D4  EF6E  F03C         	goto	u1011
  2729   0078D8  EF70  F03C         	goto	u1010
  2730   0078DC                     u1011:
  2731   0078DC  EF28  F03C         	goto	l1776
  2732   0078E0                     u1010:
  2733   0078E0                     
  2734                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  2735   0078E0  501E               	movf	kpDebounce@valorNovo^0,w,c
  2736   0078E2  181D               	xorwf	kpDebounce@valorAntigo^0,w,c
  2737   0078E4  A4D8               	btfss	status,2,c
  2738   0078E6  EF77  F03C         	goto	u1021
  2739   0078EA  EF79  F03C         	goto	u1020
  2740   0078EE                     u1021:
  2741   0078EE  EF7C  F03C         	goto	l1790
  2742   0078F2                     u1020:
  2743   0078F2                     
  2744                           ;keypad.c: 70:         tempo--;
  2745   0078F2  061F               	decf	kpDebounce@tempo^0,f,c
  2746                           
  2747                           ;keypad.c: 71:     } else {
  2748   0078F4  EF80  F03C         	goto	l136
  2749   0078F8                     l1790:
  2750                           
  2751                           ;keypad.c: 72:         tempo = 10;
  2752   0078F8  0E0A               	movlw	10
  2753   0078FA  6E1F               	movwf	kpDebounce@tempo^0,c
  2754   0078FC                     
  2755                           ;keypad.c: 73:         valorAntigo = valorNovo;
  2756   0078FC  C01E  F01D         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  2757   007900                     l136:
  2758                           
  2759                           ;keypad.c: 75:     if (tempo == 0) {
  2760   007900  501F               	movf	kpDebounce@tempo^0,w,c
  2761   007902  A4D8               	btfss	status,2,c
  2762   007904  EF86  F03C         	goto	u1031
  2763   007908  EF88  F03C         	goto	u1030
  2764   00790C                     u1031:
  2765   00790C  EF8A  F03C         	goto	l138
  2766   007910                     u1030:
  2767   007910                     
  2768                           ;keypad.c: 76:         valor = valorAntigo;
  2769   007910  C01D  F020         	movff	kpDebounce@valorAntigo,_valor
  2770   007914                     l138:
  2771   007914  0012               	return		;funcret
  2772   007916                     __end_of_kpDebounce:
  2773                           	callstack 0
  2774                           
  2775 ;; *************** function _dsInit *****************
  2776 ;; Defined at:
  2777 ;;		line 17 in file "ds1307.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0, cstack
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2791 ;;      Params:         0       0       0       0       0       0       0       0       0
  2792 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2794 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2795 ;;Total ram usage:        0 bytes
  2796 ;; Hardware stack levels used: 1
  2797 ;; Hardware stack levels required when called: 2
  2798 ;; This function calls:
  2799 ;;		_i2cInit
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text26
  2806   0071F4                     __ptext26:
  2807                           	callstack 0
  2808   0071F4                     _dsInit:
  2809                           	callstack 28
  2810   0071F4                     
  2811                           ;ds1307.c: 18:  i2cInit();
  2812   0071F4  EC64  F039         	call	_i2cInit	;wreg free
  2813   0071F8  0012               	return		;funcret
  2814   0071FA                     __end_of_dsInit:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _i2cInit *****************
  2818 ;; Defined at:
  2819 ;;		line 14 in file "soft_i2c.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2, status,0, cstack
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2833 ;;      Params:         0       0       0       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used: 1
  2839 ;; Hardware stack levels required when called: 1
  2840 ;; This function calls:
  2841 ;;		_pinMode
  2842 ;; This function is called by:
  2843 ;;		_dsInit
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text27
  2848   0072C8                     __ptext27:
  2849                           	callstack 0
  2850   0072C8                     _i2cInit:
  2851                           	callstack 28
  2852   0072C8                     
  2853                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  2854   0072C8  0E00               	movlw	0
  2855   0072CA  6E22               	movwf	(pinMode@pin+1)^0,c
  2856   0072CC  0E08               	movlw	8
  2857   0072CE  6E21               	movwf	pinMode@pin^0,c
  2858   0072D0  0E00               	movlw	0
  2859   0072D2  6E24               	movwf	(pinMode@type+1)^0,c
  2860   0072D4  0E01               	movlw	1
  2861   0072D6  6E23               	movwf	pinMode@type^0,c
  2862   0072D8  EC29  F03D         	call	_pinMode	;wreg free
  2863                           
  2864                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  2865   0072DC  0E00               	movlw	0
  2866   0072DE  6E22               	movwf	(pinMode@pin+1)^0,c
  2867   0072E0  0E09               	movlw	9
  2868   0072E2  6E21               	movwf	pinMode@pin^0,c
  2869   0072E4  0E00               	movlw	0
  2870   0072E6  6E24               	movwf	(pinMode@type+1)^0,c
  2871   0072E8  0E01               	movlw	1
  2872   0072EA  6E23               	movwf	pinMode@type^0,c
  2873   0072EC  EC29  F03D         	call	_pinMode	;wreg free
  2874   0072F0  0012               	return		;funcret
  2875   0072F2                     __end_of_i2cInit:
  2876                           	callstack 0
  2877                           
  2878 ;; *************** function _pinMode *****************
  2879 ;; Defined at:
  2880 ;;		line 54 in file "io.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  pin             2    0[COMRAM] int 
  2883 ;;  type            2    2[COMRAM] int 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2895 ;;      Params:         4       0       0       0       0       0       0       0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2897 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2898 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2899 ;;Total ram usage:        6 bytes
  2900 ;; Hardware stack levels used: 1
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_i2cInit
  2905 ;;		_read_SCL
  2906 ;;		_read_SDA
  2907 ;;		_clear_SCL
  2908 ;;		_clear_SDA
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text28
  2913   007A52                     __ptext28:
  2914                           	callstack 0
  2915   007A52                     _pinMode:
  2916                           	callstack 28
  2917   007A52                     
  2918                           ;io.c: 56:     if(pin <8){
  2919   007A52  BE22               	btfsc	(pinMode@pin+1)^0,7,c
  2920   007A54  EF37  F03D         	goto	u1590
  2921   007A58  5022               	movf	(pinMode@pin+1)^0,w,c
  2922   007A5A  E107               	bnz	u1591
  2923   007A5C  0E08               	movlw	8
  2924   007A5E  5C21               	subwf	pinMode@pin^0,w,c
  2925   007A60  B0D8               	btfsc	status,0,c
  2926   007A62  EF35  F03D         	goto	u1591
  2927   007A66  EF37  F03D         	goto	u1590
  2928   007A6A                     u1591:
  2929   007A6A  EF61  F03D         	goto	l2456
  2930   007A6E                     u1590:
  2931   007A6E                     
  2932                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  2933   007A6E  5023               	movf	pinMode@type^0,w,c
  2934   007A70  1024               	iorwf	(pinMode@type+1)^0,w,c
  2935   007A72  B4D8               	btfsc	status,2,c
  2936   007A74  EF3E  F03D         	goto	u1601
  2937   007A78  EF40  F03D         	goto	u1600
  2938   007A7C                     u1601:
  2939   007A7C  EF50  F03D         	goto	l2454
  2940   007A80                     u1600:
  2941   007A80  C021  F025         	movff	pinMode@pin,??_pinMode
  2942   007A84  0E01               	movlw	1
  2943   007A86  6E26               	movwf	(??_pinMode+1)^0,c
  2944   007A88  2A25               	incf	??_pinMode^0,f,c
  2945   007A8A  EF49  F03D         	goto	u1614
  2946   007A8E                     u1615:
  2947   007A8E  90D8               	bcf	status,0,c
  2948   007A90  3626               	rlcf	(??_pinMode+1)^0,f,c
  2949   007A92                     u1614:
  2950   007A92  2E25               	decfsz	??_pinMode^0,f,c
  2951   007A94  EF47  F03D         	goto	u1615
  2952   007A98  5026               	movf	(??_pinMode+1)^0,w,c
  2953   007A9A  1292               	iorwf	146,f,c	;volatile
  2954   007A9C  EF4F  F03E         	goto	l113
  2955   007AA0                     l2454:
  2956   007AA0  C021  F025         	movff	pinMode@pin,??_pinMode
  2957   007AA4  0E01               	movlw	1
  2958   007AA6  6E26               	movwf	(??_pinMode+1)^0,c
  2959   007AA8  2A25               	incf	??_pinMode^0,f,c
  2960   007AAA  EF59  F03D         	goto	u1624
  2961   007AAE                     u1625:
  2962   007AAE  90D8               	bcf	status,0,c
  2963   007AB0  3626               	rlcf	(??_pinMode+1)^0,f,c
  2964   007AB2                     u1624:
  2965   007AB2  2E25               	decfsz	??_pinMode^0,f,c
  2966   007AB4  EF57  F03D         	goto	u1625
  2967   007AB8  5026               	movf	(??_pinMode+1)^0,w,c
  2968   007ABA  0AFF               	xorlw	255
  2969   007ABC  1692               	andwf	146,f,c	;volatile
  2970   007ABE  EF4F  F03E         	goto	l113
  2971   007AC2                     l2456:
  2972   007AC2  BE22               	btfsc	(pinMode@pin+1)^0,7,c
  2973   007AC4  EF6F  F03D         	goto	u1630
  2974   007AC8  5022               	movf	(pinMode@pin+1)^0,w,c
  2975   007ACA  E107               	bnz	u1631
  2976   007ACC  0E10               	movlw	16
  2977   007ACE  5C21               	subwf	pinMode@pin^0,w,c
  2978   007AD0  B0D8               	btfsc	status,0,c
  2979   007AD2  EF6D  F03D         	goto	u1631
  2980   007AD6  EF6F  F03D         	goto	u1630
  2981   007ADA                     u1631:
  2982   007ADA  EF9D  F03D         	goto	l2464
  2983   007ADE                     u1630:
  2984   007ADE                     
  2985                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  2986   007ADE  5023               	movf	pinMode@type^0,w,c
  2987   007AE0  1024               	iorwf	(pinMode@type+1)^0,w,c
  2988   007AE2  B4D8               	btfsc	status,2,c
  2989   007AE4  EF76  F03D         	goto	u1641
  2990   007AE8  EF78  F03D         	goto	u1640
  2991   007AEC                     u1641:
  2992   007AEC  EF8A  F03D         	goto	l2462
  2993   007AF0                     u1640:
  2994   007AF0  C021  F025         	movff	pinMode@pin,??_pinMode
  2995   007AF4  0EF8               	movlw	-8
  2996   007AF6  2625               	addwf	??_pinMode^0,f,c
  2997   007AF8  0E01               	movlw	1
  2998   007AFA  6E26               	movwf	(??_pinMode+1)^0,c
  2999   007AFC  2A25               	incf	??_pinMode^0,f,c
  3000   007AFE  EF83  F03D         	goto	u1654
  3001   007B02                     u1655:
  3002   007B02  90D8               	bcf	status,0,c
  3003   007B04  3626               	rlcf	(??_pinMode+1)^0,f,c
  3004   007B06                     u1654:
  3005   007B06  2E25               	decfsz	??_pinMode^0,f,c
  3006   007B08  EF81  F03D         	goto	u1655
  3007   007B0C  5026               	movf	(??_pinMode+1)^0,w,c
  3008   007B0E  1293               	iorwf	147,f,c	;volatile
  3009   007B10  EF4F  F03E         	goto	l113
  3010   007B14                     l2462:
  3011   007B14  C021  F025         	movff	pinMode@pin,??_pinMode
  3012   007B18  0EF8               	movlw	-8
  3013   007B1A  2625               	addwf	??_pinMode^0,f,c
  3014   007B1C  0E01               	movlw	1
  3015   007B1E  6E26               	movwf	(??_pinMode+1)^0,c
  3016   007B20  2A25               	incf	??_pinMode^0,f,c
  3017   007B22  EF95  F03D         	goto	u1664
  3018   007B26                     u1665:
  3019   007B26  90D8               	bcf	status,0,c
  3020   007B28  3626               	rlcf	(??_pinMode+1)^0,f,c
  3021   007B2A                     u1664:
  3022   007B2A  2E25               	decfsz	??_pinMode^0,f,c
  3023   007B2C  EF93  F03D         	goto	u1665
  3024   007B30  5026               	movf	(??_pinMode+1)^0,w,c
  3025   007B32  0AFF               	xorlw	255
  3026   007B34  1693               	andwf	147,f,c	;volatile
  3027   007B36  EF4F  F03E         	goto	l113
  3028   007B3A                     l2464:
  3029   007B3A  BE22               	btfsc	(pinMode@pin+1)^0,7,c
  3030   007B3C  EFAB  F03D         	goto	u1670
  3031   007B40  5022               	movf	(pinMode@pin+1)^0,w,c
  3032   007B42  E107               	bnz	u1671
  3033   007B44  0E18               	movlw	24
  3034   007B46  5C21               	subwf	pinMode@pin^0,w,c
  3035   007B48  B0D8               	btfsc	status,0,c
  3036   007B4A  EFA9  F03D         	goto	u1671
  3037   007B4E  EFAB  F03D         	goto	u1670
  3038   007B52                     u1671:
  3039   007B52  EFD9  F03D         	goto	l2472
  3040   007B56                     u1670:
  3041   007B56                     
  3042                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  3043   007B56  5023               	movf	pinMode@type^0,w,c
  3044   007B58  1024               	iorwf	(pinMode@type+1)^0,w,c
  3045   007B5A  B4D8               	btfsc	status,2,c
  3046   007B5C  EFB2  F03D         	goto	u1681
  3047   007B60  EFB4  F03D         	goto	u1680
  3048   007B64                     u1681:
  3049   007B64  EFC6  F03D         	goto	l2470
  3050   007B68                     u1680:
  3051   007B68  C021  F025         	movff	pinMode@pin,??_pinMode
  3052   007B6C  0EF0               	movlw	-16
  3053   007B6E  2625               	addwf	??_pinMode^0,f,c
  3054   007B70  0E01               	movlw	1
  3055   007B72  6E26               	movwf	(??_pinMode+1)^0,c
  3056   007B74  2A25               	incf	??_pinMode^0,f,c
  3057   007B76  EFBF  F03D         	goto	u1694
  3058   007B7A                     u1695:
  3059   007B7A  90D8               	bcf	status,0,c
  3060   007B7C  3626               	rlcf	(??_pinMode+1)^0,f,c
  3061   007B7E                     u1694:
  3062   007B7E  2E25               	decfsz	??_pinMode^0,f,c
  3063   007B80  EFBD  F03D         	goto	u1695
  3064   007B84  5026               	movf	(??_pinMode+1)^0,w,c
  3065   007B86  1294               	iorwf	148,f,c	;volatile
  3066   007B88  EF4F  F03E         	goto	l113
  3067   007B8C                     l2470:
  3068   007B8C  C021  F025         	movff	pinMode@pin,??_pinMode
  3069   007B90  0EF0               	movlw	-16
  3070   007B92  2625               	addwf	??_pinMode^0,f,c
  3071   007B94  0E01               	movlw	1
  3072   007B96  6E26               	movwf	(??_pinMode+1)^0,c
  3073   007B98  2A25               	incf	??_pinMode^0,f,c
  3074   007B9A  EFD1  F03D         	goto	u1704
  3075   007B9E                     u1705:
  3076   007B9E  90D8               	bcf	status,0,c
  3077   007BA0  3626               	rlcf	(??_pinMode+1)^0,f,c
  3078   007BA2                     u1704:
  3079   007BA2  2E25               	decfsz	??_pinMode^0,f,c
  3080   007BA4  EFCF  F03D         	goto	u1705
  3081   007BA8  5026               	movf	(??_pinMode+1)^0,w,c
  3082   007BAA  0AFF               	xorlw	255
  3083   007BAC  1694               	andwf	148,f,c	;volatile
  3084   007BAE  EF4F  F03E         	goto	l113
  3085   007BB2                     l2472:
  3086   007BB2  BE22               	btfsc	(pinMode@pin+1)^0,7,c
  3087   007BB4  EFE7  F03D         	goto	u1710
  3088   007BB8  5022               	movf	(pinMode@pin+1)^0,w,c
  3089   007BBA  E107               	bnz	u1711
  3090   007BBC  0E20               	movlw	32
  3091   007BBE  5C21               	subwf	pinMode@pin^0,w,c
  3092   007BC0  B0D8               	btfsc	status,0,c
  3093   007BC2  EFE5  F03D         	goto	u1711
  3094   007BC6  EFE7  F03D         	goto	u1710
  3095   007BCA                     u1711:
  3096   007BCA  EF15  F03E         	goto	l2480
  3097   007BCE                     u1710:
  3098   007BCE                     
  3099                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  3100   007BCE  5023               	movf	pinMode@type^0,w,c
  3101   007BD0  1024               	iorwf	(pinMode@type+1)^0,w,c
  3102   007BD2  B4D8               	btfsc	status,2,c
  3103   007BD4  EFEE  F03D         	goto	u1721
  3104   007BD8  EFF0  F03D         	goto	u1720
  3105   007BDC                     u1721:
  3106   007BDC  EF02  F03E         	goto	l2478
  3107   007BE0                     u1720:
  3108   007BE0  C021  F025         	movff	pinMode@pin,??_pinMode
  3109   007BE4  0EE8               	movlw	-24
  3110   007BE6  2625               	addwf	??_pinMode^0,f,c
  3111   007BE8  0E01               	movlw	1
  3112   007BEA  6E26               	movwf	(??_pinMode+1)^0,c
  3113   007BEC  2A25               	incf	??_pinMode^0,f,c
  3114   007BEE  EFFB  F03D         	goto	u1734
  3115   007BF2                     u1735:
  3116   007BF2  90D8               	bcf	status,0,c
  3117   007BF4  3626               	rlcf	(??_pinMode+1)^0,f,c
  3118   007BF6                     u1734:
  3119   007BF6  2E25               	decfsz	??_pinMode^0,f,c
  3120   007BF8  EFF9  F03D         	goto	u1735
  3121   007BFC  5026               	movf	(??_pinMode+1)^0,w,c
  3122   007BFE  1295               	iorwf	149,f,c	;volatile
  3123   007C00  EF4F  F03E         	goto	l113
  3124   007C04                     l2478:
  3125   007C04  C021  F025         	movff	pinMode@pin,??_pinMode
  3126   007C08  0EE8               	movlw	-24
  3127   007C0A  2625               	addwf	??_pinMode^0,f,c
  3128   007C0C  0E01               	movlw	1
  3129   007C0E  6E26               	movwf	(??_pinMode+1)^0,c
  3130   007C10  2A25               	incf	??_pinMode^0,f,c
  3131   007C12  EF0D  F03E         	goto	u1744
  3132   007C16                     u1745:
  3133   007C16  90D8               	bcf	status,0,c
  3134   007C18  3626               	rlcf	(??_pinMode+1)^0,f,c
  3135   007C1A                     u1744:
  3136   007C1A  2E25               	decfsz	??_pinMode^0,f,c
  3137   007C1C  EF0B  F03E         	goto	u1745
  3138   007C20  5026               	movf	(??_pinMode+1)^0,w,c
  3139   007C22  0AFF               	xorlw	255
  3140   007C24  1695               	andwf	149,f,c	;volatile
  3141   007C26  EF4F  F03E         	goto	l113
  3142   007C2A                     l2480:
  3143   007C2A  BE22               	btfsc	(pinMode@pin+1)^0,7,c
  3144   007C2C  EF23  F03E         	goto	u1750
  3145   007C30  5022               	movf	(pinMode@pin+1)^0,w,c
  3146   007C32  E107               	bnz	u1751
  3147   007C34  0E28               	movlw	40
  3148   007C36  5C21               	subwf	pinMode@pin^0,w,c
  3149   007C38  B0D8               	btfsc	status,0,c
  3150   007C3A  EF21  F03E         	goto	u1751
  3151   007C3E  EF23  F03E         	goto	u1750
  3152   007C42                     u1751:
  3153   007C42  EF4F  F03E         	goto	l113
  3154   007C46                     u1750:
  3155   007C46                     
  3156                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  3157   007C46  5023               	movf	pinMode@type^0,w,c
  3158   007C48  1024               	iorwf	(pinMode@type+1)^0,w,c
  3159   007C4A  B4D8               	btfsc	status,2,c
  3160   007C4C  EF2A  F03E         	goto	u1761
  3161   007C50  EF2C  F03E         	goto	u1760
  3162   007C54                     u1761:
  3163   007C54  EF3E  F03E         	goto	l2486
  3164   007C58                     u1760:
  3165   007C58  C021  F025         	movff	pinMode@pin,??_pinMode
  3166   007C5C  0EE0               	movlw	-32
  3167   007C5E  2625               	addwf	??_pinMode^0,f,c
  3168   007C60  0E01               	movlw	1
  3169   007C62  6E26               	movwf	(??_pinMode+1)^0,c
  3170   007C64  2A25               	incf	??_pinMode^0,f,c
  3171   007C66  EF37  F03E         	goto	u1774
  3172   007C6A                     u1775:
  3173   007C6A  90D8               	bcf	status,0,c
  3174   007C6C  3626               	rlcf	(??_pinMode+1)^0,f,c
  3175   007C6E                     u1774:
  3176   007C6E  2E25               	decfsz	??_pinMode^0,f,c
  3177   007C70  EF35  F03E         	goto	u1775
  3178   007C74  5026               	movf	(??_pinMode+1)^0,w,c
  3179   007C76  1296               	iorwf	150,f,c	;volatile
  3180   007C78  EF4F  F03E         	goto	l113
  3181   007C7C                     l2486:
  3182   007C7C  C021  F025         	movff	pinMode@pin,??_pinMode
  3183   007C80  0EE0               	movlw	-32
  3184   007C82  2625               	addwf	??_pinMode^0,f,c
  3185   007C84  0E01               	movlw	1
  3186   007C86  6E26               	movwf	(??_pinMode+1)^0,c
  3187   007C88  2A25               	incf	??_pinMode^0,f,c
  3188   007C8A  EF49  F03E         	goto	u1784
  3189   007C8E                     u1785:
  3190   007C8E  90D8               	bcf	status,0,c
  3191   007C90  3626               	rlcf	(??_pinMode+1)^0,f,c
  3192   007C92                     u1784:
  3193   007C92  2E25               	decfsz	??_pinMode^0,f,c
  3194   007C94  EF47  F03E         	goto	u1785
  3195   007C98  5026               	movf	(??_pinMode+1)^0,w,c
  3196   007C9A  0AFF               	xorlw	255
  3197   007C9C  1696               	andwf	150,f,c	;volatile
  3198   007C9E                     l113:
  3199   007C9E  0012               	return		;funcret
  3200   007CA0                     __end_of_pinMode:
  3201                           	callstack 0
  3202                           
  3203                           	psect	rparam
  3204   000000                     
  3205                           	psect	config
  3206                           
  3207                           ;Config register CONFIG1L @ 0x300000
  3208                           ;	unspecified, using default values
  3209                           ;	PLL Prescaler Selection bits
  3210                           ;	PLLDIV = 0x0, unprogrammed default
  3211                           ;	System Clock Postscaler Selection bits
  3212                           ;	CPUDIV = 0x0, unprogrammed default
  3213                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3214                           ;	USBDIV = 0x0, unprogrammed default
  3215   300000                     	org	3145728
  3216   300000  00                 	db	0
  3217                           
  3218                           ;Config register CONFIG1H @ 0x300001
  3219                           ;	Oscillator Selection bits
  3220                           ;	FOSC = HS, HS oscillator (HS)
  3221                           ;	Fail-Safe Clock Monitor Enable bit
  3222                           ;	FCMEN = 0x0, unprogrammed default
  3223                           ;	Internal/External Oscillator Switchover bit
  3224                           ;	IESO = 0x0, unprogrammed default
  3225   300001                     	org	3145729
  3226   300001  0C                 	db	12
  3227                           
  3228                           ;Config register CONFIG2L @ 0x300002
  3229                           ;	unspecified, using default values
  3230                           ;	Power-up Timer Enable bit
  3231                           ;	PWRT = 0x1, unprogrammed default
  3232                           ;	Brown-out Reset Enable bits
  3233                           ;	BOR = 0x3, unprogrammed default
  3234                           ;	Brown-out Reset Voltage bits
  3235                           ;	BORV = 0x3, unprogrammed default
  3236                           ;	USB Voltage Regulator Enable bit
  3237                           ;	VREGEN = 0x0, unprogrammed default
  3238   300002                     	org	3145730
  3239   300002  1F                 	db	31
  3240                           
  3241                           ;Config register CONFIG2H @ 0x300003
  3242                           ;	Watchdog Timer Enable bit
  3243                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3244                           ;	Watchdog Timer Postscale Select bits
  3245                           ;	WDTPS = 0xF, unprogrammed default
  3246   300003                     	org	3145731
  3247   300003  1E                 	db	30
  3248                           
  3249                           ; Padding undefined space
  3250   300004                     	org	3145732
  3251   300004  FF                 	db	255
  3252                           
  3253                           ;Config register CONFIG3H @ 0x300005
  3254                           ;	CCP2 MUX bit
  3255                           ;	CCP2MX = 0x1, unprogrammed default
  3256                           ;	PORTB A/D Enable bit
  3257                           ;	PBADEN = 0x1, unprogrammed default
  3258                           ;	Low-Power Timer 1 Oscillator Enable bit
  3259                           ;	LPT1OSC = 0x0, unprogrammed default
  3260                           ;	MCLR Pin Enable bit
  3261                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3262   300005                     	org	3145733
  3263   300005  83                 	db	131
  3264                           
  3265                           ;Config register CONFIG4L @ 0x300006
  3266                           ;	Stack Full/Underflow Reset Enable bit
  3267                           ;	STVREN = 0x1, unprogrammed default
  3268                           ;	Single-Supply ICSP Enable bit
  3269                           ;	LVP = OFF, Single-Supply ICSP disabled
  3270                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3271                           ;	ICPRT = 0x0, unprogrammed default
  3272                           ;	Extended Instruction Set Enable bit
  3273                           ;	XINST = 0x0, unprogrammed default
  3274                           ;	Background Debugger Enable bit
  3275                           ;	DEBUG = 0x1, unprogrammed default
  3276   300006                     	org	3145734
  3277   300006  81                 	db	129
  3278                           
  3279                           ; Padding undefined space
  3280   300007                     	org	3145735
  3281   300007  FF                 	db	255
  3282                           tosu	equ	0xFFF
  3283                           tosh	equ	0xFFE
  3284                           tosl	equ	0xFFD
  3285                           stkptr	equ	0xFFC
  3286                           pclatu	equ	0xFFB
  3287                           pclath	equ	0xFFA
  3288                           pcl	equ	0xFF9
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           indf0	equ	0xFEF
  3296                           postinc0	equ	0xFEE
  3297                           postdec0	equ	0xFED
  3298                           preinc0	equ	0xFEC
  3299                           plusw0	equ	0xFEB
  3300                           fsr0h	equ	0xFEA
  3301                           fsr0l	equ	0xFE9
  3302                           wreg	equ	0xFE8
  3303                           indf1	equ	0xFE7
  3304                           postinc1	equ	0xFE6
  3305                           postdec1	equ	0xFE5
  3306                           preinc1	equ	0xFE4
  3307                           plusw1	equ	0xFE3
  3308                           fsr1h	equ	0xFE2
  3309                           fsr1l	equ	0xFE1
  3310                           bsr	equ	0xFE0
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           preinc2	equ	0xFDC
  3315                           plusw2	equ	0xFDB
  3316                           fsr2h	equ	0xFDA
  3317                           fsr2l	equ	0xFD9
  3318                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        19
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     25      76
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcdString@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[17]), STR_2(CODE[16]), STR_3(CODE[16]), 
		 -> STR_4(CODE[16]), STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[12]), 
		 -> STR_8(CODE[12]), STR_9(CODE[17]), 

    msgs	PTR unsigned char [2][3] size(2) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_outputPrint
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->___awmod
    _lcdData->_lcdCommand4bits
    ___awmod->___awdiv
    _smInit->_setState
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11611
                             _dsInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               4     4      0    8264
                                             21 COMRAM     4     4      0
                          _eventRead
                        _getLanguage
                           _getState
                        _outputPrint
                        _setLanguage
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          5     1      4    8038
                                             16 COMRAM     5     1      4
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            2     0      2    1385
                                              3 COMRAM     2     0      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    5359
                                             14 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                      _getAlarmLevel (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2120
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2124
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _getTime                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            7     5      2     136
                                              0 COMRAM     7     5      2
                             _kpRead
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0      15
                          _eventInit
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     180
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (3) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dsInit
     _i2cInit
       _pinMode
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _smInit
     _eventInit
       _kpInit
     _setState
   _smLoop
     _eventRead
       _kpRead
     _getLanguage
     _getState
     _outputPrint
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdInt (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         _getAlarmLevel (ARG)
         _getTime (ARG)
         _lcdData (ARG)
           _Delay40us
           _lcdCommand4bits
       _lcdString (ARG)
         _lcdData
     _setLanguage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      29        0.0%
BIGRAM             3EE      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      17        0.0%
BANK7              100      0       0      18        0.0%
BITBANK6           100      0       0      15        0.0%
BANK6              100      0       0      16        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK3            EF      0       0       9        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     19      4C       1       80.0%
BITBIGSFR_1         37      0       0      23        0.0%
BITBIGSFRl          20      0       0      27        0.0%
BITBIGSFR_5          C      0       0      19        0.0%
BITBIGSFRhlh         8      0       0      25        0.0%
BITBIGSFR_2          6      0       0      22        0.0%
BITBIGSFRhh          5      0       0      24        0.0%
BITBIGSFRhll         4      0       0      26        0.0%
BITBIGSFR_4          3      0       0      20        0.0%
BITBIGSFR_3          3      0       0      21        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4C      28        0.0%
DATA                 0      0      4C      31        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue May 28 17:07:24 2024

                     l28 71F8             lcdString@str 0024             ___awdiv@sign 0026  
                     _v0 0019                       _v1 0018                       _v2 0017  
                     _v3 0016                       _de 001C                       _ev 004B  
                    l113 7C9E                      l141 723E                      l150 7280  
                    l118 71EA                      l136 7900                      l160 71FE  
                    l138 7914                      l180 73D2                      l157 731E  
                    l173 74B4                      l351 72F0                      l183 729E  
                    l194 7354                      l188 752C                      l198 7818  
                    l527 7A50                      l544 7230                      l552 75AA  
                    l491 743C                      l477 7268                      l573 71EE  
                    l487 742C                      l591 71F2                      l576 7206  
                    l585 7210                      l841 765A                      l594 7224  
                    l579 721A                      l828 771E                      u951 7820  
                    u961 7844                      u980 7890                      u981 788C  
                    u974 7876                      u975 7872                      u994 78A2  
                    u995 789E                      _key 000E             ___awmod@sign 002E  
                    wreg 0FE8                     l2310 726E                     l2302 71FA  
                   l2312 7270                     l2304 726A                     l2320 7458  
                   l2400 76F2                     l2330 7482                     l2322 7466  
                   l2314 7440                     l2402 76F8                     l2340 74A8  
                   l2332 7484                     l2324 746C                     l2316 7450  
                   l2500 73CE                     l1540 7234                     l2404 76FE  
                   l2420 75CA                     l2412 75AC                     l2342 74AE  
                   l2334 7492                     l2326 746E                     l2318 7456  
                   l1542 7236                     l2406 770E                     l2430 7602  
                   l2422 75D8                     l2414 75B0                     l2510 7720  
                   l2502 7320                     l2360 72FC                     l2352 72F6  
                   l2344 74B0                     l2336 7498                     l2328 747C  
                   l1544 723A                     l2408 7716                     l2432 7610  
                   l2440 763A                     l2424 75E0                     l2416 75BE  
                   l2520 779C                     l2512 772E                     l2504 7324  
                   l2600 7A30                     l2450 7A6E                     l2610 71F4  
                   l2362 730C                     l2346 72F2                     l2338 749A  
                   l1538 7232                     l2530 71F0                     l2370 7660  
                   l2442 764A                     l2434 7626                     l2426 75F2  
                   l2418 75C6                     l2522 77CC                     l2514 7736  
                   l2506 7334                     l2602 7A44                     l2460 7AF0  
                   l2452 7A80                     l2364 730E                     l2620 74C6  
                   l2612 74B6                     l1812 7226                     l2380 7690  
                   l2372 766E                     l2444 7652                     l2436 762E  
                   l2428 75FA                     l2524 77FC                     l2516 773C  
                   l2508 7338                     l2604 721E                     l2470 7B8C  
                   l2462 7B14                     l2454 7AA0                     l2534 72C8  
                   l2358 72FA                     l2622 74CA                     l2614 74C2  
                   l1814 722C                     l2550 73DC                     l2606 71EC  
                   l2526 7212                     l2390 76BE                     l2382 7694  
                   l2374 7676                     l2438 7634                     l2366 7284  
                   l2518 776C                     l2630 753A                     l2480 7C2A  
                   l2472 7BB2                     l2464 7B3A                     l2456 7AC2  
                   l2448 7A52                     l1760 782A                     l2624 74CC  
                   l2560 7424                     l2552 73E8                     l2528 7208  
                   l2392 76CC                     l2384 769C                     l2376 767A  
                   l2368 765C                     l2640 7586                     l2632 754A  
                   l2482 7C46                     l2474 7BCE                     l2466 7B56  
                   l2458 7ADE                     l1770 784C                     l1762 782E  
                   l2626 74DC                     l1746 7202                     l2554 7400  
                   l2394 76D2                     l2386 76AE                     l2378 7688  
                   l2570 7950                     l2642 7592                     l2634 7556  
                   l2484 7C58                     l2476 7BE0                     l2468 7B68  
                   l1780 78B0                     l1764 7832                     l1756 781A  
                   l2492 738E                     l1684 7254                     l2556 740E  
                   l2548 73D4                     l2396 76E8                     l2388 76B6  
                   l2580 798A                     l2572 7956                     l2564 7916  
                   l2636 7566                     l2628 752E                     l2486 7C7C  
                   l2478 7C04                     l1790 78F8                     l1782 78CE  
                   l1766 7836                     l1758 7826                     l2494 73A4  
                   l1686 7258                     l2558 7416                     l2398 76F0  
                   l2590 79E2                     l2582 79AC                     l2574 7966  
                   l2566 7928                     l2638 7576                     l1792 78FC  
                   l1784 78D0                     l1776 7850                     l1768 783A  
                   l2496 73B6                     l1688 7260                     l2488 71E8  
                   l2592 79E8                     l2584 79B2                     l2568 792E  
                   l2576 7972                     l1794 7910                     l1786 78E0  
                   l1778 7890                     l2498 73C6                     l2594 7A0A  
                   l2586 79C2                     l2578 7984                     l1788 78F2  
                   l2596 7A10                     l2588 79CE                     l2598 7A24  
                   l2790 72BC                     l2782 72A0                     l2784 72B0  
                   l2786 72B4                     l2788 72B8                     STR_1 7D13  
                   STR_2 7CE3                     STR_3 7CF3                     STR_4 7CD3  
                   STR_5 7D03                     STR_6 7D23                     STR_7 7D33  
                   STR_8 7D33                     STR_9 7CC2                     u1010 78E0  
                   u1011 78DC                     u1020 78F2                     u1004 78C2  
                   u1021 78EE                     u1005 78BE                     u1030 7910  
                   u1031 790C                     u1400 7450                     u1401 744C  
                   u1410 7466                     u1411 7462                     u1420 747C  
                   u1500 76CC                     u1421 7478                     u1501 76C8  
                   _LATA 0F89                     u1430 7492                     u1510 76E8  
                   u1431 748E                     u1511 76E4                     u1600 7A80  
                   u1440 74A8                     u1520 770E                     u1601 7A7C  
                   u1441 74A4                     u1521 770A                     u1450 730C  
                   u1530 75BE                     u1451 7308                     u1531 75BA  
                   u1460 731E                     u1540 75D8                     u1461 731A  
                   u1541 75D4                     u1710 7BCE                     u1630 7ADE  
                   u1614 7A92                     u1390 7280                     u1470 766E  
                   u1550 75F2                     u1711 7BCA                     u1631 7ADA  
                   u1615 7A8E                     u1391 727C                     u1471 766A  
                   u1551 75EE                     u1720 7BE0                     u1704 7BA2  
                   u1640 7AF0                     u1624 7AB2                     u1800 73C6  
                   u1480 7688                     u1560 7610                     u1721 7BDC  
                   u1705 7B9E                     u1641 7AEC                     u1625 7AAE  
                   u1801 73C2                     u1481 7684                     u1561 760C  
                   u1490 76AE                     u1570 7626                     u1810 7354  
                   u1491 76AA                     u1571 7622                     u1811 7350  
                   u1580 764A                     u1820 772E                     u1900 7928  
                   u1581 7646                     u1821 772A                     u1901 7924  
                   u1750 7C46                     u1734 7BF6                     u1670 7B56  
                   u1654 7B06                     u1590 7A6E                     u1910 7984  
                   u1751 7C42                     u1735 7BF2                     u1671 7B52  
                   u1655 7B02                     u1591 7A6A                     u1911 7980  
                   u1760 7C58                     u1744 7C1A                     u1680 7B68  
                   u1664 7B2A                     u1920 79E2                     u1761 7C54  
                   u1745 7C16                     u1681 7B64                     u1665 7B26  
                   u1921 79DE                     u1930 7A24                     u1931 7A20  
                   u1940 7A44                     u1941 7A40                     u1774 7C6E  
                   u1694 7B7E                     u1790 73B6                     u1950 74DC  
                   u1870 7400                     u1775 7C6A                     u1695 7B7A  
                   u1791 73B2                     u1951 74D8                     u1871 73FC  
                   u1784 7C92                     u1880 740E                     u1960 754A  
                   u1785 7C8E                     u1881 740A                     u1961 7546  
                   u1890 7424                     u1970 7566                     u1891 7420  
                   u1971 7562              _outputPrint 7916                     _main 72A0  
                   _msgs 003A                     _time 0008                     fsr2h 0FDA  
                   indf2 0FDF                     fsr1l 0FE1                     fsr2l 0FD9  
                   prodl 0FF3                     start 0002             ___param_bank 0000  
        __end_of_i2cInit 72F2                    ?_main 0021          __end_of___awdiv 7720  
       ?_lcdCommand4bits 0021                    STR_10 7CB1          __end_of___awmod 765C  
        ___awdiv@divisor 0023          ___awdiv@counter 0025                    _PORTA 0F80  
                  _PORTB 0F81                    _PORTC 0F82                    _PORTD 0F83  
                  _PORTE 0F84                    _TRISA 0F92                    _TRISB 0F93  
                  _TRISC 0F94                    _TRISD 0F95                    _TRISE 0F96  
        __end_of_lcdData 72A0          __end_of_lcdInit 752E          __end_of_getTime 721C  
     outputPrint@numTela 0031          __end_of_pinMode 7CA0                    _valor 0020  
                  _state 0015                    tablat 0FF5                    plusw1 0FE3  
                  plusw2 0FDB                    status 0FD8         __end_of_Delay2ms 7320  
        __initialization 7356             __end_of_main 72C8             ?_setLanguage 0021  
                 ??_main 003A            __activetblptr 0002              eventRead@ev 0024  
       ___awdiv@dividend 0021                ??_i2cInit 0027    __end_of_getAlarmLevel 7212  
       __end_of_getState 71F0                   _dTimer 000C                ??___awdiv 0025  
              ??___awmod 002D                   _dsInit 71F4                   _lcdInt 7720  
                 _kpInit 7232                   _kpRead 71E8                   _ev_ant 0012  
                 _smInit 7226                   clear_0 737C                   _smLoop 752E  
       ___awdiv@quotient 0027          ___awmod@divisor 002B                ??_lcdData 0023  
                 isa$std 0001                ??_lcdInit 0024          ___awmod@counter 002D  
              ??_getTime 0023         __end_of_setState 7208             __pdataCOMRAM 003A  
              ??_pinMode 0025             __mediumconst 7CA0                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8        __end_of_Delay40us 7282  
             __accesstop 0060  __end_of__initialization 7382            ___rparam_used 0001  
           ?_pulseEnable 0021              pinMode@type 0023           __pcstackCOMRAM 0021  
              ?_Delay2ms 0021             ?_outputPrint 0031               _alarmLevel 0006  
             _lcdCommand 738C                  ?_dsInit 0021                  ?_lcdInt 002F  
                ?_kpInit 0021                  ?_kpRead 0021             eventRead@key 0026  
                ?_smInit 0021                  ?_smLoop 0021               _kpDebounce 781A  
             ??_Delay2ms 0021                ?_getState 0021                  _i2cInit 72C8  
                __Hparam 0000                ?_setState 0021                  __Lparam 0000  
      __end_of_lcdString 7356          kpDebounce@tempo 001F                  ___awdiv 765C  
                ___awmod 75AC                  __pcinit 7356                  _lcdData 7282  
                __ramtop 0800                  _lcdInit 74B6                  __ptext0 72A0  
                __ptext1 752E                  __ptext2 721C                  __ptext3 7916  
                _getTime 7212                  __ptext4 7320                  __ptext5 7720  
                __ptext6 7282                  __ptext7 75AC                  __ptext8 765C  
                __ptext9 7212        __end_of_eventInit 726A        __end_of_eventRead 743E  
                _display 001A                  _key_ant 0010                  _pinMode 7A52  
       ___awmod@dividend 0029               ??_getState 0021                Delay2ms@j 0021  
              Delay2ms@k 0022                  _started 001B      kpDebounce@valorNovo 001E  
   end_of_initialization 7382            __Lmediumconst 7CA0               ??_setState 0021  
                postdec1 0FE5                  postdec2 0FDD              ?_lcdCommand 0021  
                postinc0 0FEE                  postinc2 0FDE            ??_getLanguage 0021  
            ?_kpDebounce 0021           _valor@ssd$F308 7CA1                _Delay40us 726A  
      outputPrint@idioma 0033           __end_of_dsInit 71FA            __pidataCOMRAM 7241  
         __end_of_lcdInt 781A           __end_of_kpInit 7240           __end_of_kpRead 71EC  
 __end_of_valor@ssd$F308 7CB1           __end_of_smInit 7232           __end_of_smLoop 75AC  
    start_initialization 7356      __end_of_getLanguage 71F4               ?_Delay40us 0021  
           smLoop@evento 0039        ??_lcdCommand4bits 0022                 ??_dsInit 0027  
               ??_lcdInt 0031                 ??_kpInit 0021                 ??_kpRead 0021  
               ??_smInit 0022                 ??_smLoop 0036                _dTimerMax 000A  
            __pbssCOMRAM 0001               pinMode@pin 0021         setState@newState 0021  
               ?_i2cInit 0021            _getAlarmLevel 7208            __pmediumconst 7CA0  
               ?___awdiv 0021                 ?___awmod 0029                _lcdString 7320  
            _getLanguage 71F0                 ?_lcdData 0021            ??_setLanguage 0021  
               ?_lcdInit 0021                 ?_getTime 0021            lcdCommand@cmd 0023  
               ?_pinMode 0021           kpDebounce@bits 0024                _eventInit 7254  
              _eventRead 73D4              ??_Delay40us 0021           ?_getAlarmLevel 0021  
              lcdInt@val 002F             ??_lcdCommand 0023               ?_lcdString 0024  
           ??_kpDebounce 0021    kpDebounce@valorAntigo 001D                 _Delay2ms 72F2  
             ?_eventInit 0021               ?_eventRead 0021      __end_of_setLanguage 7226  
              copy_data0 736A       __end_of_lcdCommand 73D4             lcdData@valor 0023  
     __end_of_kpDebounce 7916                 __Hrparam 0000            ??_pulseEnable 0021  
               __Lrparam 0000         kpDebounce@portes 0029          _lcdCommand4bits 743E  
               __ptext10 71F0                 __ptext11 7208                 __ptext20 738C  
               __ptext12 71EC                 __ptext21 743E                 __ptext13 73D4  
               __ptext22 71FA                 __ptext14 71E8                 __ptext23 726A  
               __ptext15 7226                 __ptext24 72F2                 __ptext16 7200  
               __ptext25 781A                 __ptext17 7254                 __ptext26 71F4  
               __ptext18 7232                 __ptext27 72C8                 __ptext19 74B6  
               __ptext28 7A52                 _getState 71EC              _smLoop$1348 0037  
          kpDebounce@F13 0001            kpDebounce@F15 0046            ??_outputPrint 0035  
               _language 0014          ??_getAlarmLevel 0023                 _setState 7200  
             Delay40us@j 0021                 lcdInit@i 0024                 isa$xinst 0000  
            ??_lcdString 0026      __end_of_pulseEnable 7200              _setLanguage 721C  
 setLanguage@newLanguage 0021              ??_eventInit 0021              ??_eventRead 0023  
    __end_of_outputPrint 7A52             ?_getLanguage 0021  __end_of_lcdCommand4bits 74B6  
            kpDebounce@j 002E      lcdCommand4bits@data 0021       lcdCommand4bits@cmd 0022  
            _pulseEnable 71FA  
