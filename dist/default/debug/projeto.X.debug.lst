

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Jun 19 19:13:37 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71   000000                     
    72                           ; Generated 17/10/2023 GMT
    73                           ; 
    74                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution. Publication is not required when
    88                           ;        this file is used in an embedded application.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F4550 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106   000000                     
   107                           	psect	idataCOMRAM
   108   0062F7                     __pidataCOMRAM:
   109                           	callstack 0
   110                           
   111                           ;initializer for kpDebounce@F15
   112   0062F7  02                 	db	2
   113   0062F8  03                 	db	3
   114   0062F9  05                 	db	5
   115   0062FA  04                 	db	4
   116   0062FB  01                 	db	1
   117                           
   118                           ;initializer for _ev
   119   0062FC  0062               	dw	98
   120                           
   121                           	psect	idataBANK0
   122   00632E                     __pidataBANK0:
   123                           	callstack 0
   124                           
   125                           ;initializer for _msgs
   126   00632E  13                 	db	low STR_1
   127   00632F  7D                 	db	high STR_1
   128   006330  E3                 	db	low STR_2
   129   006331  7C                 	db	high STR_2
   130   006332  13                 	db	low STR_1
   131   006333  7D                 	db	high STR_1
   132   006334  E3                 	db	low STR_2
   133   006335  7C                 	db	high STR_2
   134   006336  F3                 	db	low STR_5
   135   006337  7C                 	db	high STR_5
   136   006338  D3                 	db	low STR_6
   137   006339  7C                 	db	high STR_6
   138   00633A  03                 	db	low STR_7
   139   00633B  7D                 	db	high STR_7
   140   00633C  23                 	db	low STR_8
   141   00633D  7D                 	db	high STR_8
   142   00633E  00                 	db	0
   143   00633F  00                 	db	0
   144   006340  00                 	db	0
   145   006341  00                 	db	0
   146                           
   147                           	psect	mediumconst
   148   007CA0                     __pmediumconst:
   149                           	callstack 0
   150   007CA0  00                 	db	0
   151   007CA1                     _valor@ssd$F319:
   152                           	callstack 0
   153   007CA1  3F                 	db	63
   154   007CA2  06                 	db	6
   155   007CA3  5B                 	db	91
   156   007CA4  4F                 	db	79
   157   007CA5  66                 	db	102
   158   007CA6  6D                 	db	109
   159   007CA7  7D                 	db	125
   160   007CA8  07                 	db	7
   161   007CA9  7F                 	db	127
   162   007CAA  6F                 	db	111
   163   007CAB  77                 	db	119
   164   007CAC  7C                 	db	124
   165   007CAD  39                 	db	57
   166   007CAE  5E                 	db	94
   167   007CAF  79                 	db	121
   168   007CB0  71                 	db	113
   169   007CB1                     __end_of_valor@ssd$F319:
   170                           	callstack 0
   171   000000                     _PORTA	set	3968
   172   000000                     _LATA	set	3977
   173   000000                     _TRISA	set	3986
   174   000000                     _PORTE	set	3972
   175   000000                     _PORTD	set	3971
   176   000000                     _PORTC	set	3970
   177   000000                     _PORTB	set	3969
   178   000000                     _TRISE	set	3990
   179   000000                     _TRISD	set	3989
   180   000000                     _TRISC	set	3988
   181   000000                     _TRISB	set	3987
   182   007CB1                     STR_15:
   183   007CB1  45                 	db	69	;'E'
   184   007CB2  6E                 	db	110	;'n'
   185   007CB3  67                 	db	103	;'g'
   186   007CB4  6C                 	db	108	;'l'
   187   007CB5  69                 	db	105	;'i'
   188   007CB6  73                 	db	115	;'s'
   189   007CB7  68                 	db	104	;'h'
   190   007CB8  20                 	db	32
   191   007CB9  20                 	db	32
   192   007CBA  20                 	db	32
   193   007CBB  20                 	db	32
   194   007CBC  20                 	db	32
   195   007CBD  20                 	db	32
   196   007CBE  20                 	db	32
   197   007CBF  20                 	db	32
   198   007CC0  20                 	db	32
   199   007CC1  00                 	db	0
   200   007CC2                     STR_14:
   201   007CC2  50                 	db	80	;'P'
   202   007CC3  6F                 	db	111	;'o'
   203   007CC4  72                 	db	114	;'r'
   204   007CC5  74                 	db	116	;'t'
   205   007CC6  75                 	db	117	;'u'
   206   007CC7  67                 	db	103	;'g'
   207   007CC8  75                 	db	117	;'u'
   208   007CC9  65                 	db	101	;'e'
   209   007CCA  73                 	db	115	;'s'
   210   007CCB  20                 	db	32
   211   007CCC  20                 	db	32
   212   007CCD  20                 	db	32
   213   007CCE  20                 	db	32
   214   007CCF  20                 	db	32
   215   007CD0  20                 	db	32
   216   007CD1  20                 	db	32
   217   007CD2  00                 	db	0
   218   007CD3                     STR_6:
   219   007CD3  43                 	db	67	;'C'
   220   007CD4  68                 	db	104	;'h'
   221   007CD5  61                 	db	97	;'a'
   222   007CD6  6E                 	db	110	;'n'
   223   007CD7  67                 	db	103	;'g'
   224   007CD8  65                 	db	101	;'e'
   225   007CD9  20                 	db	32
   226   007CDA  74                 	db	116	;'t'
   227   007CDB  69                 	db	105	;'i'
   228   007CDC  6D                 	db	109	;'m'
   229   007CDD  65                 	db	101	;'e'
   230   007CDE  20                 	db	32
   231   007CDF  20                 	db	32
   232   007CE0  20                 	db	32
   233   007CE1  20                 	db	32
   234   007CE2  00                 	db	0
   235   007CE3                     STR_2:
   236   007CE3  43                 	db	67	;'C'
   237   007CE4  68                 	db	104	;'h'
   238   007CE5  61                 	db	97	;'a'
   239   007CE6  6E                 	db	110	;'n'
   240   007CE7  67                 	db	103	;'g'
   241   007CE8  65                 	db	101	;'e'
   242   007CE9  20                 	db	32
   243   007CEA  61                 	db	97	;'a'
   244   007CEB  6C                 	db	108	;'l'
   245   007CEC  61                 	db	97	;'a'
   246   007CED  72                 	db	114	;'r'
   247   007CEE  6D                 	db	109	;'m'
   248   007CEF  20                 	db	32
   249   007CF0  20                 	db	32
   250   007CF1  20                 	db	32
   251   007CF2  00                 	db	0
   252   007CF3                     STR_5:
   253   007CF3  41                 	db	65	;'A'
   254   007CF4  6C                 	db	108	;'l'
   255   007CF5  74                 	db	116	;'t'
   256   007CF6  65                 	db	101	;'e'
   257   007CF7  72                 	db	114	;'r'
   258   007CF8  61                 	db	97	;'a'
   259   007CF9  72                 	db	114	;'r'
   260   007CFA  20                 	db	32
   261   007CFB  74                 	db	116	;'t'
   262   007CFC  65                 	db	101	;'e'
   263   007CFD  6D                 	db	109	;'m'
   264   007CFE  70                 	db	112	;'p'
   265   007CFF  6F                 	db	111	;'o'
   266   007D00  20                 	db	32
   267   007D01  20                 	db	32
   268   007D02  00                 	db	0
   269   007D03                     STR_7:
   270   007D03  41                 	db	65	;'A'
   271   007D04  6C                 	db	108	;'l'
   272   007D05  74                 	db	116	;'t'
   273   007D06  65                 	db	101	;'e'
   274   007D07  72                 	db	114	;'r'
   275   007D08  61                 	db	97	;'a'
   276   007D09  72                 	db	114	;'r'
   277   007D0A  20                 	db	32
   278   007D0B  69                 	db	105	;'i'
   279   007D0C  64                 	db	100	;'d'
   280   007D0D  69                 	db	105	;'i'
   281   007D0E  6F                 	db	111	;'o'
   282   007D0F  6D                 	db	109	;'m'
   283   007D10  61                 	db	97	;'a'
   284   007D11  20                 	db	32
   285   007D12  00                 	db	0
   286   007D13                     STR_1:
   287   007D13  41                 	db	65	;'A'
   288   007D14  6C                 	db	108	;'l'
   289   007D15  74                 	db	116	;'t'
   290   007D16  65                 	db	101	;'e'
   291   007D17  72                 	db	114	;'r'
   292   007D18  61                 	db	97	;'a'
   293   007D19  72                 	db	114	;'r'
   294   007D1A  20                 	db	32
   295   007D1B  61                 	db	97	;'a'
   296   007D1C  6C                 	db	108	;'l'
   297   007D1D  61                 	db	97	;'a'
   298   007D1E  72                 	db	114	;'r'
   299   007D1F  6D                 	db	109	;'m'
   300   007D20  65                 	db	101	;'e'
   301   007D21  20                 	db	32
   302   007D22  00                 	db	0
   303   007D23                     STR_8:
   304   007D23  43                 	db	67	;'C'
   305   007D24  68                 	db	104	;'h'
   306   007D25  61                 	db	97	;'a'
   307   007D26  6E                 	db	110	;'n'
   308   007D27  67                 	db	103	;'g'
   309   007D28  65                 	db	101	;'e'
   310   007D29  20                 	db	32
   311   007D2A  6C                 	db	108	;'l'
   312   007D2B  61                 	db	97	;'a'
   313   007D2C  6E                 	db	110	;'n'
   314   007D2D  67                 	db	103	;'g'
   315   007D2E  75                 	db	117	;'u'
   316   007D2F  61                 	db	97	;'a'
   317   007D30  67                 	db	103	;'g'
   318   007D31  65                 	db	101	;'e'
   319   007D32  00                 	db	0
   320   007D33                     STR_9:
   321   007D33  20                 	db	32
   322   007D34  20                 	db	32
   323   007D35  20                 	db	32
   324   007D36  20                 	db	32
   325   007D37  20                 	db	32
   326   007D38  20                 	db	32
   327   007D39  20                 	db	32
   328   007D3A  20                 	db	32
   329   007D3B  20                 	db	32
   330   007D3C  20                 	db	32
   331   007D3D  20                 	db	32
   332   007D3E  00                 	db	0
   333   007D3F  00                 	db	0	; dummy byte at the end
   334   000000                     
   335                           ; #config settings
   336                           
   337                           	psect	cinit
   338   00683E                     __pcinit:
   339                           	callstack 0
   340   00683E                     start_initialization:
   341                           	callstack 0
   342   00683E                     __initialization:
   343                           	callstack 0
   344                           
   345                           ; Initialize objects allocated to BANK0 (20 bytes)
   346                           ; load TBLPTR registers with __pidataBANK0
   347   00683E  0E2E               	movlw	low __pidataBANK0
   348   006840  6EF6               	movwf	tblptrl,c
   349   006842  0E63               	movlw	high __pidataBANK0
   350   006844  6EF7               	movwf	tblptrh,c
   351   006846  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   352   006848  6EF8               	movwf	tblptru,c
   353   00684A  EE00  F060         	lfsr	0,__pdataBANK0
   354   00684E  EE10 F014          	lfsr	1,20
   355   006852                     copy_data0:
   356   006852  0009               	tblrd		*+
   357   006854  CFF5 FFEE          	movff	tablat,postinc0
   358   006858  50E5               	movf	postdec1,w,c
   359   00685A  50E1               	movf	fsr1l,w,c
   360   00685C  E1FA               	bnz	copy_data0
   361                           
   362                           ; Initialize objects allocated to COMRAM (7 bytes)
   363                           ; load TBLPTR registers with __pidataCOMRAM
   364   00685E  0EF7               	movlw	low __pidataCOMRAM
   365   006860  6EF6               	movwf	tblptrl,c
   366   006862  0E62               	movlw	high __pidataCOMRAM
   367   006864  6EF7               	movwf	tblptrh,c
   368   006866  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   369   006868  6EF8               	movwf	tblptru,c
   370   00686A  EE00  F053         	lfsr	0,__pdataCOMRAM
   371   00686E  EE10 F007          	lfsr	1,7
   372   006872                     copy_data1:
   373   006872  0009               	tblrd		*+
   374   006874  CFF5 FFEE          	movff	tablat,postinc0
   375   006878  50E5               	movf	postdec1,w,c
   376   00687A  50E1               	movf	fsr1l,w,c
   377   00687C  E1FA               	bnz	copy_data1
   378                           
   379                           ; Clear objects allocated to COMRAM (40 bytes)
   380   00687E  EE00  F02B         	lfsr	0,__pbssCOMRAM
   381   006882  0E28               	movlw	40
   382   006884                     clear_0:
   383   006884  6AEE               	clrf	postinc0,c
   384   006886  06E8               	decf	wreg,f,c
   385   006888  E1FD               	bnz	clear_0
   386   00688A                     end_of_initialization:
   387                           	callstack 0
   388   00688A                     __end_of__initialization:
   389                           	callstack 0
   390   00688A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391   00688C  6EF8               	movwf	tblptru,c
   392   00688E  0100               	movlb	0
   393   006890  EF4F  F035         	goto	_main	;jump to C main() function
   394                           
   395                           	psect	bssCOMRAM
   396   00002B                     __pbssCOMRAM:
   397                           	callstack 0
   398   00002B                     	ds	5
   399   000030                     _time:
   400                           	callstack 0
   401   000030                     	ds	2
   402   000032                     	ds	2
   403   000034                     	ds	2
   404   000036                     _key:
   405                           	callstack 0
   406   000036                     	ds	2
   407   000038                     _key_ant:
   408                           	callstack 0
   409   000038                     	ds	2
   410   00003A                     _ev_ant:
   411                           	callstack 0
   412   00003A                     	ds	2
   413   00003C                     _index:
   414                           	callstack 0
   415   00003C                     	ds	1
   416   00003D                     _alarmLevelLow:
   417                           	callstack 0
   418   00003D                     	ds	1
   419   00003E                     _alarmLevelHigh:
   420                           	callstack 0
   421   00003E                     	ds	1
   422   00003F                     _language:
   423                           	callstack 0
   424   00003F                     	ds	1
   425   000040                     _state:
   426                           	callstack 0
   427   000040                     	ds	1
   428   000041                     _estado_ant:
   429                           	callstack 0
   430   000041                     	ds	1
   431   000042                     _prot_ready:
   432                           	callstack 0
   433   000042                     	ds	1
   434   000043                     _v3:
   435                           	callstack 0
   436   000043                     	ds	1
   437   000044                     _v2:
   438                           	callstack 0
   439   000044                     	ds	1
   440   000045                     _v1:
   441                           	callstack 0
   442   000045                     	ds	1
   443   000046                     _v0:
   444                           	callstack 0
   445   000046                     	ds	1
   446   000047                     _display:
   447                           	callstack 0
   448   000047                     	ds	1
   449   000048                     _started:
   450                           	callstack 0
   451   000048                     	ds	1
   452   000049                     _de:
   453                           	callstack 0
   454   000049                     	ds	1
   455   00004A                     kpDebounce@valorAntigo:
   456                           	callstack 0
   457   00004A                     	ds	1
   458   00004B                     kpDebounce@valorNovo:
   459                           	callstack 0
   460   00004B                     	ds	1
   461   00004C                     kpDebounce@tempo:
   462                           	callstack 0
   463   00004C                     	ds	1
   464   00004D                     _valor:
   465                           	callstack 0
   466   00004D                     	ds	1
   467   00004E                     _prot:
   468                           	callstack 0
   469   00004E                     	ds	5
   470                           
   471                           	psect	dataCOMRAM
   472   000053                     __pdataCOMRAM:
   473                           	callstack 0
   474   000053                     kpDebounce@F15:
   475                           	callstack 0
   476   000053                     	ds	5
   477   000058                     	ds	2
   478                           
   479                           	psect	dataBANK0
   480   000060                     __pdataBANK0:
   481                           	callstack 0
   482   000060                     _msgs:
   483                           	callstack 0
   484   000060                     	ds	20
   485                           
   486                           	psect	cstackCOMRAM
   487   000001                     __pcstackCOMRAM:
   488                           	callstack 0
   489   000001                     ??_kpDebounce:
   490   000001                     ?_getTime:
   491                           	callstack 0
   492   000001                     ?_getAlarmLevel:
   493                           	callstack 0
   494   000001                     ?_digitalRead:
   495                           	callstack 0
   496   000001                     ?___awdiv:
   497                           	callstack 0
   498   000001                     Delay40us@j:
   499                           	callstack 0
   500   000001                     Delay2ms@j:
   501                           	callstack 0
   502   000001                     lcdCommand4bits@data:
   503                           	callstack 0
   504   000001                     serialSend@c:
   505                           	callstack 0
   506   000001                     serialRead@resp:
   507                           	callstack 0
   508   000001                     setState@newState:
   509                           	callstack 0
   510   000001                     setProt@newChar:
   511                           	callstack 0
   512   000001                     resetProt@i:
   513                           	callstack 0
   514   000001                     digitalWrite@pin:
   515                           	callstack 0
   516   000001                     digitalRead@pin:
   517                           	callstack 0
   518   000001                     pinMode@pin:
   519                           	callstack 0
   520   000001                     getAlarmLevel@lh:
   521                           	callstack 0
   522   000001                     ___awdiv@dividend:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x0
   526   000001                     	ds	1
   527   000002                     Delay2ms@k:
   528                           	callstack 0
   529   000002                     lcdCommand4bits@cmd:
   530                           	callstack 0
   531                           
   532                           ; 1 bytes @ 0x1
   533   000002                     	ds	1
   534   000003                     ??_digitalRead:
   535   000003                     ?_eventRead:
   536                           	callstack 0
   537   000003                     lcdCommand@cmd:
   538                           	callstack 0
   539   000003                     lcdData@valor:
   540                           	callstack 0
   541   000003                     digitalWrite@value:
   542                           	callstack 0
   543   000003                     pinMode@type:
   544                           	callstack 0
   545   000003                     getAlarmLevel@l:
   546                           	callstack 0
   547   000003                     ___awdiv@divisor:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x2
   551   000003                     	ds	1
   552   000004                     lcdInit@i:
   553                           	callstack 0
   554   000004                     lcdString@str:
   555                           	callstack 0
   556   000004                     kpDebounce@bits:
   557                           	callstack 0
   558                           
   559                           ; 5 bytes @ 0x3
   560   000004                     	ds	1
   561   000005                     ??_digitalWrite:
   562   000005                     ??_pinMode:
   563   000005                     ??_eventRead:
   564   000005                     ___awdiv@counter:
   565                           	callstack 0
   566                           
   567                           ; 1 bytes @ 0x4
   568   000005                     	ds	1
   569   000006                     eventRead@prot:
   570                           	callstack 0
   571   000006                     ___awdiv@sign:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0x5
   575   000006                     	ds	1
   576   000007                     i2c_write_bit@bit:
   577                           	callstack 0
   578   000007                     i2c_read_bit@bit:
   579                           	callstack 0
   580   000007                     eventRead@ev:
   581                           	callstack 0
   582   000007                     ___awdiv@quotient:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x6
   586   000007                     	ds	1
   587   000008                     i2cWriteByte@send_stop:
   588                           	callstack 0
   589   000008                     i2cReadByte@send_stop:
   590                           	callstack 0
   591                           
   592                           ; 1 bytes @ 0x7
   593   000008                     	ds	1
   594   000009                     ??_i2cReadByte:
   595   000009                     ?___wmul:
   596                           	callstack 0
   597   000009                     ?___awmod:
   598                           	callstack 0
   599   000009                     i2cWriteByte@byte:
   600                           	callstack 0
   601   000009                     eventRead@data:
   602                           	callstack 0
   603   000009                     ___wmul@multiplier:
   604                           	callstack 0
   605   000009                     ___awmod@dividend:
   606                           	callstack 0
   607   000009                     kpDebounce@portes:
   608                           	callstack 0
   609                           
   610                           ; 5 bytes @ 0x8
   611   000009                     	ds	1
   612   00000A                     i2cWriteByte@send_start:
   613                           	callstack 0
   614   00000A                     i2cReadByte@nack:
   615                           	callstack 0
   616   00000A                     eventRead@key:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0x9
   620   00000A                     	ds	1
   621   00000B                     i2cWriteByte@bit:
   622                           	callstack 0
   623   00000B                     i2cReadByte@bit:
   624                           	callstack 0
   625   00000B                     ___wmul@multiplicand:
   626                           	callstack 0
   627   00000B                     ___awmod@divisor:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0xA
   631   00000B                     	ds	2
   632   00000D                     i2cReadByte@byte:
   633                           	callstack 0
   634   00000D                     ___awmod@counter:
   635                           	callstack 0
   636   00000D                     ___wmul@product:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0xC
   640   00000D                     	ds	1
   641   00000E                     ?_dsReadData:
   642                           	callstack 0
   643   00000E                     kpDebounce@j:
   644                           	callstack 0
   645   00000E                     ___awmod@sign:
   646                           	callstack 0
   647   00000E                     dsReadData@address:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0xD
   651   00000E                     	ds	2
   652   000010                     ??_dsReadData:
   653                           
   654                           ; 1 bytes @ 0xF
   655   000010                     	ds	1
   656   000011                     dsReadData@result:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x10
   660   000011                     	ds	2
   661   000013                     ?_bcd2dec:
   662                           	callstack 0
   663   000013                     bcd2dec@value:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0x12
   667   000013                     	ds	2
   668   000015                     ??_bcd2dec:
   669                           
   670                           ; 1 bytes @ 0x14
   671   000015                     	ds	2
   672   000017                     ?_dec2bcd:
   673                           	callstack 0
   674   000017                     dec2bcd@value:
   675                           	callstack 0
   676   000017                     lcdInt@val:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0x16
   680   000017                     	ds	2
   681   000019                     ??_dec2bcd:
   682   000019                     lcdInt@digNum:
   683                           	callstack 0
   684                           
   685                           ; 1 bytes @ 0x18
   686   000019                     	ds	1
   687   00001A                     ??_lcdInt:
   688                           
   689                           ; 1 bytes @ 0x19
   690   00001A                     	ds	1
   691   00001B                     lcdInt@j:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x1A
   695   00001B                     	ds	2
   696   00001D                     dsWriteData@address:
   697                           	callstack 0
   698   00001D                     lcdInt@divisor:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x1C
   702   00001D                     	ds	2
   703   00001F                     dsWriteData@value:
   704                           	callstack 0
   705   00001F                     lcdInt@i:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x1E
   709   00001F                     	ds	1
   710   000020                     setLanguage@newLanguage:
   711                           	callstack 0
   712   000020                     setAlarmLevel@newAlarmLevel:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x1F
   716   000020                     	ds	1
   717   000021                     outputPrint@numTela:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x20
   721   000021                     	ds	1
   722   000022                     setAlarmLevel@lh:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x21
   726   000022                     	ds	1
   727   000023                     ??_varInit:
   728   000023                     outputPrint@idioma:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x22
   732   000023                     	ds	2
   733   000025                     ??_outputPrint:
   734                           
   735                           ; 1 bytes @ 0x24
   736   000025                     	ds	1
   737   000026                     ??_smLoop:
   738                           
   739                           ; 1 bytes @ 0x25
   740   000026                     	ds	1
   741   000027                     _smLoop$1412:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x26
   745   000027                     	ds	2
   746   000029                     smLoop@prot:
   747                           	callstack 0
   748                           
   749                           ; 1 bytes @ 0x28
   750   000029                     	ds	1
   751   00002A                     smLoop@evento:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x29
   755   00002A                     	ds	1
   756   00002B                     
   757                           ; 1 bytes @ 0x2A
   758 ;;
   759 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   760 ;;
   761 ;; *************** function _main *****************
   762 ;; Defined at:
   763 ;;		line 23 in file "main.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;		None
   766 ;; Auto vars:     Size  Location     Type
   767 ;;		None
   768 ;; Return value:  Size  Location     Type
   769 ;;                  1    wreg      void 
   770 ;; Registers used:
   771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   777 ;;      Params:         0       0       0       0       0       0       0       0       0
   778 ;;      Locals:         0       0       0       0       0       0       0       0       0
   779 ;;      Temps:          0       0       0       0       0       0       0       0       0
   780 ;;      Totals:         0       0       0       0       0       0       0       0       0
   781 ;;Total ram usage:        0 bytes
   782 ;; Hardware stack levels required when called: 8
   783 ;; This function calls:
   784 ;;		_dec2bcd
   785 ;;		_dsInit
   786 ;;		_dsWriteData
   787 ;;		_kpDebounce
   788 ;;		_kpInit
   789 ;;		_lcdInit
   790 ;;		_serialInit
   791 ;;		_smInit
   792 ;;		_smLoop
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text0
   799   006A9E                     __ptext0:
   800                           	callstack 0
   801   006A9E                     _main:
   802                           	callstack 23
   803   006A9E                     
   804                           ;main.c: 26:     kpInit();
   805   006A9E  EC88  F031         	call	_kpInit	;wreg free
   806                           
   807                           ;main.c: 27:     lcdInit();
   808   006AA2  EC13  F035         	call	_lcdInit	;wreg free
   809                           
   810                           ;main.c: 28:     dsInit();
   811   006AA6  EC75  F031         	call	_dsInit	;wreg free
   812                           
   813                           ;main.c: 29:     smInit();
   814   006AAA  EC8F  F031         	call	_smInit	;wreg free
   815                           
   816                           ;main.c: 30:     serialInit();
   817   006AAE  ECCF  F031         	call	_serialInit	;wreg free
   818   006AB2                     
   819                           ;main.c: 31:     TRISA = 0x00;
   820   006AB2  0E00               	movlw	0
   821   006AB4  6E92               	movwf	146,c	;volatile
   822   006AB6                     
   823                           ;main.c: 32:     LATA = 0x00;
   824   006AB6  0E00               	movlw	0
   825   006AB8  6E89               	movwf	137,c	;volatile
   826                           
   827                           ;main.c: 34:     (dsWriteData(dec2bcd(0),0x00));
   828   006ABA  0E00               	movlw	0
   829   006ABC  6E1E               	movwf	(dsWriteData@address+1)^0,c
   830   006ABE  0E00               	movlw	0
   831   006AC0  6E1D               	movwf	dsWriteData@address^0,c
   832   006AC2  0E00               	movlw	0
   833   006AC4  6E18               	movwf	(dec2bcd@value+1)^0,c
   834   006AC6  0E00               	movlw	0
   835   006AC8  6E17               	movwf	dec2bcd@value^0,c
   836   006ACA  ECA6  F034         	call	_dec2bcd	;wreg free
   837   006ACE  5017               	movf	?_dec2bcd^0,w,c
   838   006AD0  ECAB  F032         	call	_dsWriteData
   839                           
   840                           ;main.c: 35:     (dsWriteData(dec2bcd(10),0x01));
   841   006AD4  0E00               	movlw	0
   842   006AD6  6E1E               	movwf	(dsWriteData@address+1)^0,c
   843   006AD8  0E01               	movlw	1
   844   006ADA  6E1D               	movwf	dsWriteData@address^0,c
   845   006ADC  0E00               	movlw	0
   846   006ADE  6E18               	movwf	(dec2bcd@value+1)^0,c
   847   006AE0  0E0A               	movlw	10
   848   006AE2  6E17               	movwf	dec2bcd@value^0,c
   849   006AE4  ECA6  F034         	call	_dec2bcd	;wreg free
   850   006AE8  5017               	movf	?_dec2bcd^0,w,c
   851   006AEA  ECAB  F032         	call	_dsWriteData
   852                           
   853                           ;main.c: 36:     (dsWriteData(dec2bcd(0),0x02));
   854   006AEE  0E00               	movlw	0
   855   006AF0  6E1E               	movwf	(dsWriteData@address+1)^0,c
   856   006AF2  0E02               	movlw	2
   857   006AF4  6E1D               	movwf	dsWriteData@address^0,c
   858   006AF6  0E00               	movlw	0
   859   006AF8  6E18               	movwf	(dec2bcd@value+1)^0,c
   860   006AFA  0E00               	movlw	0
   861   006AFC  6E17               	movwf	dec2bcd@value^0,c
   862   006AFE  ECA6  F034         	call	_dec2bcd	;wreg free
   863   006B02  5017               	movf	?_dec2bcd^0,w,c
   864   006B04  ECAB  F032         	call	_dsWriteData
   865   006B08                     l3513:
   866                           
   867                           ;main.c: 40:         kpDebounce();
   868   006B08  ECF2  F036         	call	_kpDebounce	;wreg free
   869   006B0C                     
   870                           ;main.c: 42:         smLoop();
   871   006B0C  ECAE  F03C         	call	_smLoop	;wreg free
   872   006B10  EF84  F035         	goto	l3513
   873   006B14  EF01  F000         	goto	start
   874   006B18                     __end_of_main:
   875                           	callstack 0
   876                           
   877 ;; *************** function _smLoop *****************
   878 ;; Defined at:
   879 ;;		line 18 in file "stateMachine.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  prot            1   40[COMRAM] PTR unsigned char 
   884 ;;		 -> prot(5), 
   885 ;;  evento          1   41[COMRAM] unsigned char 
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   895 ;;      Params:         0       0       0       0       0       0       0       0       0
   896 ;;      Locals:         4       0       0       0       0       0       0       0       0
   897 ;;      Temps:          1       0       0       0       0       0       0       0       0
   898 ;;      Totals:         5       0       0       0       0       0       0       0       0
   899 ;;Total ram usage:        5 bytes
   900 ;; Hardware stack levels used: 1
   901 ;; Hardware stack levels required when called: 6
   902 ;; This function calls:
   903 ;;		_bcd2dec
   904 ;;		_dec2bcd
   905 ;;		_dsReadData
   906 ;;		_dsWriteData
   907 ;;		_eventRead
   908 ;;		_getAlarmLevel
   909 ;;		_getLanguage
   910 ;;		_getProt
   911 ;;		_getState
   912 ;;		_outputPrint
   913 ;;		_resetProt
   914 ;;		_setAlarmLevel
   915 ;;		_setLanguage
   916 ;;		_setState
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text1
   923   00795C                     __ptext1:
   924                           	callstack 0
   925   00795C                     _smLoop:
   926                           	callstack 24
   927   00795C                     
   928                           ;stateMachine.c: 19:     unsigned char evento;;stateMachine.c: 22:     evento = eventRea
      +                          d();
   929   00795C  EC25  F038         	call	_eventRead	;wreg free
   930   007960  5003               	movf	?_eventRead^0,w,c
   931   007962  6E2A               	movwf	smLoop@evento^0,c
   932                           
   933                           ;stateMachine.c: 24:     switch (getState()) {
   934   007964  EF25  F03E         	goto	l3497
   935   007968                     l3397:
   936                           
   937                           ;stateMachine.c: 26:             if (evento == EV_B_0) {
   938   007968  502A               	movf	smLoop@evento^0,w,c
   939   00796A  A4D8               	btfss	status,2,c
   940   00796C  EFBA  F03C         	goto	u2911
   941   007970  EFBC  F03C         	goto	u2910
   942   007974                     u2911:
   943   007974  EFCC  F03C         	goto	l3401
   944   007978                     u2910:
   945   007978                     
   946                           ;stateMachine.c: 27:                 setAlarmLevel(getAlarmLevel(0) - 1, 0);
   947   007978  0E00               	movlw	0
   948   00797A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
   949   00797C  0E00               	movlw	0
   950   00797E  6E01               	movwf	getAlarmLevel@lh^0,c
   951   007980  EC67  F032         	call	_getAlarmLevel	;wreg free
   952   007984  0EFF               	movlw	255
   953   007986  2401               	addwf	?_getAlarmLevel^0,w,c
   954   007988  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
   955   00798A  0EFF               	movlw	255
   956   00798C  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
   957   00798E  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   958   007990  0E00               	movlw	0
   959   007992  6E22               	movwf	setAlarmLevel@lh^0,c
   960   007994  ECD0  F033         	call	_setAlarmLevel	;wreg free
   961   007998                     l3401:
   962                           
   963                           ;stateMachine.c: 30:             if (evento == EV_B_1) {
   964   007998  042A               	decf	smLoop@evento^0,w,c
   965   00799A  A4D8               	btfss	status,2,c
   966   00799C  EFD2  F03C         	goto	u2921
   967   0079A0  EFD4  F03C         	goto	u2920
   968   0079A4                     u2921:
   969   0079A4  EFE4  F03C         	goto	l3405
   970   0079A8                     u2920:
   971   0079A8                     
   972                           ;stateMachine.c: 31:                 setAlarmLevel(getAlarmLevel(0) + 1, 0);
   973   0079A8  0E00               	movlw	0
   974   0079AA  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
   975   0079AC  0E00               	movlw	0
   976   0079AE  6E01               	movwf	getAlarmLevel@lh^0,c
   977   0079B0  EC67  F032         	call	_getAlarmLevel	;wreg free
   978   0079B4  0E01               	movlw	1
   979   0079B6  2401               	addwf	?_getAlarmLevel^0,w,c
   980   0079B8  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
   981   0079BA  0E00               	movlw	0
   982   0079BC  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
   983   0079BE  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   984   0079C0  0E00               	movlw	0
   985   0079C2  6E22               	movwf	setAlarmLevel@lh^0,c
   986   0079C4  ECD0  F033         	call	_setAlarmLevel	;wreg free
   987   0079C8                     l3405:
   988                           
   989                           ;stateMachine.c: 34:             if (evento == EV_B_2) {
   990   0079C8  0E02               	movlw	2
   991   0079CA  182A               	xorwf	smLoop@evento^0,w,c
   992   0079CC  A4D8               	btfss	status,2,c
   993   0079CE  EFEB  F03C         	goto	u2931
   994   0079D2  EFED  F03C         	goto	u2930
   995   0079D6                     u2931:
   996   0079D6  EFF0  F03C         	goto	l3409
   997   0079DA                     u2930:
   998   0079DA                     
   999                           ;stateMachine.c: 35:                 setState(STATE_TEMPO);
  1000   0079DA  0E02               	movlw	2
  1001   0079DC  EC7F  F031         	call	_setState
  1002   0079E0                     l3409:
  1003                           
  1004                           ;stateMachine.c: 38:             if (evento == EV_B_3) {
  1005   0079E0  0E03               	movlw	3
  1006   0079E2  182A               	xorwf	smLoop@evento^0,w,c
  1007   0079E4  A4D8               	btfss	status,2,c
  1008   0079E6  EFF7  F03C         	goto	u2941
  1009   0079EA  EFF9  F03C         	goto	u2940
  1010   0079EE                     u2941:
  1011   0079EE  EFFC  F03C         	goto	l3413
  1012   0079F2                     u2940:
  1013   0079F2                     
  1014                           ;stateMachine.c: 39:                 setState(STATE_ALARMEH);
  1015   0079F2  0E01               	movlw	1
  1016   0079F4  EC7F  F031         	call	_setState
  1017   0079F8                     l3413:
  1018                           
  1019                           ;stateMachine.c: 42:             if(evento == EV_B_4)
  1020   0079F8  0E04               	movlw	4
  1021   0079FA  182A               	xorwf	smLoop@evento^0,w,c
  1022   0079FC  A4D8               	btfss	status,2,c
  1023   0079FE  EF03  F03D         	goto	u2951
  1024   007A02  EF05  F03D         	goto	u2950
  1025   007A06                     u2951:
  1026   007A06  EF3D  F03E         	goto	l3499
  1027   007A0A                     u2950:
  1028   007A0A                     
  1029                           ;stateMachine.c: 43:             {;stateMachine.c: 44:                 setState(STATE_MA
      +                          IN);
  1030   007A0A  0E04               	movlw	4
  1031   007A0C  EC7F  F031         	call	_setState
  1032   007A10                     
  1033                           ;stateMachine.c: 45:                 estado_ant = STATE_ALARMEL;
  1034   007A10  0E00               	movlw	0
  1035   007A12  6E41               	movwf	_estado_ant^0,c
  1036   007A14  EF3D  F03E         	goto	l3499
  1037   007A18                     l3419:
  1038                           
  1039                           ;stateMachine.c: 50:             if (evento == EV_B_0) {
  1040   007A18  502A               	movf	smLoop@evento^0,w,c
  1041   007A1A  A4D8               	btfss	status,2,c
  1042   007A1C  EF12  F03D         	goto	u2961
  1043   007A20  EF14  F03D         	goto	u2960
  1044   007A24                     u2961:
  1045   007A24  EF24  F03D         	goto	l3423
  1046   007A28                     u2960:
  1047   007A28                     
  1048                           ;stateMachine.c: 51:                 setAlarmLevel(getAlarmLevel(1) - 1, 1);
  1049   007A28  0E00               	movlw	0
  1050   007A2A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1051   007A2C  0E01               	movlw	1
  1052   007A2E  6E01               	movwf	getAlarmLevel@lh^0,c
  1053   007A30  EC67  F032         	call	_getAlarmLevel	;wreg free
  1054   007A34  0EFF               	movlw	255
  1055   007A36  2401               	addwf	?_getAlarmLevel^0,w,c
  1056   007A38  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1057   007A3A  0EFF               	movlw	255
  1058   007A3C  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1059   007A3E  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1060   007A40  0E01               	movlw	1
  1061   007A42  6E22               	movwf	setAlarmLevel@lh^0,c
  1062   007A44  ECD0  F033         	call	_setAlarmLevel	;wreg free
  1063   007A48                     l3423:
  1064                           
  1065                           ;stateMachine.c: 54:             if (evento == EV_B_1) {
  1066   007A48  042A               	decf	smLoop@evento^0,w,c
  1067   007A4A  A4D8               	btfss	status,2,c
  1068   007A4C  EF2A  F03D         	goto	u2971
  1069   007A50  EF2C  F03D         	goto	u2970
  1070   007A54                     u2971:
  1071   007A54  EF3C  F03D         	goto	l3427
  1072   007A58                     u2970:
  1073   007A58                     
  1074                           ;stateMachine.c: 55:                 setAlarmLevel(getAlarmLevel(1) + 1, 1);
  1075   007A58  0E00               	movlw	0
  1076   007A5A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1077   007A5C  0E01               	movlw	1
  1078   007A5E  6E01               	movwf	getAlarmLevel@lh^0,c
  1079   007A60  EC67  F032         	call	_getAlarmLevel	;wreg free
  1080   007A64  0E01               	movlw	1
  1081   007A66  2401               	addwf	?_getAlarmLevel^0,w,c
  1082   007A68  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1083   007A6A  0E00               	movlw	0
  1084   007A6C  2002               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1085   007A6E  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1086   007A70  0E01               	movlw	1
  1087   007A72  6E22               	movwf	setAlarmLevel@lh^0,c
  1088   007A74  ECD0  F033         	call	_setAlarmLevel	;wreg free
  1089   007A78                     l3427:
  1090                           
  1091                           ;stateMachine.c: 58:             if (evento == EV_B_2) {
  1092   007A78  0E02               	movlw	2
  1093   007A7A  182A               	xorwf	smLoop@evento^0,w,c
  1094   007A7C  A4D8               	btfss	status,2,c
  1095   007A7E  EF43  F03D         	goto	u2981
  1096   007A82  EF45  F03D         	goto	u2980
  1097   007A86                     u2981:
  1098   007A86  EF48  F03D         	goto	l3431
  1099   007A8A                     u2980:
  1100   007A8A                     
  1101                           ;stateMachine.c: 59:                 setState(STATE_ALARMEL);
  1102   007A8A  0E00               	movlw	0
  1103   007A8C  EC7F  F031         	call	_setState
  1104   007A90                     l3431:
  1105                           
  1106                           ;stateMachine.c: 62:             if (evento == EV_B_3) {
  1107   007A90  0E03               	movlw	3
  1108   007A92  182A               	xorwf	smLoop@evento^0,w,c
  1109   007A94  A4D8               	btfss	status,2,c
  1110   007A96  EF4F  F03D         	goto	u2991
  1111   007A9A  EF51  F03D         	goto	u2990
  1112   007A9E                     u2991:
  1113   007A9E  EF54  F03D         	goto	l3435
  1114   007AA2                     u2990:
  1115   007AA2                     
  1116                           ;stateMachine.c: 63:                 setState(STATE_IDIOMA);
  1117   007AA2  0E03               	movlw	3
  1118   007AA4  EC7F  F031         	call	_setState
  1119   007AA8                     l3435:
  1120                           
  1121                           ;stateMachine.c: 66:             if(evento == EV_B_4)
  1122   007AA8  0E04               	movlw	4
  1123   007AAA  182A               	xorwf	smLoop@evento^0,w,c
  1124   007AAC  A4D8               	btfss	status,2,c
  1125   007AAE  EF5B  F03D         	goto	u3001
  1126   007AB2  EF5D  F03D         	goto	u3000
  1127   007AB6                     u3001:
  1128   007AB6  EF3D  F03E         	goto	l3499
  1129   007ABA                     u3000:
  1130   007ABA                     
  1131                           ;stateMachine.c: 67:             {;stateMachine.c: 68:                 setState(STATE_MA
      +                          IN);
  1132   007ABA  0E04               	movlw	4
  1133   007ABC  EC7F  F031         	call	_setState
  1134   007AC0                     
  1135                           ;stateMachine.c: 69:                 estado_ant = STATE_ALARMEH;
  1136   007AC0  0E01               	movlw	1
  1137   007AC2  6E41               	movwf	_estado_ant^0,c
  1138   007AC4  EF3D  F03E         	goto	l3499
  1139   007AC8                     l3441:
  1140                           
  1141                           ;stateMachine.c: 77:             if (evento == EV_B_2) {
  1142   007AC8  0E02               	movlw	2
  1143   007ACA  182A               	xorwf	smLoop@evento^0,w,c
  1144   007ACC  A4D8               	btfss	status,2,c
  1145   007ACE  EF6B  F03D         	goto	u3011
  1146   007AD2  EF6D  F03D         	goto	u3010
  1147   007AD6                     u3011:
  1148   007AD6  EF70  F03D         	goto	l3445
  1149   007ADA                     u3010:
  1150   007ADA                     
  1151                           ;stateMachine.c: 78:                 setState(STATE_ALARMEH);
  1152   007ADA  0E01               	movlw	1
  1153   007ADC  EC7F  F031         	call	_setState
  1154   007AE0                     l3445:
  1155                           
  1156                           ;stateMachine.c: 81:             if (evento == EV_B_3) {
  1157   007AE0  0E03               	movlw	3
  1158   007AE2  182A               	xorwf	smLoop@evento^0,w,c
  1159   007AE4  A4D8               	btfss	status,2,c
  1160   007AE6  EF77  F03D         	goto	u3021
  1161   007AEA  EF79  F03D         	goto	u3020
  1162   007AEE                     u3021:
  1163   007AEE  EF7C  F03D         	goto	l3449
  1164   007AF2                     u3020:
  1165   007AF2                     
  1166                           ;stateMachine.c: 82:                 setState(STATE_TEMPO);
  1167   007AF2  0E02               	movlw	2
  1168   007AF4  EC7F  F031         	call	_setState
  1169   007AF8                     l3449:
  1170                           
  1171                           ;stateMachine.c: 85:             if(evento == EV_B_4)
  1172   007AF8  0E04               	movlw	4
  1173   007AFA  182A               	xorwf	smLoop@evento^0,w,c
  1174   007AFC  A4D8               	btfss	status,2,c
  1175   007AFE  EF83  F03D         	goto	u3031
  1176   007B02  EF85  F03D         	goto	u3030
  1177   007B06                     u3031:
  1178   007B06  EF8A  F03D         	goto	l3455
  1179   007B0A                     u3030:
  1180   007B0A                     
  1181                           ;stateMachine.c: 86:             {;stateMachine.c: 87:                 setState(STATE_MA
      +                          IN);
  1182   007B0A  0E04               	movlw	4
  1183   007B0C  EC7F  F031         	call	_setState
  1184   007B10                     
  1185                           ;stateMachine.c: 88:                 estado_ant = STATE_IDIOMA;
  1186   007B10  0E03               	movlw	3
  1187   007B12  6E41               	movwf	_estado_ant^0,c
  1188   007B14                     l3455:
  1189                           
  1190                           ;stateMachine.c: 91:             if (evento == EV_B_0) {
  1191   007B14  502A               	movf	smLoop@evento^0,w,c
  1192   007B16  A4D8               	btfss	status,2,c
  1193   007B18  EF90  F03D         	goto	u3041
  1194   007B1C  EF92  F03D         	goto	u3040
  1195   007B20                     u3041:
  1196   007B20  EF98  F03D         	goto	l3459
  1197   007B24                     u3040:
  1198   007B24                     
  1199                           ;stateMachine.c: 93:                 setLanguage(getLanguage() + 1);
  1200   007B24  EC73  F031         	call	_getLanguage	;wreg free
  1201   007B28  6E26               	movwf	??_smLoop^0,c
  1202   007B2A  2826               	incf	??_smLoop^0,w,c
  1203   007B2C  ECC3  F031         	call	_setLanguage
  1204   007B30                     l3459:
  1205                           
  1206                           ;stateMachine.c: 97:             if (evento == EV_B_1) {
  1207   007B30  042A               	decf	smLoop@evento^0,w,c
  1208   007B32  A4D8               	btfss	status,2,c
  1209   007B34  EF9E  F03D         	goto	u3051
  1210   007B38  EFA0  F03D         	goto	u3050
  1211   007B3C                     u3051:
  1212   007B3C  EFA6  F03D         	goto	l3463
  1213   007B40                     u3050:
  1214   007B40                     
  1215                           ;stateMachine.c: 98:                 setLanguage(getLanguage() - 1);
  1216   007B40  EC73  F031         	call	_getLanguage	;wreg free
  1217   007B44  6E26               	movwf	??_smLoop^0,c
  1218   007B46  0426               	decf	??_smLoop^0,w,c
  1219   007B48  ECC3  F031         	call	_setLanguage
  1220   007B4C                     l3463:
  1221                           
  1222                           ;stateMachine.c: 101:             if (evento == EV_PROT_SERIAL) {
  1223   007B4C  0E05               	movlw	5
  1224   007B4E  182A               	xorwf	smLoop@evento^0,w,c
  1225   007B50  A4D8               	btfss	status,2,c
  1226   007B52  EFAD  F03D         	goto	u3061
  1227   007B56  EFAF  F03D         	goto	u3060
  1228   007B5A                     u3061:
  1229   007B5A  EF3D  F03E         	goto	l3499
  1230   007B5E                     u3060:
  1231   007B5E                     
  1232                           ;stateMachine.c: 102:                 unsigned char* prot;;stateMachine.c: 103:         
      +                                  prot = getProt();
  1233   007B5E  EC6D  F031         	call	_getProt	;wreg free
  1234   007B62  6E29               	movwf	smLoop@prot^0,c
  1235   007B64                     
  1236                           ;stateMachine.c: 105:                 if (prot[1] == 'l') {
  1237   007B64  5029               	movf	smLoop@prot^0,w,c
  1238   007B66  6ED9               	movwf	fsr2l,c
  1239   007B68  6ADA               	clrf	fsr2h,c
  1240   007B6A  0E01               	movlw	1
  1241   007B6C  26D9               	addwf	fsr2l,f,c
  1242   007B6E  0E6C               	movlw	108
  1243   007B70  18DE               	xorwf	postinc2,w,c
  1244   007B72  A4D8               	btfss	status,2,c
  1245   007B74  EFBE  F03D         	goto	u3071
  1246   007B78  EFC0  F03D         	goto	u3070
  1247   007B7C                     u3071:
  1248   007B7C  EFC8  F03D         	goto	l630
  1249   007B80                     u3070:
  1250   007B80                     
  1251                           ;stateMachine.c: 106:                     setLanguage(prot[5 - 1]);
  1252   007B80  5029               	movf	smLoop@prot^0,w,c
  1253   007B82  6ED9               	movwf	fsr2l,c
  1254   007B84  6ADA               	clrf	fsr2h,c
  1255   007B86  0E04               	movlw	4
  1256   007B88  26D9               	addwf	fsr2l,f,c
  1257   007B8A  50DF               	movf	indf2,w,c
  1258   007B8C  ECC3  F031         	call	_setLanguage
  1259   007B90                     l630:
  1260                           
  1261                           ;stateMachine.c: 109:                 resetProt();
  1262   007B90  ECC2  F032         	call	_resetProt	;wreg free
  1263   007B94  EF3D  F03E         	goto	l3499
  1264   007B98                     l3471:
  1265                           
  1266                           ;stateMachine.c: 116:             if (evento == EV_B_2) {
  1267   007B98  0E02               	movlw	2
  1268   007B9A  182A               	xorwf	smLoop@evento^0,w,c
  1269   007B9C  A4D8               	btfss	status,2,c
  1270   007B9E  EFD3  F03D         	goto	u3081
  1271   007BA2  EFD5  F03D         	goto	u3080
  1272   007BA6                     u3081:
  1273   007BA6  EFD8  F03D         	goto	l3475
  1274   007BAA                     u3080:
  1275   007BAA                     
  1276                           ;stateMachine.c: 117:                 setState(STATE_IDIOMA);
  1277   007BAA  0E03               	movlw	3
  1278   007BAC  EC7F  F031         	call	_setState
  1279   007BB0                     l3475:
  1280                           
  1281                           ;stateMachine.c: 120:             if (evento == EV_B_3) {
  1282   007BB0  0E03               	movlw	3
  1283   007BB2  182A               	xorwf	smLoop@evento^0,w,c
  1284   007BB4  A4D8               	btfss	status,2,c
  1285   007BB6  EFDF  F03D         	goto	u3091
  1286   007BBA  EFE1  F03D         	goto	u3090
  1287   007BBE                     u3091:
  1288   007BBE  EFE4  F03D         	goto	l3479
  1289   007BC2                     u3090:
  1290   007BC2                     
  1291                           ;stateMachine.c: 121:                 setState(STATE_ALARMEL);
  1292   007BC2  0E00               	movlw	0
  1293   007BC4  EC7F  F031         	call	_setState
  1294   007BC8                     l3479:
  1295                           
  1296                           ;stateMachine.c: 124:             if(evento == EV_B_4)
  1297   007BC8  0E04               	movlw	4
  1298   007BCA  182A               	xorwf	smLoop@evento^0,w,c
  1299   007BCC  A4D8               	btfss	status,2,c
  1300   007BCE  EFEB  F03D         	goto	u3101
  1301   007BD2  EFED  F03D         	goto	u3100
  1302   007BD6                     u3101:
  1303   007BD6  EF3D  F03E         	goto	l3499
  1304   007BDA                     u3100:
  1305   007BDA                     
  1306                           ;stateMachine.c: 125:             {;stateMachine.c: 126:                 setState(STATE_
      +                          MAIN);
  1307   007BDA  0E04               	movlw	4
  1308   007BDC  EC7F  F031         	call	_setState
  1309   007BE0                     
  1310                           ;stateMachine.c: 127:                 estado_ant = STATE_TEMPO;
  1311   007BE0  0E02               	movlw	2
  1312   007BE2  6E41               	movwf	_estado_ant^0,c
  1313   007BE4  EF3D  F03E         	goto	l3499
  1314   007BE8                     l3485:
  1315                           
  1316                           ;stateMachine.c: 132:             if(evento == EV_B_4)
  1317   007BE8  0E04               	movlw	4
  1318   007BEA  182A               	xorwf	smLoop@evento^0,w,c
  1319   007BEC  A4D8               	btfss	status,2,c
  1320   007BEE  EFFB  F03D         	goto	u3111
  1321   007BF2  EFFD  F03D         	goto	u3110
  1322   007BF6                     u3111:
  1323   007BF6  EF00  F03E         	goto	l3489
  1324   007BFA                     u3110:
  1325   007BFA                     
  1326                           ;stateMachine.c: 133:                 setState(estado_ant);
  1327   007BFA  5041               	movf	_estado_ant^0,w,c
  1328   007BFC  EC7F  F031         	call	_setState
  1329   007C00                     l3489:
  1330                           
  1331                           ;stateMachine.c: 135:             if(evento == EV_B_0)
  1332   007C00  502A               	movf	smLoop@evento^0,w,c
  1333   007C02  A4D8               	btfss	status,2,c
  1334   007C04  EF06  F03E         	goto	u3121
  1335   007C08  EF08  F03E         	goto	u3120
  1336   007C0C                     u3121:
  1337   007C0C  EF3D  F03E         	goto	l3499
  1338   007C10                     u3120:
  1339   007C10                     
  1340                           ;stateMachine.c: 136:                 (dsWriteData(dec2bcd((bcd2dec(dsReadData(0x01)& 0x
      +                          7f)) + 1),0x01));
  1341   007C10  0E00               	movlw	0
  1342   007C12  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1343   007C14  0E01               	movlw	1
  1344   007C16  6E1D               	movwf	dsWriteData@address^0,c
  1345   007C18  0E00               	movlw	0
  1346   007C1A  6E0F               	movwf	(dsReadData@address+1)^0,c
  1347   007C1C  0E01               	movlw	1
  1348   007C1E  6E0E               	movwf	dsReadData@address^0,c
  1349   007C20  EC89  F033         	call	_dsReadData	;wreg free
  1350   007C24  0E7F               	movlw	127
  1351   007C26  140E               	andwf	?_dsReadData^0,w,c
  1352   007C28  6E13               	movwf	bcd2dec@value^0,c
  1353   007C2A  6A14               	clrf	(bcd2dec@value+1)^0,c
  1354   007C2C  EC45  F033         	call	_bcd2dec	;wreg free
  1355   007C30  0E01               	movlw	1
  1356   007C32  2413               	addwf	?_bcd2dec^0,w,c
  1357   007C34  6E17               	movwf	dec2bcd@value^0,c
  1358   007C36  0E00               	movlw	0
  1359   007C38  2014               	addwfc	(?_bcd2dec+1)^0,w,c
  1360   007C3A  6E18               	movwf	(dec2bcd@value+1)^0,c
  1361   007C3C  ECA6  F034         	call	_dec2bcd	;wreg free
  1362   007C40  5017               	movf	?_dec2bcd^0,w,c
  1363   007C42  ECAB  F032         	call	_dsWriteData
  1364   007C46  EF3D  F03E         	goto	l3499
  1365   007C4A                     l3497:
  1366   007C4A  EC71  F031         	call	_getState	;wreg free
  1367                           
  1368                           ; Switch size 1, requested type "simple"
  1369                           ; Number of cases is 5, Range of values is 0 to 4
  1370                           ; switch strategies available:
  1371                           ; Name         Instructions Cycles
  1372                           ; simple_byte           16     9 (average)
  1373                           ;	Chosen strategy is simple_byte
  1374   007C4E  0A00               	xorlw	0	; case 0
  1375   007C50  B4D8               	btfsc	status,2,c
  1376   007C52  EFB4  F03C         	goto	l3397
  1377   007C56  0A01               	xorlw	1	; case 1
  1378   007C58  B4D8               	btfsc	status,2,c
  1379   007C5A  EF0C  F03D         	goto	l3419
  1380   007C5E  0A03               	xorlw	3	; case 2
  1381   007C60  B4D8               	btfsc	status,2,c
  1382   007C62  EFCC  F03D         	goto	l3471
  1383   007C66  0A01               	xorlw	1	; case 3
  1384   007C68  B4D8               	btfsc	status,2,c
  1385   007C6A  EF64  F03D         	goto	l3441
  1386   007C6E  0A07               	xorlw	7	; case 4
  1387   007C70  B4D8               	btfsc	status,2,c
  1388   007C72  EFF4  F03D         	goto	l3485
  1389   007C76  EF3D  F03E         	goto	l3499
  1390   007C7A                     l3499:
  1391                           
  1392                           ;stateMachine.c: 143:     outputPrint(getState(), getLanguage());
  1393   007C7A  EC73  F031         	call	_getLanguage	;wreg free
  1394   007C7E  6E26               	movwf	??_smLoop^0,c
  1395   007C80  5026               	movf	??_smLoop^0,w,c
  1396   007C82  6E27               	movwf	_smLoop$1412^0,c
  1397   007C84  6A28               	clrf	(_smLoop$1412+1)^0,c
  1398   007C86                     
  1399                           ;stateMachine.c: 143:     outputPrint(getState(), getLanguage());
  1400   007C86  EC71  F031         	call	_getState	;wreg free
  1401   007C8A  6E26               	movwf	??_smLoop^0,c
  1402   007C8C  5026               	movf	??_smLoop^0,w,c
  1403   007C8E  6E21               	movwf	outputPrint@numTela^0,c
  1404   007C90  6A22               	clrf	(outputPrint@numTela+1)^0,c
  1405   007C92  C027  F023         	movff	_smLoop$1412,outputPrint@idioma
  1406   007C96  C028  F024         	movff	_smLoop$1412+1,outputPrint@idioma+1
  1407   007C9A  EC3E  F03B         	call	_outputPrint	;wreg free
  1408   007C9E  0012               	return		;funcret
  1409   007CA0                     __end_of_smLoop:
  1410                           	callstack 0
  1411                           
  1412 ;; *************** function _setLanguage *****************
  1413 ;; Defined at:
  1414 ;;		line 78 in file "var.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  newLanguage     1    wreg     unsigned char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  newLanguage     1   31[COMRAM] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1428 ;;      Params:         0       0       0       0       0       0       0       0       0
  1429 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1431 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1432 ;;Total ram usage:        1 bytes
  1433 ;; Hardware stack levels used: 1
  1434 ;; Hardware stack levels required when called: 5
  1435 ;; This function calls:
  1436 ;;		_dsWriteData
  1437 ;; This function is called by:
  1438 ;;		_smLoop
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text2
  1443   006386                     __ptext2:
  1444                           	callstack 0
  1445   006386                     _setLanguage:
  1446                           	callstack 24
  1447                           
  1448                           ;incstack = 0
  1449                           ;setLanguage@newLanguage stored from wreg
  1450   006386  6E20               	movwf	setLanguage@newLanguage^0,c
  1451   006388                     
  1452                           ;var.c: 81:     language = newLanguage % 2;
  1453   006388  5020               	movf	setLanguage@newLanguage^0,w,c
  1454   00638A  0B01               	andlw	1
  1455   00638C  6E3F               	movwf	_language^0,c
  1456   00638E                     
  1457                           ;var.c: 82:     dsWriteData(language, 0x23);
  1458   00638E  0E00               	movlw	0
  1459   006390  6E1E               	movwf	(dsWriteData@address+1)^0,c
  1460   006392  0E23               	movlw	35
  1461   006394  6E1D               	movwf	dsWriteData@address^0,c
  1462   006396  503F               	movf	_language^0,w,c
  1463   006398  ECAB  F032         	call	_dsWriteData
  1464   00639C  0012               	return		;funcret
  1465   00639E                     __end_of_setLanguage:
  1466                           	callstack 0
  1467                           
  1468 ;; *************** function _resetProt *****************
  1469 ;; Defined at:
  1470 ;;		line 97 in file "var.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  i               1    0[COMRAM] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1484 ;;      Params:         0       0       0       0       0       0       0       0       0
  1485 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1487 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1488 ;;Total ram usage:        1 bytes
  1489 ;; Hardware stack levels used: 1
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_smLoop
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text3
  1498   006584                     __ptext3:
  1499                           	callstack 0
  1500   006584                     _resetProt:
  1501                           	callstack 29
  1502   006584                     
  1503                           ;var.c: 99:     char i = 0;
  1504   006584  0E00               	movlw	0
  1505   006586  6E01               	movwf	resetProt@i^0,c
  1506                           
  1507                           ;var.c: 100:     while (i < 5)
  1508   006588  EFCC  F032         	goto	l3363
  1509   00658C                     l3359:
  1510                           
  1511                           ;var.c: 101:     {;var.c: 102:         prot[i] = 0;
  1512   00658C  5001               	movf	resetProt@i^0,w,c
  1513   00658E  0F4E               	addlw	low _prot
  1514   006590  6ED9               	movwf	fsr2l,c
  1515   006592  6ADA               	clrf	fsr2h,c
  1516   006594  6ADF               	clrf	indf2,c
  1517   006596                     
  1518                           ;var.c: 103:         i++;
  1519   006596  2A01               	incf	resetProt@i^0,f,c
  1520   006598                     l3363:
  1521                           
  1522                           ;var.c: 100:     while (i < 5)
  1523   006598  0E04               	movlw	4
  1524   00659A  6401               	cpfsgt	resetProt@i^0,c
  1525   00659C  EFD2  F032         	goto	u2891
  1526   0065A0  EFD4  F032         	goto	u2890
  1527   0065A4                     u2891:
  1528   0065A4  EFC6  F032         	goto	l3359
  1529   0065A8                     u2890:
  1530   0065A8                     
  1531                           ;var.c: 105:     prot_ready = 0;
  1532   0065A8  0E00               	movlw	0
  1533   0065AA  6E42               	movwf	_prot_ready^0,c
  1534                           
  1535                           ;var.c: 106:     index = 0;
  1536   0065AC  0E00               	movlw	0
  1537   0065AE  6E3C               	movwf	_index^0,c
  1538   0065B0  0012               	return		;funcret
  1539   0065B2                     __end_of_resetProt:
  1540                           	callstack 0
  1541                           
  1542 ;; *************** function _outputPrint *****************
  1543 ;; Defined at:
  1544 ;;		line 22 in file "output.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  numTela         2   32[COMRAM] int 
  1547 ;;  idioma          2   34[COMRAM] int 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1559 ;;      Params:         4       0       0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1561 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1562 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1563 ;;Total ram usage:        5 bytes
  1564 ;; Hardware stack levels used: 1
  1565 ;; Hardware stack levels required when called: 5
  1566 ;; This function calls:
  1567 ;;		_bcd2dec
  1568 ;;		_dsReadData
  1569 ;;		_getAlarmLevel
  1570 ;;		_getLanguage
  1571 ;;		_getTime
  1572 ;;		_lcdCommand
  1573 ;;		_lcdData
  1574 ;;		_lcdInt
  1575 ;;		_lcdString
  1576 ;; This function is called by:
  1577 ;;		_smLoop
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text4
  1582   00767C                     __ptext4:
  1583                           	callstack 0
  1584   00767C                     _outputPrint:
  1585                           	callstack 24
  1586   00767C                     
  1587                           ;output.c: 24:     if (numTela == STATE_TEMPO) {
  1588   00767C  0E02               	movlw	2
  1589   00767E  1821               	xorwf	outputPrint@numTela^0,w,c
  1590   007680  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1591   007682  A4D8               	btfss	status,2,c
  1592   007684  EF46  F03B         	goto	u2811
  1593   007688  EF48  F03B         	goto	u2810
  1594   00768C                     u2811:
  1595   00768C  EF6F  F03B         	goto	l3261
  1596   007690                     u2810:
  1597   007690                     
  1598                           ;output.c: 25:         lcdCommand(0x80);
  1599   007690  0E80               	movlw	128
  1600   007692  ECAC  F033         	call	_lcdCommand
  1601   007696                     
  1602                           ;output.c: 26:         lcdString(msgs[numTela][idioma]);
  1603   007696  5023               	movf	outputPrint@idioma^0,w,c
  1604   007698  0D02               	mullw	2
  1605   00769A  CFF3 F025          	movff	prodl,??_outputPrint
  1606   00769E  5021               	movf	outputPrint@numTela^0,w,c
  1607   0076A0  0D04               	mullw	4
  1608   0076A2  50F3               	movf	243,w,c
  1609   0076A4  0F60               	addlw	low _msgs
  1610   0076A6  2425               	addwf	??_outputPrint^0,w,c
  1611   0076A8  6ED9               	movwf	fsr2l,c
  1612   0076AA  6ADA               	clrf	fsr2h,c
  1613   0076AC  CFDE F004          	movff	postinc2,lcdString@str
  1614   0076B0  CFDD F005          	movff	postdec2,lcdString@str+1
  1615   0076B4  ECF2  F032         	call	_lcdString	;wreg free
  1616   0076B8                     
  1617                           ;output.c: 27:         lcdCommand(0xC0);
  1618   0076B8  0EC0               	movlw	192
  1619   0076BA  ECAC  F033         	call	_lcdCommand
  1620   0076BE                     
  1621                           ;output.c: 28:         lcdInt(getTime(), 4);
  1622   0076BE  EC83  F031         	call	_getTime	;wreg free
  1623   0076C2  C001  F017         	movff	?_getTime,lcdInt@val
  1624   0076C6  C002  F018         	movff	?_getTime+1,lcdInt@val+1
  1625   0076CA  0E04               	movlw	4
  1626   0076CC  6E19               	movwf	lcdInt@digNum^0,c
  1627   0076CE  EC8E  F036         	call	_lcdInt	;wreg free
  1628   0076D2                     
  1629                           ;output.c: 29:         lcdString("           ");
  1630   0076D2  0E33               	movlw	low STR_9
  1631   0076D4  6E04               	movwf	lcdString@str^0,c
  1632   0076D6  0E7D               	movlw	high STR_9
  1633   0076D8  6E05               	movwf	(lcdString@str+1)^0,c
  1634   0076DA  ECF2  F032         	call	_lcdString	;wreg free
  1635   0076DE                     l3261:
  1636                           
  1637                           ;output.c: 31:     if (numTela == STATE_ALARMEL) {
  1638   0076DE  5021               	movf	outputPrint@numTela^0,w,c
  1639   0076E0  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1640   0076E2  A4D8               	btfss	status,2,c
  1641   0076E4  EF76  F03B         	goto	u2821
  1642   0076E8  EF78  F03B         	goto	u2820
  1643   0076EC                     u2821:
  1644   0076EC  EFC3  F03B         	goto	l3285
  1645   0076F0                     u2820:
  1646   0076F0                     
  1647                           ;output.c: 32:         lcdCommand(0x80);
  1648   0076F0  0E80               	movlw	128
  1649   0076F2  ECAC  F033         	call	_lcdCommand
  1650   0076F6                     
  1651                           ;output.c: 33:         lcdString(msgs[numTela][idioma]);
  1652   0076F6  5023               	movf	outputPrint@idioma^0,w,c
  1653   0076F8  0D02               	mullw	2
  1654   0076FA  CFF3 F025          	movff	prodl,??_outputPrint
  1655   0076FE  5021               	movf	outputPrint@numTela^0,w,c
  1656   007700  0D04               	mullw	4
  1657   007702  50F3               	movf	243,w,c
  1658   007704  0F60               	addlw	low _msgs
  1659   007706  2425               	addwf	??_outputPrint^0,w,c
  1660   007708  6ED9               	movwf	fsr2l,c
  1661   00770A  6ADA               	clrf	fsr2h,c
  1662   00770C  CFDE F004          	movff	postinc2,lcdString@str
  1663   007710  CFDD F005          	movff	postdec2,lcdString@str+1
  1664   007714  ECF2  F032         	call	_lcdString	;wreg free
  1665   007718                     
  1666                           ;output.c: 34:         lcdCommand(0xC0);
  1667   007718  0EC0               	movlw	192
  1668   00771A  ECAC  F033         	call	_lcdCommand
  1669   00771E                     
  1670                           ;output.c: 35:         lcdData('>');
  1671   00771E  0E3E               	movlw	62
  1672   007720  ECDC  F031         	call	_lcdData
  1673   007724                     
  1674                           ;output.c: 36:         lcdInt(getAlarmLevel(0), 3);
  1675   007724  0E00               	movlw	0
  1676   007726  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1677   007728  0E00               	movlw	0
  1678   00772A  6E01               	movwf	getAlarmLevel@lh^0,c
  1679   00772C  EC67  F032         	call	_getAlarmLevel	;wreg free
  1680   007730  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  1681   007734  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1682   007738  0E03               	movlw	3
  1683   00773A  6E19               	movwf	lcdInt@digNum^0,c
  1684   00773C  EC8E  F036         	call	_lcdInt	;wreg free
  1685   007740                     
  1686                           ;output.c: 37:         lcdData('L');
  1687   007740  0E4C               	movlw	76
  1688   007742  ECDC  F031         	call	_lcdData
  1689   007746                     
  1690                           ;output.c: 38:         lcdString("   ");
  1691   007746  0E3B               	movlw	low (STR_9+8)
  1692   007748  6E04               	movwf	lcdString@str^0,c
  1693   00774A  0E7D               	movlw	high (STR_9+8)
  1694   00774C  6E05               	movwf	(lcdString@str+1)^0,c
  1695   00774E  ECF2  F032         	call	_lcdString	;wreg free
  1696   007752                     
  1697                           ;output.c: 39:         lcdData(' ');
  1698   007752  0E20               	movlw	32
  1699   007754  ECDC  F031         	call	_lcdData
  1700   007758                     
  1701                           ;output.c: 40:         lcdInt(getAlarmLevel(1), 3);
  1702   007758  0E00               	movlw	0
  1703   00775A  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1704   00775C  0E01               	movlw	1
  1705   00775E  6E01               	movwf	getAlarmLevel@lh^0,c
  1706   007760  EC67  F032         	call	_getAlarmLevel	;wreg free
  1707   007764  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  1708   007768  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1709   00776C  0E03               	movlw	3
  1710   00776E  6E19               	movwf	lcdInt@digNum^0,c
  1711   007770  EC8E  F036         	call	_lcdInt	;wreg free
  1712   007774                     
  1713                           ;output.c: 41:         lcdData('H');
  1714   007774  0E48               	movlw	72
  1715   007776  ECDC  F031         	call	_lcdData
  1716   00777A                     
  1717                           ;output.c: 43:         lcdString("           ");
  1718   00777A  0E33               	movlw	low STR_9
  1719   00777C  6E04               	movwf	lcdString@str^0,c
  1720   00777E  0E7D               	movlw	high STR_9
  1721   007780  6E05               	movwf	(lcdString@str+1)^0,c
  1722   007782  ECF2  F032         	call	_lcdString	;wreg free
  1723   007786                     l3285:
  1724                           
  1725                           ;output.c: 45:     if (numTela == STATE_ALARMEH) {
  1726   007786  0421               	decf	outputPrint@numTela^0,w,c
  1727   007788  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1728   00778A  A4D8               	btfss	status,2,c
  1729   00778C  EFCA  F03B         	goto	u2831
  1730   007790  EFCC  F03B         	goto	u2830
  1731   007794                     u2831:
  1732   007794  EF17  F03C         	goto	l3309
  1733   007798                     u2830:
  1734   007798                     
  1735                           ;output.c: 46:         lcdCommand(0x80);
  1736   007798  0E80               	movlw	128
  1737   00779A  ECAC  F033         	call	_lcdCommand
  1738   00779E                     
  1739                           ;output.c: 47:         lcdString(msgs[numTela][idioma]);
  1740   00779E  5023               	movf	outputPrint@idioma^0,w,c
  1741   0077A0  0D02               	mullw	2
  1742   0077A2  CFF3 F025          	movff	prodl,??_outputPrint
  1743   0077A6  5021               	movf	outputPrint@numTela^0,w,c
  1744   0077A8  0D04               	mullw	4
  1745   0077AA  50F3               	movf	243,w,c
  1746   0077AC  0F60               	addlw	low _msgs
  1747   0077AE  2425               	addwf	??_outputPrint^0,w,c
  1748   0077B0  6ED9               	movwf	fsr2l,c
  1749   0077B2  6ADA               	clrf	fsr2h,c
  1750   0077B4  CFDE F004          	movff	postinc2,lcdString@str
  1751   0077B8  CFDD F005          	movff	postdec2,lcdString@str+1
  1752   0077BC  ECF2  F032         	call	_lcdString	;wreg free
  1753   0077C0                     
  1754                           ;output.c: 48:         lcdCommand(0xC0);
  1755   0077C0  0EC0               	movlw	192
  1756   0077C2  ECAC  F033         	call	_lcdCommand
  1757   0077C6                     
  1758                           ;output.c: 49:         lcdData(' ');
  1759   0077C6  0E20               	movlw	32
  1760   0077C8  ECDC  F031         	call	_lcdData
  1761   0077CC                     
  1762                           ;output.c: 50:         lcdInt(getAlarmLevel(0), 3);
  1763   0077CC  0E00               	movlw	0
  1764   0077CE  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1765   0077D0  0E00               	movlw	0
  1766   0077D2  6E01               	movwf	getAlarmLevel@lh^0,c
  1767   0077D4  EC67  F032         	call	_getAlarmLevel	;wreg free
  1768   0077D8  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  1769   0077DC  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1770   0077E0  0E03               	movlw	3
  1771   0077E2  6E19               	movwf	lcdInt@digNum^0,c
  1772   0077E4  EC8E  F036         	call	_lcdInt	;wreg free
  1773   0077E8                     
  1774                           ;output.c: 51:         lcdData('L');
  1775   0077E8  0E4C               	movlw	76
  1776   0077EA  ECDC  F031         	call	_lcdData
  1777   0077EE                     
  1778                           ;output.c: 52:         lcdString("   ");
  1779   0077EE  0E3B               	movlw	low (STR_9+8)
  1780   0077F0  6E04               	movwf	lcdString@str^0,c
  1781   0077F2  0E7D               	movlw	high (STR_9+8)
  1782   0077F4  6E05               	movwf	(lcdString@str+1)^0,c
  1783   0077F6  ECF2  F032         	call	_lcdString	;wreg free
  1784   0077FA                     
  1785                           ;output.c: 53:         lcdData('>');
  1786   0077FA  0E3E               	movlw	62
  1787   0077FC  ECDC  F031         	call	_lcdData
  1788   007800                     
  1789                           ;output.c: 54:         lcdInt(getAlarmLevel(1), 3);
  1790   007800  0E00               	movlw	0
  1791   007802  6E02               	movwf	(getAlarmLevel@lh+1)^0,c
  1792   007804  0E01               	movlw	1
  1793   007806  6E01               	movwf	getAlarmLevel@lh^0,c
  1794   007808  EC67  F032         	call	_getAlarmLevel	;wreg free
  1795   00780C  C001  F017         	movff	?_getAlarmLevel,lcdInt@val
  1796   007810  C002  F018         	movff	?_getAlarmLevel+1,lcdInt@val+1
  1797   007814  0E03               	movlw	3
  1798   007816  6E19               	movwf	lcdInt@digNum^0,c
  1799   007818  EC8E  F036         	call	_lcdInt	;wreg free
  1800   00781C                     
  1801                           ;output.c: 55:         lcdData('H');
  1802   00781C  0E48               	movlw	72
  1803   00781E  ECDC  F031         	call	_lcdData
  1804   007822                     
  1805                           ;output.c: 56:         lcdString("           ");
  1806   007822  0E33               	movlw	low STR_9
  1807   007824  6E04               	movwf	lcdString@str^0,c
  1808   007826  0E7D               	movlw	high STR_9
  1809   007828  6E05               	movwf	(lcdString@str+1)^0,c
  1810   00782A  ECF2  F032         	call	_lcdString	;wreg free
  1811   00782E                     l3309:
  1812                           
  1813                           ;output.c: 58:     if (numTela == STATE_IDIOMA) {
  1814   00782E  0E03               	movlw	3
  1815   007830  1821               	xorwf	outputPrint@numTela^0,w,c
  1816   007832  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1817   007834  A4D8               	btfss	status,2,c
  1818   007836  EF1F  F03C         	goto	u2841
  1819   00783A  EF21  F03C         	goto	u2840
  1820   00783E                     u2841:
  1821   00783E  EF58  F03C         	goto	l3325
  1822   007842                     u2840:
  1823   007842                     
  1824                           ;output.c: 59:         lcdCommand(0x80);
  1825   007842  0E80               	movlw	128
  1826   007844  ECAC  F033         	call	_lcdCommand
  1827   007848                     
  1828                           ;output.c: 60:         lcdString(msgs[numTela][idioma]);
  1829   007848  5023               	movf	outputPrint@idioma^0,w,c
  1830   00784A  0D02               	mullw	2
  1831   00784C  CFF3 F025          	movff	prodl,??_outputPrint
  1832   007850  5021               	movf	outputPrint@numTela^0,w,c
  1833   007852  0D04               	mullw	4
  1834   007854  50F3               	movf	243,w,c
  1835   007856  0F60               	addlw	low _msgs
  1836   007858  2425               	addwf	??_outputPrint^0,w,c
  1837   00785A  6ED9               	movwf	fsr2l,c
  1838   00785C  6ADA               	clrf	fsr2h,c
  1839   00785E  CFDE F004          	movff	postinc2,lcdString@str
  1840   007862  CFDD F005          	movff	postdec2,lcdString@str+1
  1841   007866  ECF2  F032         	call	_lcdString	;wreg free
  1842   00786A                     
  1843                           ;output.c: 61:         lcdCommand(0xC0);
  1844   00786A  0EC0               	movlw	192
  1845   00786C  ECAC  F033         	call	_lcdCommand
  1846   007870                     
  1847                           ;output.c: 62:         if (getLanguage() == 0) {
  1848   007870  EC73  F031         	call	_getLanguage	;wreg free
  1849   007874  0900               	iorlw	0
  1850   007876  A4D8               	btfss	status,2,c
  1851   007878  EF40  F03C         	goto	u2851
  1852   00787C  EF42  F03C         	goto	u2850
  1853   007880                     u2851:
  1854   007880  EF48  F03C         	goto	l3321
  1855   007884                     u2850:
  1856   007884                     
  1857                           ;output.c: 63:             lcdString("Portugues       ");
  1858   007884  0EC2               	movlw	low STR_14
  1859   007886  6E04               	movwf	lcdString@str^0,c
  1860   007888  0E7C               	movlw	high STR_14
  1861   00788A  6E05               	movwf	(lcdString@str+1)^0,c
  1862   00788C  ECF2  F032         	call	_lcdString	;wreg free
  1863   007890                     l3321:
  1864                           
  1865                           ;output.c: 65:         if (getLanguage() == 1) {
  1866   007890  EC73  F031         	call	_getLanguage	;wreg free
  1867   007894  06E8               	decf	wreg,f,c
  1868   007896  A4D8               	btfss	status,2,c
  1869   007898  EF50  F03C         	goto	u2861
  1870   00789C  EF52  F03C         	goto	u2860
  1871   0078A0                     u2861:
  1872   0078A0  EF58  F03C         	goto	l3325
  1873   0078A4                     u2860:
  1874   0078A4                     
  1875                           ;output.c: 66:             lcdString("English         ");
  1876   0078A4  0EB1               	movlw	low STR_15
  1877   0078A6  6E04               	movwf	lcdString@str^0,c
  1878   0078A8  0E7C               	movlw	high STR_15
  1879   0078AA  6E05               	movwf	(lcdString@str+1)^0,c
  1880   0078AC  ECF2  F032         	call	_lcdString	;wreg free
  1881   0078B0                     l3325:
  1882                           
  1883                           ;output.c: 71:     if (numTela == STATE_MAIN) {
  1884   0078B0  0E04               	movlw	4
  1885   0078B2  1821               	xorwf	outputPrint@numTela^0,w,c
  1886   0078B4  1022               	iorwf	(outputPrint@numTela+1)^0,w,c
  1887   0078B6  A4D8               	btfss	status,2,c
  1888   0078B8  EF60  F03C         	goto	u2871
  1889   0078BC  EF62  F03C         	goto	u2870
  1890   0078C0                     u2871:
  1891   0078C0  EFAD  F03C         	goto	l567
  1892   0078C4                     u2870:
  1893   0078C4                     
  1894                           ;output.c: 72:         lcdCommand(0x80);
  1895   0078C4  0E80               	movlw	128
  1896   0078C6  ECAC  F033         	call	_lcdCommand
  1897   0078CA                     
  1898                           ;output.c: 73:         lcdInt((bcd2dec(dsReadData(0x02)& 0x7f)), 2);
  1899   0078CA  0E00               	movlw	0
  1900   0078CC  6E0F               	movwf	(dsReadData@address+1)^0,c
  1901   0078CE  0E02               	movlw	2
  1902   0078D0  6E0E               	movwf	dsReadData@address^0,c
  1903   0078D2  EC89  F033         	call	_dsReadData	;wreg free
  1904   0078D6  0E7F               	movlw	127
  1905   0078D8  140E               	andwf	?_dsReadData^0,w,c
  1906   0078DA  6E13               	movwf	bcd2dec@value^0,c
  1907   0078DC  6A14               	clrf	(bcd2dec@value+1)^0,c
  1908   0078DE  EC45  F033         	call	_bcd2dec	;wreg free
  1909   0078E2  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1910   0078E6  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1911   0078EA  0E02               	movlw	2
  1912   0078EC  6E19               	movwf	lcdInt@digNum^0,c
  1913   0078EE  EC8E  F036         	call	_lcdInt	;wreg free
  1914   0078F2                     
  1915                           ;output.c: 74:         lcdData(':');
  1916   0078F2  0E3A               	movlw	58
  1917   0078F4  ECDC  F031         	call	_lcdData
  1918                           
  1919                           ;output.c: 75:         lcdInt((bcd2dec(dsReadData(0x01)& 0x7f)), 2);
  1920   0078F8  0E00               	movlw	0
  1921   0078FA  6E0F               	movwf	(dsReadData@address+1)^0,c
  1922   0078FC  0E01               	movlw	1
  1923   0078FE  6E0E               	movwf	dsReadData@address^0,c
  1924   007900  EC89  F033         	call	_dsReadData	;wreg free
  1925   007904  0E7F               	movlw	127
  1926   007906  140E               	andwf	?_dsReadData^0,w,c
  1927   007908  6E13               	movwf	bcd2dec@value^0,c
  1928   00790A  6A14               	clrf	(bcd2dec@value+1)^0,c
  1929   00790C  EC45  F033         	call	_bcd2dec	;wreg free
  1930   007910  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1931   007914  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1932   007918  0E02               	movlw	2
  1933   00791A  6E19               	movwf	lcdInt@digNum^0,c
  1934   00791C  EC8E  F036         	call	_lcdInt	;wreg free
  1935   007920                     
  1936                           ;output.c: 76:         lcdData(':');
  1937   007920  0E3A               	movlw	58
  1938   007922  ECDC  F031         	call	_lcdData
  1939   007926                     
  1940                           ;output.c: 77:         lcdInt((bcd2dec(dsReadData(0x00)& 0x7f)), 2);
  1941   007926  0E00               	movlw	0
  1942   007928  6E0F               	movwf	(dsReadData@address+1)^0,c
  1943   00792A  0E00               	movlw	0
  1944   00792C  6E0E               	movwf	dsReadData@address^0,c
  1945   00792E  EC89  F033         	call	_dsReadData	;wreg free
  1946   007932  0E7F               	movlw	127
  1947   007934  140E               	andwf	?_dsReadData^0,w,c
  1948   007936  6E13               	movwf	bcd2dec@value^0,c
  1949   007938  6A14               	clrf	(bcd2dec@value+1)^0,c
  1950   00793A  EC45  F033         	call	_bcd2dec	;wreg free
  1951   00793E  C013  F017         	movff	?_bcd2dec,lcdInt@val
  1952   007942  C014  F018         	movff	?_bcd2dec+1,lcdInt@val+1
  1953   007946  0E02               	movlw	2
  1954   007948  6E19               	movwf	lcdInt@digNum^0,c
  1955   00794A  EC8E  F036         	call	_lcdInt	;wreg free
  1956   00794E                     
  1957                           ;output.c: 78:         lcdString("           ");
  1958   00794E  0E33               	movlw	low STR_9
  1959   007950  6E04               	movwf	lcdString@str^0,c
  1960   007952  0E7D               	movlw	high STR_9
  1961   007954  6E05               	movwf	(lcdString@str+1)^0,c
  1962   007956  ECF2  F032         	call	_lcdString	;wreg free
  1963   00795A                     l567:
  1964   00795A  0012               	return		;funcret
  1965   00795C                     __end_of_outputPrint:
  1966                           	callstack 0
  1967                           
  1968 ;; *************** function _lcdString *****************
  1969 ;; Defined at:
  1970 ;;		line 168 in file "lcd.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  str             2    3[COMRAM] PTR const unsigned char 
  1973 ;;		 -> STR_16(12), STR_15(17), STR_14(17), STR_13(12), 
  1974 ;;		 -> STR_12(4), STR_11(12), STR_10(4), STR_9(12), 
  1975 ;;		 -> STR_8(16), STR_7(16), STR_6(16), STR_5(16), 
  1976 ;;		 -> STR_4(16), STR_3(16), STR_2(16), STR_1(16), 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;		None
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1988 ;;      Params:         2       0       0       0       0       0       0       0       0
  1989 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1991 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1992 ;;Total ram usage:        2 bytes
  1993 ;; Hardware stack levels used: 1
  1994 ;; Hardware stack levels required when called: 3
  1995 ;; This function calls:
  1996 ;;		_lcdData
  1997 ;; This function is called by:
  1998 ;;		_outputPrint
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text5
  2003   0065E4                     __ptext5:
  2004                           	callstack 0
  2005   0065E4                     _lcdString:
  2006                           	callstack 25
  2007   0065E4                     
  2008                           ;lcd.c: 169:     while (*str) {
  2009   0065E4  EFFE  F032         	goto	l3097
  2010   0065E8                     l3093:
  2011                           
  2012                           ;lcd.c: 170:         lcdData(*str++);
  2013   0065E8  C004  FFF6         	movff	lcdString@str,tblptrl
  2014   0065EC  C005  FFF7         	movff	lcdString@str+1,tblptrh
  2015   0065F0                     	if	0	;tblptru may be non-zero
  2016   0065F0                     	endif
  2017   0065F0                     	if	0	;tblptru may be non-zero
  2018   0065F0                     	endif
  2019   0065F0  0008               	tblrd		*
  2020   0065F2  50F5               	movf	tablat,w,c
  2021   0065F4  ECDC  F031         	call	_lcdData
  2022   0065F8  4A04               	infsnz	lcdString@str^0,f,c
  2023   0065FA  2A05               	incf	(lcdString@str+1)^0,f,c
  2024   0065FC                     l3097:
  2025                           
  2026                           ;lcd.c: 169:     while (*str) {
  2027   0065FC  C004  FFF6         	movff	lcdString@str,tblptrl
  2028   006600  C005  FFF7         	movff	lcdString@str+1,tblptrh
  2029   006604                     	if	0	;tblptru may be non-zero
  2030   006604                     	endif
  2031   006604                     	if	0	;tblptru may be non-zero
  2032   006604                     	endif
  2033   006604  0008               	tblrd		*
  2034   006606  50F5               	movf	tablat,w,c
  2035   006608  0900               	iorlw	0
  2036   00660A  A4D8               	btfss	status,2,c
  2037   00660C  EF0A  F033         	goto	u2621
  2038   006610  EF0C  F033         	goto	u2620
  2039   006614                     u2621:
  2040   006614  EFF4  F032         	goto	l3093
  2041   006618                     u2620:
  2042   006618  0012               	return		;funcret
  2043   00661A                     __end_of_lcdString:
  2044                           	callstack 0
  2045                           
  2046 ;; *************** function _lcdInt *****************
  2047 ;; Defined at:
  2048 ;;		line 174 in file "lcd.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  val             2   22[COMRAM] int 
  2051 ;;  digNum          1   24[COMRAM] unsigned char 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  j               2   26[COMRAM] int 
  2054 ;;  divisor         2   28[COMRAM] int 
  2055 ;;  i               2   30[COMRAM] int 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2065 ;;      Params:         3       0       0       0       0       0       0       0       0
  2066 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2067 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2068 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2069 ;;Total ram usage:       10 bytes
  2070 ;; Hardware stack levels used: 1
  2071 ;; Hardware stack levels required when called: 3
  2072 ;; This function calls:
  2073 ;;		___awdiv
  2074 ;;		___awmod
  2075 ;;		___wmul
  2076 ;;		_lcdData
  2077 ;; This function is called by:
  2078 ;;		_outputPrint
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text6
  2083   006D1C                     __ptext6:
  2084                           	callstack 0
  2085   006D1C                     _lcdInt:
  2086                           	callstack 25
  2087   006D1C                     
  2088                           ;lcd.c: 175:     if (val < 0) {
  2089   006D1C  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  2090   006D1E  EF95  F036         	goto	u2630
  2091   006D22  EF93  F036         	goto	u2631
  2092   006D26                     u2631:
  2093   006D26  EF9C  F036         	goto	l3105
  2094   006D2A                     u2630:
  2095   006D2A                     
  2096                           ;lcd.c: 176:         val = val * (-1);
  2097   006D2A  6C17               	negf	lcdInt@val^0,c
  2098   006D2C  1E18               	comf	(lcdInt@val+1)^0,f,c
  2099   006D2E  B0D8               	btfsc	status,0,c
  2100   006D30  2A18               	incf	(lcdInt@val+1)^0,f,c
  2101   006D32                     
  2102                           ;lcd.c: 177:         lcdData('-');
  2103   006D32  0E2D               	movlw	45
  2104   006D34  ECDC  F031         	call	_lcdData
  2105   006D38                     l3105:
  2106                           
  2107                           ;lcd.c: 188:     for (int i = digNum - 1; i >= 0; i--) {
  2108   006D38  0EFF               	movlw	255
  2109   006D3A  2419               	addwf	lcdInt@digNum^0,w,c
  2110   006D3C  6E1F               	movwf	lcdInt@i^0,c
  2111   006D3E  6A20               	clrf	(lcdInt@i+1)^0,c
  2112   006D40  0EFF               	movlw	255
  2113   006D42  2220               	addwfc	(lcdInt@i+1)^0,f,c
  2114   006D44                     l3107:
  2115   006D44  BE20               	btfsc	(lcdInt@i+1)^0,7,c
  2116   006D46  EFA9  F036         	goto	u2640
  2117   006D4A  EFA7  F036         	goto	u2641
  2118   006D4E                     u2641:
  2119   006D4E  EFAB  F036         	goto	l3111
  2120   006D52                     u2640:
  2121   006D52  EFF1  F036         	goto	l203
  2122   006D56                     l3111:
  2123                           
  2124                           ;lcd.c: 189:         int divisor = 1;
  2125   006D56  0E00               	movlw	0
  2126   006D58  6E1E               	movwf	(lcdInt@divisor+1)^0,c
  2127   006D5A  0E01               	movlw	1
  2128   006D5C  6E1D               	movwf	lcdInt@divisor^0,c
  2129                           
  2130                           ;lcd.c: 190:         for (int j = 0; j < i; j++) {
  2131   006D5E  0E00               	movlw	0
  2132   006D60  6E1C               	movwf	(lcdInt@j+1)^0,c
  2133   006D62  0E00               	movlw	0
  2134   006D64  6E1B               	movwf	lcdInt@j^0,c
  2135   006D66  EFC5  F036         	goto	l3117
  2136   006D6A                     l3113:
  2137                           
  2138                           ;lcd.c: 191:             divisor *= 10;
  2139   006D6A  C01D  F009         	movff	lcdInt@divisor,___wmul@multiplier
  2140   006D6E  C01E  F00A         	movff	lcdInt@divisor+1,___wmul@multiplier+1
  2141   006D72  0E00               	movlw	0
  2142   006D74  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2143   006D76  0E0A               	movlw	10
  2144   006D78  6E0B               	movwf	___wmul@multiplicand^0,c
  2145   006D7A  ECEB  F031         	call	___wmul	;wreg free
  2146   006D7E  C009  F01D         	movff	?___wmul,lcdInt@divisor
  2147   006D82  C00A  F01E         	movff	?___wmul+1,lcdInt@divisor+1
  2148   006D86                     
  2149                           ;lcd.c: 192:         }
  2150   006D86  4A1B               	infsnz	lcdInt@j^0,f,c
  2151   006D88  2A1C               	incf	(lcdInt@j+1)^0,f,c
  2152   006D8A                     l3117:
  2153   006D8A  501F               	movf	lcdInt@i^0,w,c
  2154   006D8C  5C1B               	subwf	lcdInt@j^0,w,c
  2155   006D8E  501C               	movf	(lcdInt@j+1)^0,w,c
  2156   006D90  0A80               	xorlw	128
  2157   006D92  6E1A               	movwf	??_lcdInt^0,c
  2158   006D94  5020               	movf	(lcdInt@i+1)^0,w,c
  2159   006D96  0A80               	xorlw	128
  2160   006D98  581A               	subwfb	??_lcdInt^0,w,c
  2161   006D9A  A0D8               	btfss	status,0,c
  2162   006D9C  EFD2  F036         	goto	u2651
  2163   006DA0  EFD4  F036         	goto	u2650
  2164   006DA4                     u2651:
  2165   006DA4  EFB5  F036         	goto	l3113
  2166   006DA8                     u2650:
  2167   006DA8                     
  2168                           ;lcd.c: 193:         lcdData((val / divisor) % 10 + 48);
  2169   006DA8  C01D  F003         	movff	lcdInt@divisor,___awdiv@divisor
  2170   006DAC  C01E  F004         	movff	lcdInt@divisor+1,___awdiv@divisor+1
  2171   006DB0  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  2172   006DB4  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  2173   006DB8  EC2C  F036         	call	___awdiv	;wreg free
  2174   006DBC  C001  F009         	movff	?___awdiv,___awmod@dividend
  2175   006DC0  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2176   006DC4  0E00               	movlw	0
  2177   006DC6  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2178   006DC8  0E0A               	movlw	10
  2179   006DCA  6E0B               	movwf	___awmod@divisor^0,c
  2180   006DCC  ECD4  F035         	call	___awmod	;wreg free
  2181   006DD0  5009               	movf	?___awmod^0,w,c
  2182   006DD2  0F30               	addlw	48
  2183   006DD4  ECDC  F031         	call	_lcdData
  2184   006DD8                     
  2185                           ;lcd.c: 194:     }
  2186   006DD8  061F               	decf	lcdInt@i^0,f,c
  2187   006DDA  A0D8               	btfss	status,0,c
  2188   006DDC  0620               	decf	(lcdInt@i+1)^0,f,c
  2189   006DDE  EFA2  F036         	goto	l3107
  2190   006DE2                     l203:
  2191   006DE2  0012               	return		;funcret
  2192   006DE4                     __end_of_lcdInt:
  2193                           	callstack 0
  2194                           
  2195 ;; *************** function _lcdData *****************
  2196 ;; Defined at:
  2197 ;;		line 108 in file "lcd.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  valor           1    wreg     unsigned char 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  valor           1    2[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  1    wreg      void 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2211 ;;      Params:         0       0       0       0       0       0       0       0       0
  2212 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2214 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2215 ;;Total ram usage:        1 bytes
  2216 ;; Hardware stack levels used: 1
  2217 ;; Hardware stack levels required when called: 2
  2218 ;; This function calls:
  2219 ;;		_Delay40us
  2220 ;;		_lcdCommand4bits
  2221 ;; This function is called by:
  2222 ;;		_lcdString
  2223 ;;		_lcdInt
  2224 ;;		_outputPrint
  2225 ;;		_printf
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text7
  2230   0063B8                     __ptext7:
  2231                           	callstack 0
  2232   0063B8                     _lcdData:
  2233                           	callstack 25
  2234                           
  2235                           ;incstack = 0
  2236                           ;lcdData@valor stored from wreg
  2237   0063B8  6E03               	movwf	lcdData@valor^0,c
  2238   0063BA                     
  2239                           ;lcd.c: 109:     lcdCommand4bits(valor, 1);
  2240   0063BA  0E01               	movlw	1
  2241   0063BC  6E01               	movwf	lcdCommand4bits@data^0,c
  2242   0063BE  5003               	movf	lcdData@valor^0,w,c
  2243   0063C0  ECD7  F034         	call	_lcdCommand4bits
  2244                           
  2245                           ;lcd.c: 110:     lcdCommand4bits(valor << 4, 1);
  2246   0063C4  0E01               	movlw	1
  2247   0063C6  6E01               	movwf	lcdCommand4bits@data^0,c
  2248   0063C8  3803               	swapf	lcdData@valor^0,w,c
  2249   0063CA  0BF0               	andlw	240
  2250   0063CC  ECD7  F034         	call	_lcdCommand4bits
  2251                           
  2252                           ;lcd.c: 113:     Delay40us();
  2253   0063D0  ECB7  F031         	call	_Delay40us	;wreg free
  2254   0063D4  0012               	return		;funcret
  2255   0063D6                     __end_of_lcdData:
  2256                           	callstack 0
  2257                           
  2258 ;; *************** function _getTime *****************
  2259 ;; Defined at:
  2260 ;;		line 38 in file "var.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  2    0[COMRAM] int 
  2267 ;; Registers used:
  2268 ;;		None
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2274 ;;      Params:         2       0       0       0       0       0       0       0       0
  2275 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2277 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2278 ;;Total ram usage:        2 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_outputPrint
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text8
  2288   006306                     __ptext8:
  2289                           	callstack 0
  2290   006306                     _getTime:
  2291                           	callstack 28
  2292   006306                     
  2293                           ;var.c: 39:     return time;
  2294   006306  C030  F001         	movff	_time,?_getTime
  2295   00630A  C031  F002         	movff	_time+1,?_getTime+1
  2296   00630E  0012               	return		;funcret
  2297   006310                     __end_of_getTime:
  2298                           	callstack 0
  2299                           
  2300 ;; *************** function _getLanguage *****************
  2301 ;; Defined at:
  2302 ;;		line 74 in file "var.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      unsigned char 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2316 ;;      Params:         0       0       0       0       0       0       0       0       0
  2317 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2319 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2320 ;;Total ram usage:        0 bytes
  2321 ;; Hardware stack levels used: 1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_outputPrint
  2326 ;;		_smLoop
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text9
  2331   0062E6                     __ptext9:
  2332                           	callstack 0
  2333   0062E6                     _getLanguage:
  2334                           	callstack 28
  2335   0062E6                     
  2336                           ;var.c: 75:     return language;
  2337   0062E6  503F               	movf	_language^0,w,c
  2338   0062E8  0012               	return		;funcret
  2339   0062EA                     __end_of_getLanguage:
  2340                           	callstack 0
  2341                           
  2342 ;; *************** function _getAlarmLevel *****************
  2343 ;; Defined at:
  2344 ;;		line 46 in file "var.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  lh              2    0[COMRAM] int 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  l               2    2[COMRAM] int 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  2    0[COMRAM] int 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2358 ;;      Params:         2       0       0       0       0       0       0       0       0
  2359 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2360 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2361 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2362 ;;Total ram usage:        4 bytes
  2363 ;; Hardware stack levels used: 1
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_outputPrint
  2368 ;;		_smLoop
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           	psect	text10
  2373   0064CE                     __ptext10:
  2374                           	callstack 0
  2375   0064CE                     _getAlarmLevel:
  2376                           	callstack 28
  2377   0064CE                     
  2378                           ;var.c: 47:     int l;;var.c: 48:     if(lh == 0){
  2379   0064CE  5001               	movf	getAlarmLevel@lh^0,w,c
  2380   0064D0  1002               	iorwf	(getAlarmLevel@lh+1)^0,w,c
  2381   0064D2  A4D8               	btfss	status,2,c
  2382   0064D4  EF6E  F032         	goto	u2701
  2383   0064D8  EF70  F032         	goto	u2700
  2384   0064DC                     u2701:
  2385   0064DC  EF75  F032         	goto	l687
  2386   0064E0                     u2700:
  2387   0064E0                     
  2388                           ;var.c: 49:         l = alarmLevelLow;
  2389   0064E0  C03D  F003         	movff	_alarmLevelLow,getAlarmLevel@l
  2390   0064E4  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2391                           
  2392                           ;var.c: 50:     }
  2393   0064E6  EF78  F032         	goto	l688
  2394   0064EA                     l687:
  2395                           
  2396                           ;var.c: 52:     {;var.c: 53:         l = alarmLevelHigh;
  2397   0064EA  C03E  F003         	movff	_alarmLevelHigh,getAlarmLevel@l
  2398   0064EE  6A04               	clrf	(getAlarmLevel@l+1)^0,c
  2399   0064F0                     l688:
  2400                           
  2401                           ;var.c: 55:     return l;
  2402   0064F0  C003  F001         	movff	getAlarmLevel@l,?_getAlarmLevel
  2403   0064F4  C004  F002         	movff	getAlarmLevel@l+1,?_getAlarmLevel+1
  2404   0064F8  0012               	return		;funcret
  2405   0064FA                     __end_of_getAlarmLevel:
  2406                           	callstack 0
  2407                           
  2408 ;; *************** function _bcd2dec *****************
  2409 ;; Defined at:
  2410 ;;		line 14 in file "ds1307.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  value           2   18[COMRAM] int 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;		None
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  2   18[COMRAM] int 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2424 ;;      Params:         2       0       0       0       0       0       0       0       0
  2425 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2426 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2427 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2428 ;;Total ram usage:        4 bytes
  2429 ;; Hardware stack levels used: 1
  2430 ;; Hardware stack levels required when called: 1
  2431 ;; This function calls:
  2432 ;;		___awdiv
  2433 ;;		___wmul
  2434 ;; This function is called by:
  2435 ;;		_outputPrint
  2436 ;;		_smLoop
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text11
  2441   00668A                     __ptext11:
  2442                           	callstack 0
  2443   00668A                     _bcd2dec:
  2444                           	callstack 27
  2445   00668A                     
  2446                           ;ds1307.c: 15:  return ((value / 16 * 10) + (value % 16));
  2447   00668A  0E0F               	movlw	15
  2448   00668C  1413               	andwf	bcd2dec@value^0,w,c
  2449   00668E  6E15               	movwf	??_bcd2dec^0,c
  2450   006690  0E00               	movlw	0
  2451   006692  1414               	andwf	(bcd2dec@value+1)^0,w,c
  2452   006694  6E16               	movwf	(??_bcd2dec+1)^0,c
  2453   006696  0E00               	movlw	0
  2454   006698  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2455   00669A  0E10               	movlw	16
  2456   00669C  6E03               	movwf	___awdiv@divisor^0,c
  2457   00669E  C013  F001         	movff	bcd2dec@value,___awdiv@dividend
  2458   0066A2  C014  F002         	movff	bcd2dec@value+1,___awdiv@dividend+1
  2459   0066A6  EC2C  F036         	call	___awdiv	;wreg free
  2460   0066AA  C001  F009         	movff	?___awdiv,___wmul@multiplier
  2461   0066AE  C002  F00A         	movff	?___awdiv+1,___wmul@multiplier+1
  2462   0066B2  0E00               	movlw	0
  2463   0066B4  6E0C               	movwf	(___wmul@multiplicand+1)^0,c
  2464   0066B6  0E0A               	movlw	10
  2465   0066B8  6E0B               	movwf	___wmul@multiplicand^0,c
  2466   0066BA  ECEB  F031         	call	___wmul	;wreg free
  2467   0066BE  5015               	movf	??_bcd2dec^0,w,c
  2468   0066C0  2409               	addwf	?___wmul^0,w,c
  2469   0066C2  6E13               	movwf	?_bcd2dec^0,c
  2470   0066C4  5016               	movf	(??_bcd2dec+1)^0,w,c
  2471   0066C6  200A               	addwfc	(?___wmul+1)^0,w,c
  2472   0066C8  6E14               	movwf	(?_bcd2dec+1)^0,c
  2473   0066CA  0012               	return		;funcret
  2474   0066CC                     __end_of_bcd2dec:
  2475                           	callstack 0
  2476                           
  2477 ;; *************** function ___wmul *****************
  2478 ;; Defined at:
  2479 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  multiplier      2    8[COMRAM] unsigned int 
  2482 ;;  multiplicand    2   10[COMRAM] unsigned int 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  product         2   12[COMRAM] unsigned int 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  2    8[COMRAM] unsigned int 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2, status,0, prodl, prodh
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2494 ;;      Params:         4       0       0       0       0       0       0       0       0
  2495 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2496 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2497 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2498 ;;Total ram usage:        6 bytes
  2499 ;; Hardware stack levels used: 1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_bcd2dec
  2504 ;;		_lcdInt
  2505 ;;		_pwmSet1
  2506 ;;		_pwmSet2
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text12
  2511   0063D6                     __ptext12:
  2512                           	callstack 0
  2513   0063D6                     ___wmul:
  2514                           	callstack 27
  2515   0063D6  5009               	movf	___wmul@multiplier^0,w,c
  2516   0063D8  020B               	mulwf	___wmul@multiplicand^0,c
  2517   0063DA  CFF3 F00D          	movff	prodl,___wmul@product
  2518   0063DE  CFF4 F00E          	movff	prodh,___wmul@product+1
  2519   0063E2  5009               	movf	___wmul@multiplier^0,w,c
  2520   0063E4  020C               	mulwf	(___wmul@multiplicand+1)^0,c
  2521   0063E6  50F3               	movf	243,w,c
  2522   0063E8  260E               	addwf	(___wmul@product+1)^0,f,c
  2523   0063EA  500A               	movf	(___wmul@multiplier+1)^0,w,c
  2524   0063EC  020B               	mulwf	___wmul@multiplicand^0,c
  2525   0063EE  50F3               	movf	243,w,c
  2526   0063F0  260E               	addwf	(___wmul@product+1)^0,f,c
  2527   0063F2  C00D  F009         	movff	___wmul@product,?___wmul
  2528   0063F6  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  2529   0063FA  0012               	return		;funcret
  2530   0063FC                     __end_of___wmul:
  2531                           	callstack 0
  2532                           
  2533 ;; *************** function _getState *****************
  2534 ;; Defined at:
  2535 ;;		line 30 in file "var.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      unsigned char 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2549 ;;      Params:         0       0       0       0       0       0       0       0       0
  2550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2552 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2553 ;;Total ram usage:        0 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_smLoop
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text13
  2563   0062E2                     __ptext13:
  2564                           	callstack 0
  2565   0062E2                     _getState:
  2566                           	callstack 29
  2567   0062E2                     
  2568                           ;var.c: 31:     return state;
  2569   0062E2  5040               	movf	_state^0,w,c
  2570   0062E4  0012               	return		;funcret
  2571   0062E6                     __end_of_getState:
  2572                           	callstack 0
  2573                           
  2574 ;; *************** function _eventRead *****************
  2575 ;; Defined at:
  2576 ;;		line 26 in file "event.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;		None
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  key             2    9[COMRAM] int 
  2581 ;;  ev              2    6[COMRAM] int 
  2582 ;;  data            1    8[COMRAM] unsigned char 
  2583 ;;  prot            1    5[COMRAM] PTR unsigned char 
  2584 ;;		 -> prot(5), 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  2    2[COMRAM] unsigned int 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2594 ;;      Params:         2       0       0       0       0       0       0       0       0
  2595 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2596 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2597 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2598 ;;Total ram usage:        9 bytes
  2599 ;; Hardware stack levels used: 1
  2600 ;; Hardware stack levels required when called: 1
  2601 ;; This function calls:
  2602 ;;		_getProt
  2603 ;;		_kpRead
  2604 ;;		_serialRead
  2605 ;;		_serialSend
  2606 ;;		_setProt
  2607 ;; This function is called by:
  2608 ;;		_smLoop
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text14
  2613   00704A                     __ptext14:
  2614                           	callstack 0
  2615   00704A                     _eventRead:
  2616                           	callstack 28
  2617   00704A                     
  2618                           ;event.c: 27:     int key;;event.c: 28:     int ev = EV_NOEVENT;
  2619   00704A  0E00               	movlw	0
  2620   00704C  6E08               	movwf	(eventRead@ev+1)^0,c
  2621   00704E  0E06               	movlw	6
  2622   007050  6E07               	movwf	eventRead@ev^0,c
  2623   007052                     
  2624                           ;event.c: 29:     key = kpRead();
  2625   007052  EC6F  F031         	call	_kpRead	;wreg free
  2626   007056  6E05               	movwf	??_eventRead^0,c
  2627   007058  5005               	movf	??_eventRead^0,w,c
  2628   00705A  6E0A               	movwf	eventRead@key^0,c
  2629   00705C  6A0B               	clrf	(eventRead@key+1)^0,c
  2630   00705E                     
  2631                           ;event.c: 30:     if (key != key_ant) {
  2632   00705E  5038               	movf	_key_ant^0,w,c
  2633   007060  180A               	xorwf	eventRead@key^0,w,c
  2634   007062  E109               	bnz	u2720
  2635   007064  5039               	movf	(_key_ant+1)^0,w,c
  2636   007066  180B               	xorwf	(eventRead@key+1)^0,w,c
  2637   007068  B4D8               	btfsc	status,2,c
  2638   00706A  EF39  F038         	goto	u2721
  2639   00706E  EF3B  F038         	goto	u2720
  2640   007072                     u2721:
  2641   007072  EF72  F038         	goto	l3207
  2642   007076                     u2720:
  2643   007076                     
  2644                           ;event.c: 31:         if (((key) & (1<<0))) {
  2645   007076  A00A               	btfss	eventRead@key^0,0,c
  2646   007078  EF40  F038         	goto	u2731
  2647   00707C  EF42  F038         	goto	u2730
  2648   007080                     u2731:
  2649   007080  EF46  F038         	goto	l3191
  2650   007084                     u2730:
  2651   007084                     
  2652                           ;event.c: 32:             ev = EV_B_0;
  2653   007084  0E00               	movlw	0
  2654   007086  6E08               	movwf	(eventRead@ev+1)^0,c
  2655   007088  0E00               	movlw	0
  2656   00708A  6E07               	movwf	eventRead@ev^0,c
  2657   00708C                     l3191:
  2658                           
  2659                           ;event.c: 35:         if (((key) & (1<<1))) {
  2660   00708C  A20A               	btfss	eventRead@key^0,1,c
  2661   00708E  EF4B  F038         	goto	u2741
  2662   007092  EF4D  F038         	goto	u2740
  2663   007096                     u2741:
  2664   007096  EF51  F038         	goto	l3195
  2665   00709A                     u2740:
  2666   00709A                     
  2667                           ;event.c: 36:             ev = EV_B_1;
  2668   00709A  0E00               	movlw	0
  2669   00709C  6E08               	movwf	(eventRead@ev+1)^0,c
  2670   00709E  0E01               	movlw	1
  2671   0070A0  6E07               	movwf	eventRead@ev^0,c
  2672   0070A2                     l3195:
  2673                           
  2674                           ;event.c: 39:         if (((key) & (1<<2))) {
  2675   0070A2  A40A               	btfss	eventRead@key^0,2,c
  2676   0070A4  EF56  F038         	goto	u2751
  2677   0070A8  EF58  F038         	goto	u2750
  2678   0070AC                     u2751:
  2679   0070AC  EF5C  F038         	goto	l3199
  2680   0070B0                     u2750:
  2681   0070B0                     
  2682                           ;event.c: 40:             ev = EV_B_2;
  2683   0070B0  0E00               	movlw	0
  2684   0070B2  6E08               	movwf	(eventRead@ev+1)^0,c
  2685   0070B4  0E02               	movlw	2
  2686   0070B6  6E07               	movwf	eventRead@ev^0,c
  2687   0070B8                     l3199:
  2688                           
  2689                           ;event.c: 43:         if (((key) & (1<<3))) {
  2690   0070B8  A60A               	btfss	eventRead@key^0,3,c
  2691   0070BA  EF61  F038         	goto	u2761
  2692   0070BE  EF63  F038         	goto	u2760
  2693   0070C2                     u2761:
  2694   0070C2  EF67  F038         	goto	l3203
  2695   0070C6                     u2760:
  2696   0070C6                     
  2697                           ;event.c: 44:             ev = EV_B_3;
  2698   0070C6  0E00               	movlw	0
  2699   0070C8  6E08               	movwf	(eventRead@ev+1)^0,c
  2700   0070CA  0E03               	movlw	3
  2701   0070CC  6E07               	movwf	eventRead@ev^0,c
  2702   0070CE                     l3203:
  2703                           
  2704                           ;event.c: 47:         if (((key) & (1<<4))) {
  2705   0070CE  A80A               	btfss	eventRead@key^0,4,c
  2706   0070D0  EF6C  F038         	goto	u2771
  2707   0070D4  EF6E  F038         	goto	u2770
  2708   0070D8                     u2771:
  2709   0070D8  EF72  F038         	goto	l3207
  2710   0070DC                     u2770:
  2711   0070DC                     
  2712                           ;event.c: 48:             ev = EV_B_4;
  2713   0070DC  0E00               	movlw	0
  2714   0070DE  6E08               	movwf	(eventRead@ev+1)^0,c
  2715   0070E0  0E04               	movlw	4
  2716   0070E2  6E07               	movwf	eventRead@ev^0,c
  2717   0070E4                     l3207:
  2718                           
  2719                           ;event.c: 52:     key_ant = key;
  2720   0070E4  C00A  F038         	movff	eventRead@key,_key_ant
  2721   0070E8  C00B  F039         	movff	eventRead@key+1,_key_ant+1
  2722   0070EC                     
  2723                           ;event.c: 55:     unsigned char data = serialRead();
  2724   0070EC  EC51  F032         	call	_serialRead	;wreg free
  2725   0070F0  6E09               	movwf	eventRead@data^0,c
  2726   0070F2                     
  2727                           ;event.c: 56:     serialSend(data);
  2728   0070F2  5009               	movf	eventRead@data^0,w,c
  2729   0070F4  ECAC  F031         	call	_serialSend
  2730   0070F8                     
  2731                           ;event.c: 57:     unsigned char* prot;;event.c: 58:     if (data != 0) {
  2732   0070F8  5009               	movf	eventRead@data^0,w,c
  2733   0070FA  B4D8               	btfsc	status,2,c
  2734   0070FC  EF82  F038         	goto	u2781
  2735   007100  EF84  F038         	goto	u2780
  2736   007104                     u2781:
  2737   007104  EFEB  F038         	goto	l3245
  2738   007108                     u2780:
  2739   007108                     
  2740                           ;event.c: 59:         prot = getProt();
  2741   007108  EC6D  F031         	call	_getProt	;wreg free
  2742   00710C  6E06               	movwf	eventRead@prot^0,c
  2743   00710E                     
  2744                           ;event.c: 60:         if (prot[0] == 0) {
  2745   00710E  5006               	movf	eventRead@prot^0,w,c
  2746   007110  6ED9               	movwf	fsr2l,c
  2747   007112  6ADA               	clrf	fsr2h,c
  2748   007114  50DF               	movf	indf2,w,c
  2749   007116  A4D8               	btfss	status,2,c
  2750   007118  EF90  F038         	goto	u2791
  2751   00711C  EF92  F038         	goto	u2790
  2752   007120                     u2791:
  2753   007120  EFDA  F038         	goto	l3239
  2754   007124                     u2790:
  2755   007124  EFBB  F038         	goto	l3237
  2756   007128                     l3221:
  2757                           
  2758                           ;event.c: 63:                     ev = EV_B_0;
  2759   007128  0E00               	movlw	0
  2760   00712A  6E08               	movwf	(eventRead@ev+1)^0,c
  2761   00712C  0E00               	movlw	0
  2762   00712E  6E07               	movwf	eventRead@ev^0,c
  2763                           
  2764                           ;event.c: 64:                     break;
  2765   007130  EFEB  F038         	goto	l3245
  2766   007134                     l3223:
  2767                           
  2768                           ;event.c: 66:                     ev = EV_B_1;
  2769   007134  0E00               	movlw	0
  2770   007136  6E08               	movwf	(eventRead@ev+1)^0,c
  2771   007138  0E01               	movlw	1
  2772   00713A  6E07               	movwf	eventRead@ev^0,c
  2773                           
  2774                           ;event.c: 67:                     break;
  2775   00713C  EFEB  F038         	goto	l3245
  2776   007140                     l3225:
  2777                           
  2778                           ;event.c: 69:                     ev = EV_B_2;
  2779   007140  0E00               	movlw	0
  2780   007142  6E08               	movwf	(eventRead@ev+1)^0,c
  2781   007144  0E02               	movlw	2
  2782   007146  6E07               	movwf	eventRead@ev^0,c
  2783                           
  2784                           ;event.c: 70:                     break;
  2785   007148  EFEB  F038         	goto	l3245
  2786   00714C                     l3227:
  2787                           
  2788                           ;event.c: 72:                     ev = EV_B_3;
  2789   00714C  0E00               	movlw	0
  2790   00714E  6E08               	movwf	(eventRead@ev+1)^0,c
  2791   007150  0E03               	movlw	3
  2792   007152  6E07               	movwf	eventRead@ev^0,c
  2793                           
  2794                           ;event.c: 73:                     break;
  2795   007154  EFEB  F038         	goto	l3245
  2796   007158                     l3229:
  2797                           
  2798                           ;event.c: 75:                     ev = EV_B_4;
  2799   007158  0E00               	movlw	0
  2800   00715A  6E08               	movwf	(eventRead@ev+1)^0,c
  2801   00715C  0E04               	movlw	4
  2802   00715E  6E07               	movwf	eventRead@ev^0,c
  2803                           
  2804                           ;event.c: 76:                     break;
  2805   007160  EFEB  F038         	goto	l3245
  2806   007164                     l3231:
  2807                           
  2808                           ;event.c: 78:                     ev = EV_NOEVENT;
  2809   007164  0E00               	movlw	0
  2810   007166  6E08               	movwf	(eventRead@ev+1)^0,c
  2811   007168  0E06               	movlw	6
  2812   00716A  6E07               	movwf	eventRead@ev^0,c
  2813   00716C                     
  2814                           ;event.c: 79:                     setProt('p');
  2815   00716C  0E70               	movlw	112
  2816   00716E  ECFE  F031         	call	_setProt
  2817                           
  2818                           ;event.c: 81:                     break;
  2819   007172  EFEB  F038         	goto	l3245
  2820   007176                     l3237:
  2821   007176  5009               	movf	eventRead@data^0,w,c
  2822                           
  2823                           ; Switch size 1, requested type "simple"
  2824                           ; Number of cases is 7, Range of values is 49 to 112
  2825                           ; switch strategies available:
  2826                           ; Name         Instructions Cycles
  2827                           ; simple_byte           22    12 (average)
  2828                           ;	Chosen strategy is simple_byte
  2829   007178  0A31               	xorlw	49	; case 49
  2830   00717A  B4D8               	btfsc	status,2,c
  2831   00717C  EF9A  F038         	goto	l3223
  2832   007180  0A03               	xorlw	3	; case 50
  2833   007182  B4D8               	btfsc	status,2,c
  2834   007184  EFA0  F038         	goto	l3225
  2835   007188  0A01               	xorlw	1	; case 51
  2836   00718A  B4D8               	btfsc	status,2,c
  2837   00718C  EFA6  F038         	goto	l3227
  2838   007190  0A07               	xorlw	7	; case 52
  2839   007192  B4D8               	btfsc	status,2,c
  2840   007194  EFAC  F038         	goto	l3229
  2841   007198  0A0D               	xorlw	13	; case 57
  2842   00719A  B4D8               	btfsc	status,2,c
  2843   00719C  EF94  F038         	goto	l3221
  2844   0071A0  0A69               	xorlw	105	; case 80
  2845   0071A2  B4D8               	btfsc	status,2,c
  2846   0071A4  EFB2  F038         	goto	l3231
  2847   0071A8  0A20               	xorlw	32	; case 112
  2848   0071AA  B4D8               	btfsc	status,2,c
  2849   0071AC  EFB2  F038         	goto	l3231
  2850   0071B0  EFEB  F038         	goto	l519
  2851   0071B4                     l3239:
  2852                           
  2853                           ;event.c: 86:             setProt(data);
  2854   0071B4  5009               	movf	eventRead@data^0,w,c
  2855   0071B6  ECFE  F031         	call	_setProt
  2856   0071BA                     
  2857                           ;event.c: 88:             if (prot_ready) {
  2858   0071BA  5042               	movf	_prot_ready^0,w,c
  2859   0071BC  B4D8               	btfsc	status,2,c
  2860   0071BE  EFE3  F038         	goto	u2801
  2861   0071C2  EFE5  F038         	goto	u2800
  2862   0071C6                     u2801:
  2863   0071C6  EFEB  F038         	goto	l3245
  2864   0071CA                     u2800:
  2865   0071CA                     
  2866                           ;event.c: 89:                 ev = EV_PROT_SERIAL;
  2867   0071CA  0E00               	movlw	0
  2868   0071CC  6E08               	movwf	(eventRead@ev+1)^0,c
  2869   0071CE  0E05               	movlw	5
  2870   0071D0  6E07               	movwf	eventRead@ev^0,c
  2871   0071D2  EFEB  F038         	goto	l3245
  2872   0071D6                     l519:
  2873   0071D6                     l3245:
  2874                           
  2875                           ;event.c: 95:     return ev;
  2876   0071D6  C007  F003         	movff	eventRead@ev,?_eventRead
  2877   0071DA  C008  F004         	movff	eventRead@ev+1,?_eventRead+1
  2878   0071DE  0012               	return		;funcret
  2879   0071E0                     __end_of_eventRead:
  2880                           	callstack 0
  2881                           
  2882 ;; *************** function _setProt *****************
  2883 ;; Defined at:
  2884 ;;		line 90 in file "var.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  newChar         1    wreg     unsigned char 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  newChar         1    0[COMRAM] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2898 ;;      Params:         0       0       0       0       0       0       0       0       0
  2899 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2901 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2902 ;;Total ram usage:        1 bytes
  2903 ;; Hardware stack levels used: 1
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_eventRead
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text15
  2912   0063FC                     __ptext15:
  2913                           	callstack 0
  2914   0063FC                     _setProt:
  2915                           	callstack 28
  2916                           
  2917                           ;incstack = 0
  2918                           ;setProt@newChar stored from wreg
  2919   0063FC  6E01               	movwf	setProt@newChar^0,c
  2920   0063FE                     
  2921                           ;var.c: 92:     prot[index++] = newChar;
  2922   0063FE  503C               	movf	_index^0,w,c
  2923   006400  0F4E               	addlw	low _prot
  2924   006402  6ED9               	movwf	fsr2l,c
  2925   006404  6ADA               	clrf	fsr2h,c
  2926   006406  C001  FFDF         	movff	setProt@newChar,indf2
  2927   00640A  2A3C               	incf	_index^0,f,c
  2928   00640C                     
  2929                           ;var.c: 94:     if(index == 5) prot_ready = 1;
  2930   00640C  0E05               	movlw	5
  2931   00640E  183C               	xorwf	_index^0,w,c
  2932   006410  A4D8               	btfss	status,2,c
  2933   006412  EF0D  F032         	goto	u2691
  2934   006416  EF0F  F032         	goto	u2690
  2935   00641A                     u2691:
  2936   00641A  EF11  F032         	goto	l707
  2937   00641E                     u2690:
  2938   00641E  0E01               	movlw	1
  2939   006420  6E42               	movwf	_prot_ready^0,c
  2940   006422                     l707:
  2941   006422  0012               	return		;funcret
  2942   006424                     __end_of_setProt:
  2943                           	callstack 0
  2944                           
  2945 ;; *************** function _serialSend *****************
  2946 ;; Defined at:
  2947 ;;		line 25 in file "serial.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  c               1    wreg     unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  c               1    0[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2964 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:        1 bytes
  2966 ;; Hardware stack levels used: 1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_eventRead
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text16
  2975   006358                     __ptext16:
  2976                           	callstack 0
  2977   006358                     _serialSend:
  2978                           	callstack 28
  2979                           
  2980                           ;incstack = 0
  2981                           ;serialSend@c stored from wreg
  2982   006358  6E01               	movwf	serialSend@c^0,c
  2983   00635A                     l342:
  2984   00635A  A89E               	btfss	158,4,c	;volatile
  2985   00635C  EFB2  F031         	goto	u2661
  2986   006360  EFB4  F031         	goto	u2660
  2987   006364                     u2661:
  2988   006364  EFAD  F031         	goto	l342
  2989   006368                     u2660:
  2990   006368                     
  2991                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFAD) = c;
  2992   006368  C001  FFAD         	movff	serialSend@c,4013	;volatile
  2993   00636C  0012               	return		;funcret
  2994   00636E                     __end_of_serialSend:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _serialRead *****************
  2998 ;; Defined at:
  2999 ;;		line 30 in file "serial.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  resp            1    0[COMRAM] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      unsigned char 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3013 ;;      Params:         0       0       0       0       0       0       0       0       0
  3014 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3016 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3017 ;;Total ram usage:        1 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_eventRead
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text17
  3027   0064A2                     __ptext17:
  3028                           	callstack 0
  3029   0064A2                     _serialRead:
  3030                           	callstack 28
  3031   0064A2                     
  3032                           ;serial.c: 31:     char resp = 0;
  3033   0064A2  0E00               	movlw	0
  3034   0064A4  6E01               	movwf	serialRead@resp^0,c
  3035   0064A6                     
  3036                           ;serial.c: 33:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<1)))
  3037   0064A6  A2AB               	btfss	171,1,c	;volatile
  3038   0064A8  EF58  F032         	goto	u2671
  3039   0064AC  EF5A  F032         	goto	u2670
  3040   0064B0                     u2671:
  3041   0064B0  EF5C  F032         	goto	l3135
  3042   0064B4                     u2670:
  3043   0064B4                     
  3044                           ;serial.c: 34:     {;serial.c: 35:         (((*(volatile __near unsigned char*)0xFAB)) &
      +                          = ~(1<<4));
  3045   0064B4  98AB               	bcf	171,4,c	;volatile
  3046                           
  3047                           ;serial.c: 36:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<4));
  3048   0064B6  88AB               	bsf	171,4,c	;volatile
  3049   0064B8                     l3135:
  3050                           
  3051                           ;serial.c: 39:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<5)))
  3052   0064B8  AA9E               	btfss	158,5,c	;volatile
  3053   0064BA  EF61  F032         	goto	u2681
  3054   0064BE  EF63  F032         	goto	u2680
  3055   0064C2                     u2681:
  3056   0064C2  EF65  F032         	goto	l3139
  3057   0064C6                     u2680:
  3058   0064C6                     
  3059                           ;serial.c: 40:     {;serial.c: 41:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  3060   0064C6  CFAE F001          	movff	4014,serialRead@resp	;volatile
  3061   0064CA                     l3139:
  3062                           
  3063                           ;serial.c: 43:     return resp;
  3064   0064CA  5001               	movf	serialRead@resp^0,w,c
  3065   0064CC  0012               	return		;funcret
  3066   0064CE                     __end_of_serialRead:
  3067                           	callstack 0
  3068                           
  3069 ;; *************** function _kpRead *****************
  3070 ;; Defined at:
  3071 ;;		line 29 in file "keypad.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      unsigned char 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3088 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used: 1
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_eventRead
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text18
  3099   0062DE                     __ptext18:
  3100                           	callstack 0
  3101   0062DE                     _kpRead:
  3102                           	callstack 28
  3103   0062DE                     
  3104                           ;keypad.c: 30:     return valor;
  3105   0062DE  504D               	movf	_valor^0,w,c
  3106   0062E0  0012               	return		;funcret
  3107   0062E2                     __end_of_kpRead:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _getProt *****************
  3111 ;; Defined at:
  3112 ;;		line 85 in file "var.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      PTR unsigned char 
  3119 ;; Registers used:
  3120 ;;		wreg
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3126 ;;      Params:         2       0       0       0       0       0       0       0       0
  3127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3129 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3130 ;;Total ram usage:        2 bytes
  3131 ;; Hardware stack levels used: 1
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_eventRead
  3136 ;;		_smLoop
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text19
  3141   0062DA                     __ptext19:
  3142                           	callstack 0
  3143   0062DA                     _getProt:
  3144                           	callstack 29
  3145   0062DA                     
  3146                           ;var.c: 87:     return prot;
  3147   0062DA  0E4E               	movlw	_prot& (0+255)
  3148   0062DC  0012               	return		;funcret
  3149   0062DE                     __end_of_getProt:
  3150                           	callstack 0
  3151                           
  3152 ;; *************** function _dec2bcd *****************
  3153 ;; Defined at:
  3154 ;;		line 9 in file "ds1307.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  value           2   22[COMRAM] int 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  2   22[COMRAM] int 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3168 ;;      Params:         2       0       0       0       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3170 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3171 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3172 ;;Total ram usage:        6 bytes
  3173 ;; Hardware stack levels used: 1
  3174 ;; Hardware stack levels required when called: 1
  3175 ;; This function calls:
  3176 ;;		___awdiv
  3177 ;;		___awmod
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;;		_smLoop
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text20
  3185   00694C                     __ptext20:
  3186                           	callstack 0
  3187   00694C                     _dec2bcd:
  3188                           	callstack 28
  3189   00694C                     
  3190                           ;ds1307.c: 10:     value = (((value / 10 * 16) + (value % 10))) | 1 << 7;
  3191   00694C  C017  F001         	movff	dec2bcd@value,___awdiv@dividend
  3192   006950  C018  F002         	movff	dec2bcd@value+1,___awdiv@dividend+1
  3193   006954  0E00               	movlw	0
  3194   006956  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3195   006958  0E0A               	movlw	10
  3196   00695A  6E03               	movwf	___awdiv@divisor^0,c
  3197   00695C  EC2C  F036         	call	___awdiv	;wreg free
  3198   006960  C001  F019         	movff	?___awdiv,??_dec2bcd
  3199   006964  C002  F01A         	movff	?___awdiv+1,??_dec2bcd+1
  3200   006968  3A19               	swapf	??_dec2bcd^0,f,c
  3201   00696A  3A1A               	swapf	(??_dec2bcd+1)^0,f,c
  3202   00696C  0EF0               	movlw	240
  3203   00696E  161A               	andwf	(??_dec2bcd+1)^0,f,c
  3204   006970  5019               	movf	??_dec2bcd^0,w,c
  3205   006972  0B0F               	andlw	15
  3206   006974  121A               	iorwf	(??_dec2bcd+1)^0,f,c
  3207   006976  0EF0               	movlw	240
  3208   006978  1619               	andwf	??_dec2bcd^0,f,c
  3209   00697A  C017  F009         	movff	dec2bcd@value,___awmod@dividend
  3210   00697E  C018  F00A         	movff	dec2bcd@value+1,___awmod@dividend+1
  3211   006982  0E00               	movlw	0
  3212   006984  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3213   006986  0E0A               	movlw	10
  3214   006988  6E0B               	movwf	___awmod@divisor^0,c
  3215   00698A  ECD4  F035         	call	___awmod	;wreg free
  3216   00698E  5009               	movf	?___awmod^0,w,c
  3217   006990  2419               	addwf	??_dec2bcd^0,w,c
  3218   006992  6E1B               	movwf	(??_dec2bcd+2)^0,c
  3219   006994  500A               	movf	(?___awmod+1)^0,w,c
  3220   006996  201A               	addwfc	(??_dec2bcd+1)^0,w,c
  3221   006998  6E1C               	movwf	(??_dec2bcd+3)^0,c
  3222   00699A  0E80               	movlw	128
  3223   00699C  101B               	iorwf	(??_dec2bcd+2)^0,w,c
  3224   00699E  6E17               	movwf	dec2bcd@value^0,c
  3225   0069A0  501C               	movf	(??_dec2bcd+3)^0,w,c
  3226   0069A2  6E18               	movwf	(dec2bcd@value+1)^0,c
  3227   0069A4                     
  3228                           ;ds1307.c: 11:     return value;
  3229   0069A4  C017  F017         	movff	dec2bcd@value,?_dec2bcd
  3230   0069A8  C018  F018         	movff	dec2bcd@value+1,?_dec2bcd+1
  3231   0069AC  0012               	return		;funcret
  3232   0069AE                     __end_of_dec2bcd:
  3233                           	callstack 0
  3234                           
  3235 ;; *************** function ___awmod *****************
  3236 ;; Defined at:
  3237 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  dividend        2    8[COMRAM] int 
  3240 ;;  divisor         2   10[COMRAM] int 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  sign            1   13[COMRAM] unsigned char 
  3243 ;;  counter         1   12[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  2    8[COMRAM] int 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3253 ;;      Params:         4       0       0       0       0       0       0       0       0
  3254 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3256 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3257 ;;Total ram usage:        6 bytes
  3258 ;; Hardware stack levels used: 1
  3259 ;; This function calls:
  3260 ;;		Nothing
  3261 ;; This function is called by:
  3262 ;;		_dec2bcd
  3263 ;;		_lcdInt
  3264 ;;		_rtcPutSeconds
  3265 ;;		_rtcPutMinutes
  3266 ;;		_rtcPutHours
  3267 ;;		_rtcPutDate
  3268 ;;		_rtcPutMonth
  3269 ;;		_rtcPutYear
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text21
  3274   006BA8                     __ptext21:
  3275                           	callstack 0
  3276   006BA8                     ___awmod:
  3277                           	callstack 27
  3278   006BA8  0E00               	movlw	0
  3279   006BAA  6E0E               	movwf	___awmod@sign^0,c
  3280   006BAC  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  3281   006BAE  EFDD  F035         	goto	u2540
  3282   006BB2  EFDB  F035         	goto	u2541
  3283   006BB6                     u2541:
  3284   006BB6  EFE3  F035         	goto	l3039
  3285   006BBA                     u2540:
  3286   006BBA  6C09               	negf	___awmod@dividend^0,c
  3287   006BBC  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  3288   006BBE  B0D8               	btfsc	status,0,c
  3289   006BC0  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  3290   006BC2  0E01               	movlw	1
  3291   006BC4  6E0E               	movwf	___awmod@sign^0,c
  3292   006BC6                     l3039:
  3293   006BC6  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  3294   006BC8  EFEA  F035         	goto	u2550
  3295   006BCC  EFE8  F035         	goto	u2551
  3296   006BD0                     u2551:
  3297   006BD0  EFEE  F035         	goto	l3043
  3298   006BD4                     u2550:
  3299   006BD4  6C0B               	negf	___awmod@divisor^0,c
  3300   006BD6  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  3301   006BD8  B0D8               	btfsc	status,0,c
  3302   006BDA  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  3303   006BDC                     l3043:
  3304   006BDC  500B               	movf	___awmod@divisor^0,w,c
  3305   006BDE  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  3306   006BE0  B4D8               	btfsc	status,2,c
  3307   006BE2  EFF5  F035         	goto	u2561
  3308   006BE6  EFF7  F035         	goto	u2560
  3309   006BEA                     u2561:
  3310   006BEA  EF1B  F036         	goto	l3059
  3311   006BEE                     u2560:
  3312   006BEE  0E01               	movlw	1
  3313   006BF0  6E0D               	movwf	___awmod@counter^0,c
  3314   006BF2  EFFF  F035         	goto	l3049
  3315   006BF6                     l3047:
  3316   006BF6  90D8               	bcf	status,0,c
  3317   006BF8  360B               	rlcf	___awmod@divisor^0,f,c
  3318   006BFA  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  3319   006BFC  2A0D               	incf	___awmod@counter^0,f,c
  3320   006BFE                     l3049:
  3321   006BFE  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  3322   006C00  EF04  F036         	goto	u2571
  3323   006C04  EF06  F036         	goto	u2570
  3324   006C08                     u2571:
  3325   006C08  EFFB  F035         	goto	l3047
  3326   006C0C                     u2570:
  3327   006C0C                     l3051:
  3328   006C0C  500B               	movf	___awmod@divisor^0,w,c
  3329   006C0E  5C09               	subwf	___awmod@dividend^0,w,c
  3330   006C10  500C               	movf	(___awmod@divisor+1)^0,w,c
  3331   006C12  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  3332   006C14  A0D8               	btfss	status,0,c
  3333   006C16  EF0F  F036         	goto	u2581
  3334   006C1A  EF11  F036         	goto	u2580
  3335   006C1E                     u2581:
  3336   006C1E  EF15  F036         	goto	l3055
  3337   006C22                     u2580:
  3338   006C22  500B               	movf	___awmod@divisor^0,w,c
  3339   006C24  5E09               	subwf	___awmod@dividend^0,f,c
  3340   006C26  500C               	movf	(___awmod@divisor+1)^0,w,c
  3341   006C28  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  3342   006C2A                     l3055:
  3343   006C2A  90D8               	bcf	status,0,c
  3344   006C2C  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  3345   006C2E  320B               	rrcf	___awmod@divisor^0,f,c
  3346   006C30  2E0D               	decfsz	___awmod@counter^0,f,c
  3347   006C32  EF06  F036         	goto	l3051
  3348   006C36                     l3059:
  3349   006C36  500E               	movf	___awmod@sign^0,w,c
  3350   006C38  B4D8               	btfsc	status,2,c
  3351   006C3A  EF21  F036         	goto	u2591
  3352   006C3E  EF23  F036         	goto	u2590
  3353   006C42                     u2591:
  3354   006C42  EF27  F036         	goto	l3063
  3355   006C46                     u2590:
  3356   006C46  6C09               	negf	___awmod@dividend^0,c
  3357   006C48  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  3358   006C4A  B0D8               	btfsc	status,0,c
  3359   006C4C  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  3360   006C4E                     l3063:
  3361   006C4E  C009  F009         	movff	___awmod@dividend,?___awmod
  3362   006C52  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3363   006C56  0012               	return		;funcret
  3364   006C58                     __end_of___awmod:
  3365                           	callstack 0
  3366                           
  3367 ;; *************** function ___awdiv *****************
  3368 ;; Defined at:
  3369 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  dividend        2    0[COMRAM] int 
  3372 ;;  divisor         2    2[COMRAM] int 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  quotient        2    6[COMRAM] int 
  3375 ;;  sign            1    5[COMRAM] unsigned char 
  3376 ;;  counter         1    4[COMRAM] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  2    0[COMRAM] int 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3386 ;;      Params:         4       0       0       0       0       0       0       0       0
  3387 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3389 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3390 ;;Total ram usage:        8 bytes
  3391 ;; Hardware stack levels used: 1
  3392 ;; This function calls:
  3393 ;;		Nothing
  3394 ;; This function is called by:
  3395 ;;		_dec2bcd
  3396 ;;		_bcd2dec
  3397 ;;		_lcdInt
  3398 ;;		_rtcPutSeconds
  3399 ;;		_rtcPutMinutes
  3400 ;;		_rtcPutHours
  3401 ;;		_rtcPutDate
  3402 ;;		_rtcPutMonth
  3403 ;;		_rtcPutYear
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text22
  3408   006C58                     __ptext22:
  3409                           	callstack 0
  3410   006C58                     ___awdiv:
  3411                           	callstack 27
  3412   006C58  0E00               	movlw	0
  3413   006C5A  6E06               	movwf	___awdiv@sign^0,c
  3414   006C5C  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3415   006C5E  EF35  F036         	goto	u2480
  3416   006C62  EF33  F036         	goto	u2481
  3417   006C66                     u2481:
  3418   006C66  EF3B  F036         	goto	l2995
  3419   006C6A                     u2480:
  3420   006C6A  6C03               	negf	___awdiv@divisor^0,c
  3421   006C6C  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3422   006C6E  B0D8               	btfsc	status,0,c
  3423   006C70  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3424   006C72  0E01               	movlw	1
  3425   006C74  6E06               	movwf	___awdiv@sign^0,c
  3426   006C76                     l2995:
  3427   006C76  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3428   006C78  EF42  F036         	goto	u2490
  3429   006C7C  EF40  F036         	goto	u2491
  3430   006C80                     u2491:
  3431   006C80  EF48  F036         	goto	l3001
  3432   006C84                     u2490:
  3433   006C84  6C01               	negf	___awdiv@dividend^0,c
  3434   006C86  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3435   006C88  B0D8               	btfsc	status,0,c
  3436   006C8A  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3437   006C8C  0E01               	movlw	1
  3438   006C8E  1A06               	xorwf	___awdiv@sign^0,f,c
  3439   006C90                     l3001:
  3440   006C90  0E00               	movlw	0
  3441   006C92  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3442   006C94  0E00               	movlw	0
  3443   006C96  6E07               	movwf	___awdiv@quotient^0,c
  3444   006C98  5003               	movf	___awdiv@divisor^0,w,c
  3445   006C9A  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3446   006C9C  B4D8               	btfsc	status,2,c
  3447   006C9E  EF53  F036         	goto	u2501
  3448   006CA2  EF55  F036         	goto	u2500
  3449   006CA6                     u2501:
  3450   006CA6  EF7D  F036         	goto	l3023
  3451   006CAA                     u2500:
  3452   006CAA  0E01               	movlw	1
  3453   006CAC  6E05               	movwf	___awdiv@counter^0,c
  3454   006CAE  EF5D  F036         	goto	l3009
  3455   006CB2                     l3007:
  3456   006CB2  90D8               	bcf	status,0,c
  3457   006CB4  3603               	rlcf	___awdiv@divisor^0,f,c
  3458   006CB6  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3459   006CB8  2A05               	incf	___awdiv@counter^0,f,c
  3460   006CBA                     l3009:
  3461   006CBA  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3462   006CBC  EF62  F036         	goto	u2511
  3463   006CC0  EF64  F036         	goto	u2510
  3464   006CC4                     u2511:
  3465   006CC4  EF59  F036         	goto	l3007
  3466   006CC8                     u2510:
  3467   006CC8                     l3011:
  3468   006CC8  90D8               	bcf	status,0,c
  3469   006CCA  3607               	rlcf	___awdiv@quotient^0,f,c
  3470   006CCC  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3471   006CCE  5003               	movf	___awdiv@divisor^0,w,c
  3472   006CD0  5C01               	subwf	___awdiv@dividend^0,w,c
  3473   006CD2  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3474   006CD4  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3475   006CD6  A0D8               	btfss	status,0,c
  3476   006CD8  EF70  F036         	goto	u2521
  3477   006CDC  EF72  F036         	goto	u2520
  3478   006CE0                     u2521:
  3479   006CE0  EF77  F036         	goto	l3019
  3480   006CE4                     u2520:
  3481   006CE4  5003               	movf	___awdiv@divisor^0,w,c
  3482   006CE6  5E01               	subwf	___awdiv@dividend^0,f,c
  3483   006CE8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3484   006CEA  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3485   006CEC  8007               	bsf	___awdiv@quotient^0,0,c
  3486   006CEE                     l3019:
  3487   006CEE  90D8               	bcf	status,0,c
  3488   006CF0  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3489   006CF2  3203               	rrcf	___awdiv@divisor^0,f,c
  3490   006CF4  2E05               	decfsz	___awdiv@counter^0,f,c
  3491   006CF6  EF64  F036         	goto	l3011
  3492   006CFA                     l3023:
  3493   006CFA  5006               	movf	___awdiv@sign^0,w,c
  3494   006CFC  B4D8               	btfsc	status,2,c
  3495   006CFE  EF83  F036         	goto	u2531
  3496   006D02  EF85  F036         	goto	u2530
  3497   006D06                     u2531:
  3498   006D06  EF89  F036         	goto	l3027
  3499   006D0A                     u2530:
  3500   006D0A  6C07               	negf	___awdiv@quotient^0,c
  3501   006D0C  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3502   006D0E  B0D8               	btfsc	status,0,c
  3503   006D10  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3504   006D12                     l3027:
  3505   006D12  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3506   006D16  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3507   006D1A  0012               	return		;funcret
  3508   006D1C                     __end_of___awdiv:
  3509                           	callstack 0
  3510                           
  3511 ;; *************** function _smInit *****************
  3512 ;; Defined at:
  3513 ;;		line 11 in file "stateMachine.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3527 ;;      Params:         0       0       0       0       0       0       0       0       0
  3528 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3530 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3531 ;;Total ram usage:        0 bytes
  3532 ;; Hardware stack levels used: 1
  3533 ;; Hardware stack levels required when called: 7
  3534 ;; This function calls:
  3535 ;;		_eventInit
  3536 ;;		_setState
  3537 ;;		_varInit
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text23
  3544   00631E                     __ptext23:
  3545                           	callstack 0
  3546   00631E                     _smInit:
  3547                           	callstack 23
  3548   00631E                     
  3549                           ;stateMachine.c: 12:     varInit();
  3550   00631E  EC8C  F035         	call	_varInit	;wreg free
  3551   006322                     
  3552                           ;stateMachine.c: 13:     setState(STATE_MAIN);
  3553   006322  0E04               	movlw	4
  3554   006324  EC7F  F031         	call	_setState
  3555   006328                     
  3556                           ;stateMachine.c: 14:     eventInit();
  3557   006328  ECA1  F031         	call	_eventInit	;wreg free
  3558   00632C  0012               	return		;funcret
  3559   00632E                     __end_of_smInit:
  3560                           	callstack 0
  3561                           
  3562 ;; *************** function _varInit *****************
  3563 ;; Defined at:
  3564 ;;		line 16 in file "var.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3578 ;;      Params:         0       0       0       0       0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3580 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3581 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3582 ;;Total ram usage:        2 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; Hardware stack levels required when called: 6
  3585 ;; This function calls:
  3586 ;;		_dsReadData
  3587 ;;		_setAlarmLevel
  3588 ;; This function is called by:
  3589 ;;		_smInit
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text24
  3594   006B18                     __ptext24:
  3595                           	callstack 0
  3596   006B18                     _varInit:
  3597                           	callstack 23
  3598   006B18                     
  3599                           ;var.c: 17:     state = 0;
  3600   006B18  0E00               	movlw	0
  3601   006B1A  6E40               	movwf	_state^0,c
  3602                           
  3603                           ;var.c: 18:     time = 1000;
  3604   006B1C  0E03               	movlw	3
  3605   006B1E  6E31               	movwf	(_time+1)^0,c
  3606   006B20  0EE8               	movlw	232
  3607   006B22  6E30               	movwf	_time^0,c
  3608   006B24                     
  3609                           ;var.c: 20:     alarmLevelHigh = dsReadData(0x20);
  3610   006B24  0E00               	movlw	0
  3611   006B26  6E0F               	movwf	(dsReadData@address+1)^0,c
  3612   006B28  0E20               	movlw	32
  3613   006B2A  6E0E               	movwf	dsReadData@address^0,c
  3614   006B2C  EC89  F033         	call	_dsReadData	;wreg free
  3615   006B30  500E               	movf	?_dsReadData^0,w,c
  3616   006B32  6E3E               	movwf	_alarmLevelHigh^0,c
  3617   006B34                     
  3618                           ;var.c: 21:     alarmLevelLow = dsReadData(0x21);
  3619   006B34  0E00               	movlw	0
  3620   006B36  6E0F               	movwf	(dsReadData@address+1)^0,c
  3621   006B38  0E21               	movlw	33
  3622   006B3A  6E0E               	movwf	dsReadData@address^0,c
  3623   006B3C  EC89  F033         	call	_dsReadData	;wreg free
  3624   006B40  500E               	movf	?_dsReadData^0,w,c
  3625   006B42  6E3D               	movwf	_alarmLevelLow^0,c
  3626   006B44                     
  3627                           ;var.c: 22:     language = dsReadData(0x23);
  3628   006B44  0E00               	movlw	0
  3629   006B46  6E0F               	movwf	(dsReadData@address+1)^0,c
  3630   006B48  0E23               	movlw	35
  3631   006B4A  6E0E               	movwf	dsReadData@address^0,c
  3632   006B4C  EC89  F033         	call	_dsReadData	;wreg free
  3633   006B50  500E               	movf	?_dsReadData^0,w,c
  3634   006B52  6E3F               	movwf	_language^0,c
  3635   006B54                     
  3636                           ;var.c: 23:     if(alarmLevelHigh + alarmLevelLow != dsReadData(0x22)){
  3637   006B54  0E00               	movlw	0
  3638   006B56  6E0F               	movwf	(dsReadData@address+1)^0,c
  3639   006B58  0E22               	movlw	34
  3640   006B5A  6E0E               	movwf	dsReadData@address^0,c
  3641   006B5C  EC89  F033         	call	_dsReadData	;wreg free
  3642   006B60  503D               	movf	_alarmLevelLow^0,w,c
  3643   006B62  C03E  F023         	movff	_alarmLevelHigh,??_varInit
  3644   006B66  6A24               	clrf	(??_varInit+1)^0,c
  3645   006B68  2623               	addwf	??_varInit^0,f,c
  3646   006B6A  0E00               	movlw	0
  3647   006B6C  2224               	addwfc	(??_varInit+1)^0,f,c
  3648   006B6E  500E               	movf	?_dsReadData^0,w,c
  3649   006B70  1823               	xorwf	??_varInit^0,w,c
  3650   006B72  E109               	bnz	u2880
  3651   006B74  500F               	movf	(?_dsReadData+1)^0,w,c
  3652   006B76  1824               	xorwf	(??_varInit+1)^0,w,c
  3653   006B78  B4D8               	btfsc	status,2,c
  3654   006B7A  EFC1  F035         	goto	u2881
  3655   006B7E  EFC3  F035         	goto	u2880
  3656   006B82                     u2881:
  3657   006B82  EFD3  F035         	goto	l672
  3658   006B86                     u2880:
  3659   006B86                     
  3660                           ;var.c: 24:         setAlarmLevel(50, 0);
  3661   006B86  0E00               	movlw	0
  3662   006B88  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  3663   006B8A  0E32               	movlw	50
  3664   006B8C  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  3665   006B8E  0E00               	movlw	0
  3666   006B90  6E22               	movwf	setAlarmLevel@lh^0,c
  3667   006B92  ECD0  F033         	call	_setAlarmLevel	;wreg free
  3668                           
  3669                           ;var.c: 25:         setAlarmLevel(100, 1);
  3670   006B96  0E00               	movlw	0
  3671   006B98  6E21               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  3672   006B9A  0E64               	movlw	100
  3673   006B9C  6E20               	movwf	setAlarmLevel@newAlarmLevel^0,c
  3674   006B9E  0E01               	movlw	1
  3675   006BA0  6E22               	movwf	setAlarmLevel@lh^0,c
  3676   006BA2  ECD0  F033         	call	_setAlarmLevel	;wreg free
  3677   006BA6                     l672:
  3678   006BA6  0012               	return		;funcret
  3679   006BA8                     __end_of_varInit:
  3680                           	callstack 0
  3681                           
  3682 ;; *************** function _setAlarmLevel *****************
  3683 ;; Defined at:
  3684 ;;		line 58 in file "var.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  newAlarmLeve    2   31[COMRAM] int 
  3687 ;;  lh              1   33[COMRAM] unsigned char 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;		None
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, status,2, status,0, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3699 ;;      Params:         3       0       0       0       0       0       0       0       0
  3700 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3702 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3703 ;;Total ram usage:        3 bytes
  3704 ;; Hardware stack levels used: 1
  3705 ;; Hardware stack levels required when called: 5
  3706 ;; This function calls:
  3707 ;;		_dsWriteData
  3708 ;; This function is called by:
  3709 ;;		_smLoop
  3710 ;;		_varInit
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text25
  3715   0067A0                     __ptext25:
  3716                           	callstack 0
  3717   0067A0                     _setAlarmLevel:
  3718                           	callstack 24
  3719   0067A0                     
  3720                           ;var.c: 59:     if(lh == 1){
  3721   0067A0  0422               	decf	setAlarmLevel@lh^0,w,c
  3722   0067A2  A4D8               	btfss	status,2,c
  3723   0067A4  EFD6  F033         	goto	u2711
  3724   0067A8  EFD8  F033         	goto	u2710
  3725   0067AC                     u2711:
  3726   0067AC  EFE3  F033         	goto	l692
  3727   0067B0                     u2710:
  3728   0067B0                     
  3729                           ;var.c: 60:         alarmLevelHigh = newAlarmLevel;
  3730   0067B0  C020  F03E         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelHigh
  3731   0067B4                     
  3732                           ;var.c: 62:         dsWriteData(alarmLevelHigh, 0x20);
  3733   0067B4  0E00               	movlw	0
  3734   0067B6  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3735   0067B8  0E20               	movlw	32
  3736   0067BA  6E1D               	movwf	dsWriteData@address^0,c
  3737   0067BC  503E               	movf	_alarmLevelHigh^0,w,c
  3738   0067BE  ECAB  F032         	call	_dsWriteData
  3739                           
  3740                           ;var.c: 63:     }
  3741   0067C2  EFEC  F033         	goto	l693
  3742   0067C6                     l692:
  3743                           
  3744                           ;var.c: 65:     {;var.c: 66:         alarmLevelLow = newAlarmLevel;
  3745   0067C6  C020  F03D         	movff	setAlarmLevel@newAlarmLevel,_alarmLevelLow
  3746   0067CA                     
  3747                           ;var.c: 68:         dsWriteData(alarmLevelLow, 0x21);
  3748   0067CA  0E00               	movlw	0
  3749   0067CC  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3750   0067CE  0E21               	movlw	33
  3751   0067D0  6E1D               	movwf	dsWriteData@address^0,c
  3752   0067D2  503D               	movf	_alarmLevelLow^0,w,c
  3753   0067D4  ECAB  F032         	call	_dsWriteData
  3754   0067D8                     l693:
  3755                           
  3756                           ;var.c: 70:     dsWriteData(alarmLevelHigh + alarmLevelLow, 0x22);
  3757   0067D8  0E00               	movlw	0
  3758   0067DA  6E1E               	movwf	(dsWriteData@address+1)^0,c
  3759   0067DC  0E22               	movlw	34
  3760   0067DE  6E1D               	movwf	dsWriteData@address^0,c
  3761   0067E0  503E               	movf	_alarmLevelHigh^0,w,c
  3762   0067E2  243D               	addwf	_alarmLevelLow^0,w,c
  3763   0067E4  ECAB  F032         	call	_dsWriteData
  3764   0067E8  0012               	return		;funcret
  3765   0067EA                     __end_of_setAlarmLevel:
  3766                           	callstack 0
  3767                           
  3768 ;; *************** function _dsWriteData *****************
  3769 ;; Defined at:
  3770 ;;		line 26 in file "ds1307.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  value           1    wreg     unsigned char 
  3773 ;;  address         2   28[COMRAM] int 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  value           1   30[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3785 ;;      Params:         2       0       0       0       0       0       0       0       0
  3786 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3788 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3789 ;;Total ram usage:        3 bytes
  3790 ;; Hardware stack levels used: 1
  3791 ;; Hardware stack levels required when called: 4
  3792 ;; This function calls:
  3793 ;;		_i2cWriteByte
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;;		_smLoop
  3797 ;;		_setAlarmLevel
  3798 ;;		_setLanguage
  3799 ;;		_dsStartClock
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text26
  3804   006556                     __ptext26:
  3805                           	callstack 0
  3806   006556                     _dsWriteData:
  3807                           	callstack 24
  3808                           
  3809                           ;incstack = 0
  3810                           ;dsWriteData@value stored from wreg
  3811   006556  6E1F               	movwf	dsWriteData@value^0,c
  3812   006558                     
  3813                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  3814   006558  0E00               	movlw	0
  3815   00655A  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3816   00655C  0EDE               	movlw	222
  3817   00655E  6E09               	movwf	i2cWriteByte@byte^0,c
  3818   006560  0E01               	movlw	1
  3819   006562  EC76  F034         	call	_i2cWriteByte
  3820                           
  3821                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  3822   006566  0E00               	movlw	0
  3823   006568  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3824   00656A  C01D  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  3825   00656E  0E00               	movlw	0
  3826   006570  EC76  F034         	call	_i2cWriteByte
  3827                           
  3828                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  3829   006574  0E01               	movlw	1
  3830   006576  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3831   006578  C01F  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  3832   00657C  0E00               	movlw	0
  3833   00657E  EC76  F034         	call	_i2cWriteByte
  3834   006582  0012               	return		;funcret
  3835   006584                     __end_of_dsWriteData:
  3836                           	callstack 0
  3837                           
  3838 ;; *************** function _dsReadData *****************
  3839 ;; Defined at:
  3840 ;;		line 31 in file "ds1307.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  address         2   13[COMRAM] int 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  result          2   16[COMRAM] int 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  2   13[COMRAM] int 
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3854 ;;      Params:         2       0       0       0       0       0       0       0       0
  3855 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3856 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3857 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3858 ;;Total ram usage:        5 bytes
  3859 ;; Hardware stack levels used: 1
  3860 ;; Hardware stack levels required when called: 4
  3861 ;; This function calls:
  3862 ;;		_i2cReadByte
  3863 ;;		_i2cWriteByte
  3864 ;; This function is called by:
  3865 ;;		_outputPrint
  3866 ;;		_smLoop
  3867 ;;		_varInit
  3868 ;;		_dsStartClock
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text27
  3873   006712                     __ptext27:
  3874                           	callstack 0
  3875   006712                     _dsReadData:
  3876                           	callstack 24
  3877   006712                     
  3878                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  3879   006712  0E00               	movlw	0
  3880   006714  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3881   006716  0EDE               	movlw	222
  3882   006718  6E09               	movwf	i2cWriteByte@byte^0,c
  3883   00671A  0E01               	movlw	1
  3884   00671C  EC76  F034         	call	_i2cWriteByte
  3885                           
  3886                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  3887   006720  0E00               	movlw	0
  3888   006722  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3889   006724  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  3890   006728  0E00               	movlw	0
  3891   00672A  EC76  F034         	call	_i2cWriteByte
  3892                           
  3893                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  3894   00672E  0E00               	movlw	0
  3895   006730  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3896   006732  0EDF               	movlw	223
  3897   006734  6E09               	movwf	i2cWriteByte@byte^0,c
  3898   006736  0E01               	movlw	1
  3899   006738  EC76  F034         	call	_i2cWriteByte
  3900                           
  3901                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  3902   00673C  0E01               	movlw	1
  3903   00673E  6E08               	movwf	i2cReadByte@send_stop^0,c
  3904   006740  0E01               	movlw	1
  3905   006742  ECF5  F033         	call	_i2cReadByte
  3906   006746  6E10               	movwf	??_dsReadData^0,c
  3907   006748  5010               	movf	??_dsReadData^0,w,c
  3908   00674A  6E11               	movwf	dsReadData@result^0,c
  3909   00674C  6A12               	clrf	(dsReadData@result+1)^0,c
  3910   00674E                     
  3911                           ;ds1307.c: 37:  return result;
  3912   00674E  C011  F00E         	movff	dsReadData@result,?_dsReadData
  3913   006752  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  3914   006756  0012               	return		;funcret
  3915   006758                     __end_of_dsReadData:
  3916                           	callstack 0
  3917                           
  3918 ;; *************** function _i2cWriteByte *****************
  3919 ;; Defined at:
  3920 ;;		line 113 in file "soft_i2c.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  send_start      1    wreg     unsigned char 
  3923 ;;  send_stop       1    7[COMRAM] unsigned char 
  3924 ;;  byte            1    8[COMRAM] unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  send_start      1    9[COMRAM] unsigned char 
  3927 ;;  bit             1   10[COMRAM] unsigned char 
  3928 ;;  nack            1    0        unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      unsigned char 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3938 ;;      Params:         2       0       0       0       0       0       0       0       0
  3939 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3941 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3942 ;;Total ram usage:        4 bytes
  3943 ;; Hardware stack levels used: 1
  3944 ;; Hardware stack levels required when called: 3
  3945 ;; This function calls:
  3946 ;;		_i2c_read_bit
  3947 ;;		_i2c_start
  3948 ;;		_i2c_stop
  3949 ;;		_i2c_write_bit
  3950 ;; This function is called by:
  3951 ;;		_dsWriteData
  3952 ;;		_dsReadData
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text28
  3957   0068EC                     __ptext28:
  3958                           	callstack 0
  3959   0068EC                     _i2cWriteByte:
  3960                           	callstack 24
  3961                           
  3962                           ;incstack = 0
  3963                           ;i2cWriteByte@send_start stored from wreg
  3964   0068EC  6E0A               	movwf	i2cWriteByte@send_start^0,c
  3965   0068EE                     
  3966                           ;soft_i2c.c: 114:  unsigned char bit;;soft_i2c.c: 115:  unsigned char nack;;soft_i2c.c: 
      +                          116:  if (send_start) {
  3967   0068EE  500A               	movf	i2cWriteByte@send_start^0,w,c
  3968   0068F0  B4D8               	btfsc	status,2,c
  3969   0068F2  EF7D  F034         	goto	u2331
  3970   0068F6  EF7F  F034         	goto	u2330
  3971   0068FA                     u2331:
  3972   0068FA  EF81  F034         	goto	l2871
  3973   0068FE                     u2330:
  3974   0068FE                     
  3975                           ;soft_i2c.c: 117:   i2c_start();
  3976   0068FE  EC66  F033         	call	_i2c_start	;wreg free
  3977   006902                     l2871:
  3978                           
  3979                           ;soft_i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  3980   006902  0E00               	movlw	0
  3981   006904  6E0B               	movwf	i2cWriteByte@bit^0,c
  3982   006906                     l2877:
  3983                           
  3984                           ;soft_i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  3985   006906  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  3986   006908  EF88  F034         	goto	u2341
  3987   00690C  EF8B  F034         	goto	u2340
  3988   006910                     u2341:
  3989   006910  0E01               	movlw	1
  3990   006912  EF8C  F034         	goto	u2350
  3991   006916                     u2340:
  3992   006916  0E00               	movlw	0
  3993   006918                     u2350:
  3994   006918  EC4A  F034         	call	_i2c_write_bit
  3995   00691C                     
  3996                           ;soft_i2c.c: 121:   byte <<= 1;
  3997   00691C  90D8               	bcf	status,0,c
  3998   00691E  3609               	rlcf	i2cWriteByte@byte^0,f,c
  3999   006920                     
  4000                           ;soft_i2c.c: 122:  }
  4001   006920  2A0B               	incf	i2cWriteByte@bit^0,f,c
  4002   006922  0E07               	movlw	7
  4003   006924  640B               	cpfsgt	i2cWriteByte@bit^0,c
  4004   006926  EF97  F034         	goto	u2361
  4005   00692A  EF99  F034         	goto	u2360
  4006   00692E                     u2361:
  4007   00692E  EF83  F034         	goto	l2877
  4008   006932                     u2360:
  4009   006932  ECD9  F032         	call	_i2c_read_bit	;wreg free
  4010   006936                     
  4011                           ;soft_i2c.c: 124:  if (send_stop) {
  4012   006936  5008               	movf	i2cWriteByte@send_stop^0,w,c
  4013   006938  B4D8               	btfsc	status,2,c
  4014   00693A  EFA1  F034         	goto	u2371
  4015   00693E  EFA3  F034         	goto	u2370
  4016   006942                     u2371:
  4017   006942  EFA5  F034         	goto	l416
  4018   006946                     u2370:
  4019   006946                     
  4020                           ;soft_i2c.c: 125:   i2c_stop();
  4021   006946  EC94  F032         	call	_i2c_stop	;wreg free
  4022   00694A                     l416:
  4023   00694A  0012               	return		;funcret
  4024   00694C                     __end_of_i2cWriteByte:
  4025                           	callstack 0
  4026                           
  4027 ;; *************** function _i2c_start *****************
  4028 ;; Defined at:
  4029 ;;		line 52 in file "soft_i2c.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used: 1
  4049 ;; Hardware stack levels required when called: 2
  4050 ;; This function calls:
  4051 ;;		_I2C_delay
  4052 ;;		_clear_SCL
  4053 ;;		_clear_SDA
  4054 ;;		_read_SCL
  4055 ;;		_read_SDA
  4056 ;; This function is called by:
  4057 ;;		_i2cWriteByte
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text29
  4062   0066CC                     __ptext29:
  4063                           	callstack 0
  4064   0066CC                     _i2c_start:
  4065                           	callstack 24
  4066   0066CC                     
  4067                           ;soft_i2c.c: 54:  if (started) {
  4068   0066CC  5048               	movf	_started^0,w,c
  4069   0066CE  B4D8               	btfsc	status,2,c
  4070   0066D0  EF6C  F033         	goto	u2261
  4071   0066D4  EF6E  F033         	goto	u2260
  4072   0066D8                     u2261:
  4073   0066D8  EF7E  F033         	goto	l2807
  4074   0066DC                     u2260:
  4075   0066DC                     
  4076                           ;soft_i2c.c: 55:   read_SDA();
  4077   0066DC  EC29  F033         	call	_read_SDA	;wreg free
  4078   0066E0                     
  4079                           ;soft_i2c.c: 56:   I2C_delay();
  4080   0066E0  EC6C  F031         	call	_I2C_delay	;wreg free
  4081   0066E4                     l2803:
  4082   0066E4  EC0D  F033         	call	_read_SCL	;wreg free
  4083   0066E8  0900               	iorlw	0
  4084   0066EA  B4D8               	btfsc	status,2,c
  4085   0066EC  EF7A  F033         	goto	u2271
  4086   0066F0  EF7C  F033         	goto	u2270
  4087   0066F4                     u2271:
  4088   0066F4  EF72  F033         	goto	l2803
  4089   0066F8                     u2270:
  4090   0066F8                     
  4091                           ;soft_i2c.c: 59:   I2C_delay();
  4092   0066F8  EC6C  F031         	call	_I2C_delay	;wreg free
  4093   0066FC                     l2807:
  4094                           
  4095                           ;soft_i2c.c: 61:  if (read_SDA() == 0) {
  4096   0066FC  EC29  F033         	call	_read_SDA	;wreg free
  4097   006700                     
  4098                           ;soft_i2c.c: 65:  clear_SDA();
  4099   006700  EC3C  F032         	call	_clear_SDA	;wreg free
  4100   006704                     
  4101                           ;soft_i2c.c: 66:  I2C_delay();
  4102   006704  EC6C  F031         	call	_I2C_delay	;wreg free
  4103   006708                     
  4104                           ;soft_i2c.c: 67:  clear_SCL();
  4105   006708  EC27  F032         	call	_clear_SCL	;wreg free
  4106   00670C                     
  4107                           ;soft_i2c.c: 68:  started = 1;
  4108   00670C  0E01               	movlw	1
  4109   00670E  6E48               	movwf	_started^0,c
  4110   006710  0012               	return		;funcret
  4111   006712                     __end_of_i2c_start:
  4112                           	callstack 0
  4113                           
  4114 ;; *************** function _i2cReadByte *****************
  4115 ;; Defined at:
  4116 ;;		line 131 in file "soft_i2c.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  nack            1    wreg     unsigned char 
  4119 ;;  send_stop       1    7[COMRAM] unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  nack            1    9[COMRAM] unsigned char 
  4122 ;;  bit             2   10[COMRAM] unsigned int 
  4123 ;;  byte            1   12[COMRAM] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      unsigned char 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4133 ;;      Params:         1       0       0       0       0       0       0       0       0
  4134 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4135 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4136 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4137 ;;Total ram usage:        6 bytes
  4138 ;; Hardware stack levels used: 1
  4139 ;; Hardware stack levels required when called: 3
  4140 ;; This function calls:
  4141 ;;		_i2c_read_bit
  4142 ;;		_i2c_stop
  4143 ;;		_i2c_write_bit
  4144 ;; This function is called by:
  4145 ;;		_dsReadData
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text30
  4150   0067EA                     __ptext30:
  4151                           	callstack 0
  4152   0067EA                     _i2cReadByte:
  4153                           	callstack 24
  4154                           
  4155                           ;incstack = 0
  4156                           ;i2cReadByte@nack stored from wreg
  4157   0067EA  6E0A               	movwf	i2cReadByte@nack^0,c
  4158   0067EC                     
  4159                           ;soft_i2c.c: 132:  unsigned char byte = 0;
  4160   0067EC  0E00               	movlw	0
  4161   0067EE  6E0D               	movwf	i2cReadByte@byte^0,c
  4162                           
  4163                           ;soft_i2c.c: 133:  unsigned bit;;soft_i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  4164   0067F0  0E00               	movlw	0
  4165   0067F2  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  4166   0067F4  0E00               	movlw	0
  4167   0067F6  6E0B               	movwf	i2cReadByte@bit^0,c
  4168   0067F8                     l2943:
  4169                           
  4170                           ;soft_i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  4171   0067F8  ECD9  F032         	call	_i2c_read_bit	;wreg free
  4172   0067FC  6E09               	movwf	??_i2cReadByte^0,c
  4173   0067FE  500D               	movf	i2cReadByte@byte^0,w,c
  4174   006800  240D               	addwf	i2cReadByte@byte^0,w,c
  4175   006802  1009               	iorwf	??_i2cReadByte^0,w,c
  4176   006804  6E0D               	movwf	i2cReadByte@byte^0,c
  4177   006806                     
  4178                           ;soft_i2c.c: 136:  }
  4179   006806  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  4180   006808  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  4181   00680A  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  4182   00680C  E109               	bnz	u2440
  4183   00680E  0E08               	movlw	8
  4184   006810  5C0B               	subwf	i2cReadByte@bit^0,w,c
  4185   006812  A0D8               	btfss	status,0,c
  4186   006814  EF0E  F034         	goto	u2441
  4187   006818  EF10  F034         	goto	u2440
  4188   00681C                     u2441:
  4189   00681C  EFFC  F033         	goto	l2943
  4190   006820                     u2440:
  4191   006820                     
  4192                           ;soft_i2c.c: 137:  i2c_write_bit(nack);
  4193   006820  500A               	movf	i2cReadByte@nack^0,w,c
  4194   006822  EC4A  F034         	call	_i2c_write_bit
  4195   006826                     
  4196                           ;soft_i2c.c: 138:  if (send_stop) {
  4197   006826  5008               	movf	i2cReadByte@send_stop^0,w,c
  4198   006828  B4D8               	btfsc	status,2,c
  4199   00682A  EF19  F034         	goto	u2451
  4200   00682E  EF1B  F034         	goto	u2450
  4201   006832                     u2451:
  4202   006832  EF1D  F034         	goto	l2955
  4203   006836                     u2450:
  4204   006836                     
  4205                           ;soft_i2c.c: 139:   i2c_stop();
  4206   006836  EC94  F032         	call	_i2c_stop	;wreg free
  4207   00683A                     l2955:
  4208                           
  4209                           ;soft_i2c.c: 141:  return byte;
  4210   00683A  500D               	movf	i2cReadByte@byte^0,w,c
  4211   00683C  0012               	return		;funcret
  4212   00683E                     __end_of_i2cReadByte:
  4213                           	callstack 0
  4214                           
  4215 ;; *************** function _i2c_write_bit *****************
  4216 ;; Defined at:
  4217 ;;		line 84 in file "soft_i2c.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  bit             1    wreg     unsigned char 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;  bit             1    6[COMRAM] unsigned char 
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2, status,0, cstack
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4231 ;;      Params:         0       0       0       0       0       0       0       0       0
  4232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4234 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4235 ;;Total ram usage:        1 bytes
  4236 ;; Hardware stack levels used: 1
  4237 ;; Hardware stack levels required when called: 2
  4238 ;; This function calls:
  4239 ;;		_I2C_delay
  4240 ;;		_clear_SCL
  4241 ;;		_clear_SDA
  4242 ;;		_read_SCL
  4243 ;;		_read_SDA
  4244 ;; This function is called by:
  4245 ;;		_i2cWriteByte
  4246 ;;		_i2cReadByte
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text31
  4251   006894                     __ptext31:
  4252                           	callstack 0
  4253   006894                     _i2c_write_bit:
  4254                           	callstack 24
  4255                           
  4256                           ;incstack = 0
  4257                           ;i2c_write_bit@bit stored from wreg
  4258   006894  6E07               	movwf	i2c_write_bit@bit^0,c
  4259   006896                     
  4260                           ;soft_i2c.c: 85:  if (bit) {
  4261   006896  5007               	movf	i2c_write_bit@bit^0,w,c
  4262   006898  B4D8               	btfsc	status,2,c
  4263   00689A  EF51  F034         	goto	u2291
  4264   00689E  EF53  F034         	goto	u2290
  4265   0068A2                     u2291:
  4266   0068A2  EF57  F034         	goto	l2835
  4267   0068A6                     u2290:
  4268   0068A6                     
  4269                           ;soft_i2c.c: 86:   read_SDA();
  4270   0068A6  EC29  F033         	call	_read_SDA	;wreg free
  4271                           
  4272                           ;soft_i2c.c: 87:  } else {
  4273   0068AA  EF59  F034         	goto	l2837
  4274   0068AE                     l2835:
  4275                           
  4276                           ;soft_i2c.c: 88:   clear_SDA();
  4277   0068AE  EC3C  F032         	call	_clear_SDA	;wreg free
  4278   0068B2                     l2837:
  4279                           
  4280                           ;soft_i2c.c: 90:  I2C_delay();
  4281   0068B2  EC6C  F031         	call	_I2C_delay	;wreg free
  4282   0068B6                     l2839:
  4283   0068B6  EC0D  F033         	call	_read_SCL	;wreg free
  4284   0068BA  0900               	iorlw	0
  4285   0068BC  B4D8               	btfsc	status,2,c
  4286   0068BE  EF63  F034         	goto	u2301
  4287   0068C2  EF65  F034         	goto	u2300
  4288   0068C6                     u2301:
  4289   0068C6  EF5B  F034         	goto	l2839
  4290   0068CA                     u2300:
  4291   0068CA                     
  4292                           ;soft_i2c.c: 92:  if (bit && read_SDA() == 0) {
  4293   0068CA  5007               	movf	i2c_write_bit@bit^0,w,c
  4294   0068CC  B4D8               	btfsc	status,2,c
  4295   0068CE  EF6B  F034         	goto	u2311
  4296   0068D2  EF6D  F034         	goto	u2310
  4297   0068D6                     u2311:
  4298   0068D6  EF6F  F034         	goto	l2845
  4299   0068DA                     u2310:
  4300   0068DA  EC29  F033         	call	_read_SDA	;wreg free
  4301   0068DE                     l2845:
  4302                           
  4303                           ;soft_i2c.c: 95:  I2C_delay();
  4304   0068DE  EC6C  F031         	call	_I2C_delay	;wreg free
  4305   0068E2                     
  4306                           ;soft_i2c.c: 96:  clear_SCL();
  4307   0068E2  EC27  F032         	call	_clear_SCL	;wreg free
  4308   0068E6                     
  4309                           ;soft_i2c.c: 97:  I2C_delay();
  4310   0068E6  EC6C  F031         	call	_I2C_delay	;wreg free
  4311   0068EA  0012               	return		;funcret
  4312   0068EC                     __end_of_i2c_write_bit:
  4313                           	callstack 0
  4314                           
  4315 ;; *************** function _i2c_stop *****************
  4316 ;; Defined at:
  4317 ;;		line 71 in file "soft_i2c.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4334 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4335 ;;Total ram usage:        0 bytes
  4336 ;; Hardware stack levels used: 1
  4337 ;; Hardware stack levels required when called: 2
  4338 ;; This function calls:
  4339 ;;		_I2C_delay
  4340 ;;		_clear_SDA
  4341 ;;		_read_SCL
  4342 ;;		_read_SDA
  4343 ;; This function is called by:
  4344 ;;		_i2cWriteByte
  4345 ;;		_i2cReadByte
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text32
  4350   006528                     __ptext32:
  4351                           	callstack 0
  4352   006528                     _i2c_stop:
  4353                           	callstack 24
  4354   006528                     
  4355                           ;soft_i2c.c: 73:  clear_SDA();
  4356   006528  EC3C  F032         	call	_clear_SDA	;wreg free
  4357   00652C                     
  4358                           ;soft_i2c.c: 74:  I2C_delay();
  4359   00652C  EC6C  F031         	call	_I2C_delay	;wreg free
  4360   006530                     l2821:
  4361   006530  EC0D  F033         	call	_read_SCL	;wreg free
  4362   006534  0900               	iorlw	0
  4363   006536  B4D8               	btfsc	status,2,c
  4364   006538  EFA0  F032         	goto	u2281
  4365   00653C  EFA2  F032         	goto	u2280
  4366   006540                     u2281:
  4367   006540  EF98  F032         	goto	l2821
  4368   006544                     u2280:
  4369   006544                     
  4370                           ;soft_i2c.c: 76:  I2C_delay();
  4371   006544  EC6C  F031         	call	_I2C_delay	;wreg free
  4372   006548                     
  4373                           ;soft_i2c.c: 77:  if (read_SDA() == 0) {
  4374   006548  EC29  F033         	call	_read_SDA	;wreg free
  4375   00654C                     
  4376                           ;soft_i2c.c: 80:  I2C_delay();
  4377   00654C  EC6C  F031         	call	_I2C_delay	;wreg free
  4378   006550                     
  4379                           ;soft_i2c.c: 81:  started = 0;
  4380   006550  0E00               	movlw	0
  4381   006552  6E48               	movwf	_started^0,c
  4382   006554  0012               	return		;funcret
  4383   006556                     __end_of_i2c_stop:
  4384                           	callstack 0
  4385                           
  4386 ;; *************** function _clear_SDA *****************
  4387 ;; Defined at:
  4388 ;;		line 45 in file "soft_i2c.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;		None
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;		None
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  1    wreg      void 
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0, cstack
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4402 ;;      Params:         0       0       0       0       0       0       0       0       0
  4403 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4405 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4406 ;;Total ram usage:        0 bytes
  4407 ;; Hardware stack levels used: 1
  4408 ;; Hardware stack levels required when called: 1
  4409 ;; This function calls:
  4410 ;;		_digitalWrite
  4411 ;;		_pinMode
  4412 ;; This function is called by:
  4413 ;;		_i2c_start
  4414 ;;		_i2c_stop
  4415 ;;		_i2c_write_bit
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text33
  4420   006478                     __ptext33:
  4421                           	callstack 0
  4422   006478                     _clear_SDA:
  4423                           	callstack 24
  4424   006478                     
  4425                           ;soft_i2c.c: 47:  pinMode(PIN_B0,0);
  4426   006478  0E00               	movlw	0
  4427   00647A  6E02               	movwf	(pinMode@pin+1)^0,c
  4428   00647C  0E08               	movlw	8
  4429   00647E  6E01               	movwf	pinMode@pin^0,c
  4430   006480  0E00               	movlw	0
  4431   006482  6E04               	movwf	(pinMode@type+1)^0,c
  4432   006484  0E00               	movlw	0
  4433   006486  6E03               	movwf	pinMode@type^0,c
  4434   006488  ECF0  F038         	call	_pinMode	;wreg free
  4435                           
  4436                           ;soft_i2c.c: 48:  digitalWrite(PIN_B0,0);
  4437   00648C  0E00               	movlw	0
  4438   00648E  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4439   006490  0E08               	movlw	8
  4440   006492  6E01               	movwf	digitalWrite@pin^0,c
  4441   006494  0E00               	movlw	0
  4442   006496  6E04               	movwf	(digitalWrite@value+1)^0,c
  4443   006498  0E00               	movlw	0
  4444   00649A  6E03               	movwf	digitalWrite@value^0,c
  4445   00649C  EC17  F03A         	call	_digitalWrite	;wreg free
  4446   0064A0  0012               	return		;funcret
  4447   0064A2                     __end_of_clear_SDA:
  4448                           	callstack 0
  4449                           
  4450 ;; *************** function _i2c_read_bit *****************
  4451 ;; Defined at:
  4452 ;;		line 100 in file "soft_i2c.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  bit             1    6[COMRAM] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      unsigned char 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0
  4467 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4469 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4470 ;;Total ram usage:        1 bytes
  4471 ;; Hardware stack levels used: 1
  4472 ;; Hardware stack levels required when called: 2
  4473 ;; This function calls:
  4474 ;;		_I2C_delay
  4475 ;;		_clear_SCL
  4476 ;;		_read_SCL
  4477 ;;		_read_SDA
  4478 ;; This function is called by:
  4479 ;;		_i2cWriteByte
  4480 ;;		_i2cReadByte
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           	psect	text34
  4485   0065B2                     __ptext34:
  4486                           	callstack 0
  4487   0065B2                     _i2c_read_bit:
  4488                           	callstack 24
  4489   0065B2                     
  4490                           ;soft_i2c.c: 101:  unsigned char bit;;soft_i2c.c: 102:  read_SDA();
  4491   0065B2  EC29  F033         	call	_read_SDA	;wreg free
  4492   0065B6                     
  4493                           ;soft_i2c.c: 103:  I2C_delay();
  4494   0065B6  EC6C  F031         	call	_I2C_delay	;wreg free
  4495   0065BA                     l2855:
  4496   0065BA  EC0D  F033         	call	_read_SCL	;wreg free
  4497   0065BE  0900               	iorlw	0
  4498   0065C0  B4D8               	btfsc	status,2,c
  4499   0065C2  EFE5  F032         	goto	u2321
  4500   0065C6  EFE7  F032         	goto	u2320
  4501   0065CA                     u2321:
  4502   0065CA  EFDD  F032         	goto	l2855
  4503   0065CE                     u2320:
  4504   0065CE                     
  4505                           ;soft_i2c.c: 105:  bit = read_SDA();
  4506   0065CE  EC29  F033         	call	_read_SDA	;wreg free
  4507   0065D2  6E07               	movwf	i2c_read_bit@bit^0,c
  4508   0065D4                     
  4509                           ;soft_i2c.c: 106:  I2C_delay();
  4510   0065D4  EC6C  F031         	call	_I2C_delay	;wreg free
  4511   0065D8                     
  4512                           ;soft_i2c.c: 107:  clear_SCL();
  4513   0065D8  EC27  F032         	call	_clear_SCL	;wreg free
  4514                           
  4515                           ;soft_i2c.c: 108:  I2C_delay();
  4516   0065DC  EC6C  F031         	call	_I2C_delay	;wreg free
  4517   0065E0                     
  4518                           ;soft_i2c.c: 109:  return bit;
  4519   0065E0  5007               	movf	i2c_read_bit@bit^0,w,c
  4520   0065E2  0012               	return		;funcret
  4521   0065E4                     __end_of_i2c_read_bit:
  4522                           	callstack 0
  4523                           
  4524 ;; *************** function _read_SDA *****************
  4525 ;; Defined at:
  4526 ;;		line 34 in file "soft_i2c.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;		None
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      unsigned char 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4540 ;;      Params:         0       0       0       0       0       0       0       0       0
  4541 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4543 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4544 ;;Total ram usage:        0 bytes
  4545 ;; Hardware stack levels used: 1
  4546 ;; Hardware stack levels required when called: 1
  4547 ;; This function calls:
  4548 ;;		_digitalRead
  4549 ;;		_pinMode
  4550 ;; This function is called by:
  4551 ;;		_i2c_start
  4552 ;;		_i2c_stop
  4553 ;;		_i2c_write_bit
  4554 ;;		_i2c_read_bit
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text35
  4559   006652                     __ptext35:
  4560                           	callstack 0
  4561   006652                     _read_SDA:
  4562                           	callstack 24
  4563   006652                     
  4564                           ;soft_i2c.c: 36:  pinMode(PIN_B0,1);
  4565   006652  0E00               	movlw	0
  4566   006654  6E02               	movwf	(pinMode@pin+1)^0,c
  4567   006656  0E08               	movlw	8
  4568   006658  6E01               	movwf	pinMode@pin^0,c
  4569   00665A  0E00               	movlw	0
  4570   00665C  6E04               	movwf	(pinMode@type+1)^0,c
  4571   00665E  0E01               	movlw	1
  4572   006660  6E03               	movwf	pinMode@type^0,c
  4573   006662  ECF0  F038         	call	_pinMode	;wreg free
  4574                           
  4575                           ;soft_i2c.c: 37:  return !!digitalRead(PIN_B0);
  4576   006666  0E00               	movlw	0
  4577   006668  6E02               	movwf	(digitalRead@pin+1)^0,c
  4578   00666A  0E08               	movlw	8
  4579   00666C  6E01               	movwf	digitalRead@pin^0,c
  4580   00666E  EC70  F037         	call	_digitalRead	;wreg free
  4581   006672  5001               	movf	?_digitalRead^0,w,c
  4582   006674  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4583   006676  A4D8               	btfss	status,2,c
  4584   006678  EF40  F033         	goto	u2241
  4585   00667C  EF43  F033         	goto	u2240
  4586   006680                     u2241:
  4587   006680  0E01               	movlw	1
  4588   006682  EF44  F033         	goto	u2250
  4589   006686                     u2240:
  4590   006686  0E00               	movlw	0
  4591   006688                     u2250:
  4592   006688  0012               	return		;funcret
  4593   00668A                     __end_of_read_SDA:
  4594                           	callstack 0
  4595                           
  4596 ;; *************** function _read_SCL *****************
  4597 ;; Defined at:
  4598 ;;		line 29 in file "soft_i2c.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;		None
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      unsigned char 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4612 ;;      Params:         0       0       0       0       0       0       0       0       0
  4613 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4615 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4616 ;;Total ram usage:        0 bytes
  4617 ;; Hardware stack levels used: 1
  4618 ;; Hardware stack levels required when called: 1
  4619 ;; This function calls:
  4620 ;;		_digitalRead
  4621 ;;		_pinMode
  4622 ;; This function is called by:
  4623 ;;		_i2c_start
  4624 ;;		_i2c_stop
  4625 ;;		_i2c_write_bit
  4626 ;;		_i2c_read_bit
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text36
  4631   00661A                     __ptext36:
  4632                           	callstack 0
  4633   00661A                     _read_SCL:
  4634                           	callstack 24
  4635   00661A                     
  4636                           ;soft_i2c.c: 31:  pinMode(PIN_B1,1);
  4637   00661A  0E00               	movlw	0
  4638   00661C  6E02               	movwf	(pinMode@pin+1)^0,c
  4639   00661E  0E09               	movlw	9
  4640   006620  6E01               	movwf	pinMode@pin^0,c
  4641   006622  0E00               	movlw	0
  4642   006624  6E04               	movwf	(pinMode@type+1)^0,c
  4643   006626  0E01               	movlw	1
  4644   006628  6E03               	movwf	pinMode@type^0,c
  4645   00662A  ECF0  F038         	call	_pinMode	;wreg free
  4646                           
  4647                           ;soft_i2c.c: 32:  return !!digitalRead(PIN_B1);
  4648   00662E  0E00               	movlw	0
  4649   006630  6E02               	movwf	(digitalRead@pin+1)^0,c
  4650   006632  0E09               	movlw	9
  4651   006634  6E01               	movwf	digitalRead@pin^0,c
  4652   006636  EC70  F037         	call	_digitalRead	;wreg free
  4653   00663A  5001               	movf	?_digitalRead^0,w,c
  4654   00663C  1002               	iorwf	(?_digitalRead+1)^0,w,c
  4655   00663E  A4D8               	btfss	status,2,c
  4656   006640  EF24  F033         	goto	u2221
  4657   006644  EF27  F033         	goto	u2220
  4658   006648                     u2221:
  4659   006648  0E01               	movlw	1
  4660   00664A  EF28  F033         	goto	u2230
  4661   00664E                     u2220:
  4662   00664E  0E00               	movlw	0
  4663   006650                     u2230:
  4664   006650  0012               	return		;funcret
  4665   006652                     __end_of_read_SCL:
  4666                           	callstack 0
  4667                           
  4668 ;; *************** function _digitalRead *****************
  4669 ;; Defined at:
  4670 ;;		line 39 in file "io.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  pin             2    0[COMRAM] int 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  2    0[COMRAM] int 
  4677 ;; Registers used:
  4678 ;;		wreg, status,2, status,0
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4684 ;;      Params:         2       0       0       0       0       0       0       0       0
  4685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4686 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4687 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4688 ;;Total ram usage:        5 bytes
  4689 ;; Hardware stack levels used: 1
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_read_SCL
  4694 ;;		_read_SDA
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text37
  4699   006EE0                     __ptext37:
  4700                           	callstack 0
  4701   006EE0                     _digitalRead:
  4702                           	callstack 24
  4703   006EE0                     
  4704                           ;io.c: 40:     if(pin <8){
  4705   006EE0  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4706   006EE2  EF7E  F037         	goto	u1920
  4707   006EE6  5002               	movf	(digitalRead@pin+1)^0,w,c
  4708   006EE8  E107               	bnz	u1921
  4709   006EEA  0E08               	movlw	8
  4710   006EEC  5C01               	subwf	digitalRead@pin^0,w,c
  4711   006EEE  B0D8               	btfsc	status,0,c
  4712   006EF0  EF7C  F037         	goto	u1921
  4713   006EF4  EF7E  F037         	goto	u1920
  4714   006EF8                     u1921:
  4715   006EF8  EF92  F037         	goto	l2713
  4716   006EFC                     u1920:
  4717   006EFC                     
  4718                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  4719   006EFC  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4720   006F00  0E01               	movlw	1
  4721   006F02  6E04               	movwf	(??_digitalRead+1)^0,c
  4722   006F04  2A03               	incf	??_digitalRead^0,f,c
  4723   006F06  EF87  F037         	goto	u1934
  4724   006F0A                     u1935:
  4725   006F0A  90D8               	bcf	status,0,c
  4726   006F0C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4727   006F0E                     u1934:
  4728   006F0E  2E03               	decfsz	??_digitalRead^0,f,c
  4729   006F10  EF85  F037         	goto	u1935
  4730   006F14  5004               	movf	(??_digitalRead+1)^0,w,c
  4731   006F16  1480               	andwf	128,w,c	;volatile
  4732   006F18  6E05               	movwf	(??_digitalRead+2)^0,c
  4733   006F1A  5005               	movf	(??_digitalRead+2)^0,w,c
  4734   006F1C  6E01               	movwf	?_digitalRead^0,c
  4735   006F1E  6A02               	clrf	(?_digitalRead+1)^0,c
  4736   006F20  EF24  F038         	goto	l83
  4737   006F24                     l2713:
  4738   006F24  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4739   006F26  EFA0  F037         	goto	u1940
  4740   006F2A  5002               	movf	(digitalRead@pin+1)^0,w,c
  4741   006F2C  E107               	bnz	u1941
  4742   006F2E  0E10               	movlw	16
  4743   006F30  5C01               	subwf	digitalRead@pin^0,w,c
  4744   006F32  B0D8               	btfsc	status,0,c
  4745   006F34  EF9E  F037         	goto	u1941
  4746   006F38  EFA0  F037         	goto	u1940
  4747   006F3C                     u1941:
  4748   006F3C  EFB6  F037         	goto	l2721
  4749   006F40                     u1940:
  4750   006F40                     
  4751                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  4752   006F40  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4753   006F44  0EF8               	movlw	-8
  4754   006F46  2603               	addwf	??_digitalRead^0,f,c
  4755   006F48  0E01               	movlw	1
  4756   006F4A  6E04               	movwf	(??_digitalRead+1)^0,c
  4757   006F4C  2A03               	incf	??_digitalRead^0,f,c
  4758   006F4E  EFAB  F037         	goto	u1954
  4759   006F52                     u1955:
  4760   006F52  90D8               	bcf	status,0,c
  4761   006F54  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4762   006F56                     u1954:
  4763   006F56  2E03               	decfsz	??_digitalRead^0,f,c
  4764   006F58  EFA9  F037         	goto	u1955
  4765   006F5C  5004               	movf	(??_digitalRead+1)^0,w,c
  4766   006F5E  1481               	andwf	129,w,c	;volatile
  4767   006F60  6E05               	movwf	(??_digitalRead+2)^0,c
  4768   006F62  5005               	movf	(??_digitalRead+2)^0,w,c
  4769   006F64  6E01               	movwf	?_digitalRead^0,c
  4770   006F66  6A02               	clrf	(?_digitalRead+1)^0,c
  4771   006F68  EF24  F038         	goto	l83
  4772   006F6C                     l2721:
  4773   006F6C  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4774   006F6E  EFC4  F037         	goto	u1960
  4775   006F72  5002               	movf	(digitalRead@pin+1)^0,w,c
  4776   006F74  E107               	bnz	u1961
  4777   006F76  0E18               	movlw	24
  4778   006F78  5C01               	subwf	digitalRead@pin^0,w,c
  4779   006F7A  B0D8               	btfsc	status,0,c
  4780   006F7C  EFC2  F037         	goto	u1961
  4781   006F80  EFC4  F037         	goto	u1960
  4782   006F84                     u1961:
  4783   006F84  EFDA  F037         	goto	l2729
  4784   006F88                     u1960:
  4785   006F88                     
  4786                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  4787   006F88  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4788   006F8C  0EF0               	movlw	-16
  4789   006F8E  2603               	addwf	??_digitalRead^0,f,c
  4790   006F90  0E01               	movlw	1
  4791   006F92  6E04               	movwf	(??_digitalRead+1)^0,c
  4792   006F94  2A03               	incf	??_digitalRead^0,f,c
  4793   006F96  EFCF  F037         	goto	u1974
  4794   006F9A                     u1975:
  4795   006F9A  90D8               	bcf	status,0,c
  4796   006F9C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4797   006F9E                     u1974:
  4798   006F9E  2E03               	decfsz	??_digitalRead^0,f,c
  4799   006FA0  EFCD  F037         	goto	u1975
  4800   006FA4  5004               	movf	(??_digitalRead+1)^0,w,c
  4801   006FA6  1482               	andwf	130,w,c	;volatile
  4802   006FA8  6E05               	movwf	(??_digitalRead+2)^0,c
  4803   006FAA  5005               	movf	(??_digitalRead+2)^0,w,c
  4804   006FAC  6E01               	movwf	?_digitalRead^0,c
  4805   006FAE  6A02               	clrf	(?_digitalRead+1)^0,c
  4806   006FB0  EF24  F038         	goto	l83
  4807   006FB4                     l2729:
  4808   006FB4  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4809   006FB6  EFE8  F037         	goto	u1980
  4810   006FBA  5002               	movf	(digitalRead@pin+1)^0,w,c
  4811   006FBC  E107               	bnz	u1981
  4812   006FBE  0E20               	movlw	32
  4813   006FC0  5C01               	subwf	digitalRead@pin^0,w,c
  4814   006FC2  B0D8               	btfsc	status,0,c
  4815   006FC4  EFE6  F037         	goto	u1981
  4816   006FC8  EFE8  F037         	goto	u1980
  4817   006FCC                     u1981:
  4818   006FCC  EFFE  F037         	goto	l2737
  4819   006FD0                     u1980:
  4820   006FD0                     
  4821                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  4822   006FD0  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4823   006FD4  0EE8               	movlw	-24
  4824   006FD6  2603               	addwf	??_digitalRead^0,f,c
  4825   006FD8  0E01               	movlw	1
  4826   006FDA  6E04               	movwf	(??_digitalRead+1)^0,c
  4827   006FDC  2A03               	incf	??_digitalRead^0,f,c
  4828   006FDE  EFF3  F037         	goto	u1994
  4829   006FE2                     u1995:
  4830   006FE2  90D8               	bcf	status,0,c
  4831   006FE4  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4832   006FE6                     u1994:
  4833   006FE6  2E03               	decfsz	??_digitalRead^0,f,c
  4834   006FE8  EFF1  F037         	goto	u1995
  4835   006FEC  5004               	movf	(??_digitalRead+1)^0,w,c
  4836   006FEE  1483               	andwf	131,w,c	;volatile
  4837   006FF0  6E05               	movwf	(??_digitalRead+2)^0,c
  4838   006FF2  5005               	movf	(??_digitalRead+2)^0,w,c
  4839   006FF4  6E01               	movwf	?_digitalRead^0,c
  4840   006FF6  6A02               	clrf	(?_digitalRead+1)^0,c
  4841   006FF8  EF24  F038         	goto	l83
  4842   006FFC                     l2737:
  4843   006FFC  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  4844   006FFE  EF0C  F038         	goto	u2000
  4845   007002  5002               	movf	(digitalRead@pin+1)^0,w,c
  4846   007004  E107               	bnz	u2001
  4847   007006  0E28               	movlw	40
  4848   007008  5C01               	subwf	digitalRead@pin^0,w,c
  4849   00700A  B0D8               	btfsc	status,0,c
  4850   00700C  EF0A  F038         	goto	u2001
  4851   007010  EF0C  F038         	goto	u2000
  4852   007014                     u2001:
  4853   007014  EF22  F038         	goto	l88
  4854   007018                     u2000:
  4855   007018                     
  4856                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  4857   007018  C001  F003         	movff	digitalRead@pin,??_digitalRead
  4858   00701C  0EE0               	movlw	-32
  4859   00701E  2603               	addwf	??_digitalRead^0,f,c
  4860   007020  0E01               	movlw	1
  4861   007022  6E04               	movwf	(??_digitalRead+1)^0,c
  4862   007024  2A03               	incf	??_digitalRead^0,f,c
  4863   007026  EF17  F038         	goto	u2014
  4864   00702A                     u2015:
  4865   00702A  90D8               	bcf	status,0,c
  4866   00702C  3604               	rlcf	(??_digitalRead+1)^0,f,c
  4867   00702E                     u2014:
  4868   00702E  2E03               	decfsz	??_digitalRead^0,f,c
  4869   007030  EF15  F038         	goto	u2015
  4870   007034  5004               	movf	(??_digitalRead+1)^0,w,c
  4871   007036  1484               	andwf	132,w,c	;volatile
  4872   007038  6E05               	movwf	(??_digitalRead+2)^0,c
  4873   00703A  5005               	movf	(??_digitalRead+2)^0,w,c
  4874   00703C  6E01               	movwf	?_digitalRead^0,c
  4875   00703E  6A02               	clrf	(?_digitalRead+1)^0,c
  4876   007040  EF24  F038         	goto	l83
  4877   007044                     l88:
  4878   007044                     
  4879                           ;io.c: 51:     return -1;
  4880   007044  6801               	setf	?_digitalRead^0,c
  4881   007046  6802               	setf	(?_digitalRead+1)^0,c
  4882   007048                     l83:
  4883   007048  0012               	return		;funcret
  4884   00704A                     __end_of_digitalRead:
  4885                           	callstack 0
  4886                           
  4887 ;; *************** function _clear_SCL *****************
  4888 ;; Defined at:
  4889 ;;		line 39 in file "soft_i2c.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;		None
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4903 ;;      Params:         0       0       0       0       0       0       0       0       0
  4904 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4906 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4907 ;;Total ram usage:        0 bytes
  4908 ;; Hardware stack levels used: 1
  4909 ;; Hardware stack levels required when called: 1
  4910 ;; This function calls:
  4911 ;;		_digitalWrite
  4912 ;;		_pinMode
  4913 ;; This function is called by:
  4914 ;;		_i2c_start
  4915 ;;		_i2c_write_bit
  4916 ;;		_i2c_read_bit
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text38
  4921   00644E                     __ptext38:
  4922                           	callstack 0
  4923   00644E                     _clear_SCL:
  4924                           	callstack 24
  4925   00644E                     
  4926                           ;soft_i2c.c: 41:  pinMode(PIN_B1,0);
  4927   00644E  0E00               	movlw	0
  4928   006450  6E02               	movwf	(pinMode@pin+1)^0,c
  4929   006452  0E09               	movlw	9
  4930   006454  6E01               	movwf	pinMode@pin^0,c
  4931   006456  0E00               	movlw	0
  4932   006458  6E04               	movwf	(pinMode@type+1)^0,c
  4933   00645A  0E00               	movlw	0
  4934   00645C  6E03               	movwf	pinMode@type^0,c
  4935   00645E  ECF0  F038         	call	_pinMode	;wreg free
  4936                           
  4937                           ;soft_i2c.c: 42:  digitalWrite(PIN_B1,0);
  4938   006462  0E00               	movlw	0
  4939   006464  6E02               	movwf	(digitalWrite@pin+1)^0,c
  4940   006466  0E09               	movlw	9
  4941   006468  6E01               	movwf	digitalWrite@pin^0,c
  4942   00646A  0E00               	movlw	0
  4943   00646C  6E04               	movwf	(digitalWrite@value+1)^0,c
  4944   00646E  0E00               	movlw	0
  4945   006470  6E03               	movwf	digitalWrite@value^0,c
  4946   006472  EC17  F03A         	call	_digitalWrite	;wreg free
  4947   006476  0012               	return		;funcret
  4948   006478                     __end_of_clear_SCL:
  4949                           	callstack 0
  4950                           
  4951 ;; *************** function _digitalWrite *****************
  4952 ;; Defined at:
  4953 ;;		line 14 in file "io.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  pin             2    0[COMRAM] int 
  4956 ;;  value           2    2[COMRAM] int 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4968 ;;      Params:         4       0       0       0       0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4970 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4971 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4972 ;;Total ram usage:        6 bytes
  4973 ;; Hardware stack levels used: 1
  4974 ;; This function calls:
  4975 ;;		Nothing
  4976 ;; This function is called by:
  4977 ;;		_clear_SCL
  4978 ;;		_clear_SDA
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text39
  4983   00742E                     __ptext39:
  4984                           	callstack 0
  4985   00742E                     _digitalWrite:
  4986                           	callstack 24
  4987   00742E                     
  4988                           ;io.c: 16:     if(pin <8){
  4989   00742E  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4990   007430  EF25  F03A         	goto	u1720
  4991   007434  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4992   007436  E107               	bnz	u1721
  4993   007438  0E08               	movlw	8
  4994   00743A  5C01               	subwf	digitalWrite@pin^0,w,c
  4995   00743C  B0D8               	btfsc	status,0,c
  4996   00743E  EF23  F03A         	goto	u1721
  4997   007442  EF25  F03A         	goto	u1720
  4998   007446                     u1721:
  4999   007446  EF4F  F03A         	goto	l2673
  5000   00744A                     u1720:
  5001   00744A                     
  5002                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  5003   00744A  5003               	movf	digitalWrite@value^0,w,c
  5004   00744C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5005   00744E  B4D8               	btfsc	status,2,c
  5006   007450  EF2C  F03A         	goto	u1731
  5007   007454  EF2E  F03A         	goto	u1730
  5008   007458                     u1731:
  5009   007458  EF3E  F03A         	goto	l2671
  5010   00745C                     u1730:
  5011   00745C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5012   007460  0E01               	movlw	1
  5013   007462  6E06               	movwf	(??_digitalWrite+1)^0,c
  5014   007464  2A05               	incf	??_digitalWrite^0,f,c
  5015   007466  EF37  F03A         	goto	u1744
  5016   00746A                     u1745:
  5017   00746A  90D8               	bcf	status,0,c
  5018   00746C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5019   00746E                     u1744:
  5020   00746E  2E05               	decfsz	??_digitalWrite^0,f,c
  5021   007470  EF35  F03A         	goto	u1745
  5022   007474  5006               	movf	(??_digitalWrite+1)^0,w,c
  5023   007476  1280               	iorwf	128,f,c	;volatile
  5024   007478  EF3D  F03B         	goto	l79
  5025   00747C                     l2671:
  5026   00747C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5027   007480  0E01               	movlw	1
  5028   007482  6E06               	movwf	(??_digitalWrite+1)^0,c
  5029   007484  2A05               	incf	??_digitalWrite^0,f,c
  5030   007486  EF47  F03A         	goto	u1754
  5031   00748A                     u1755:
  5032   00748A  90D8               	bcf	status,0,c
  5033   00748C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5034   00748E                     u1754:
  5035   00748E  2E05               	decfsz	??_digitalWrite^0,f,c
  5036   007490  EF45  F03A         	goto	u1755
  5037   007494  5006               	movf	(??_digitalWrite+1)^0,w,c
  5038   007496  0AFF               	xorlw	255
  5039   007498  1680               	andwf	128,f,c	;volatile
  5040   00749A  EF3D  F03B         	goto	l79
  5041   00749E                     l2673:
  5042   00749E  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5043   0074A0  EF5D  F03A         	goto	u1760
  5044   0074A4  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5045   0074A6  E107               	bnz	u1761
  5046   0074A8  0E10               	movlw	16
  5047   0074AA  5C01               	subwf	digitalWrite@pin^0,w,c
  5048   0074AC  B0D8               	btfsc	status,0,c
  5049   0074AE  EF5B  F03A         	goto	u1761
  5050   0074B2  EF5D  F03A         	goto	u1760
  5051   0074B6                     u1761:
  5052   0074B6  EF8B  F03A         	goto	l2681
  5053   0074BA                     u1760:
  5054   0074BA                     
  5055                           ;io.c: 20:         pin -=8;
  5056   0074BA  0EF8               	movlw	248
  5057   0074BC  2601               	addwf	digitalWrite@pin^0,f,c
  5058   0074BE  0EFF               	movlw	255
  5059   0074C0  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5060                           
  5061                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  5062   0074C2  5003               	movf	digitalWrite@value^0,w,c
  5063   0074C4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5064   0074C6  B4D8               	btfsc	status,2,c
  5065   0074C8  EF68  F03A         	goto	u1771
  5066   0074CC  EF6A  F03A         	goto	u1770
  5067   0074D0                     u1771:
  5068   0074D0  EF7A  F03A         	goto	l2679
  5069   0074D4                     u1770:
  5070   0074D4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5071   0074D8  0E01               	movlw	1
  5072   0074DA  6E06               	movwf	(??_digitalWrite+1)^0,c
  5073   0074DC  2A05               	incf	??_digitalWrite^0,f,c
  5074   0074DE  EF73  F03A         	goto	u1784
  5075   0074E2                     u1785:
  5076   0074E2  90D8               	bcf	status,0,c
  5077   0074E4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5078   0074E6                     u1784:
  5079   0074E6  2E05               	decfsz	??_digitalWrite^0,f,c
  5080   0074E8  EF71  F03A         	goto	u1785
  5081   0074EC  5006               	movf	(??_digitalWrite+1)^0,w,c
  5082   0074EE  1281               	iorwf	129,f,c	;volatile
  5083   0074F0  EF3D  F03B         	goto	l79
  5084   0074F4                     l2679:
  5085   0074F4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5086   0074F8  0E01               	movlw	1
  5087   0074FA  6E06               	movwf	(??_digitalWrite+1)^0,c
  5088   0074FC  2A05               	incf	??_digitalWrite^0,f,c
  5089   0074FE  EF83  F03A         	goto	u1794
  5090   007502                     u1795:
  5091   007502  90D8               	bcf	status,0,c
  5092   007504  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5093   007506                     u1794:
  5094   007506  2E05               	decfsz	??_digitalWrite^0,f,c
  5095   007508  EF81  F03A         	goto	u1795
  5096   00750C  5006               	movf	(??_digitalWrite+1)^0,w,c
  5097   00750E  0AFF               	xorlw	255
  5098   007510  1681               	andwf	129,f,c	;volatile
  5099   007512  EF3D  F03B         	goto	l79
  5100   007516                     l2681:
  5101   007516  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5102   007518  EF99  F03A         	goto	u1800
  5103   00751C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5104   00751E  E107               	bnz	u1801
  5105   007520  0E18               	movlw	24
  5106   007522  5C01               	subwf	digitalWrite@pin^0,w,c
  5107   007524  B0D8               	btfsc	status,0,c
  5108   007526  EF97  F03A         	goto	u1801
  5109   00752A  EF99  F03A         	goto	u1800
  5110   00752E                     u1801:
  5111   00752E  EFC7  F03A         	goto	l2689
  5112   007532                     u1800:
  5113   007532                     
  5114                           ;io.c: 24:         pin -=16;
  5115   007532  0EF0               	movlw	240
  5116   007534  2601               	addwf	digitalWrite@pin^0,f,c
  5117   007536  0EFF               	movlw	255
  5118   007538  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5119                           
  5120                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  5121   00753A  5003               	movf	digitalWrite@value^0,w,c
  5122   00753C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5123   00753E  B4D8               	btfsc	status,2,c
  5124   007540  EFA4  F03A         	goto	u1811
  5125   007544  EFA6  F03A         	goto	u1810
  5126   007548                     u1811:
  5127   007548  EFB6  F03A         	goto	l2687
  5128   00754C                     u1810:
  5129   00754C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5130   007550  0E01               	movlw	1
  5131   007552  6E06               	movwf	(??_digitalWrite+1)^0,c
  5132   007554  2A05               	incf	??_digitalWrite^0,f,c
  5133   007556  EFAF  F03A         	goto	u1824
  5134   00755A                     u1825:
  5135   00755A  90D8               	bcf	status,0,c
  5136   00755C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5137   00755E                     u1824:
  5138   00755E  2E05               	decfsz	??_digitalWrite^0,f,c
  5139   007560  EFAD  F03A         	goto	u1825
  5140   007564  5006               	movf	(??_digitalWrite+1)^0,w,c
  5141   007566  1282               	iorwf	130,f,c	;volatile
  5142   007568  EF3D  F03B         	goto	l79
  5143   00756C                     l2687:
  5144   00756C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5145   007570  0E01               	movlw	1
  5146   007572  6E06               	movwf	(??_digitalWrite+1)^0,c
  5147   007574  2A05               	incf	??_digitalWrite^0,f,c
  5148   007576  EFBF  F03A         	goto	u1834
  5149   00757A                     u1835:
  5150   00757A  90D8               	bcf	status,0,c
  5151   00757C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5152   00757E                     u1834:
  5153   00757E  2E05               	decfsz	??_digitalWrite^0,f,c
  5154   007580  EFBD  F03A         	goto	u1835
  5155   007584  5006               	movf	(??_digitalWrite+1)^0,w,c
  5156   007586  0AFF               	xorlw	255
  5157   007588  1682               	andwf	130,f,c	;volatile
  5158   00758A  EF3D  F03B         	goto	l79
  5159   00758E                     l2689:
  5160   00758E  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5161   007590  EFD5  F03A         	goto	u1840
  5162   007594  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5163   007596  E107               	bnz	u1841
  5164   007598  0E20               	movlw	32
  5165   00759A  5C01               	subwf	digitalWrite@pin^0,w,c
  5166   00759C  B0D8               	btfsc	status,0,c
  5167   00759E  EFD3  F03A         	goto	u1841
  5168   0075A2  EFD5  F03A         	goto	u1840
  5169   0075A6                     u1841:
  5170   0075A6  EF03  F03B         	goto	l2697
  5171   0075AA                     u1840:
  5172   0075AA                     
  5173                           ;io.c: 28:         pin -=24;
  5174   0075AA  0EE8               	movlw	232
  5175   0075AC  2601               	addwf	digitalWrite@pin^0,f,c
  5176   0075AE  0EFF               	movlw	255
  5177   0075B0  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5178                           
  5179                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  5180   0075B2  5003               	movf	digitalWrite@value^0,w,c
  5181   0075B4  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5182   0075B6  B4D8               	btfsc	status,2,c
  5183   0075B8  EFE0  F03A         	goto	u1851
  5184   0075BC  EFE2  F03A         	goto	u1850
  5185   0075C0                     u1851:
  5186   0075C0  EFF2  F03A         	goto	l2695
  5187   0075C4                     u1850:
  5188   0075C4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5189   0075C8  0E01               	movlw	1
  5190   0075CA  6E06               	movwf	(??_digitalWrite+1)^0,c
  5191   0075CC  2A05               	incf	??_digitalWrite^0,f,c
  5192   0075CE  EFEB  F03A         	goto	u1864
  5193   0075D2                     u1865:
  5194   0075D2  90D8               	bcf	status,0,c
  5195   0075D4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5196   0075D6                     u1864:
  5197   0075D6  2E05               	decfsz	??_digitalWrite^0,f,c
  5198   0075D8  EFE9  F03A         	goto	u1865
  5199   0075DC  5006               	movf	(??_digitalWrite+1)^0,w,c
  5200   0075DE  1283               	iorwf	131,f,c	;volatile
  5201   0075E0  EF3D  F03B         	goto	l79
  5202   0075E4                     l2695:
  5203   0075E4  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5204   0075E8  0E01               	movlw	1
  5205   0075EA  6E06               	movwf	(??_digitalWrite+1)^0,c
  5206   0075EC  2A05               	incf	??_digitalWrite^0,f,c
  5207   0075EE  EFFB  F03A         	goto	u1874
  5208   0075F2                     u1875:
  5209   0075F2  90D8               	bcf	status,0,c
  5210   0075F4  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5211   0075F6                     u1874:
  5212   0075F6  2E05               	decfsz	??_digitalWrite^0,f,c
  5213   0075F8  EFF9  F03A         	goto	u1875
  5214   0075FC  5006               	movf	(??_digitalWrite+1)^0,w,c
  5215   0075FE  0AFF               	xorlw	255
  5216   007600  1683               	andwf	131,f,c	;volatile
  5217   007602  EF3D  F03B         	goto	l79
  5218   007606                     l2697:
  5219   007606  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  5220   007608  EF11  F03B         	goto	u1880
  5221   00760C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  5222   00760E  E107               	bnz	u1881
  5223   007610  0E28               	movlw	40
  5224   007612  5C01               	subwf	digitalWrite@pin^0,w,c
  5225   007614  B0D8               	btfsc	status,0,c
  5226   007616  EF0F  F03B         	goto	u1881
  5227   00761A  EF11  F03B         	goto	u1880
  5228   00761E                     u1881:
  5229   00761E  EF3D  F03B         	goto	l79
  5230   007622                     u1880:
  5231   007622                     
  5232                           ;io.c: 32:         pin -=32;
  5233   007622  0EE0               	movlw	224
  5234   007624  2601               	addwf	digitalWrite@pin^0,f,c
  5235   007626  0EFF               	movlw	255
  5236   007628  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  5237                           
  5238                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  5239   00762A  5003               	movf	digitalWrite@value^0,w,c
  5240   00762C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  5241   00762E  B4D8               	btfsc	status,2,c
  5242   007630  EF1C  F03B         	goto	u1891
  5243   007634  EF1E  F03B         	goto	u1890
  5244   007638                     u1891:
  5245   007638  EF2E  F03B         	goto	l2703
  5246   00763C                     u1890:
  5247   00763C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5248   007640  0E01               	movlw	1
  5249   007642  6E06               	movwf	(??_digitalWrite+1)^0,c
  5250   007644  2A05               	incf	??_digitalWrite^0,f,c
  5251   007646  EF27  F03B         	goto	u1904
  5252   00764A                     u1905:
  5253   00764A  90D8               	bcf	status,0,c
  5254   00764C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5255   00764E                     u1904:
  5256   00764E  2E05               	decfsz	??_digitalWrite^0,f,c
  5257   007650  EF25  F03B         	goto	u1905
  5258   007654  5006               	movf	(??_digitalWrite+1)^0,w,c
  5259   007656  1284               	iorwf	132,f,c	;volatile
  5260   007658  EF3D  F03B         	goto	l79
  5261   00765C                     l2703:
  5262   00765C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  5263   007660  0E01               	movlw	1
  5264   007662  6E06               	movwf	(??_digitalWrite+1)^0,c
  5265   007664  2A05               	incf	??_digitalWrite^0,f,c
  5266   007666  EF37  F03B         	goto	u1914
  5267   00766A                     u1915:
  5268   00766A  90D8               	bcf	status,0,c
  5269   00766C  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  5270   00766E                     u1914:
  5271   00766E  2E05               	decfsz	??_digitalWrite^0,f,c
  5272   007670  EF35  F03B         	goto	u1915
  5273   007674  5006               	movf	(??_digitalWrite+1)^0,w,c
  5274   007676  0AFF               	xorlw	255
  5275   007678  1684               	andwf	132,f,c	;volatile
  5276   00767A                     l79:
  5277   00767A  0012               	return		;funcret
  5278   00767C                     __end_of_digitalWrite:
  5279                           	callstack 0
  5280                           
  5281 ;; *************** function _I2C_delay *****************
  5282 ;; Defined at:
  5283 ;;		line 22 in file "soft_i2c.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  i               2    0        int 
  5288 ;;  v               2    0        volatile int 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		None
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5298 ;;      Params:         0       0       0       0       0       0       0       0       0
  5299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5301 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_i2c_start
  5308 ;;		_i2c_stop
  5309 ;;		_i2c_write_bit
  5310 ;;		_i2c_read_bit
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text40
  5315   0062D8                     __ptext40:
  5316                           	callstack 0
  5317   0062D8                     _I2C_delay:
  5318                           	callstack 25
  5319   0062D8  0012               	return		;funcret
  5320   0062DA                     __end_of_I2C_delay:
  5321                           	callstack 0
  5322                           
  5323 ;; *************** function _setState *****************
  5324 ;; Defined at:
  5325 ;;		line 34 in file "var.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  newState        1    wreg     unsigned char 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  newState        1    0[COMRAM] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5339 ;;      Params:         0       0       0       0       0       0       0       0       0
  5340 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5342 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5343 ;;Total ram usage:        1 bytes
  5344 ;; Hardware stack levels used: 1
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_smInit
  5349 ;;		_smLoop
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text41
  5354   0062FE                     __ptext41:
  5355                           	callstack 0
  5356   0062FE                     _setState:
  5357                           	callstack 29
  5358                           
  5359                           ;incstack = 0
  5360                           ;setState@newState stored from wreg
  5361   0062FE  6E01               	movwf	setState@newState^0,c
  5362   006300                     
  5363                           ;var.c: 35:     state = newState;
  5364   006300  C001  F040         	movff	setState@newState,_state
  5365   006304  0012               	return		;funcret
  5366   006306                     __end_of_setState:
  5367                           	callstack 0
  5368                           
  5369 ;; *************** function _eventInit *****************
  5370 ;; Defined at:
  5371 ;;		line 18 in file "event.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;		None
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5385 ;;      Params:         0       0       0       0       0       0       0       0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5388 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5389 ;;Total ram usage:        0 bytes
  5390 ;; Hardware stack levels used: 1
  5391 ;; Hardware stack levels required when called: 1
  5392 ;; This function calls:
  5393 ;;		_kpInit
  5394 ;; This function is called by:
  5395 ;;		_smInit
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           	psect	text42
  5400   006342                     __ptext42:
  5401                           	callstack 0
  5402   006342                     _eventInit:
  5403                           	callstack 28
  5404   006342                     
  5405                           ;event.c: 19:     kpInit();
  5406   006342  EC88  F031         	call	_kpInit	;wreg free
  5407   006346                     
  5408                           ;event.c: 21:     ev_ant = 0;
  5409   006346  0E00               	movlw	0
  5410   006348  6E3B               	movwf	(_ev_ant+1)^0,c
  5411   00634A  0E00               	movlw	0
  5412   00634C  6E3A               	movwf	_ev_ant^0,c
  5413   00634E                     
  5414                           ;event.c: 22:     key = 1;
  5415   00634E  0E00               	movlw	0
  5416   006350  6E37               	movwf	(_key+1)^0,c
  5417   006352  0E01               	movlw	1
  5418   006354  6E36               	movwf	_key^0,c
  5419   006356  0012               	return		;funcret
  5420   006358                     __end_of_eventInit:
  5421                           	callstack 0
  5422                           
  5423 ;; *************** function _kpInit *****************
  5424 ;; Defined at:
  5425 ;;		line 81 in file "keypad.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;		None
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5442 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5443 ;;Total ram usage:        0 bytes
  5444 ;; Hardware stack levels used: 1
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;;		_eventInit
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text43
  5454   006310                     __ptext43:
  5455                           	callstack 0
  5456   006310                     _kpInit:
  5457                           	callstack 28
  5458   006310                     
  5459                           ;keypad.c: 82:     (*(volatile __near unsigned char*)0xF93) = 0xFF;
  5460   006310  6893               	setf	147,c	;volatile
  5461   006312                     
  5462                           ;keypad.c: 83:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<7));
  5463   006312  9EF1               	bcf	241,7,c	;volatile
  5464   006314                     
  5465                           ;keypad.c: 84:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  5466   006314  0E0E               	movlw	14
  5467   006316  6EC1               	movwf	193,c	;volatile
  5468   006318                     
  5469                           ;keypad.c: 87:     (*(volatile __near unsigned char*)0xF63) = 0x00;
  5470   006318  0E00               	movlw	0
  5471   00631A  6E63               	movwf	99,c	;volatile
  5472   00631C  0012               	return		;funcret
  5473   00631E                     __end_of_kpInit:
  5474                           	callstack 0
  5475                           
  5476 ;; *************** function _serialInit *****************
  5477 ;; Defined at:
  5478 ;;		line 48 in file "serial.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2, status,0
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5492 ;;      Params:         0       0       0       0       0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5495 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used: 1
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_main
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text44
  5506   00639E                     __ptext44:
  5507                           	callstack 0
  5508   00639E                     _serialInit:
  5509                           	callstack 30
  5510   00639E                     
  5511                           ;serial.c: 49:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  5512   00639E  0E2C               	movlw	44
  5513   0063A0  6EAC               	movwf	172,c	;volatile
  5514                           
  5515                           ;serial.c: 50:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  5516   0063A2  0E90               	movlw	144
  5517   0063A4  6EAB               	movwf	171,c	;volatile
  5518                           
  5519                           ;serial.c: 51:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  5520   0063A6  0E08               	movlw	8
  5521   0063A8  6EB8               	movwf	184,c	;volatile
  5522                           
  5523                           ;serial.c: 52:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  5524   0063AA  0E00               	movlw	0
  5525   0063AC  6EB0               	movwf	176,c	;volatile
  5526                           
  5527                           ;serial.c: 53:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  5528   0063AE  0E22               	movlw	34
  5529   0063B0  6EAF               	movwf	175,c	;volatile
  5530   0063B2                     
  5531                           ;serial.c: 54:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<6));
  5532   0063B2  8C94               	bsf	148,6,c	;volatile
  5533   0063B4                     
  5534                           ;serial.c: 55:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<7));
  5535   0063B4  8E94               	bsf	148,7,c	;volatile
  5536   0063B6  0012               	return		;funcret
  5537   0063B8                     __end_of_serialInit:
  5538                           	callstack 0
  5539                           
  5540 ;; *************** function _lcdInit *****************
  5541 ;; Defined at:
  5542 ;;		line 117 in file "lcd.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  i               1    3[COMRAM] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0
  5557 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5558 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5559 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5560 ;;Total ram usage:        1 bytes
  5561 ;; Hardware stack levels used: 1
  5562 ;; Hardware stack levels required when called: 3
  5563 ;; This function calls:
  5564 ;;		_Delay2ms
  5565 ;;		_lcdCommand
  5566 ;;		_lcdCommand4bits
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;;		_outputInit
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text45
  5574   006A26                     __ptext45:
  5575                           	callstack 0
  5576   006A26                     _lcdInit:
  5577                           	callstack 27
  5578   006A26                     
  5579                           ;lcd.c: 118:     unsigned char i;;lcd.c: 120:     ((TRISD) &= ~(1<<(0)));
  5580   006A26  9095               	bcf	149,0,c	;volatile
  5581                           
  5582                           ;lcd.c: 121:     ((TRISD) &= ~(1<<(7)));
  5583   006A28  9E95               	bcf	149,7,c	;volatile
  5584                           
  5585                           ;lcd.c: 122:     ((TRISD) &= ~(1<<(6)));
  5586   006A2A  9C95               	bcf	149,6,c	;volatile
  5587                           
  5588                           ;lcd.c: 123:     ((TRISD) &= ~(1<<(5)));
  5589   006A2C  9A95               	bcf	149,5,c	;volatile
  5590                           
  5591                           ;lcd.c: 124:     ((TRISD) &= ~(1<<(4)));
  5592   006A2E  9895               	bcf	149,4,c	;volatile
  5593                           
  5594                           ;lcd.c: 125:     ((TRISD) &= ~(1<<(2)));
  5595   006A30  9495               	bcf	149,2,c	;volatile
  5596   006A32                     
  5597                           ;lcd.c: 132:     for (i = 0; i < 7; i++)
  5598   006A32  0E00               	movlw	0
  5599   006A34  6E04               	movwf	lcdInit@i^0,c
  5600   006A36                     l3381:
  5601                           
  5602                           ;lcd.c: 133:         Delay2ms();
  5603   006A36  EC7D  F032         	call	_Delay2ms	;wreg free
  5604   006A3A  2A04               	incf	lcdInit@i^0,f,c
  5605   006A3C  0E06               	movlw	6
  5606   006A3E  6404               	cpfsgt	lcdInit@i^0,c
  5607   006A40  EF24  F035         	goto	u2901
  5608   006A44  EF26  F035         	goto	u2900
  5609   006A48                     u2901:
  5610   006A48  EF1B  F035         	goto	l3381
  5611   006A4C                     u2900:
  5612   006A4C                     
  5613                           ;lcd.c: 137:     lcdCommand4bits(0x30, 0);
  5614   006A4C  0E00               	movlw	0
  5615   006A4E  6E01               	movwf	lcdCommand4bits@data^0,c
  5616   006A50  0E30               	movlw	48
  5617   006A52  ECD7  F034         	call	_lcdCommand4bits
  5618                           
  5619                           ;lcd.c: 138:     Delay2ms();
  5620   006A56  EC7D  F032         	call	_Delay2ms	;wreg free
  5621                           
  5622                           ;lcd.c: 141:     lcdCommand4bits(0x30, 0);
  5623   006A5A  0E00               	movlw	0
  5624   006A5C  6E01               	movwf	lcdCommand4bits@data^0,c
  5625   006A5E  0E30               	movlw	48
  5626   006A60  ECD7  F034         	call	_lcdCommand4bits
  5627                           
  5628                           ;lcd.c: 142:     Delay2ms();
  5629   006A64  EC7D  F032         	call	_Delay2ms	;wreg free
  5630                           
  5631                           ;lcd.c: 145:     lcdCommand4bits(0x30, 0);
  5632   006A68  0E00               	movlw	0
  5633   006A6A  6E01               	movwf	lcdCommand4bits@data^0,c
  5634   006A6C  0E30               	movlw	48
  5635   006A6E  ECD7  F034         	call	_lcdCommand4bits
  5636                           
  5637                           ;lcd.c: 146:     Delay2ms();
  5638   006A72  EC7D  F032         	call	_Delay2ms	;wreg free
  5639                           
  5640                           ;lcd.c: 149:     lcdCommand4bits(0x20, 0);
  5641   006A76  0E00               	movlw	0
  5642   006A78  6E01               	movwf	lcdCommand4bits@data^0,c
  5643   006A7A  0E20               	movlw	32
  5644   006A7C  ECD7  F034         	call	_lcdCommand4bits
  5645                           
  5646                           ;lcd.c: 150:     Delay2ms();
  5647   006A80  EC7D  F032         	call	_Delay2ms	;wreg free
  5648                           
  5649                           ;lcd.c: 153:     lcdCommand(0x28);
  5650   006A84  0E28               	movlw	40
  5651   006A86  ECAC  F033         	call	_lcdCommand
  5652                           
  5653                           ;lcd.c: 154:     lcdCommand(0x06);
  5654   006A8A  0E06               	movlw	6
  5655   006A8C  ECAC  F033         	call	_lcdCommand
  5656                           
  5657                           ;lcd.c: 156:     lcdCommand(0x0C);
  5658   006A90  0E0C               	movlw	12
  5659   006A92  ECAC  F033         	call	_lcdCommand
  5660                           
  5661                           ;lcd.c: 157:     lcdCommand(0x01);
  5662   006A96  0E01               	movlw	1
  5663   006A98  ECAC  F033         	call	_lcdCommand
  5664   006A9C  0012               	return		;funcret
  5665   006A9E                     __end_of_lcdInit:
  5666                           	callstack 0
  5667                           
  5668 ;; *************** function _lcdCommand *****************
  5669 ;; Defined at:
  5670 ;;		line 93 in file "lcd.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;  cmd             1    wreg     unsigned char 
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  cmd             1    2[COMRAM] unsigned char 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5684 ;;      Params:         0       0       0       0       0       0       0       0       0
  5685 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5687 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5688 ;;Total ram usage:        1 bytes
  5689 ;; Hardware stack levels used: 1
  5690 ;; Hardware stack levels required when called: 2
  5691 ;; This function calls:
  5692 ;;		_Delay2ms
  5693 ;;		_Delay40us
  5694 ;;		_lcdCommand4bits
  5695 ;; This function is called by:
  5696 ;;		_lcdInit
  5697 ;;		_outputPrint
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text46
  5702   006758                     __ptext46:
  5703                           	callstack 0
  5704   006758                     _lcdCommand:
  5705                           	callstack 26
  5706                           
  5707                           ;incstack = 0
  5708                           ;lcdCommand@cmd stored from wreg
  5709   006758  6E03               	movwf	lcdCommand@cmd^0,c
  5710   00675A                     
  5711                           ;lcd.c: 95:     lcdCommand4bits(cmd, 0);
  5712   00675A  0E00               	movlw	0
  5713   00675C  6E01               	movwf	lcdCommand4bits@data^0,c
  5714   00675E  5003               	movf	lcdCommand@cmd^0,w,c
  5715   006760  ECD7  F034         	call	_lcdCommand4bits
  5716                           
  5717                           ;lcd.c: 96:     lcdCommand4bits(cmd << 4, 0);
  5718   006764  0E00               	movlw	0
  5719   006766  6E01               	movwf	lcdCommand4bits@data^0,c
  5720   006768  3803               	swapf	lcdCommand@cmd^0,w,c
  5721   00676A  0BF0               	andlw	240
  5722   00676C  ECD7  F034         	call	_lcdCommand4bits
  5723   006770                     
  5724                           ;lcd.c: 99:     if ((cmd == 0x02) || (cmd == 0x01)) {
  5725   006770  0E02               	movlw	2
  5726   006772  1803               	xorwf	lcdCommand@cmd^0,w,c
  5727   006774  B4D8               	btfsc	status,2,c
  5728   006776  EFBF  F033         	goto	u2601
  5729   00677A  EFC1  F033         	goto	u2600
  5730   00677E                     u2601:
  5731   00677E  EFC9  F033         	goto	l3087
  5732   006782                     u2600:
  5733   006782  0403               	decf	lcdCommand@cmd^0,w,c
  5734   006784  A4D8               	btfss	status,2,c
  5735   006786  EFC7  F033         	goto	u2611
  5736   00678A  EFC9  F033         	goto	u2610
  5737   00678E                     u2611:
  5738   00678E  EFCD  F033         	goto	l3089
  5739   006792                     u2610:
  5740   006792                     l3087:
  5741                           
  5742                           ;lcd.c: 100:         Delay2ms();
  5743   006792  EC7D  F032         	call	_Delay2ms	;wreg free
  5744                           
  5745                           ;lcd.c: 102:     } else {
  5746   006796  EFCF  F033         	goto	l180
  5747   00679A                     l3089:
  5748                           
  5749                           ;lcd.c: 103:         Delay40us();
  5750   00679A  ECB7  F031         	call	_Delay40us	;wreg free
  5751   00679E                     l180:
  5752   00679E  0012               	return		;funcret
  5753   0067A0                     __end_of_lcdCommand:
  5754                           	callstack 0
  5755                           
  5756 ;; *************** function _lcdCommand4bits *****************
  5757 ;; Defined at:
  5758 ;;		line 52 in file "lcd.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  cmd             1    wreg     unsigned char 
  5761 ;;  data            1    0[COMRAM] unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  cmd             1    1[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5773 ;;      Params:         1       0       0       0       0       0       0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5776 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5777 ;;Total ram usage:        2 bytes
  5778 ;; Hardware stack levels used: 1
  5779 ;; Hardware stack levels required when called: 1
  5780 ;; This function calls:
  5781 ;;		_pulseEnable
  5782 ;; This function is called by:
  5783 ;;		_lcdCommand
  5784 ;;		_lcdData
  5785 ;;		_lcdInit
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           	psect	text47
  5790   0069AE                     __ptext47:
  5791                           	callstack 0
  5792   0069AE                     _lcdCommand4bits:
  5793                           	callstack 25
  5794                           
  5795                           ;incstack = 0
  5796                           ;lcdCommand4bits@cmd stored from wreg
  5797   0069AE  6E02               	movwf	lcdCommand4bits@cmd^0,c
  5798   0069B0                     
  5799                           ;lcd.c: 54:     if (data) {
  5800   0069B0  5001               	movf	lcdCommand4bits@data^0,w,c
  5801   0069B2  B4D8               	btfsc	status,2,c
  5802   0069B4  EFDE  F034         	goto	u2391
  5803   0069B8  EFE0  F034         	goto	u2390
  5804   0069BC                     u2391:
  5805   0069BC  EFE3  F034         	goto	l2907
  5806   0069C0                     u2390:
  5807   0069C0                     
  5808                           ;lcd.c: 55:         ((PORTD) |= (1<<(0)));
  5809   0069C0  8083               	bsf	131,0,c	;volatile
  5810                           
  5811                           ;lcd.c: 56:     } else {
  5812   0069C2  EFE4  F034         	goto	l2909
  5813   0069C6                     l2907:
  5814                           
  5815                           ;lcd.c: 57:         ((PORTD) &= ~(1<<(0)));
  5816   0069C6  9083               	bcf	131,0,c	;volatile
  5817   0069C8                     l2909:
  5818                           
  5819                           ;lcd.c: 63:     if (((cmd) & (1<<(7)))) {
  5820   0069C8  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  5821   0069CA  EFE9  F034         	goto	u2401
  5822   0069CE  EFEB  F034         	goto	u2400
  5823   0069D2                     u2401:
  5824   0069D2  EFEE  F034         	goto	l2913
  5825   0069D6                     u2400:
  5826   0069D6                     
  5827                           ;lcd.c: 64:         ((PORTD) |= (1<<(2)));
  5828   0069D6  8483               	bsf	131,2,c	;volatile
  5829                           
  5830                           ;lcd.c: 65:     } else {
  5831   0069D8  EFEF  F034         	goto	l2915
  5832   0069DC                     l2913:
  5833                           
  5834                           ;lcd.c: 66:         ((PORTD) &= ~(1<<(2)));
  5835   0069DC  9483               	bcf	131,2,c	;volatile
  5836   0069DE                     l2915:
  5837                           
  5838                           ;lcd.c: 70:     if (((cmd) & (1<<(6)))) {
  5839   0069DE  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  5840   0069E0  EFF4  F034         	goto	u2411
  5841   0069E4  EFF6  F034         	goto	u2410
  5842   0069E8                     u2411:
  5843   0069E8  EFF9  F034         	goto	l2919
  5844   0069EC                     u2410:
  5845   0069EC                     
  5846                           ;lcd.c: 71:         ((PORTD) |= (1<<(4)));
  5847   0069EC  8883               	bsf	131,4,c	;volatile
  5848                           
  5849                           ;lcd.c: 72:     } else {
  5850   0069EE  EFFA  F034         	goto	l2921
  5851   0069F2                     l2919:
  5852                           
  5853                           ;lcd.c: 73:         ((PORTD) &= ~(1<<(4)));
  5854   0069F2  9883               	bcf	131,4,c	;volatile
  5855   0069F4                     l2921:
  5856                           
  5857                           ;lcd.c: 77:     if (((cmd) & (1<<(5)))) {
  5858   0069F4  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  5859   0069F6  EFFF  F034         	goto	u2421
  5860   0069FA  EF01  F035         	goto	u2420
  5861   0069FE                     u2421:
  5862   0069FE  EF04  F035         	goto	l2925
  5863   006A02                     u2420:
  5864   006A02                     
  5865                           ;lcd.c: 78:         ((PORTD) |= (1<<(5)));
  5866   006A02  8A83               	bsf	131,5,c	;volatile
  5867                           
  5868                           ;lcd.c: 79:     } else {
  5869   006A04  EF05  F035         	goto	l2927
  5870   006A08                     l2925:
  5871                           
  5872                           ;lcd.c: 80:         ((PORTD) &= ~(1<<(5)));
  5873   006A08  9A83               	bcf	131,5,c	;volatile
  5874   006A0A                     l2927:
  5875                           
  5876                           ;lcd.c: 84:     if (((cmd) & (1<<(4)))) {
  5877   006A0A  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  5878   006A0C  EF0A  F035         	goto	u2431
  5879   006A10  EF0C  F035         	goto	u2430
  5880   006A14                     u2431:
  5881   006A14  EF0F  F035         	goto	l2931
  5882   006A18                     u2430:
  5883   006A18                     
  5884                           ;lcd.c: 85:         ((PORTD) |= (1<<(6)));
  5885   006A18  8C83               	bsf	131,6,c	;volatile
  5886                           
  5887                           ;lcd.c: 86:     } else {
  5888   006A1A  EF10  F035         	goto	l2933
  5889   006A1E                     l2931:
  5890                           
  5891                           ;lcd.c: 87:         ((PORTD) &= ~(1<<(6)));
  5892   006A1E  9C83               	bcf	131,6,c	;volatile
  5893   006A20                     l2933:
  5894                           
  5895                           ;lcd.c: 90:     pulseEnable();
  5896   006A20  EC78  F031         	call	_pulseEnable	;wreg free
  5897   006A24  0012               	return		;funcret
  5898   006A26                     __end_of_lcdCommand4bits:
  5899                           	callstack 0
  5900                           
  5901 ;; *************** function _pulseEnable *****************
  5902 ;; Defined at:
  5903 ;;		line 47 in file "lcd.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;		None
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;		None
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		status,2, status,0
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0
  5918 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5920 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5921 ;;Total ram usage:        0 bytes
  5922 ;; Hardware stack levels used: 1
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_lcdCommand4bits
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text48
  5931   0062F0                     __ptext48:
  5932                           	callstack 0
  5933   0062F0                     _pulseEnable:
  5934                           	callstack 25
  5935   0062F0                     
  5936                           ;lcd.c: 48:     ((PORTD) |= (1<<(7)));
  5937   0062F0  8E83               	bsf	131,7,c	;volatile
  5938                           
  5939                           ;lcd.c: 49:     ((PORTD) &= ~(1<<(7)));
  5940   0062F2  9E83               	bcf	131,7,c	;volatile
  5941   0062F4  0012               	return		;funcret
  5942   0062F6                     __end_of_pulseEnable:
  5943                           	callstack 0
  5944                           
  5945 ;; *************** function _Delay40us *****************
  5946 ;; Defined at:
  5947 ;;		line 36 in file "lcd.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;		None
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  j               1    0[COMRAM] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      void 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5961 ;;      Params:         0       0       0       0       0       0       0       0       0
  5962 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5964 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5965 ;;Total ram usage:        1 bytes
  5966 ;; Hardware stack levels used: 1
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_lcdCommand
  5971 ;;		_lcdData
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text49
  5976   00636E                     __ptext49:
  5977                           	callstack 0
  5978   00636E                     _Delay40us:
  5979                           	callstack 26
  5980   00636E                     
  5981                           ;lcd.c: 37:     unsigned char j;;lcd.c: 38:     for (j = 0; j < 68; j++);
  5982   00636E  0E00               	movlw	0
  5983   006370  6E01               	movwf	Delay40us@j^0,c
  5984   006372                     l2899:
  5985   006372  2A01               	incf	Delay40us@j^0,f,c
  5986   006374  0E43               	movlw	67
  5987   006376  6401               	cpfsgt	Delay40us@j^0,c
  5988   006378  EFC0  F031         	goto	u2381
  5989   00637C  EFC2  F031         	goto	u2380
  5990   006380                     u2381:
  5991   006380  EFB9  F031         	goto	l2899
  5992   006384                     u2380:
  5993   006384  0012               	return		;funcret
  5994   006386                     __end_of_Delay40us:
  5995                           	callstack 0
  5996                           
  5997 ;; *************** function _Delay2ms *****************
  5998 ;; Defined at:
  5999 ;;		line 41 in file "lcd.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  k               1    1[COMRAM] unsigned char 
  6004 ;;  j               1    0[COMRAM] unsigned char 
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      void 
  6007 ;; Registers used:
  6008 ;;		wreg, status,2, status,0
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6014 ;;      Params:         0       0       0       0       0       0       0       0       0
  6015 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6017 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6018 ;;Total ram usage:        2 bytes
  6019 ;; Hardware stack levels used: 1
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		_lcdCommand
  6024 ;;		_lcdInit
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text50
  6029   0064FA                     __ptext50:
  6030                           	callstack 0
  6031   0064FA                     _Delay2ms:
  6032                           	callstack 27
  6033   0064FA                     
  6034                           ;lcd.c: 42:     unsigned char j, k;;lcd.c: 43:     for (j = 0; j < 20; j++)
  6035   0064FA  0E00               	movlw	0
  6036   0064FC  6E01               	movwf	Delay2ms@j^0,c
  6037   0064FE                     l2965:
  6038                           
  6039                           ;lcd.c: 44:         for (k = 0; k < 178; k++);
  6040   0064FE  0E00               	movlw	0
  6041   006500  6E02               	movwf	Delay2ms@k^0,c
  6042   006502                     l2971:
  6043   006502  2A02               	incf	Delay2ms@k^0,f,c
  6044   006504  0EB1               	movlw	177
  6045   006506  6402               	cpfsgt	Delay2ms@k^0,c
  6046   006508  EF88  F032         	goto	u2461
  6047   00650C  EF8A  F032         	goto	u2460
  6048   006510                     u2461:
  6049   006510  EF81  F032         	goto	l2971
  6050   006514                     u2460:
  6051   006514  2A01               	incf	Delay2ms@j^0,f,c
  6052   006516  0E13               	movlw	19
  6053   006518  6401               	cpfsgt	Delay2ms@j^0,c
  6054   00651A  EF91  F032         	goto	u2471
  6055   00651E  EF93  F032         	goto	u2470
  6056   006522                     u2471:
  6057   006522  EF7F  F032         	goto	l2965
  6058   006526                     u2470:
  6059   006526  0012               	return		;funcret
  6060   006528                     __end_of_Delay2ms:
  6061                           	callstack 0
  6062                           
  6063 ;; *************** function _kpDebounce *****************
  6064 ;; Defined at:
  6065 ;;		line 33 in file "keypad.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  portes          5    8[COMRAM] unsigned char [5]
  6070 ;;  bits            5    3[COMRAM] unsigned char [5]
  6071 ;;  j               1   13[COMRAM] unsigned char 
  6072 ;;  i               1    0        unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0
  6083 ;;      Locals:        11       0       0       0       0       0       0       0       0
  6084 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6085 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6086 ;;Total ram usage:       14 bytes
  6087 ;; Hardware stack levels used: 1
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_main
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text51
  6096   006DE4                     __ptext51:
  6097                           	callstack 0
  6098   006DE4                     _kpDebounce:
  6099                           	callstack 30
  6100   006DE4                     
  6101                           ;keypad.c: 42:     unsigned char i, j;;keypad.c: 43:     static unsigned char tempo;;key
      +                          pad.c: 44:     static unsigned char valorNovo = 0x00000;;keypad.c: 45:     static unsign
      +                          ed char valorAntigo = 0x00000;;keypad.c: 46:     char portes[5] = {(*(volatile __near un
      +                          signed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsign
      +                          ed char*)0xF81), (*(volatile __near unsigned char*)0xF81), (*(volatile __near unsigned c
      +                          har*)0xF84)};
  6102   006DE4  EE20  F009         	lfsr	2,kpDebounce@portes
  6103   006DE8  0E04               	movlw	4
  6104   006DEA                     u1271:
  6105   006DEA  6ADE               	clrf	postinc2,c
  6106   006DEC  06E8               	decf	wreg,f,c
  6107   006DEE  E2FD               	bc	u1271
  6108   006DF0  CF81 F009          	movff	3969,kpDebounce@portes	;volatile
  6109   006DF4  CF81 F00A          	movff	3969,kpDebounce@portes+1	;volatile
  6110   006DF8  CF81 F00B          	movff	3969,kpDebounce@portes+2	;volatile
  6111   006DFC  CF81 F00C          	movff	3969,kpDebounce@portes+3	;volatile
  6112   006E00  CF84 F00D          	movff	3972,kpDebounce@portes+4	;volatile
  6113   006E04                     
  6114                           ;keypad.c: 47:     char bits[5] = {2, 3, 5, 4, 1};
  6115   006E04  EE20  F053         	lfsr	2,kpDebounce@F15
  6116   006E08  EE10  F004         	lfsr	1,kpDebounce@bits
  6117   006E0C  0E04               	movlw	4
  6118   006E0E                     u1281:
  6119   006E0E  CFDB FFE3          	movff	plusw2,plusw1
  6120   006E12  06E8               	decf	wreg,f,c
  6121   006E14  E2FC               	bc	u1281
  6122   006E16                     
  6123                           ;keypad.c: 62:     for (j = 0; j < 5; j++) {
  6124   006E16  0E00               	movlw	0
  6125   006E18  6E0E               	movwf	kpDebounce@j^0,c
  6126   006E1A                     l2213:
  6127                           
  6128                           ;keypad.c: 63:             if (!((portes[j]) & (1<<bits[j]))) {
  6129   006E1A  500E               	movf	kpDebounce@j^0,w,c
  6130   006E1C  0F09               	addlw	low kpDebounce@portes
  6131   006E1E  6ED9               	movwf	fsr2l,c
  6132   006E20  6ADA               	clrf	fsr2h,c
  6133   006E22  50DF               	movf	indf2,w,c
  6134   006E24  6E01               	movwf	??_kpDebounce^0,c
  6135   006E26  500E               	movf	kpDebounce@j^0,w,c
  6136   006E28  0F04               	addlw	low kpDebounce@bits
  6137   006E2A  6ED9               	movwf	fsr2l,c
  6138   006E2C  6ADA               	clrf	fsr2h,c
  6139   006E2E  50DF               	movf	indf2,w,c
  6140   006E30  6E02               	movwf	(??_kpDebounce+1)^0,c
  6141   006E32  0E01               	movlw	1
  6142   006E34  6E03               	movwf	(??_kpDebounce+2)^0,c
  6143   006E36  2A02               	incf	(??_kpDebounce+1)^0,f,c
  6144   006E38  EF20  F037         	goto	u1294
  6145   006E3C                     u1295:
  6146   006E3C  90D8               	bcf	status,0,c
  6147   006E3E  3603               	rlcf	(??_kpDebounce+2)^0,f,c
  6148   006E40                     u1294:
  6149   006E40  2E02               	decfsz	(??_kpDebounce+1)^0,f,c
  6150   006E42  EF1E  F037         	goto	u1295
  6151   006E46  5003               	movf	(??_kpDebounce+2)^0,w,c
  6152   006E48  1401               	andwf	??_kpDebounce^0,w,c
  6153   006E4A  0900               	iorlw	0
  6154   006E4C  A4D8               	btfss	status,2,c
  6155   006E4E  EF2B  F037         	goto	u1301
  6156   006E52  EF2D  F037         	goto	u1300
  6157   006E56                     u1301:
  6158   006E56  EF3D  F037         	goto	l2217
  6159   006E5A                     u1300:
  6160   006E5A                     
  6161                           ;keypad.c: 64:                 ((valorNovo) |= (1<<j));
  6162   006E5A  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  6163   006E5E  0E01               	movlw	1
  6164   006E60  6E02               	movwf	(??_kpDebounce+1)^0,c
  6165   006E62  2A01               	incf	??_kpDebounce^0,f,c
  6166   006E64  EF36  F037         	goto	u1314
  6167   006E68                     u1315:
  6168   006E68  90D8               	bcf	status,0,c
  6169   006E6A  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  6170   006E6C                     u1314:
  6171   006E6C  2E01               	decfsz	??_kpDebounce^0,f,c
  6172   006E6E  EF34  F037         	goto	u1315
  6173   006E72  5002               	movf	(??_kpDebounce+1)^0,w,c
  6174   006E74  124B               	iorwf	kpDebounce@valorNovo^0,f,c
  6175                           
  6176                           ;keypad.c: 65:             } else {
  6177   006E76  EF4C  F037         	goto	l2219
  6178   006E7A                     l2217:
  6179                           
  6180                           ;keypad.c: 66:                 ((valorNovo) &= ~(1<<j));
  6181   006E7A  C00E  F001         	movff	kpDebounce@j,??_kpDebounce
  6182   006E7E  0E01               	movlw	1
  6183   006E80  6E02               	movwf	(??_kpDebounce+1)^0,c
  6184   006E82  2A01               	incf	??_kpDebounce^0,f,c
  6185   006E84  EF46  F037         	goto	u1324
  6186   006E88                     u1325:
  6187   006E88  90D8               	bcf	status,0,c
  6188   006E8A  3602               	rlcf	(??_kpDebounce+1)^0,f,c
  6189   006E8C                     u1324:
  6190   006E8C  2E01               	decfsz	??_kpDebounce^0,f,c
  6191   006E8E  EF44  F037         	goto	u1325
  6192   006E92  5002               	movf	(??_kpDebounce+1)^0,w,c
  6193   006E94  0AFF               	xorlw	255
  6194   006E96  164B               	andwf	kpDebounce@valorNovo^0,f,c
  6195   006E98                     l2219:
  6196                           
  6197                           ;keypad.c: 68:         }
  6198   006E98  2A0E               	incf	kpDebounce@j^0,f,c
  6199   006E9A  0E04               	movlw	4
  6200   006E9C  640E               	cpfsgt	kpDebounce@j^0,c
  6201   006E9E  EF53  F037         	goto	u1331
  6202   006EA2  EF55  F037         	goto	u1330
  6203   006EA6                     u1331:
  6204   006EA6  EF0D  F037         	goto	l2213
  6205   006EAA                     u1330:
  6206   006EAA                     
  6207                           ;keypad.c: 69:     if (valorAntigo == valorNovo) {
  6208   006EAA  504B               	movf	kpDebounce@valorNovo^0,w,c
  6209   006EAC  184A               	xorwf	kpDebounce@valorAntigo^0,w,c
  6210   006EAE  A4D8               	btfss	status,2,c
  6211   006EB0  EF5C  F037         	goto	u1341
  6212   006EB4  EF5E  F037         	goto	u1340
  6213   006EB8                     u1341:
  6214   006EB8  EF61  F037         	goto	l2227
  6215   006EBC                     u1340:
  6216   006EBC                     
  6217                           ;keypad.c: 70:         tempo--;
  6218   006EBC  064C               	decf	kpDebounce@tempo^0,f,c
  6219                           
  6220                           ;keypad.c: 71:     } else {
  6221   006EBE  EF65  F037         	goto	l136
  6222   006EC2                     l2227:
  6223                           
  6224                           ;keypad.c: 72:         tempo = 10;
  6225   006EC2  0E0A               	movlw	10
  6226   006EC4  6E4C               	movwf	kpDebounce@tempo^0,c
  6227   006EC6                     
  6228                           ;keypad.c: 73:         valorAntigo = valorNovo;
  6229   006EC6  C04B  F04A         	movff	kpDebounce@valorNovo,kpDebounce@valorAntigo
  6230   006ECA                     l136:
  6231                           
  6232                           ;keypad.c: 75:     if (tempo == 0) {
  6233   006ECA  504C               	movf	kpDebounce@tempo^0,w,c
  6234   006ECC  A4D8               	btfss	status,2,c
  6235   006ECE  EF6B  F037         	goto	u1351
  6236   006ED2  EF6D  F037         	goto	u1350
  6237   006ED6                     u1351:
  6238   006ED6  EF6F  F037         	goto	l138
  6239   006EDA                     u1350:
  6240   006EDA                     
  6241                           ;keypad.c: 76:         valor = valorAntigo;
  6242   006EDA  C04A  F04D         	movff	kpDebounce@valorAntigo,_valor
  6243   006EDE                     l138:
  6244   006EDE  0012               	return		;funcret
  6245   006EE0                     __end_of_kpDebounce:
  6246                           	callstack 0
  6247                           
  6248 ;; *************** function _dsInit *****************
  6249 ;; Defined at:
  6250 ;;		line 17 in file "ds1307.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;		None
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      void 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6264 ;;      Params:         0       0       0       0       0       0       0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6267 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6268 ;;Total ram usage:        0 bytes
  6269 ;; Hardware stack levels used: 1
  6270 ;; Hardware stack levels required when called: 2
  6271 ;; This function calls:
  6272 ;;		_i2cInit
  6273 ;; This function is called by:
  6274 ;;		_main
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text52
  6279   0062EA                     __ptext52:
  6280                           	callstack 0
  6281   0062EA                     _dsInit:
  6282                           	callstack 28
  6283   0062EA                     
  6284                           ;ds1307.c: 18:  i2cInit();
  6285   0062EA  EC12  F032         	call	_i2cInit	;wreg free
  6286   0062EE  0012               	return		;funcret
  6287   0062F0                     __end_of_dsInit:
  6288                           	callstack 0
  6289                           
  6290 ;; *************** function _i2cInit *****************
  6291 ;; Defined at:
  6292 ;;		line 14 in file "soft_i2c.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;		None
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;		None
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      void 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0
  6307 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6309 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6310 ;;Total ram usage:        0 bytes
  6311 ;; Hardware stack levels used: 1
  6312 ;; Hardware stack levels required when called: 1
  6313 ;; This function calls:
  6314 ;;		_pinMode
  6315 ;; This function is called by:
  6316 ;;		_dsInit
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	text53
  6321   006424                     __ptext53:
  6322                           	callstack 0
  6323   006424                     _i2cInit:
  6324                           	callstack 28
  6325   006424                     
  6326                           ;soft_i2c.c: 16:  pinMode(PIN_B0,1);
  6327   006424  0E00               	movlw	0
  6328   006426  6E02               	movwf	(pinMode@pin+1)^0,c
  6329   006428  0E08               	movlw	8
  6330   00642A  6E01               	movwf	pinMode@pin^0,c
  6331   00642C  0E00               	movlw	0
  6332   00642E  6E04               	movwf	(pinMode@type+1)^0,c
  6333   006430  0E01               	movlw	1
  6334   006432  6E03               	movwf	pinMode@type^0,c
  6335   006434  ECF0  F038         	call	_pinMode	;wreg free
  6336                           
  6337                           ;soft_i2c.c: 17:  pinMode(PIN_B1,1);
  6338   006438  0E00               	movlw	0
  6339   00643A  6E02               	movwf	(pinMode@pin+1)^0,c
  6340   00643C  0E09               	movlw	9
  6341   00643E  6E01               	movwf	pinMode@pin^0,c
  6342   006440  0E00               	movlw	0
  6343   006442  6E04               	movwf	(pinMode@type+1)^0,c
  6344   006444  0E01               	movlw	1
  6345   006446  6E03               	movwf	pinMode@type^0,c
  6346   006448  ECF0  F038         	call	_pinMode	;wreg free
  6347   00644C  0012               	return		;funcret
  6348   00644E                     __end_of_i2cInit:
  6349                           	callstack 0
  6350                           
  6351 ;; *************** function _pinMode *****************
  6352 ;; Defined at:
  6353 ;;		line 54 in file "io.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  pin             2    0[COMRAM] int 
  6356 ;;  type            2    2[COMRAM] int 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;		None
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  1    wreg      void 
  6361 ;; Registers used:
  6362 ;;		wreg, status,2, status,0
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6368 ;;      Params:         4       0       0       0       0       0       0       0       0
  6369 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6370 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6371 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6372 ;;Total ram usage:        6 bytes
  6373 ;; Hardware stack levels used: 1
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_i2cInit
  6378 ;;		_read_SCL
  6379 ;;		_read_SDA
  6380 ;;		_clear_SCL
  6381 ;;		_clear_SDA
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text54
  6386   0071E0                     __ptext54:
  6387                           	callstack 0
  6388   0071E0                     _pinMode:
  6389                           	callstack 24
  6390   0071E0                     
  6391                           ;io.c: 56:     if(pin <8){
  6392   0071E0  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6393   0071E2  EFFE  F038         	goto	u2020
  6394   0071E6  5002               	movf	(pinMode@pin+1)^0,w,c
  6395   0071E8  E107               	bnz	u2021
  6396   0071EA  0E08               	movlw	8
  6397   0071EC  5C01               	subwf	pinMode@pin^0,w,c
  6398   0071EE  B0D8               	btfsc	status,0,c
  6399   0071F0  EFFC  F038         	goto	u2021
  6400   0071F4  EFFE  F038         	goto	u2020
  6401   0071F8                     u2021:
  6402   0071F8  EF28  F039         	goto	l2751
  6403   0071FC                     u2020:
  6404   0071FC                     
  6405                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  6406   0071FC  5003               	movf	pinMode@type^0,w,c
  6407   0071FE  1004               	iorwf	(pinMode@type+1)^0,w,c
  6408   007200  B4D8               	btfsc	status,2,c
  6409   007202  EF05  F039         	goto	u2031
  6410   007206  EF07  F039         	goto	u2030
  6411   00720A                     u2031:
  6412   00720A  EF17  F039         	goto	l2749
  6413   00720E                     u2030:
  6414   00720E  C001  F005         	movff	pinMode@pin,??_pinMode
  6415   007212  0E01               	movlw	1
  6416   007214  6E06               	movwf	(??_pinMode+1)^0,c
  6417   007216  2A05               	incf	??_pinMode^0,f,c
  6418   007218  EF10  F039         	goto	u2044
  6419   00721C                     u2045:
  6420   00721C  90D8               	bcf	status,0,c
  6421   00721E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6422   007220                     u2044:
  6423   007220  2E05               	decfsz	??_pinMode^0,f,c
  6424   007222  EF0E  F039         	goto	u2045
  6425   007226  5006               	movf	(??_pinMode+1)^0,w,c
  6426   007228  1292               	iorwf	146,f,c	;volatile
  6427   00722A  EF16  F03A         	goto	l113
  6428   00722E                     l2749:
  6429   00722E  C001  F005         	movff	pinMode@pin,??_pinMode
  6430   007232  0E01               	movlw	1
  6431   007234  6E06               	movwf	(??_pinMode+1)^0,c
  6432   007236  2A05               	incf	??_pinMode^0,f,c
  6433   007238  EF20  F039         	goto	u2054
  6434   00723C                     u2055:
  6435   00723C  90D8               	bcf	status,0,c
  6436   00723E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6437   007240                     u2054:
  6438   007240  2E05               	decfsz	??_pinMode^0,f,c
  6439   007242  EF1E  F039         	goto	u2055
  6440   007246  5006               	movf	(??_pinMode+1)^0,w,c
  6441   007248  0AFF               	xorlw	255
  6442   00724A  1692               	andwf	146,f,c	;volatile
  6443   00724C  EF16  F03A         	goto	l113
  6444   007250                     l2751:
  6445   007250  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6446   007252  EF36  F039         	goto	u2060
  6447   007256  5002               	movf	(pinMode@pin+1)^0,w,c
  6448   007258  E107               	bnz	u2061
  6449   00725A  0E10               	movlw	16
  6450   00725C  5C01               	subwf	pinMode@pin^0,w,c
  6451   00725E  B0D8               	btfsc	status,0,c
  6452   007260  EF34  F039         	goto	u2061
  6453   007264  EF36  F039         	goto	u2060
  6454   007268                     u2061:
  6455   007268  EF64  F039         	goto	l2759
  6456   00726C                     u2060:
  6457   00726C                     
  6458                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  6459   00726C  5003               	movf	pinMode@type^0,w,c
  6460   00726E  1004               	iorwf	(pinMode@type+1)^0,w,c
  6461   007270  B4D8               	btfsc	status,2,c
  6462   007272  EF3D  F039         	goto	u2071
  6463   007276  EF3F  F039         	goto	u2070
  6464   00727A                     u2071:
  6465   00727A  EF51  F039         	goto	l2757
  6466   00727E                     u2070:
  6467   00727E  C001  F005         	movff	pinMode@pin,??_pinMode
  6468   007282  0EF8               	movlw	-8
  6469   007284  2605               	addwf	??_pinMode^0,f,c
  6470   007286  0E01               	movlw	1
  6471   007288  6E06               	movwf	(??_pinMode+1)^0,c
  6472   00728A  2A05               	incf	??_pinMode^0,f,c
  6473   00728C  EF4A  F039         	goto	u2084
  6474   007290                     u2085:
  6475   007290  90D8               	bcf	status,0,c
  6476   007292  3606               	rlcf	(??_pinMode+1)^0,f,c
  6477   007294                     u2084:
  6478   007294  2E05               	decfsz	??_pinMode^0,f,c
  6479   007296  EF48  F039         	goto	u2085
  6480   00729A  5006               	movf	(??_pinMode+1)^0,w,c
  6481   00729C  1293               	iorwf	147,f,c	;volatile
  6482   00729E  EF16  F03A         	goto	l113
  6483   0072A2                     l2757:
  6484   0072A2  C001  F005         	movff	pinMode@pin,??_pinMode
  6485   0072A6  0EF8               	movlw	-8
  6486   0072A8  2605               	addwf	??_pinMode^0,f,c
  6487   0072AA  0E01               	movlw	1
  6488   0072AC  6E06               	movwf	(??_pinMode+1)^0,c
  6489   0072AE  2A05               	incf	??_pinMode^0,f,c
  6490   0072B0  EF5C  F039         	goto	u2094
  6491   0072B4                     u2095:
  6492   0072B4  90D8               	bcf	status,0,c
  6493   0072B6  3606               	rlcf	(??_pinMode+1)^0,f,c
  6494   0072B8                     u2094:
  6495   0072B8  2E05               	decfsz	??_pinMode^0,f,c
  6496   0072BA  EF5A  F039         	goto	u2095
  6497   0072BE  5006               	movf	(??_pinMode+1)^0,w,c
  6498   0072C0  0AFF               	xorlw	255
  6499   0072C2  1693               	andwf	147,f,c	;volatile
  6500   0072C4  EF16  F03A         	goto	l113
  6501   0072C8                     l2759:
  6502   0072C8  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6503   0072CA  EF72  F039         	goto	u2100
  6504   0072CE  5002               	movf	(pinMode@pin+1)^0,w,c
  6505   0072D0  E107               	bnz	u2101
  6506   0072D2  0E18               	movlw	24
  6507   0072D4  5C01               	subwf	pinMode@pin^0,w,c
  6508   0072D6  B0D8               	btfsc	status,0,c
  6509   0072D8  EF70  F039         	goto	u2101
  6510   0072DC  EF72  F039         	goto	u2100
  6511   0072E0                     u2101:
  6512   0072E0  EFA0  F039         	goto	l2767
  6513   0072E4                     u2100:
  6514   0072E4                     
  6515                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  6516   0072E4  5003               	movf	pinMode@type^0,w,c
  6517   0072E6  1004               	iorwf	(pinMode@type+1)^0,w,c
  6518   0072E8  B4D8               	btfsc	status,2,c
  6519   0072EA  EF79  F039         	goto	u2111
  6520   0072EE  EF7B  F039         	goto	u2110
  6521   0072F2                     u2111:
  6522   0072F2  EF8D  F039         	goto	l2765
  6523   0072F6                     u2110:
  6524   0072F6  C001  F005         	movff	pinMode@pin,??_pinMode
  6525   0072FA  0EF0               	movlw	-16
  6526   0072FC  2605               	addwf	??_pinMode^0,f,c
  6527   0072FE  0E01               	movlw	1
  6528   007300  6E06               	movwf	(??_pinMode+1)^0,c
  6529   007302  2A05               	incf	??_pinMode^0,f,c
  6530   007304  EF86  F039         	goto	u2124
  6531   007308                     u2125:
  6532   007308  90D8               	bcf	status,0,c
  6533   00730A  3606               	rlcf	(??_pinMode+1)^0,f,c
  6534   00730C                     u2124:
  6535   00730C  2E05               	decfsz	??_pinMode^0,f,c
  6536   00730E  EF84  F039         	goto	u2125
  6537   007312  5006               	movf	(??_pinMode+1)^0,w,c
  6538   007314  1294               	iorwf	148,f,c	;volatile
  6539   007316  EF16  F03A         	goto	l113
  6540   00731A                     l2765:
  6541   00731A  C001  F005         	movff	pinMode@pin,??_pinMode
  6542   00731E  0EF0               	movlw	-16
  6543   007320  2605               	addwf	??_pinMode^0,f,c
  6544   007322  0E01               	movlw	1
  6545   007324  6E06               	movwf	(??_pinMode+1)^0,c
  6546   007326  2A05               	incf	??_pinMode^0,f,c
  6547   007328  EF98  F039         	goto	u2134
  6548   00732C                     u2135:
  6549   00732C  90D8               	bcf	status,0,c
  6550   00732E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6551   007330                     u2134:
  6552   007330  2E05               	decfsz	??_pinMode^0,f,c
  6553   007332  EF96  F039         	goto	u2135
  6554   007336  5006               	movf	(??_pinMode+1)^0,w,c
  6555   007338  0AFF               	xorlw	255
  6556   00733A  1694               	andwf	148,f,c	;volatile
  6557   00733C  EF16  F03A         	goto	l113
  6558   007340                     l2767:
  6559   007340  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6560   007342  EFAE  F039         	goto	u2140
  6561   007346  5002               	movf	(pinMode@pin+1)^0,w,c
  6562   007348  E107               	bnz	u2141
  6563   00734A  0E20               	movlw	32
  6564   00734C  5C01               	subwf	pinMode@pin^0,w,c
  6565   00734E  B0D8               	btfsc	status,0,c
  6566   007350  EFAC  F039         	goto	u2141
  6567   007354  EFAE  F039         	goto	u2140
  6568   007358                     u2141:
  6569   007358  EFDC  F039         	goto	l2775
  6570   00735C                     u2140:
  6571   00735C                     
  6572                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  6573   00735C  5003               	movf	pinMode@type^0,w,c
  6574   00735E  1004               	iorwf	(pinMode@type+1)^0,w,c
  6575   007360  B4D8               	btfsc	status,2,c
  6576   007362  EFB5  F039         	goto	u2151
  6577   007366  EFB7  F039         	goto	u2150
  6578   00736A                     u2151:
  6579   00736A  EFC9  F039         	goto	l2773
  6580   00736E                     u2150:
  6581   00736E  C001  F005         	movff	pinMode@pin,??_pinMode
  6582   007372  0EE8               	movlw	-24
  6583   007374  2605               	addwf	??_pinMode^0,f,c
  6584   007376  0E01               	movlw	1
  6585   007378  6E06               	movwf	(??_pinMode+1)^0,c
  6586   00737A  2A05               	incf	??_pinMode^0,f,c
  6587   00737C  EFC2  F039         	goto	u2164
  6588   007380                     u2165:
  6589   007380  90D8               	bcf	status,0,c
  6590   007382  3606               	rlcf	(??_pinMode+1)^0,f,c
  6591   007384                     u2164:
  6592   007384  2E05               	decfsz	??_pinMode^0,f,c
  6593   007386  EFC0  F039         	goto	u2165
  6594   00738A  5006               	movf	(??_pinMode+1)^0,w,c
  6595   00738C  1295               	iorwf	149,f,c	;volatile
  6596   00738E  EF16  F03A         	goto	l113
  6597   007392                     l2773:
  6598   007392  C001  F005         	movff	pinMode@pin,??_pinMode
  6599   007396  0EE8               	movlw	-24
  6600   007398  2605               	addwf	??_pinMode^0,f,c
  6601   00739A  0E01               	movlw	1
  6602   00739C  6E06               	movwf	(??_pinMode+1)^0,c
  6603   00739E  2A05               	incf	??_pinMode^0,f,c
  6604   0073A0  EFD4  F039         	goto	u2174
  6605   0073A4                     u2175:
  6606   0073A4  90D8               	bcf	status,0,c
  6607   0073A6  3606               	rlcf	(??_pinMode+1)^0,f,c
  6608   0073A8                     u2174:
  6609   0073A8  2E05               	decfsz	??_pinMode^0,f,c
  6610   0073AA  EFD2  F039         	goto	u2175
  6611   0073AE  5006               	movf	(??_pinMode+1)^0,w,c
  6612   0073B0  0AFF               	xorlw	255
  6613   0073B2  1695               	andwf	149,f,c	;volatile
  6614   0073B4  EF16  F03A         	goto	l113
  6615   0073B8                     l2775:
  6616   0073B8  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6617   0073BA  EFEA  F039         	goto	u2180
  6618   0073BE  5002               	movf	(pinMode@pin+1)^0,w,c
  6619   0073C0  E107               	bnz	u2181
  6620   0073C2  0E28               	movlw	40
  6621   0073C4  5C01               	subwf	pinMode@pin^0,w,c
  6622   0073C6  B0D8               	btfsc	status,0,c
  6623   0073C8  EFE8  F039         	goto	u2181
  6624   0073CC  EFEA  F039         	goto	u2180
  6625   0073D0                     u2181:
  6626   0073D0  EF16  F03A         	goto	l113
  6627   0073D4                     u2180:
  6628   0073D4                     
  6629                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  6630   0073D4  5003               	movf	pinMode@type^0,w,c
  6631   0073D6  1004               	iorwf	(pinMode@type+1)^0,w,c
  6632   0073D8  B4D8               	btfsc	status,2,c
  6633   0073DA  EFF1  F039         	goto	u2191
  6634   0073DE  EFF3  F039         	goto	u2190
  6635   0073E2                     u2191:
  6636   0073E2  EF05  F03A         	goto	l2781
  6637   0073E6                     u2190:
  6638   0073E6  C001  F005         	movff	pinMode@pin,??_pinMode
  6639   0073EA  0EE0               	movlw	-32
  6640   0073EC  2605               	addwf	??_pinMode^0,f,c
  6641   0073EE  0E01               	movlw	1
  6642   0073F0  6E06               	movwf	(??_pinMode+1)^0,c
  6643   0073F2  2A05               	incf	??_pinMode^0,f,c
  6644   0073F4  EFFE  F039         	goto	u2204
  6645   0073F8                     u2205:
  6646   0073F8  90D8               	bcf	status,0,c
  6647   0073FA  3606               	rlcf	(??_pinMode+1)^0,f,c
  6648   0073FC                     u2204:
  6649   0073FC  2E05               	decfsz	??_pinMode^0,f,c
  6650   0073FE  EFFC  F039         	goto	u2205
  6651   007402  5006               	movf	(??_pinMode+1)^0,w,c
  6652   007404  1296               	iorwf	150,f,c	;volatile
  6653   007406  EF16  F03A         	goto	l113
  6654   00740A                     l2781:
  6655   00740A  C001  F005         	movff	pinMode@pin,??_pinMode
  6656   00740E  0EE0               	movlw	-32
  6657   007410  2605               	addwf	??_pinMode^0,f,c
  6658   007412  0E01               	movlw	1
  6659   007414  6E06               	movwf	(??_pinMode+1)^0,c
  6660   007416  2A05               	incf	??_pinMode^0,f,c
  6661   007418  EF10  F03A         	goto	u2214
  6662   00741C                     u2215:
  6663   00741C  90D8               	bcf	status,0,c
  6664   00741E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6665   007420                     u2214:
  6666   007420  2E05               	decfsz	??_pinMode^0,f,c
  6667   007422  EF0E  F03A         	goto	u2215
  6668   007426  5006               	movf	(??_pinMode+1)^0,w,c
  6669   007428  0AFF               	xorlw	255
  6670   00742A  1696               	andwf	150,f,c	;volatile
  6671   00742C                     l113:
  6672   00742C  0012               	return		;funcret
  6673   00742E                     __end_of_pinMode:
  6674                           	callstack 0
  6675                           
  6676                           	psect	rparam
  6677   000000                     
  6678                           	psect	config
  6679                           
  6680                           ;Config register CONFIG1L @ 0x300000
  6681                           ;	unspecified, using default values
  6682                           ;	PLL Prescaler Selection bits
  6683                           ;	PLLDIV = 0x0, unprogrammed default
  6684                           ;	System Clock Postscaler Selection bits
  6685                           ;	CPUDIV = 0x0, unprogrammed default
  6686                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  6687                           ;	USBDIV = 0x0, unprogrammed default
  6688   300000                     	org	3145728
  6689   300000  00                 	db	0
  6690                           
  6691                           ;Config register CONFIG1H @ 0x300001
  6692                           ;	Oscillator Selection bits
  6693                           ;	FOSC = HS, HS oscillator (HS)
  6694                           ;	Fail-Safe Clock Monitor Enable bit
  6695                           ;	FCMEN = 0x0, unprogrammed default
  6696                           ;	Internal/External Oscillator Switchover bit
  6697                           ;	IESO = 0x0, unprogrammed default
  6698   300001                     	org	3145729
  6699   300001  0C                 	db	12
  6700                           
  6701                           ;Config register CONFIG2L @ 0x300002
  6702                           ;	unspecified, using default values
  6703                           ;	Power-up Timer Enable bit
  6704                           ;	PWRT = 0x1, unprogrammed default
  6705                           ;	Brown-out Reset Enable bits
  6706                           ;	BOR = 0x3, unprogrammed default
  6707                           ;	Brown-out Reset Voltage bits
  6708                           ;	BORV = 0x3, unprogrammed default
  6709                           ;	USB Voltage Regulator Enable bit
  6710                           ;	VREGEN = 0x0, unprogrammed default
  6711   300002                     	org	3145730
  6712   300002  1F                 	db	31
  6713                           
  6714                           ;Config register CONFIG2H @ 0x300003
  6715                           ;	Watchdog Timer Enable bit
  6716                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6717                           ;	Watchdog Timer Postscale Select bits
  6718                           ;	WDTPS = 0xF, unprogrammed default
  6719   300003                     	org	3145731
  6720   300003  1E                 	db	30
  6721                           
  6722                           ; Padding undefined space
  6723   300004                     	org	3145732
  6724   300004  FF                 	db	255
  6725                           
  6726                           ;Config register CONFIG3H @ 0x300005
  6727                           ;	CCP2 MUX bit
  6728                           ;	CCP2MX = 0x1, unprogrammed default
  6729                           ;	PORTB A/D Enable bit
  6730                           ;	PBADEN = 0x1, unprogrammed default
  6731                           ;	Low-Power Timer 1 Oscillator Enable bit
  6732                           ;	LPT1OSC = 0x0, unprogrammed default
  6733                           ;	MCLR Pin Enable bit
  6734                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6735   300005                     	org	3145733
  6736   300005  83                 	db	131
  6737                           
  6738                           ;Config register CONFIG4L @ 0x300006
  6739                           ;	Stack Full/Underflow Reset Enable bit
  6740                           ;	STVREN = 0x1, unprogrammed default
  6741                           ;	Single-Supply ICSP Enable bit
  6742                           ;	LVP = OFF, Single-Supply ICSP disabled
  6743                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  6744                           ;	ICPRT = 0x0, unprogrammed default
  6745                           ;	Extended Instruction Set Enable bit
  6746                           ;	XINST = 0x0, unprogrammed default
  6747                           ;	Background Debugger Enable bit
  6748                           ;	DEBUG = 0x1, unprogrammed default
  6749   300006                     	org	3145734
  6750   300006  81                 	db	129
  6751                           
  6752                           ; Padding undefined space
  6753   300007                     	org	3145735
  6754   300007  FF                 	db	255
  6755                           tosu	equ	0xFFF
  6756                           tosh	equ	0xFFE
  6757                           tosl	equ	0xFFD
  6758                           stkptr	equ	0xFFC
  6759                           pclatu	equ	0xFFB
  6760                           pclath	equ	0xFFA
  6761                           pcl	equ	0xFF9
  6762                           tblptru	equ	0xFF8
  6763                           tblptrh	equ	0xFF7
  6764                           tblptrl	equ	0xFF6
  6765                           tablat	equ	0xFF5
  6766                           prodh	equ	0xFF4
  6767                           prodl	equ	0xFF3
  6768                           indf0	equ	0xFEF
  6769                           postinc0	equ	0xFEE
  6770                           postdec0	equ	0xFED
  6771                           preinc0	equ	0xFEC
  6772                           plusw0	equ	0xFEB
  6773                           fsr0h	equ	0xFEA
  6774                           fsr0l	equ	0xFE9
  6775                           wreg	equ	0xFE8
  6776                           indf1	equ	0xFE7
  6777                           postinc1	equ	0xFE6
  6778                           postdec1	equ	0xFE5
  6779                           preinc1	equ	0xFE4
  6780                           plusw1	equ	0xFE3
  6781                           fsr1h	equ	0xFE2
  6782                           fsr1l	equ	0xFE1
  6783                           bsr	equ	0xFE0
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           preinc2	equ	0xFDC
  6788                           plusw2	equ	0xFDB
  6789                           fsr2h	equ	0xFDA
  6790                           fsr2l	equ	0xFD9
  6791                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    16
    Data        27
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      89
    BANK0           160      0      20
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eventRead@prot	PTR unsigned char  size(1) Largest target is 5
		 -> prot(COMRAM[5]), 

    lcdString@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[16]), STR_10(CODE[4]), STR_11(CODE[12]), STR_12(CODE[4]), 
		 -> STR_13(CODE[12]), STR_14(CODE[17]), STR_15(CODE[17]), STR_16(CODE[12]), 
		 -> STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), STR_5(CODE[16]), 
		 -> STR_6(CODE[16]), STR_7(CODE[16]), STR_8(CODE[16]), STR_9(CODE[12]), 

    msgs	PTR unsigned char [2][5] size(2) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[16]), STR_8(CODE[16]), 

    smLoop@prot	PTR unsigned char  size(1) Largest target is 5
		 -> prot(COMRAM[5]), 

    sp__getProt	PTR unsigned char  size(1) Largest target is 5
		 -> prot(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _smLoop->_outputPrint
    _setLanguage->_dsWriteData
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_bcd2dec
    _lcdData->_lcdCommand4bits
    _bcd2dec->_dsReadData
    ___wmul->___awdiv
    _eventRead->_getProt
    _dec2bcd->_bcd2dec
    ___awmod->___awdiv
    _smInit->_varInit
    _varInit->_setAlarmLevel
    _setAlarmLevel->_dsWriteData
    _dsWriteData->_dec2bcd
    _dsReadData->_i2cReadByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits
    _i2cInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  316876
                            _dec2bcd
                             _dsInit
                        _dsWriteData
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _serialInit
                             _smInit
                             _smLoop
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               5     5      0  205312
                                             37 COMRAM     5     5      0
                            _bcd2dec
                            _dec2bcd
                         _dsReadData
                        _dsWriteData
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                            _getProt
                           _getState
                        _outputPrint
                          _resetProt
                      _setAlarmLevel
                        _setLanguage
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28241
                                             31 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _resetProt                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          5     1      4   63233
                                             32 COMRAM     5     1      4
                            _bcd2dec
                         _dsReadData
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            2     0      2    1765
                                              3 COMRAM     2     0      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                              10     7      3    7398
                                             22 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                             ___wmul
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
                      _getAlarmLevel (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getTime                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        4     2      2     654
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _bcd2dec                                              4     2      2    3983
                                             18 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1967
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            9     7      2     370
                                              2 COMRAM     9     7      2
                            _getProt
                             _kpRead
                         _serialRead
                         _serialSend
                            _setProt
 ---------------------------------------------------------------------------------
 (3) _setProt                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getProt                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _dec2bcd                                              6     4      2    3551
                                             22 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
                            _bcd2dec (ARG)
                         _dsReadData (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1512
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1668
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0   76462
                          _eventInit
                           _setState
                            _varInit
 ---------------------------------------------------------------------------------
 (2) _varInit                                              2     2      0   76440
                                             34 COMRAM     2     2      0
                         _dsReadData
                      _setAlarmLevel
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        3     0      3   29197
                                             31 COMRAM     3     0      3
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28219
                                             28 COMRAM     3     1      2
                            _bcd2dec (ARG)
                            _dec2bcd (ARG)
                         _dsReadData (ARG)
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   47243
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (3) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                          15    15      0     180
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (2) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dec2bcd
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     _bcd2dec (ARG)
       ___awdiv
       ___wmul
         ___awdiv (ARG)
       _dsReadData (ARG)
         _i2cReadByte
           _i2c_read_bit
             _I2C_delay
             _clear_SCL
               _digitalWrite
               _pinMode
             _read_SCL
               _digitalRead
               _pinMode
             _read_SDA
               _digitalRead
               _pinMode
           _i2c_stop
             _I2C_delay
             _clear_SDA
               _digitalWrite
               _pinMode
             _read_SCL
             _read_SDA
           _i2c_write_bit
             _I2C_delay
             _clear_SCL
             _clear_SDA
             _read_SCL
             _read_SDA
         _i2cWriteByte
           _i2c_read_bit
           _i2c_start
             _I2C_delay
             _clear_SCL
             _clear_SDA
             _read_SCL
             _read_SDA
           _i2c_stop
           _i2c_write_bit
     _dsReadData (ARG)
   _dsInit
     _i2cInit
       _pinMode
   _dsWriteData
     _bcd2dec (ARG)
     _dec2bcd (ARG)
     _dsReadData (ARG)
     _i2cWriteByte (ARG)
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _serialInit
   _smInit
     _eventInit
       _kpInit
     _setState
     _varInit
       _dsReadData
       _setAlarmLevel
         _dsWriteData
         _getAlarmLevel (ARG)
   _smLoop
     _bcd2dec
     _dec2bcd
     _dsReadData
     _dsWriteData
     _eventRead
       _getProt
       _kpRead
       _serialRead
       _serialSend
       _setProt
     _getAlarmLevel
     _getLanguage
     _getProt
     _getState
     _outputPrint
       _bcd2dec
       _dsReadData
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         ___wmul
         _bcd2dec (ARG)
         _dsReadData (ARG)
         _getAlarmLevel (ARG)
         _getTime (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _resetProt
     _setAlarmLevel
     _setLanguage
       _dsWriteData
     _setState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      29        0.0%
BIGRAM             3EE      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      17        0.0%
BANK7              100      0       0      18        0.0%
BITBANK6           100      0       0      15        0.0%
BANK6              100      0       0      16        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK3            EF      0       0       9        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      14       4       12.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      59       1       93.7%
BITBIGSFR_1         37      0       0      23        0.0%
BITBIGSFRl          20      0       0      27        0.0%
BITBIGSFR_5          C      0       0      19        0.0%
BITBIGSFRhlh         8      0       0      25        0.0%
BITBIGSFR_2          6      0       0      22        0.0%
BITBIGSFRhh          5      0       0      24        0.0%
BITBIGSFRhll         4      0       0      26        0.0%
BITBIGSFR_4          3      0       0      20        0.0%
BITBIGSFR_3          3      0       0      21        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D      28        0.0%
DATA                 0      0      6D      31        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Jun 19 19:13:37 2024

     __end_of_setAlarmLevel 67EA                          l22 69AC                          l25 66CA  
                        l34 6582                          l28 62EE                          l37 6756  
                        l83 7048                          l84 7044                          l79 767A  
                        l88 7044                lcdString@str 0004                ___awdiv@sign 0006  
                        _v0 0046                          _v1 0045                          _v2 0044  
                        _v3 0043                          _de 0049                          _ev 0058  
       ___wmul@multiplicand 000B               ??_i2cReadByte 0009       i2cWriteByte@send_stop 0008  
            i2cReadByte@bit 000B                         l113 742C                         l203 6DE2  
                       l141 631C                         l150 6384                         l118 62E0  
                       l136 6ECA                         l160 62F4                         l138 6EDE  
                       l403 68EA                         l180 679E                         l157 6526  
                       l173 6A24                         l422 683C                         l350 64CC  
                       l342 635A                         l183 63D4                         l416 694A  
                       l353 63B6                         l409 65E2                         l345 636C  
                       l521 71DE                         l362 644C                         l194 6618  
                       l371 6688                         l188 6A9C                         l700 639C  
                       l365 62D8                         l374 6476                         l606 632C  
                       l630 7B90                         l703 62DC                         l519 71D6  
                       l368 6650                         l377 64A0                         l713 65B0  
                       l394 6554                         l387 6710                         l707 6422  
                       l716 63FA                         l567 795A                         l639 7C9E  
                       l672 6BA6                         l681 630E                         l498 6356  
                       l675 62E4                         l692 67C6                         l693 67D8  
                       l678 6304                         l694 67E8                         l687 64EA  
                       l960 6C56                         l688 64F0                         l689 64F8  
                       l697 62E8                         l947 6D1A                         _key 0036  
              ___awmod@sign 000E                         wreg 0FE8            i2c_write_bit@bit 0007  
             ?_i2cWriteByte 0008      i2cWriteByte@send_start 000A             i2cReadByte@nack 000A  
           i2cReadByte@byte 000D                        l2201 6DFC                        l3001 6C90  
                      l2203 6E00                        l3011 6CC8                        l3003 6C98  
                      l2221 6E9A                        l2213 6E1A                        l2205 6E04  
                      l3021 6CF4                        l3013 6CCE                        l3005 6CAA  
                      l3101 6D2A                        l2231 6EDA                        l2223 6EAA  
                      l2215 6E5A                        l2207 6E16                        l3015 6CE4  
                      l3007 6CB2                        l3023 6CFA                        l3031 6BA8  
                      l3111 6D56                        l3103 6D32                        l2225 6EBC  
                      l2217 6E7A                        l3025 6D0A                        l3017 6CEC  
                      l3009 6CBA                        l3041 6BD4                        l3033 6BAC  
                      l3201 70C6                        l3121 6DD8                        l3113 6D6A  
                      l3105 6D38                        l2227 6EC2                        l2219 6E98  
                      l3027 6D12                        l3019 6CEE                        l3051 6C0C  
                      l3043 6BDC                        l3035 6BBA                        l3131 64A6  
                      l3211 70F2                        l3203 70CE                        l3115 6D86  
                      l3107 6D44                        l2229 6EC6                        l3061 6C46  
                      l3053 6C22                        l3045 6BEE                        l3037 6BC2  
                      l3133 64B4                        l3125 635A                        l3221 7128  
                      l3213 70F8                        l3205 70DC                        l3117 6D8A  
                      l3301 77FA                        l2255 639E                        l3071 6712  
                      l3063 6C4E                        l3055 6C2A                        l3047 6BF6  
                      l3039 6BC6                        l3143 62DA                        l3135 64B8  
                      l3127 6368                        l3151 640C                        l3231 7164  
                      l3223 7134                        l3215 7108                        l3207 70E4  
                      l3119 6DA8                        l3311 7842                        l3303 7800  
                      l2193 6DE4                        l3081 675A                        l2257 63B2  
                      l3073 674E                        l3057 6C30                        l3049 6BFE  
                      l3137 64C6                        l3129 64A2                        l3153 641E  
                      l3241 71BA                        l3233 716C                        l3225 7140  
                      l3217 710E                        l3209 70EC                        l3161 62E6  
                      l3321 7890                        l3313 7848                        l3305 781C  
                      l3401 7998                        l2195 6DF0                        l3083 6770  
                      l2259 63B4                        l1811 6318                        l3171 67CA  
                      l3059 6C36                        l3139 64CA                        l3147 63FE  
                      l3243 71CA                        l3227 714C                        l3067 668A  
                      l3155 6306                        l3091 65E4                        l3331 78F2  
                      l3323 78A4                        l3315 786A                        l3307 7822  
                      l3251 7690                        l3411 79F2                        l3403 79A8  
                      l2197 6DF4                        l3085 6782                        l1805 6310  
                      l2701 763C                        l3165 67A0                        l3341 6B24  
                      l3173 694C                        l3077 62DE                        l3149 640A  
                      l3229 7158                        l3237 7176                        l3245 71D6  
                      l3181 704A                        l3157 64CE                        l3093 65E8  
                      l3333 7920                        l3317 7870                        l3325 78B0  
                      l3309 782E                        l3253 7696                        l3261 76DE  
                      l3501 7C86                        l3421 7A28                        l3413 79F8  
                      l3405 79C8                        l2199 6DF8                        l3087 6792  
                      l1807 6312                        l3351 6300                        l2703 765C  
                      l3167 67B0                        l3343 6B34                        l3175 69A4  
                      l3239 71B4                        l3191 708C                        l3183 7052  
                      l3159 64E0                        l3095 65F8                        l3335 7926  
                      l3327 78C4                        l3319 7884                        l3271 7724  
                      l3263 76F0                        l3255 76B8                        l3431 7A90  
                      l3423 7A48                        l3415 7A0A                        l3407 79DA  
                      l3511 6AB6                        l3089 679A                        l1809 6314  
                      l2721 6F6C                        l2713 6F24                        l2705 6EE0  
                      l2801 66E0                        l3169 67B4                        l3345 6B44  
                      l3193 709A                        l3185 705E                        l3097 65FC  
                      l3337 794E                        l3329 78CA                        l3281 7774  
                      l3273 7740                        l3265 76F6                        l3257 76BE  
                      l3249 767C                        l3361 6596                        l3353 6388  
                      l3441 7AC8                        l3433 7AA2                        l3425 7A58  
                      l3417 7A10                        l3409 79E0                        l3513 6B08  
                      l3179 6424                        l3371 62EA                        l2731 6FD0  
                      l2723 6F88                        l2715 6F40                        l2707 6EFC  
                      l2811 6704                        l2803 66E4                        l3347 6B54  
                      l3339 6B18                        l3195 70A2                        l3187 7076  
                      l3099 6D1C                        l3291 77C0                        l3283 777A  
                      l3275 7746                        l3267 7718                        l3259 76D2  
                      l3363 6598                        l3355 638E                        l3451 7B0A  
                      l3443 7ADA                        l3435 7AA8                        l3427 7A78  
                      l3419 7A18                        l3515 6B0C                        l3507 6A9E  
                      l2901 6374                        l3381 6A36                        l3373 6A26  
                      l2821 6530                        l2813 6708                        l2805 66F8  
                      l3349 6B86                        l3197 70B0                        l3189 7084  
                      l3293 77C6                        l3277 7752                        l3269 771E  
                      l3285 7786                        l3365 65A8                        l3357 6584  
                      l3461 7B40                        l3453 7B10                        l3445 7AE0  
                      l3437 7ABA                        l3429 7A8A                        l3509 6AB2  
                      l2751 7250                        l2743 71E0                        l2911 69D6  
                      l2903 69B0                        l3383 6A3A                        l3375 6A32  
                      l2671 747C                        l2823 6544                        l2831 6896  
                      l2815 670C                        l2807 66FC                        l3391 6322  
                      l3199 70B8                        l3367 62E2                        l3295 77CC  
                      l3287 7798                        l3279 7758                        l3359 658C  
                      l3471 7B98                        l3463 7B4C                        l3455 7B14  
                      l3447 7AF2                        l3439 7AC0                        l2761 72E4  
                      l2753 726C                        l2745 71FC                        l2921 69F4  
                      l2913 69DC                        l2905 69C0                        l3385 6A3C  
                      l2681 7516                        l2673 749E                        l2665 742E  
                      l2737 6FFC                        l2729 6FB4                        l2825 6548  
                      l2817 6528                        l2841 68CA                        l2833 68A6  
                      l2809 6700                        l3393 6328                        l3297 77E8  
                      l3289 779E                        l3481 7BDA                        l3473 7BAA  
                      l3465 7B5E                        l3457 7B24                        l3449 7AF8  
                      l2771 736E                        l2763 72F6                        l2755 727E  
                      l2747 720E                        l2931 6A1E                        l2923 6A02  
                      l2915 69DE                        l2907 69C6                        l3387 6A4C  
                      l2691 75AA                        l2683 7532                        l2675 74BA  
                      l2667 744A                        l2739 7018                        l2851 65B2  
                      l2827 654C                        l2819 652C                        l2843 68DA  
                      l2835 68AE                        l3299 77EE                        l3491 7C10  
                      l3483 7BE0                        l3475 7BB0                        l3467 7B64  
                      l3459 7B30                        l3395 795C                        l2781 740A  
                      l2773 7392                        l2765 731A                        l2757 72A2  
                      l2749 722E                        l2933 6A20                        l2925 6A08  
                      l2917 69EC                        l2909 69C8                        l2693 75C4  
                      l2685 754C                        l2677 74D4                        l2669 745C  
                      l2861 65D8                        l2853 65B6                        l2829 6550  
                      l2845 68DE                        l2837 68B2                        l3389 631E  
                      l3485 7BE8                        l3477 7BC2                        l3469 7B80  
                      l3397 7968                        l2775 73B8                        l2767 7340  
                      l2759 72C8                        l2927 6A0A                        l2919 69F2  
                      l2695 75E4                        l2687 756C                        l2679 74F4  
                      l2791 644E                        l2783 661A                        l2863 65E0  
                      l2855 65BA                        l2847 68E2                        l2839 68B6  
                      l2951 6826                        l2943 67F8                        l2871 6902  
                      l2935 6558                        l3487 7BFA                        l3479 7BC8  
                      l3399 7978                        l2777 73D4                        l2769 735C  
                      l2929 6A18                        l2697 7606                        l2689 758E  
                      l2857 65CE                        l2793 6478                        l2849 68E6  
                      l2953 6836                        l2945 6806                        l2937 67EC  
                      l2881 6920                        l3489 7C00                        l3497 7C4A  
                      l2779 73E6                        l2971 6502                        l2795 62F0  
                      l1995 6342                        l2699 7622                        l2787 6652  
                      l2859 65D4                        l2955 683A                        l2947 680A  
                      l2883 6922                        l2867 68EE                        l3499 7C7A  
                      l2973 6504                        l2965 64FE                        l2893 636E  
                      l1997 6346                        l2949 6820                        l2797 66CC  
                      l2885 6932                        l2877 6906                        l2869 68FE  
                      l2981 63D6                        l2975 6514                        l2959 64FA  
                      l1999 634E                        l2799 66DC                        l2887 6936  
                      l2879 691C                        l2991 6C6A                        l2983 63F2  
                      l2977 6516                        l2889 6946                        l2993 6C72  
                      l2899 6372                        l2995 6C76                        l2987 6C58  
                      l2979 63BA                        l2997 6C84                        l2989 6C5C  
                      l2999 6C8C                        STR_1 7D13                        STR_2 7CE3  
                      STR_3 7D13                        STR_4 7CE3                        STR_5 7CF3  
                      STR_6 7CD3                        STR_7 7D03                        STR_8 7D23  
                      STR_9 7D33                        u2000 7018                        u2001 7014  
                      u2100 72E4                        u2020 71FC                        u1300 6E5A  
                      u2101 72E0                        u2021 71F8                        u1301 6E56  
                      u2110 72F6                        u2030 720E                        u2014 702E  
                      u2111 72F2                        u2031 720A                        u2015 702A  
                      u3000 7ABA                        u3001 7AB6                        u1330 6EAA  
                      u1314 6E6C                        u3010 7ADA                        u1331 6EA6  
                      u1315 6E68                        u3011 7AD6                        u2204 73FC  
                      u2140 735C                        u2124 730C                        u2060 726C  
                      u2044 7220                        u1340 6EBC                        u1324 6E8C  
                      u2220 664E                        u2300 68CA                        u3100 7BDA  
                      u3020 7AF2                        u2205 73F8                        u2141 7358  
                      u2125 7308                        u2061 7268                        u2045 721C  
                      u1341 6EB8                        u1325 6E88                        u2221 6648  
                      u2301 68C6                        u3101 7BD6                        u3021 7AEE  
                      _LATA 0F89                        u2214 7420                        u2150 736E  
                      u2134 7330                        u2070 727E                        u2054 7240  
                      u1350 6EDA                        u2230 6650                        u2310 68DA  
                      u3110 7BFA                        u3030 7B0A                        u2215 741C  
                      u2151 736A                        u2135 732C                        u2071 727A  
                      u2055 723C                        u1351 6ED6                        u1271 6DEA  
                      u2311 68D6                        u3111 7BF6                        u3031 7B06  
                      u2400 69D6                        u2240 6686                        u2320 65CE  
                      u3120 7C10                        u3040 7B24                        u1281 6E0E  
                      u2401 69D2                        u2241 6680                        u2321 65CA  
                      u3121 7C0C                        u3041 7B20                        u2410 69EC  
                      u2250 6688                        u2330 68FE                        u3050 7B40  
                      u2411 69E8                        u2331 68FA                        u3051 7B3C  
                      u2180 73D4                        u2164 7384                        u2084 7294  
                      u2420 6A02                        u2260 66DC                        u2340 6916  
                      u2500 6CAA                        u3060 7B5E                        u2181 73D0  
                      u2165 7380                        u2085 7290                        u2421 69FE  
                      u2261 66D8                        u2341 6910                        u2501 6CA6  
                      u3061 7B5A                        u2190 73E6                        u2174 73A8  
                      u2094 72B8                        u1294 6E40                        u2430 6A18  
                      u2270 66F8                        u2350 6918                        u2510 6CC8  
                      u3070 7B80                        u2191 73E2                        u2175 73A4  
                      u2095 72B4                        u1295 6E3C                        u2431 6A14  
                      u2271 66F4                        u2511 6CC4                        u3071 7B7C  
                      u2600 6782                        u1800 7532                        u1720 744A  
                      u2280 6544                        u2440 6820                        u2360 6932  
                      u2520 6CE4                        u3080 7BAA                        u2601 677E  
                      u1801 752E                        u1721 7446                        u2281 6540  
                      u2441 681C                        u2361 692E                        u2521 6CE0  
                      u3081 7BA6                        u2610 6792                        u1810 754C  
                      u1730 745C                        u2290 68A6                        u2450 6836  
                      u2370 6946                        u2530 6D0A                        u3090 7BC2  
                      u2611 678E                        u1811 7548                        u1731 7458  
                      u2291 68A2                        u2451 6832                        u2371 6942  
                      u2531 6D06                        u3091 7BBE                        u2460 6514  
                      u2380 6384                        u2540 6BBA                        u2700 64E0  
                      u2620 6618                        u2461 6510                        u2381 6380  
                      u2541 6BB6                        u2701 64DC                        u2621 6614  
                      u2470 6526                        u2390 69C0                        u2710 67B0  
                      u2550 6BD4                        u2630 6D2A                        u2471 6522  
                      u2391 69BC                        u2711 67AC                        u2551 6BD0  
                      u2631 6D26                        u1904 764E                        u1840 75AA  
                      u1824 755E                        u1760 74BA                        u1744 746E  
                      u1920 6EFC                        u2480 6C6A                        u2560 6BEE  
                      u2800 71CA                        u2720 7076                        u2640 6D52  
                      u1905 764A                        u1841 75A6                        u1825 755A  
                      u1761 74B6                        u1745 746A                        u1921 6EF8  
                      u2481 6C66                        u2561 6BEA                        u2801 71C6  
                      u2721 7072                        u2641 6D4E                        u1914 766E  
                      u1850 75C4                        u1834 757E                        u1770 74D4  
                      u1754 748E                        u2490 6C84                        u2570 6C0C  
                      u2730 7084                        u2650 6DA8                        u2810 7690  
                      u1915 766A                        u1851 75C0                        u1835 757A  
                      u1771 74D0                        u1755 748A                        u2491 6C80  
                      u2571 6C08                        u2731 7080                        u2651 6DA4  
                      u2811 768C                        u2900 6A4C                        u1940 6F40  
                      u2580 6C22                        u2660 6368                        u2740 709A  
                      u2820 76F0                        u2901 6A48                        u1941 6F3C  
                      u2581 6C1E                        u2661 6364                        u2741 7096  
                      u2821 76EC                        u1934 6F0E                        u2590 6C46  
                      u2670 64B4                        u2750 70B0                        u2830 7798  
                      u2910 7978                        u1935 6F0A                        u2591 6C42  
                      u2671 64B0                        u2751 70AC                        u2831 7794  
                      u2911 7974                        u1880 7622                        u1864 75D6  
                      u1784 74E6                        u1960 6F88                        u2680 64C6  
                      u2760 70C6                        u2840 7842                        u2920 79A8  
                      u1881 761E                        u1865 75D2                        u1785 74E2  
                      u1961 6F84                        u2681 64C2                        u2761 70C2  
                      u2841 783E                        u2921 79A4                        u1890 763C  
                      u1874 75F6                        u1794 7506                        u1954 6F56  
                      u2690 641E                        u2770 70DC                        u2850 7884  
                      u2930 79DA                        u1891 7638                        u1875 75F2  
                      u1795 7502                        u1955 6F52                        u2691 641A  
                      u2771 70D8                        u2851 7880                        u2931 79D6  
                      u1980 6FD0                        u2780 7108                        u2860 78A4  
                      u2940 79F2                        u1981 6FCC                        u2781 7104  
                      u2861 78A0                        u2941 79EE                        u1974 6F9E  
                      u2790 7124                        u2870 78C4                        u2950 7A0A  
                      u1975 6F9A                        u2791 7120                        u2871 78C0  
                      u2951 7A06                        u2880 6B86                        u2960 7A28  
                      u2881 6B82                        u2961 7A24                        u1994 6FE6  
                      u2890 65A8                        u2970 7A58                        u1995 6FE2  
                      u2891 65A4                        u2971 7A54                        u2980 7A8A  
                      u2981 7A86                        u2990 7AA2                        u2991 7A9E  
               _outputPrint 767C                        _main 6A9E                        _msgs 0060  
                      _time 0030                        _prot 004E                        fsr2h 0FDA  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
             ?_i2c_read_bit 0001                        prodh 0FF4                        prodl 0FF3  
                      start 0002                ___param_bank 0000             __end_of_i2cInit 644E  
            _alarmLevelHigh 003E             __end_of_bcd2dec 66CC                       ?_main 0001  
           __end_of_dec2bcd 69AE             __end_of___awdiv 6D1C            ?_lcdCommand4bits 0001  
                     STR_10 7D3B                       STR_11 7D33                       STR_12 7D3B  
                     STR_13 7D33                       STR_14 7CC2                       STR_15 7CB1  
                     STR_16 7D33             __end_of___awmod 6C58             ___awdiv@divisor 0003  
           ___awdiv@counter 0005                       _PORTA 0F80                       _PORTB 0F81  
                     _PORTC 0F82                       _PORTD 0F83                       _PORTE 0F84  
                     _TRISA 0F92                       _TRISB 0F93                       _TRISC 0F94  
                     _TRISD 0F95                       _TRISE 0F96             __end_of_lcdData 63D6  
           __end_of_lcdInit 6A9E              ??_i2cWriteByte 000A             __end_of_getTime 6310  
           __end_of_getProt 62DE         __end_of_i2cReadByte 683E          outputPrint@numTela 0021  
                     _index 003C              setProt@newChar 0001             __end_of_pinMode 742E  
                     _valor 004D                       _state 0040             __end_of_varInit 6BA8  
              dec2bcd@value 0017             __end_of_setProt 6424                       tablat 0FF5  
         __end_of_I2C_delay 62DA               _i2c_write_bit 6894                       plusw1 0FE3  
                     plusw2 0FDB                       status 0FD8              ??_i2c_read_bit 0007  
          __end_of_Delay2ms 6528        __end_of_digitalWrite 767C             __initialization 683E  
              __end_of_main 6B18             i2cWriteByte@bit 000B            __end_of_i2c_stop 6556  
              ?_setLanguage 0001                      ??_main 002B               __activetblptr 0002  
               eventRead@ev 0007            ___awdiv@dividend 0001              ?_i2c_write_bit 0001  
            getAlarmLevel@l 0003                   ??_i2cInit 0007       __end_of_getAlarmLevel 64FA  
        dsWriteData@address 001D            __end_of_getState 62E6                   ??_bcd2dec 0015  
                    _dTimer 0034                   ??_dec2bcd 0019                      ___wmul 63D6  
                 ??___awdiv 0005                   ??___awmod 000D                      _dsInit 62EA  
                    _lcdInt 6D1C                      _kpInit 6310                      _kpRead 62DE  
          __end_of_read_SDA 668A            __end_of_read_SCL 6652                      _ev_ant 003A  
                    _smInit 631E                      clear_0 6884                      _smLoop 795C  
          ___awdiv@quotient 0007             ___awmod@divisor 000B                   ??_lcdData 0003  
                    isa$std 0001                 _i2cReadByte 67EA                   ??_lcdInit 0004  
           ___awmod@counter 000D                   ??_getTime 0003                   ??_getProt 0003  
          __end_of_setState 6306                __pdataCOMRAM 0053                   ??_pinMode 0005  
              __mediumconst 7CA0                   ??_varInit 0023                   ??_setProt 0001  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
         __end_of_Delay40us 6386                  __accesstop 0060     __end_of__initialization 688A  
             ___rparam_used 0001                ?_pulseEnable 0001                 pinMode@type 0003  
      __end_of_i2cWriteByte 694C              __pcstackCOMRAM 0001                __pidataBANK0 632E  
          i2cWriteByte@byte 0009           __end_of_i2c_start 6712        __end_of_i2c_read_bit 65E4  
                 ?_Delay2ms 0001             ??_i2c_write_bit 0007                ?_outputPrint 0021  
                 ?_i2c_stop 0001                  _dsReadData 6712            dsReadData@result 0011  
                _lcdCommand 6758                     ?___wmul 0009                     ?_dsInit 0001  
                   ?_lcdInt 0017                     ?_kpInit 0001                     ?_kpRead 0001  
              eventRead@key 000A                     ?_smInit 0001                     ?_smLoop 0001  
                _kpDebounce 6DE4                  ??_Delay2ms 0001        i2cReadByte@send_stop 0008  
           getAlarmLevel@lh 0001                _digitalWrite 742E                   ?_getState 0001  
         __end_of_clear_SDA 64A2           __end_of_clear_SCL 6478                   ?_read_SDA 0001  
                 ?_read_SCL 0001                  ??_i2c_stop 0007                     _i2cInit 6424  
                 _I2C_delay 62D8                     __Hparam 0000                   ?_setState 0001  
                   __Lparam 0000           __end_of_lcdString 661A             kpDebounce@tempo 004C  
                   _bcd2dec 668A                     _dec2bcd 694C                  _estado_ant 0041  
                   ___awdiv 6C58                     ___awmod 6BA8                     __pcinit 683E  
            serialRead@resp 0001                     _lcdData 63B8                     __ramtop 0800  
                   _lcdInit 6A26                     __ptext0 6A9E                     __ptext1 795C  
                   __ptext2 6386                     __ptext3 6584                     _getTime 6306  
                   __ptext4 767C                     __ptext5 65E4                     __ptext6 6D1C  
                   __ptext7 63B8                     __ptext8 6306                     __ptext9 62E6  
                   _getProt 62DA           __end_of_eventInit 6358           __end_of_eventRead 71E0  
                   _display 0047                     _key_ant 0038                     _pinMode 71E0  
          ___awmod@dividend 0009                 serialSend@c 0001                     _varInit 6B18  
                   _setProt 63FC                     lcdInt@i 001F                     lcdInt@j 001B  
                ??_getState 0001                   Delay2ms@j 0001                   Delay2ms@k 0002  
                   _started 0048         kpDebounce@valorNovo 004B        end_of_initialization 688A  
                ??_read_SDA 0007                  ??_read_SCL 0007           __end_of_resetProt 65B2  
             __Lmediumconst 7CA0                 ?_dsReadData 000E              digitalRead@pin 0001  
                ?_I2C_delay 0001                  ??_setState 0001                  _serialInit 639E  
                _serialRead 64A2                  _serialSend 6358                     postdec1 0FE5  
                   postdec2 0FDD                 ?_lcdCommand 0001                     postinc0 0FEE  
                   postinc2 0FDE               _setAlarmLevel 67A0               ??_digitalRead 0003  
             ??_getLanguage 0001                 ?_kpDebounce 0001                ?_i2cReadByte 0008  
           i2c_read_bit@bit 0007              _valor@ssd$F319 7CA1                  _prot_ready 0042  
              _i2cWriteByte 68EC               ??_dsWriteData 001F                   _Delay40us 636E  
              _i2c_read_bit 65B2              ?_setAlarmLevel 0020               _alarmLevelLow 003D  
         outputPrint@idioma 0023              __end_of___wmul 63FC              __end_of_dsInit 62F0  
             __pidataCOMRAM 62F7              __end_of_lcdInt 6DE4              __end_of_kpInit 631E  
            __end_of_kpRead 62E2      __end_of_valor@ssd$F319 7CB1              __end_of_smInit 632E  
            __end_of_smLoop 7CA0         start_initialization 683E         __end_of_digitalRead 704A  
       __end_of_getLanguage 62EA                   _i2c_start 66CC                  ?_Delay40us 0001  
              smLoop@evento 002A           ??_lcdCommand4bits 0002                 ??_I2C_delay 0001  
       __end_of_dsWriteData 6584                 ?_serialInit 0001                 ?_serialRead 0001  
               ?_serialSend 0001                    ??___wmul 000D                    ??_dsInit 0007  
                  ??_lcdInt 001A                    ??_kpInit 0001                    ??_kpRead 0001  
               __pdataBANK0 0060                    ??_smInit 0025                    ??_smLoop 0026  
         dsReadData@address 000E                   _dTimerMax 0032                 __pbssCOMRAM 002B  
                pinMode@pin 0001                  ?_i2c_start 0001            setState@newState 0001  
     __end_of_i2c_write_bit 68EC                  smLoop@prot 0029                    ?_i2cInit 0001  
             _getAlarmLevel 64CE             ??_setAlarmLevel 0023                   _clear_SDA 6478  
                 _clear_SCL 644E                    ?_bcd2dec 0013               __pmediumconst 7CA0  
                  ?_dec2bcd 0017                    ?___awdiv 0001                    ?___awmod 0009  
                 _lcdString 65E4                 _digitalRead 6EE0                 _getLanguage 62E6  
                  ?_lcdData 0001               ??_setLanguage 0020                    ?_lcdInit 0001  
                  ?_getTime 0001                    ?_getProt 0001               lcdCommand@cmd 0003  
             eventRead@data 0009               eventRead@prot 0006                    ?_pinMode 0001  
                  ?_varInit 0001                    ?_setProt 0001              kpDebounce@bits 0004  
                 _eventInit 6342                   _eventRead 704A                  resetProt@i 0001  
               _dsWriteData 6556  setAlarmLevel@newAlarmLevel 0020                 ??_Delay40us 0001  
            ___wmul@product 000D                ??_dsReadData 0010              ?_getAlarmLevel 0001  
             lcdInt@divisor 001D                  ?_clear_SDA 0001                  ?_clear_SCL 0001  
                 _resetProt 6584                   lcdInt@val 0017                ??_lcdCommand 0003  
                ?_lcdString 0004                ??_kpDebounce 0001           ___wmul@multiplier 0009  
     kpDebounce@valorAntigo 004A                    _Delay2ms 64FA          __end_of_dsReadData 6758  
                ?_eventInit 0001                  ?_eventRead 0003                 ??_i2c_start 0007  
       __end_of_setLanguage 639E                   copy_data0 6852                   copy_data1 6872  
        __end_of_lcdCommand 67A0                lcdData@valor 0003                    _i2c_stop 6528  
        __end_of_kpDebounce 6EE0                    __Hrparam 0000                  ?_resetProt 0001  
             ??_pulseEnable 0001                    __Lrparam 0000            dsWriteData@value 001F  
          kpDebounce@portes 0009             _lcdCommand4bits 69AE                    __ptext10 64CE  
                  __ptext11 668A                    __ptext20 694C                    __ptext12 63D6  
                  __ptext21 6BA8                    __ptext13 62E2                    __ptext30 67EA  
                  __ptext22 6C58                    __ptext14 704A                    __ptext31 6894  
                  __ptext23 631E                    __ptext15 63FC                    __ptext40 62D8  
                  __ptext32 6528                    __ptext24 6B18                    __ptext16 6358  
                  __ptext41 62FE                    __ptext33 6478                    __ptext25 67A0  
                  __ptext17 64A2                    __ptext50 64FA                    __ptext42 6342  
                  __ptext34 65B2                    __ptext26 6556                    __ptext18 62DE  
                  __ptext51 6DE4                    __ptext43 6310                    __ptext35 6652  
                  __ptext27 6712                    __ptext19 62DA                    __ptext52 62EA  
                  __ptext44 639E                    __ptext36 661A                    __ptext28 68EC  
                  __ptext53 6424                    __ptext45 6A26                    __ptext37 6EE0  
                  __ptext29 66CC                    __ptext54 71E0                    __ptext46 6758  
                  __ptext38 644E                    __ptext47 69AE                    __ptext39 742E  
                  __ptext48 62F0                    __ptext49 636E                    _getState 62E2  
               _smLoop$1412 0027               kpDebounce@F13 002B               kpDebounce@F15 0053  
             ??_outputPrint 0025                    _language 003F             ??_getAlarmLevel 0003  
                  _read_SDA 6652                    _read_SCL 661A                lcdInt@digNum 0019  
               ??_clear_SDA 0007                 ??_clear_SCL 0007                ??_serialInit 0001  
              ??_serialRead 0001                ??_serialSend 0001                    _setState 62FE  
                Delay40us@j 0001             setAlarmLevel@lh 0022                    lcdInit@i 0004  
                  isa$xinst 0000                 ??_lcdString 0006         __end_of_pulseEnable 62F6  
               _setLanguage 6386      setLanguage@newLanguage 0020                 ??_eventInit 0001  
               ??_eventRead 0005               ?_digitalWrite 0001          __end_of_serialInit 63B8  
        __end_of_serialRead 64CE          __end_of_serialSend 636E           digitalWrite@value 0003  
               ??_resetProt 0001         __end_of_outputPrint 795C                bcd2dec@value 0013  
              ?_digitalRead 0001                ?_getLanguage 0001     __end_of_lcdCommand4bits 6A26  
               kpDebounce@j 000E              ??_digitalWrite 0005             digitalWrite@pin 0001  
              ?_dsWriteData 001D         lcdCommand4bits@data 0001          lcdCommand4bits@cmd 0002  
               _pulseEnable 62F0  
